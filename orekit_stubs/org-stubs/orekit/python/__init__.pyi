import java.util.function
import org.hipparchus
import org.hipparchus.analysis
import typing



class PythonFieldUnivariateFunction(org.hipparchus.analysis.FieldUnivariateFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _value__T = typing.TypeVar('_value__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def value(self, t: _value__T) -> _value__T: ...

_PythonFunction__T = typing.TypeVar('_PythonFunction__T')  # <T>
_PythonFunction__R = typing.TypeVar('_PythonFunction__R')  # <R>
class PythonFunction(java.util.function.Function[_PythonFunction__T, _PythonFunction__R], typing.Generic[_PythonFunction__T, _PythonFunction__R]):
    def __init__(self): ...
    def apply(self, t: _PythonFunction__T) -> _PythonFunction__R: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonSupplier__T = typing.TypeVar('_PythonSupplier__T')  # <T>
class PythonSupplier(java.util.function.Supplier[_PythonSupplier__T], typing.Generic[_PythonSupplier__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def get(self) -> _PythonSupplier__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonUnivariateFunction(org.hipparchus.analysis.UnivariateFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, double: float) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.python")``.

    PythonFieldUnivariateFunction: typing.Type[PythonFieldUnivariateFunction]
    PythonFunction: typing.Type[PythonFunction]
    PythonSupplier: typing.Type[PythonSupplier]
    PythonUnivariateFunction: typing.Type[PythonUnivariateFunction]
