import java.lang
import java.util
import org
import org.hipparchus.analysis
import org.hipparchus.filtering.kalman
import org.hipparchus.filtering.kalman.extended
import org.hipparchus.filtering.kalman.unscented
import org.hipparchus.linear
import org.hipparchus.util
import org.orekit.estimation.measurements
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.propagation.conversion
import org.orekit.propagation.sampling
import org.orekit.propagation.semianalytical.dsst
import org.orekit.time
import org.orekit.utils
import typing



class AbstractKalmanEstimator:
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getOrbitalParametersDrivers(self, boolean: bool) -> org.orekit.utils.ParameterDriversList: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPropagationParametersDrivers(self, boolean: bool) -> org.orekit.utils.ParameterDriversList: ...

class CovarianceMatrixProvider:
    def getInitialCovarianceMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...

class KalmanEstimation:
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...

class KalmanEstimatorBuilder:
    def __init__(self): ...
    def addPropagationConfiguration(self, propagatorBuilder: org.orekit.propagation.conversion.PropagatorBuilder, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'KalmanEstimatorBuilder': ...
    def build(self) -> 'KalmanEstimator': ...
    def decomposer(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer) -> 'KalmanEstimatorBuilder': ...
    def estimatedMeasurementsParameters(self, parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'KalmanEstimatorBuilder': ...

class KalmanEstimatorUtil:
    _applyDynamicOutlierFilter__T = typing.TypeVar('_applyDynamicOutlierFilter__T', bound=org.orekit.estimation.measurements.ObservedMeasurement)  # <T>
    @staticmethod
    def applyDynamicOutlierFilter(estimatedMeasurement: org.orekit.estimation.measurements.EstimatedMeasurement[_applyDynamicOutlierFilter__T], realMatrix: org.hipparchus.linear.RealMatrix) -> None: ...
    @staticmethod
    def checkDimension(int: int, parameterDriversList: org.orekit.utils.ParameterDriversList, parameterDriversList2: org.orekit.utils.ParameterDriversList, parameterDriversList3: org.orekit.utils.ParameterDriversList) -> None: ...
    @typing.overload
    @staticmethod
    def computeInnovationVector(estimatedMeasurement: org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]) -> org.hipparchus.linear.RealVector: ...
    @typing.overload
    @staticmethod
    def computeInnovationVector(estimatedMeasurement: org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any], doubleArray: typing.List[float]) -> org.hipparchus.linear.RealVector: ...
    @staticmethod
    def decorate(observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], absoluteDate: org.orekit.time.AbsoluteDate) -> 'MeasurementDecorator': ...
    @staticmethod
    def decorateUnscented(observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], absoluteDate: org.orekit.time.AbsoluteDate) -> 'MeasurementDecorator': ...
    @staticmethod
    def filterRelevant(observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    @staticmethod
    def normalizeCovarianceMatrix(realMatrix: org.hipparchus.linear.RealMatrix, doubleArray: typing.List[float]) -> org.hipparchus.linear.RealMatrix: ...
    @staticmethod
    def unnormalizeCovarianceMatrix(realMatrix: org.hipparchus.linear.RealMatrix, doubleArray: typing.List[float]) -> org.hipparchus.linear.RealMatrix: ...
    @staticmethod
    def unnormalizeInnovationCovarianceMatrix(realMatrix: org.hipparchus.linear.RealMatrix, doubleArray: typing.List[float]) -> org.hipparchus.linear.RealMatrix: ...
    @staticmethod
    def unnormalizeKalmanGainMatrix(realMatrix: org.hipparchus.linear.RealMatrix, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> org.hipparchus.linear.RealMatrix: ...
    @staticmethod
    def unnormalizeMeasurementJacobian(realMatrix: org.hipparchus.linear.RealMatrix, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> org.hipparchus.linear.RealMatrix: ...
    @staticmethod
    def unnormalizeStateTransitionMatrix(realMatrix: org.hipparchus.linear.RealMatrix, doubleArray: typing.List[float]) -> org.hipparchus.linear.RealMatrix: ...

class KalmanObserver:
    def evaluationPerformed(self, kalmanEstimation: KalmanEstimation) -> None: ...

class MeasurementDecorator(org.hipparchus.filtering.kalman.Measurement):
    def __init__(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], realMatrix: org.hipparchus.linear.RealMatrix, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def getCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getObservedMeasurement(self) -> org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]: ...
    def getTime(self) -> float: ...
    def getValue(self) -> org.hipparchus.linear.RealVector: ...

class SemiAnalyticalKalmanEstimatorBuilder:
    def __init__(self): ...
    def addPropagationConfiguration(self, dSSTPropagatorBuilder: org.orekit.propagation.conversion.DSSTPropagatorBuilder, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'SemiAnalyticalKalmanEstimatorBuilder': ...
    def build(self) -> 'SemiAnalyticalKalmanEstimator': ...
    def decomposer(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer) -> 'SemiAnalyticalKalmanEstimatorBuilder': ...
    def estimatedMeasurementsParameters(self, parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'SemiAnalyticalKalmanEstimatorBuilder': ...

class SemiAnalyticalMeasurementHandler(org.orekit.propagation.sampling.OrekitStepHandler):
    @typing.overload
    def __init__(self, semiAnalyticalProcess: 'SemiAnalyticalProcess', kalmanFilter: org.hipparchus.filtering.kalman.KalmanFilter[MeasurementDecorator], list: java.util.List[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], absoluteDate: org.orekit.time.AbsoluteDate): ...
    @typing.overload
    def __init__(self, semiAnalyticalProcess: 'SemiAnalyticalProcess', kalmanFilter: org.hipparchus.filtering.kalman.KalmanFilter[MeasurementDecorator], list: java.util.List[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool): ...
    def handleStep(self, orekitStepInterpolator: org.orekit.propagation.sampling.OrekitStepInterpolator) -> None: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class SemiAnalyticalProcess:
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def finalizeOperationsObservationGrid(self) -> None: ...
    def getObserver(self) -> KalmanObserver: ...
    def initializeShortPeriodicTerms(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def updateNominalSpacecraftState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def updateShortPeriods(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class SemiAnalyticalUnscentedKalmanEstimatorBuilder:
    def __init__(self): ...
    def addPropagationConfiguration(self, dSSTPropagatorBuilder: org.orekit.propagation.conversion.DSSTPropagatorBuilder, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'SemiAnalyticalUnscentedKalmanEstimatorBuilder': ...
    def build(self) -> 'SemiAnalyticalUnscentedKalmanEstimator': ...
    def decomposer(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer) -> 'SemiAnalyticalUnscentedKalmanEstimatorBuilder': ...
    def estimatedMeasurementsParameters(self, parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'SemiAnalyticalUnscentedKalmanEstimatorBuilder': ...
    def unscentedTransformProvider(self, unscentedTransformProvider: org.hipparchus.util.UnscentedTransformProvider) -> 'SemiAnalyticalUnscentedKalmanEstimatorBuilder': ...

class UnscentedKalmanEstimatorBuilder:
    def __init__(self): ...
    def addPropagationConfiguration(self, propagatorBuilder: org.orekit.propagation.conversion.PropagatorBuilder, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'UnscentedKalmanEstimatorBuilder': ...
    def build(self) -> 'UnscentedKalmanEstimator': ...
    def decomposer(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer) -> 'UnscentedKalmanEstimatorBuilder': ...
    def estimatedMeasurementsParameters(self, parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'UnscentedKalmanEstimatorBuilder': ...
    def unscentedTransformProvider(self, unscentedTransformProvider: org.hipparchus.util.UnscentedTransformProvider) -> 'UnscentedKalmanEstimatorBuilder': ...

class AbstractCovarianceMatrixProvider(CovarianceMatrixProvider):
    def getInitialCovarianceMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...

class KalmanEstimator(AbstractKalmanEstimator):
    def estimationStep(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]) -> typing.List[org.orekit.propagation.Propagator]: ...
    def processMeasurements(self, iterable: typing.Union[java.lang.Iterable[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], typing.Sequence[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], typing.Set[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]]]) -> typing.List[org.orekit.propagation.Propagator]: ...
    def setObserver(self, kalmanObserver: KalmanObserver) -> None: ...

class PythonAbstractKalmanEstimator(AbstractKalmanEstimator):
    def __init__(self, list: java.util.List[org.orekit.propagation.conversion.PropagatorBuilder]): ...
    def finalize(self) -> None: ...
    def getKalmanEstimation(self) -> KalmanEstimation: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonCovarianceMatrixProvider(CovarianceMatrixProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getInitialCovarianceMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonKalmanEstimation(KalmanEstimation):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonKalmanObserver(KalmanObserver):
    def __init__(self): ...
    def evaluationPerformed(self, kalmanEstimation: KalmanEstimation) -> None: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonSemiAnalyticalProcess(SemiAnalyticalProcess):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def finalizeOperationsObservationGrid(self) -> None: ...
    def getObserver(self) -> KalmanObserver: ...
    def initializeShortPeriodicTerms(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def updateNominalSpacecraftState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def updateShortPeriods(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class SemiAnalyticalKalmanEstimator(AbstractKalmanEstimator):
    def __init__(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer, dSSTPropagatorBuilder: org.orekit.propagation.conversion.DSSTPropagatorBuilder, covarianceMatrixProvider: CovarianceMatrixProvider, parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider2: CovarianceMatrixProvider): ...
    def processMeasurements(self, list: java.util.List[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]]) -> org.orekit.propagation.semianalytical.dsst.DSSTPropagator: ...
    def setObserver(self, kalmanObserver: KalmanObserver) -> None: ...

class SemiAnalyticalKalmanModel(KalmanEstimation, org.hipparchus.filtering.kalman.extended.NonLinearProcess[MeasurementDecorator], SemiAnalyticalProcess):
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def finalizeOperationsObservationGrid(self) -> None: ...
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimate(self) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagator(self) -> org.orekit.propagation.semianalytical.dsst.DSSTPropagator: ...
    def getEvolution(self, double: float, realVector: org.hipparchus.linear.RealVector, measurementDecorator: MeasurementDecorator) -> org.hipparchus.filtering.kalman.extended.NonLinearEvolution: ...
    def getInnovation(self, measurementDecorator: MeasurementDecorator, nonLinearEvolution: org.hipparchus.filtering.kalman.extended.NonLinearEvolution, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...
    def getObserver(self) -> KalmanObserver: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def initializeShortPeriodicTerms(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def processMeasurements(self, list: java.util.List[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], extendedKalmanFilter: org.hipparchus.filtering.kalman.extended.ExtendedKalmanFilter[MeasurementDecorator]) -> org.orekit.propagation.semianalytical.dsst.DSSTPropagator: ...
    def setObserver(self, kalmanObserver: KalmanObserver) -> None: ...
    def updateNominalSpacecraftState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def updateReferenceTrajectory(self, dSSTPropagator: org.orekit.propagation.semianalytical.dsst.DSSTPropagator) -> None: ...
    def updateShortPeriods(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class SemiAnalyticalUnscentedKalmanEstimator(AbstractKalmanEstimator):
    def processMeasurements(self, list: java.util.List[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]]) -> org.orekit.propagation.semianalytical.dsst.DSSTPropagator: ...
    def setObserver(self, kalmanObserver: KalmanObserver) -> None: ...

class SemiAnalyticalUnscentedKalmanModel(KalmanEstimation, org.hipparchus.filtering.kalman.unscented.UnscentedProcess[MeasurementDecorator], SemiAnalyticalProcess):
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def finalizeOperationsObservationGrid(self) -> None: ...
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimate(self) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagator(self) -> org.orekit.propagation.semianalytical.dsst.DSSTPropagator: ...
    def getEvolution(self, double: float, realVectorArray: typing.List[org.hipparchus.linear.RealVector], measurementDecorator: MeasurementDecorator) -> org.hipparchus.filtering.kalman.unscented.UnscentedEvolution: ...
    def getInnovation(self, measurementDecorator: MeasurementDecorator, realVector: org.hipparchus.linear.RealVector, realVector2: org.hipparchus.linear.RealVector, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...
    def getNumberSelectedMeasurementDrivers(self) -> int: ...
    def getNumberSelectedOrbitalDrivers(self) -> int: ...
    def getNumberSelectedPropagationDrivers(self) -> int: ...
    def getObserver(self) -> KalmanObserver: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedMeasurements(self, realVectorArray: typing.List[org.hipparchus.linear.RealVector], measurementDecorator: MeasurementDecorator) -> typing.List[org.hipparchus.linear.RealVector]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def initializeShortPeriodicTerms(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def processMeasurements(self, list: java.util.List[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], unscentedKalmanFilter: org.hipparchus.filtering.kalman.unscented.UnscentedKalmanFilter[MeasurementDecorator]) -> org.orekit.propagation.semianalytical.dsst.DSSTPropagator: ...
    def setObserver(self, kalmanObserver: KalmanObserver) -> None: ...
    def updateNominalSpacecraftState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def updateShortPeriods(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class UnscentedKalmanEstimator(AbstractKalmanEstimator):
    def estimationStep(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]) -> typing.List[org.orekit.propagation.Propagator]: ...
    def processMeasurements(self, iterable: typing.Union[java.lang.Iterable[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], typing.Sequence[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], typing.Set[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]]]) -> typing.List[org.orekit.propagation.Propagator]: ...
    def setObserver(self, kalmanObserver: KalmanObserver) -> None: ...

class ConstantProcessNoise(AbstractCovarianceMatrixProvider):
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, realMatrix2: org.hipparchus.linear.RealMatrix): ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...

class PythonAbstractCovarianceMatrixProvider(AbstractCovarianceMatrixProvider):
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    def finalize(self) -> None: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class UnivariateProcessNoise(AbstractCovarianceMatrixProvider):
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, lOFType: org.orekit.frames.LOFType, positionAngleType: org.orekit.orbits.PositionAngleType, univariateFunctionArray: typing.List[org.hipparchus.analysis.UnivariateFunction], univariateFunctionArray2: typing.List[org.hipparchus.analysis.UnivariateFunction]): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, lOFType: org.orekit.frames.LOFType, positionAngleType: org.orekit.orbits.PositionAngleType, univariateFunctionArray: typing.List[org.hipparchus.analysis.UnivariateFunction], univariateFunctionArray2: typing.List[org.hipparchus.analysis.UnivariateFunction], univariateFunctionArray3: typing.List[org.hipparchus.analysis.UnivariateFunction]): ...
    def getLofCartesianOrbitalParametersEvolution(self) -> typing.List[org.hipparchus.analysis.UnivariateFunction]: ...
    def getLofType(self) -> org.orekit.frames.LOFType: ...
    def getMeasurementsParametersEvolution(self) -> typing.List[org.hipparchus.analysis.UnivariateFunction]: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getPropagationParametersEvolution(self) -> typing.List[org.hipparchus.analysis.UnivariateFunction]: ...

class KalmanModel(org.orekit.estimation.sequential.KalmanEstimationCommon, org.hipparchus.filtering.kalman.extended.NonLinearProcess[MeasurementDecorator]):
    def __init__(self, list: java.util.List[org.orekit.propagation.conversion.PropagatorBuilder], list2: java.util.List[CovarianceMatrixProvider], parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider): ...
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def getEvolution(self, double: float, realVector: org.hipparchus.linear.RealVector, measurementDecorator: MeasurementDecorator) -> org.hipparchus.filtering.kalman.extended.NonLinearEvolution: ...
    def getInnovation(self, measurementDecorator: MeasurementDecorator, nonLinearEvolution: org.hipparchus.filtering.kalman.extended.NonLinearEvolution, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...
    def getReferenceTrajectories(self) -> typing.List[org.orekit.propagation.Propagator]: ...
    def setReferenceTrajectories(self, propagatorArray: typing.List[org.orekit.propagation.Propagator]) -> None: ...

class UnscentedKalmanModel(org.orekit.estimation.sequential.KalmanEstimationCommon, org.hipparchus.filtering.kalman.unscented.UnscentedProcess[MeasurementDecorator]):
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def getEvolution(self, double: float, realVectorArray: typing.List[org.hipparchus.linear.RealVector], measurementDecorator: MeasurementDecorator) -> org.hipparchus.filtering.kalman.unscented.UnscentedEvolution: ...
    def getInnovation(self, measurementDecorator: MeasurementDecorator, realVector: org.hipparchus.linear.RealVector, realVector2: org.hipparchus.linear.RealVector, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...
    def getPredictedMeasurements(self, realVectorArray: typing.List[org.hipparchus.linear.RealVector], measurementDecorator: MeasurementDecorator) -> typing.List[org.hipparchus.linear.RealVector]: ...

class KalmanEstimationCommon: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.estimation.sequential")``.

    AbstractCovarianceMatrixProvider: typing.Type[AbstractCovarianceMatrixProvider]
    AbstractKalmanEstimator: typing.Type[AbstractKalmanEstimator]
    ConstantProcessNoise: typing.Type[ConstantProcessNoise]
    CovarianceMatrixProvider: typing.Type[CovarianceMatrixProvider]
    KalmanEstimation: typing.Type[KalmanEstimation]
    KalmanEstimationCommon: typing.Type[KalmanEstimationCommon]
    KalmanEstimator: typing.Type[KalmanEstimator]
    KalmanEstimatorBuilder: typing.Type[KalmanEstimatorBuilder]
    KalmanEstimatorUtil: typing.Type[KalmanEstimatorUtil]
    KalmanModel: typing.Type[KalmanModel]
    KalmanObserver: typing.Type[KalmanObserver]
    MeasurementDecorator: typing.Type[MeasurementDecorator]
    PythonAbstractCovarianceMatrixProvider: typing.Type[PythonAbstractCovarianceMatrixProvider]
    PythonAbstractKalmanEstimator: typing.Type[PythonAbstractKalmanEstimator]
    PythonCovarianceMatrixProvider: typing.Type[PythonCovarianceMatrixProvider]
    PythonKalmanEstimation: typing.Type[PythonKalmanEstimation]
    PythonKalmanObserver: typing.Type[PythonKalmanObserver]
    PythonSemiAnalyticalProcess: typing.Type[PythonSemiAnalyticalProcess]
    SemiAnalyticalKalmanEstimator: typing.Type[SemiAnalyticalKalmanEstimator]
    SemiAnalyticalKalmanEstimatorBuilder: typing.Type[SemiAnalyticalKalmanEstimatorBuilder]
    SemiAnalyticalKalmanModel: typing.Type[SemiAnalyticalKalmanModel]
    SemiAnalyticalMeasurementHandler: typing.Type[SemiAnalyticalMeasurementHandler]
    SemiAnalyticalProcess: typing.Type[SemiAnalyticalProcess]
    SemiAnalyticalUnscentedKalmanEstimator: typing.Type[SemiAnalyticalUnscentedKalmanEstimator]
    SemiAnalyticalUnscentedKalmanEstimatorBuilder: typing.Type[SemiAnalyticalUnscentedKalmanEstimatorBuilder]
    SemiAnalyticalUnscentedKalmanModel: typing.Type[SemiAnalyticalUnscentedKalmanModel]
    UnivariateProcessNoise: typing.Type[UnivariateProcessNoise]
    UnscentedKalmanEstimator: typing.Type[UnscentedKalmanEstimator]
    UnscentedKalmanEstimatorBuilder: typing.Type[UnscentedKalmanEstimatorBuilder]
    UnscentedKalmanModel: typing.Type[UnscentedKalmanModel]
