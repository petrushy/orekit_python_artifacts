import java.util
import org
import org.orekit.estimation.measurements
import org.orekit.files.rinex.observation
import org.orekit.gnss
import org.orekit.propagation
import typing



class DualFrequencySmoother:
    def __init__(self, double: float, int: int): ...
    def copyObservationData(self, observationData: org.orekit.files.rinex.observation.ObservationData) -> org.orekit.files.rinex.observation.ObservationData: ...
    def createFilter(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationData2: org.orekit.files.rinex.observation.ObservationData, observationData3: org.orekit.files.rinex.observation.ObservationData, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> 'DualFrequencyHatchFilter': ...
    def filterDataSet(self, list: java.util.List[org.orekit.files.rinex.observation.ObservationDataSet], satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, observationType: org.orekit.gnss.ObservationType, observationType2: org.orekit.gnss.ObservationType) -> None: ...
    def getFilteredDataMap(self) -> java.util.HashMap[org.orekit.gnss.ObservationType, java.util.List['SmoothedObservationDataSet']]: ...
    def getMapFilters(self) -> java.util.HashMap[org.orekit.gnss.ObservationType, 'DualFrequencyHatchFilter']: ...

_MeasurementFilter__T = typing.TypeVar('_MeasurementFilter__T', bound=org.orekit.estimation.measurements.ObservedMeasurement)  # <T>
class MeasurementFilter(typing.Generic[_MeasurementFilter__T]):
    def filter(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[_MeasurementFilter__T], spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class SingleFrequencySmoother:
    def __init__(self, measurementType: org.orekit.gnss.MeasurementType, double: float, int: int, double2: float): ...
    def copyObservationData(self, observationData: org.orekit.files.rinex.observation.ObservationData) -> org.orekit.files.rinex.observation.ObservationData: ...
    def createFilter(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationData2: org.orekit.files.rinex.observation.ObservationData, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> 'SingleFrequencyHatchFilter': ...
    def filterDataSet(self, list: java.util.List[org.orekit.files.rinex.observation.ObservationDataSet], satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, observationType: org.orekit.gnss.ObservationType) -> None: ...
    def getFilteredDataMap(self) -> java.util.HashMap[org.orekit.gnss.ObservationType, java.util.List['SmoothedObservationDataSet']]: ...
    def getMapFilters(self) -> java.util.HashMap[org.orekit.gnss.ObservationType, 'SingleFrequencyHatchFilter']: ...

class SmoothedObservationDataSet:
    def __init__(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationDataSet: org.orekit.files.rinex.observation.ObservationDataSet): ...
    def getDataSet(self) -> org.orekit.files.rinex.observation.ObservationDataSet: ...
    def getSmoothedData(self) -> org.orekit.files.rinex.observation.ObservationData: ...

_ElevationFilter__T = typing.TypeVar('_ElevationFilter__T', bound=org.orekit.estimation.measurements.ObservedMeasurement)  # <T>
class ElevationFilter(MeasurementFilter[_ElevationFilter__T], typing.Generic[_ElevationFilter__T]):
    def __init__(self, groundStation: org.orekit.estimation.measurements.GroundStation, double: float): ...
    def filter(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[_ElevationFilter__T], spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

_PythonMeasurementFilter__T = typing.TypeVar('_PythonMeasurementFilter__T', bound=org.orekit.estimation.measurements.ObservedMeasurement)  # <T>
class PythonMeasurementFilter(MeasurementFilter[_PythonMeasurementFilter__T], typing.Generic[_PythonMeasurementFilter__T]):
    def __init__(self): ...
    def filter(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[_PythonMeasurementFilter__T], spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_ResidualFilter__T = typing.TypeVar('_ResidualFilter__T', bound=org.orekit.estimation.measurements.ObservedMeasurement)  # <T>
class ResidualFilter(MeasurementFilter[_ResidualFilter__T], typing.Generic[_ResidualFilter__T]):
    def __init__(self, double: float): ...
    def filter(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[_ResidualFilter__T], spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class DualFrequencyHatchFilter(org.orekit.estimation.measurements.filtering.HatchFilter):
    def __init__(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationData2: org.orekit.files.rinex.observation.ObservationData, observationData3: org.orekit.files.rinex.observation.ObservationData, double: float, double2: float, double3: float, int: int): ...
    def filterData(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationData2: org.orekit.files.rinex.observation.ObservationData, observationData3: org.orekit.files.rinex.observation.ObservationData) -> org.orekit.files.rinex.observation.ObservationData: ...
    def getFirstFrequencyPhaseHistory(self) -> java.util.ArrayList[float]: ...
    def getSecondFrequencyPhaseHistory(self) -> java.util.ArrayList[float]: ...

class PythonHatchFilter(org.orekit.estimation.measurements.filtering.HatchFilter): ...

class SingleFrequencyHatchFilter(org.orekit.estimation.measurements.filtering.HatchFilter):
    def __init__(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationData2: org.orekit.files.rinex.observation.ObservationData, measurementType: org.orekit.gnss.MeasurementType, double: float, double2: float, int: int, double3: float): ...
    def filterData(self, observationData: org.orekit.files.rinex.observation.ObservationData, observationData2: org.orekit.files.rinex.observation.ObservationData) -> org.orekit.files.rinex.observation.ObservationData: ...

class HatchFilter: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.estimation.measurements.filtering")``.

    DualFrequencyHatchFilter: typing.Type[DualFrequencyHatchFilter]
    DualFrequencySmoother: typing.Type[DualFrequencySmoother]
    ElevationFilter: typing.Type[ElevationFilter]
    HatchFilter: typing.Type[HatchFilter]
    MeasurementFilter: typing.Type[MeasurementFilter]
    PythonHatchFilter: typing.Type[PythonHatchFilter]
    PythonMeasurementFilter: typing.Type[PythonMeasurementFilter]
    ResidualFilter: typing.Type[ResidualFilter]
    SingleFrequencyHatchFilter: typing.Type[SingleFrequencyHatchFilter]
    SingleFrequencySmoother: typing.Type[SingleFrequencySmoother]
    SmoothedObservationDataSet: typing.Type[SmoothedObservationDataSet]
