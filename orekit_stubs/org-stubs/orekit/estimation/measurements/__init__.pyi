import java.lang
import java.util
import java.util.stream
import org.hipparchus
import org.hipparchus.analysis.differentiation
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.estimation.measurements.filtering
import org.orekit.estimation.measurements.generation
import org.orekit.estimation.measurements.gnss
import org.orekit.estimation.measurements.modifiers
import org.orekit.frames
import org.orekit.models.earth.displacement
import org.orekit.models.earth.weather
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import typing



class CommonParametersWithDerivatives:
    def __init__(self, spacecraftState: org.orekit.propagation.SpacecraftState, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]], gradient: org.hipparchus.analysis.differentiation.Gradient, spacecraftState2: org.orekit.propagation.SpacecraftState, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient]): ...
    def getIndices(self) -> java.util.Map[str, int]: ...
    def getState(self) -> org.orekit.propagation.SpacecraftState: ...
    def getTauD(self) -> org.hipparchus.analysis.differentiation.Gradient: ...
    def getTransitPV(self) -> org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient]: ...
    def getTransitState(self) -> org.orekit.propagation.SpacecraftState: ...

class CommonParametersWithoutDerivatives:
    def __init__(self, spacecraftState: org.orekit.propagation.SpacecraftState, double: float, spacecraftState2: org.orekit.propagation.SpacecraftState, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates): ...
    def getState(self) -> org.orekit.propagation.SpacecraftState: ...
    def getTauD(self) -> float: ...
    def getTransitPV(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def getTransitState(self) -> org.orekit.propagation.SpacecraftState: ...

class ComparableMeasurement(org.orekit.time.TimeStamped, java.lang.Comparable['ComparableMeasurement']):
    def compareTo(self, comparableMeasurement: 'ComparableMeasurement') -> int: ...
    def getObservedValue(self) -> typing.List[float]: ...

class EstimatedEarthFrameProvider(org.orekit.frames.TransformProvider):
    EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    def __init__(self, uT1Scale: org.orekit.time.UT1Scale): ...
    def getEstimatedUT1(self) -> org.orekit.time.UT1Scale: ...
    def getPolarDriftXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarDriftYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    _getStaticTransform_0__T = typing.TypeVar('_getStaticTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getStaticTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getStaticTransform_0__T]) -> org.orekit.frames.FieldStaticTransform[_getStaticTransform_0__T]: ...
    @typing.overload
    def getStaticTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.frames.StaticTransform: ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> org.orekit.frames.FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.analysis.differentiation.Gradient], int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.frames.Transform: ...

_EstimationModifier__T = typing.TypeVar('_EstimationModifier__T', bound='ObservedMeasurement')  # <T>
class EstimationModifier(org.orekit.utils.ParameterDriversProvider, typing.Generic[_EstimationModifier__T]):
    def modify(self, estimatedMeasurement: 'EstimatedMeasurement'[_EstimationModifier__T]) -> None: ...
    def modifyWithoutDerivatives(self, estimatedMeasurementBase: 'EstimatedMeasurementBase'[_EstimationModifier__T]) -> None: ...

class EstimationsProvider:
    def getEstimatedMeasurement(self, int: int) -> 'EstimatedMeasurement'[typing.Any]: ...
    def getNumber(self) -> int: ...

class GroundStation:
    OFFSET_SUFFIX: typing.ClassVar[str] = ...
    DRIFT_SUFFIX: typing.ClassVar[str] = ...
    ACCELERATION_SUFFIX: typing.ClassVar[str] = ...
    INTERMEDIATE_SUFFIX: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame, eOPHistory: org.orekit.frames.EOPHistory, *stationDisplacement: org.orekit.models.earth.displacement.StationDisplacement): ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame, pressureTemperatureHumidityProvider: org.orekit.models.earth.weather.PressureTemperatureHumidityProvider): ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame, pressureTemperatureHumidityProvider: org.orekit.models.earth.weather.PressureTemperatureHumidityProvider, eOPHistory: org.orekit.frames.EOPHistory, *stationDisplacement: org.orekit.models.earth.displacement.StationDisplacement): ...
    def getBaseFrame(self) -> org.orekit.frames.TopocentricFrame: ...
    def getClockAccelerationDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getClockDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getClockOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getDisplacements(self) -> typing.List[org.orekit.models.earth.displacement.StationDisplacement]: ...
    def getEastOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getEstimatedEarthFrame(self) -> org.orekit.frames.Frame: ...
    def getEstimatedUT1(self) -> org.orekit.time.UT1Scale: ...
    def getNorthOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    _getOffsetGeodeticPoint_0__T = typing.TypeVar('_getOffsetGeodeticPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getOffsetGeodeticPoint(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getOffsetGeodeticPoint_0__T]) -> org.orekit.bodies.FieldGeodeticPoint[_getOffsetGeodeticPoint_0__T]: ...
    @typing.overload
    def getOffsetGeodeticPoint(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.bodies.GeodeticPoint: ...
    @typing.overload
    def getOffsetToInertial(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    @typing.overload
    def getOffsetToInertial(self, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.analysis.differentiation.Gradient], int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    @typing.overload
    def getOffsetToInertial(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> org.orekit.frames.Transform: ...
    def getPolarDriftXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarDriftYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    _getPressureTemperatureHumidity_0__T = typing.TypeVar('_getPressureTemperatureHumidity_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPressureTemperatureHumidity(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPressureTemperatureHumidity_0__T]) -> org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_getPressureTemperatureHumidity_0__T]: ...
    @typing.overload
    def getPressureTemperatureHumidity(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.models.earth.weather.PressureTemperatureHumidity: ...
    def getPrimeMeridianDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getZenithOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...

class ObservableSatellite:
    CLOCK_OFFSET_PREFIX: typing.ClassVar[str] = ...
    CLOCK_DRIFT_PREFIX: typing.ClassVar[str] = ...
    CLOCK_ACCELERATION_PREFIX: typing.ClassVar[str] = ...
    def __init__(self, int: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getClockAccelerationDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getClockDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getClockOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getName(self) -> str: ...
    def getPropagatorIndex(self) -> int: ...
    def getQuadraticClockModel(self) -> 'QuadraticClockModel': ...
    def hashCode(self) -> int: ...

class QuadraticClockModel(org.orekit.time.ClockModel):
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, parameterDriver: org.orekit.utils.ParameterDriver, parameterDriver2: org.orekit.utils.ParameterDriver, parameterDriver3: org.orekit.utils.ParameterDriver): ...
    _getOffset_1__T = typing.TypeVar('_getOffset_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getOffset(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.time.ClockOffset: ...
    @typing.overload
    def getOffset(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getOffset_1__T]) -> org.orekit.time.FieldClockOffset[_getOffset_1__T]: ...
    def getValidityEnd(self) -> org.orekit.time.AbsoluteDate: ...
    def getValidityStart(self) -> org.orekit.time.AbsoluteDate: ...
    def toGradientModel(self, int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]], absoluteDate: org.orekit.time.AbsoluteDate) -> 'QuadraticFieldClockModel'[org.hipparchus.analysis.differentiation.Gradient]: ...

_QuadraticFieldClockModel__T = typing.TypeVar('_QuadraticFieldClockModel__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class QuadraticFieldClockModel(typing.Generic[_QuadraticFieldClockModel__T]):
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_QuadraticFieldClockModel__T], t: _QuadraticFieldClockModel__T, t2: _QuadraticFieldClockModel__T, t3: _QuadraticFieldClockModel__T): ...
    def getOffset(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_QuadraticFieldClockModel__T]) -> org.orekit.time.FieldClockOffset[_QuadraticFieldClockModel__T]: ...

_EstimatedMeasurementBase__T = typing.TypeVar('_EstimatedMeasurementBase__T', bound='ObservedMeasurement')  # <T>
class EstimatedMeasurementBase(ComparableMeasurement, typing.Generic[_EstimatedMeasurementBase__T]):
    def __init__(self, t: _EstimatedMeasurementBase__T, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState], timeStampedPVCoordinatesArray: typing.List[org.orekit.utils.TimeStampedPVCoordinates]): ...
    def getAppliedEffects(self) -> java.util.IdentityHashMap[EstimationModifier[_EstimatedMeasurementBase__T], typing.List[float]]: ...
    def getCount(self) -> int: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getEstimatedValue(self) -> typing.List[float]: ...
    def getIteration(self) -> int: ...
    def getObservedMeasurement(self) -> _EstimatedMeasurementBase__T: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def getOriginalEstimatedValue(self) -> typing.List[float]: ...
    def getParticipants(self) -> typing.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
    def getStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getStatus(self) -> 'EstimatedMeasurementBase.Status': ...
    def getTimeOffset(self) -> float: ...
    def modifyEstimatedValue(self, estimationModifier: EstimationModifier[_EstimatedMeasurementBase__T], *double: float) -> None: ...
    def setEstimatedValue(self, *double: float) -> None: ...
    def setStatus(self, status: 'EstimatedMeasurementBase.Status') -> None: ...
    class Status(java.lang.Enum['EstimatedMeasurementBase.Status']):
        PROCESSED: typing.ClassVar['EstimatedMeasurementBase.Status'] = ...
        REJECTED: typing.ClassVar['EstimatedMeasurementBase.Status'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'EstimatedMeasurementBase.Status': ...
        @staticmethod
        def values() -> typing.List['EstimatedMeasurementBase.Status']: ...

class GroundReceiverCommonParametersWithDerivatives(CommonParametersWithDerivatives):
    def __init__(self, spacecraftState: org.orekit.propagation.SpacecraftState, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]], fieldTransform: org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient], timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient], gradient: org.hipparchus.analysis.differentiation.Gradient, spacecraftState2: org.orekit.propagation.SpacecraftState, timeStampedFieldPVCoordinates2: org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient]): ...
    def getOffsetToInertialDownlink(self) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    def getStationDownlink(self) -> org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient]: ...

class GroundReceiverCommonParametersWithoutDerivatives(CommonParametersWithoutDerivatives):
    def __init__(self, spacecraftState: org.orekit.propagation.SpacecraftState, transform: org.orekit.frames.Transform, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, double: float, spacecraftState2: org.orekit.propagation.SpacecraftState, timeStampedPVCoordinates2: org.orekit.utils.TimeStampedPVCoordinates): ...
    def getOffsetToInertialDownlink(self) -> org.orekit.frames.Transform: ...
    def getStationDownlink(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...

_ObservedMeasurement__T = typing.TypeVar('_ObservedMeasurement__T', bound='ObservedMeasurement')  # <T>
class ObservedMeasurement(ComparableMeasurement, org.orekit.utils.ParameterDriversProvider, typing.Generic[_ObservedMeasurement__T]):
    def addModifier(self, estimationModifier: EstimationModifier[_ObservedMeasurement__T]) -> None: ...
    def estimate(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> 'EstimatedMeasurement'[_ObservedMeasurement__T]: ...
    @typing.overload
    def estimateWithoutDerivatives(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_ObservedMeasurement__T]: ...
    @typing.overload
    def estimateWithoutDerivatives(self, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_ObservedMeasurement__T]: ...
    def getBaseWeight(self) -> typing.List[float]: ...
    def getDimension(self) -> int: ...
    def getMeasurementType(self) -> str: ...
    def getModifiers(self) -> java.util.List[EstimationModifier[_ObservedMeasurement__T]]: ...
    def getSatellites(self) -> java.util.List[ObservableSatellite]: ...
    def getTheoreticalStandardDeviation(self) -> typing.List[float]: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, boolean: bool) -> None: ...

class PythonComparableMeasurement(ComparableMeasurement):
    def __init__(self): ...
    def compareTo(self, comparableMeasurement: ComparableMeasurement) -> int: ...
    def finalize(self) -> None: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonEstimationModifier__T = typing.TypeVar('_PythonEstimationModifier__T', bound=ObservedMeasurement)  # <T>
class PythonEstimationModifier(EstimationModifier[_PythonEstimationModifier__T], typing.Generic[_PythonEstimationModifier__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def modify(self, estimatedMeasurement: 'EstimatedMeasurement'[_PythonEstimationModifier__T]) -> None: ...
    def modifyWithoutDerivatives(self, estimatedMeasurementBase: EstimatedMeasurementBase[_PythonEstimationModifier__T]) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEstimationsProvider(EstimationsProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getEstimatedMeasurement(self, int: int) -> 'EstimatedMeasurement'[typing.Any]: ...
    def getNumber(self) -> int: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_AbstractMeasurement__T = typing.TypeVar('_AbstractMeasurement__T', bound=ObservedMeasurement)  # <T>
class AbstractMeasurement(ObservedMeasurement[_AbstractMeasurement__T], typing.Generic[_AbstractMeasurement__T]):
    def addModifier(self, estimationModifier: EstimationModifier[_AbstractMeasurement__T]) -> None: ...
    def estimate(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> 'EstimatedMeasurement'[_AbstractMeasurement__T]: ...
    @typing.overload
    def estimateWithoutDerivatives(self, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_AbstractMeasurement__T]: ...
    @typing.overload
    def estimateWithoutDerivatives(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_AbstractMeasurement__T]: ...
    def getBaseWeight(self) -> typing.List[float]: ...
    @staticmethod
    def getCoordinates(spacecraftState: org.orekit.propagation.SpacecraftState, int: int, int2: int) -> org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient]: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDimension(self) -> int: ...
    def getModifiers(self) -> java.util.List[EstimationModifier[_AbstractMeasurement__T]]: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getSatellites(self) -> java.util.List[ObservableSatellite]: ...
    def getTheoreticalStandardDeviation(self) -> typing.List[float]: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, boolean: bool) -> None: ...
    _signalTimeOfFlight_3__T = typing.TypeVar('_signalTimeOfFlight_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _signalTimeOfFlight_4__T = typing.TypeVar('_signalTimeOfFlight_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _signalTimeOfFlight_5__T = typing.TypeVar('_signalTimeOfFlight_5__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate2: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> float: ...
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> float: ...
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_signalTimeOfFlight_3__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_signalTimeOfFlight_3__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_signalTimeOfFlight_3__T], fieldAbsoluteDate2: org.orekit.time.FieldAbsoluteDate[_signalTimeOfFlight_3__T], frame: org.orekit.frames.Frame) -> _signalTimeOfFlight_3__T: ...
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_signalTimeOfFlight_4__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_signalTimeOfFlight_4__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_signalTimeOfFlight_4__T]) -> _signalTimeOfFlight_4__T: ...
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_signalTimeOfFlight_5__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_signalTimeOfFlight_5__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_signalTimeOfFlight_5__T], frame: org.orekit.frames.Frame) -> _signalTimeOfFlight_5__T: ...

_EstimatedMeasurement__T = typing.TypeVar('_EstimatedMeasurement__T', bound=ObservedMeasurement)  # <T>
class EstimatedMeasurement(EstimatedMeasurementBase[_EstimatedMeasurement__T], typing.Generic[_EstimatedMeasurement__T]):
    def __init__(self, t: _EstimatedMeasurement__T, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState], timeStampedPVCoordinatesArray: typing.List[org.orekit.utils.TimeStampedPVCoordinates]): ...
    def getDerivativesDrivers(self) -> java.util.stream.Stream[org.orekit.utils.ParameterDriver]: ...
    @typing.overload
    def getParameterDerivatives(self, parameterDriver: org.orekit.utils.ParameterDriver) -> typing.List[float]: ...
    @typing.overload
    def getParameterDerivatives(self, parameterDriver: org.orekit.utils.ParameterDriver, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    def getStateDerivatives(self, int: int) -> typing.List[typing.List[float]]: ...
    def getStateSize(self) -> int: ...
    @typing.overload
    def setParameterDerivatives(self, parameterDriver: org.orekit.utils.ParameterDriver, absoluteDate: org.orekit.time.AbsoluteDate, *double: float) -> None: ...
    @typing.overload
    def setParameterDerivatives(self, parameterDriver: org.orekit.utils.ParameterDriver, timeSpanMap: org.orekit.utils.TimeSpanMap[typing.List[float]]) -> None: ...
    def setStateDerivatives(self, int: int, *doubleArray: typing.List[float]) -> None: ...

_PythonObservedMeasurement__T = typing.TypeVar('_PythonObservedMeasurement__T', bound=ObservedMeasurement)  # <T>
class PythonObservedMeasurement(ObservedMeasurement[_PythonObservedMeasurement__T], typing.Generic[_PythonObservedMeasurement__T]):
    def __init__(self): ...
    def addModifier(self, estimationModifier: EstimationModifier[_PythonObservedMeasurement__T]) -> None: ...
    def compareTo(self, comparableMeasurement: ComparableMeasurement) -> int: ...
    def estimate(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_PythonObservedMeasurement__T]: ...
    @typing.overload
    def estimateWithoutDerivatives(self, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_PythonObservedMeasurement__T]: ...
    @typing.overload
    def estimateWithoutDerivatives(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_PythonObservedMeasurement__T]: ...
    def finalize(self) -> None: ...
    def getBaseWeight(self) -> typing.List[float]: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDimension(self) -> int: ...
    def getMeasurementType(self) -> str: ...
    def getModifiers(self) -> java.util.List[EstimationModifier[_PythonObservedMeasurement__T]]: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getSatellites(self) -> java.util.List[ObservableSatellite]: ...
    def getTheoreticalStandardDeviation(self) -> typing.List[float]: ...
    def isEnabled(self) -> bool: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def setEnabled(self, boolean: bool) -> None: ...

_GroundReceiverMeasurement__T = typing.TypeVar('_GroundReceiverMeasurement__T', bound='GroundReceiverMeasurement')  # <T>
class GroundReceiverMeasurement(AbstractMeasurement[_GroundReceiverMeasurement__T], typing.Generic[_GroundReceiverMeasurement__T]):
    @typing.overload
    def __init__(self, groundStation: GroundStation, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, groundStation: GroundStation, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float], observableSatellite: ObservableSatellite): ...
    def getGroundStationCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.PVCoordinates: ...
    def getGroundStationPosition(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getStation(self) -> GroundStation: ...
    def isTwoWay(self) -> bool: ...

class InterSatellitesRange(AbstractMeasurement['InterSatellitesRange']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, observableSatellite: ObservableSatellite, observableSatellite2: ObservableSatellite, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float): ...
    def isTwoWay(self) -> bool: ...

class MultiplexedMeasurement(AbstractMeasurement['MultiplexedMeasurement']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, list: java.util.List[ObservedMeasurement[typing.Any]]): ...
    def getEstimatedMeasurements(self) -> java.util.List[EstimatedMeasurement[typing.Any]]: ...
    def getEstimatedMeasurementsWithoutDerivatives(self) -> java.util.List[EstimatedMeasurementBase[typing.Any]]: ...
    def getMeasurements(self) -> java.util.List[ObservedMeasurement[typing.Any]]: ...

class PV(AbstractMeasurement['PV']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[float], double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[float], doubleArray2: typing.List[float], double3: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[typing.List[float]], double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[typing.List[float]], doubleArray2: typing.List[typing.List[float]], double3: float, observableSatellite: ObservableSatellite): ...
    def getCorrelationCoefficientsMatrix(self) -> typing.List[typing.List[float]]: ...
    def getCovarianceMatrix(self) -> typing.List[typing.List[float]]: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class Position(AbstractMeasurement['Position']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[float], double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[typing.List[float]], double2: float, observableSatellite: ObservableSatellite): ...
    def getCorrelationCoefficientsMatrix(self) -> typing.List[typing.List[float]]: ...
    def getCovarianceMatrix(self) -> typing.List[typing.List[float]]: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

_PythonAbstractMeasurement__T = typing.TypeVar('_PythonAbstractMeasurement__T', bound=ObservedMeasurement)  # <T>
class PythonAbstractMeasurement(AbstractMeasurement[_PythonAbstractMeasurement__T], typing.Generic[_PythonAbstractMeasurement__T]):
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, list: java.util.List[ObservableSatellite]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float], list: java.util.List[ObservableSatellite]): ...
    def addParameterDriver(self, parameterDriver: org.orekit.utils.ParameterDriver) -> None: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def theoreticalEvaluation(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_PythonAbstractMeasurement__T]: ...
    def theoreticalEvaluationWithoutDerivatives(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_PythonAbstractMeasurement__T]: ...

class AngularAzEl(GroundReceiverMeasurement['AngularAzEl']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float], observableSatellite: ObservableSatellite): ...
    def getObservedLineOfSight(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class AngularRaDec(GroundReceiverMeasurement['AngularRaDec']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float], observableSatellite: ObservableSatellite): ...
    def getObservedLineOfSight(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getReferenceFrame(self) -> org.orekit.frames.Frame: ...

class BistaticRange(GroundReceiverMeasurement['BistaticRange']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, groundStation2: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    def getEmitterStation(self) -> GroundStation: ...
    def getReceiverStation(self) -> GroundStation: ...

class BistaticRangeRate(GroundReceiverMeasurement['BistaticRangeRate']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, groundStation2: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    def getEmitterStation(self) -> GroundStation: ...
    def getReceiverStation(self) -> GroundStation: ...

class FDOA(GroundReceiverMeasurement['FDOA']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, groundStation2: GroundStation, double: float, absoluteDate: org.orekit.time.AbsoluteDate, double2: float, double3: float, double4: float, observableSatellite: ObservableSatellite): ...
    def getPrimeStation(self) -> GroundStation: ...
    def getSecondStation(self) -> GroundStation: ...

_PythonGroundReceiverMeasurement__T = typing.TypeVar('_PythonGroundReceiverMeasurement__T', bound=GroundReceiverMeasurement)  # <T>
class PythonGroundReceiverMeasurement(GroundReceiverMeasurement[_PythonGroundReceiverMeasurement__T], typing.Generic[_PythonGroundReceiverMeasurement__T]):
    def __init__(self, groundStation: GroundStation, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def theoreticalEvaluation(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_PythonGroundReceiverMeasurement__T]: ...
    def theoreticalEvaluationWithoutDerivatives(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurementBase[_PythonGroundReceiverMeasurement__T]: ...

class Range(GroundReceiverMeasurement['Range']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...

class RangeRate(GroundReceiverMeasurement['RangeRate']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, boolean: bool, observableSatellite: ObservableSatellite): ...

class TDOA(GroundReceiverMeasurement['TDOA']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, groundStation2: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    _forwardSignalTimeOfFlight_1__T = typing.TypeVar('_forwardSignalTimeOfFlight_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def forwardSignalTimeOfFlight(timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    @staticmethod
    def forwardSignalTimeOfFlight(timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_forwardSignalTimeOfFlight_1__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_forwardSignalTimeOfFlight_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_forwardSignalTimeOfFlight_1__T]) -> _forwardSignalTimeOfFlight_1__T: ...
    def getPrimeStation(self) -> GroundStation: ...
    def getSecondStation(self) -> GroundStation: ...

class TurnAroundRange(GroundReceiverMeasurement['TurnAroundRange']):
    MEASUREMENT_TYPE: typing.ClassVar[str] = ...
    def __init__(self, groundStation: GroundStation, groundStation2: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    def getPrimaryStation(self) -> GroundStation: ...
    def getSecondaryStation(self) -> GroundStation: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.estimation.measurements")``.

    AbstractMeasurement: typing.Type[AbstractMeasurement]
    AngularAzEl: typing.Type[AngularAzEl]
    AngularRaDec: typing.Type[AngularRaDec]
    BistaticRange: typing.Type[BistaticRange]
    BistaticRangeRate: typing.Type[BistaticRangeRate]
    CommonParametersWithDerivatives: typing.Type[CommonParametersWithDerivatives]
    CommonParametersWithoutDerivatives: typing.Type[CommonParametersWithoutDerivatives]
    ComparableMeasurement: typing.Type[ComparableMeasurement]
    EstimatedEarthFrameProvider: typing.Type[EstimatedEarthFrameProvider]
    EstimatedMeasurement: typing.Type[EstimatedMeasurement]
    EstimatedMeasurementBase: typing.Type[EstimatedMeasurementBase]
    EstimationModifier: typing.Type[EstimationModifier]
    EstimationsProvider: typing.Type[EstimationsProvider]
    FDOA: typing.Type[FDOA]
    GroundReceiverCommonParametersWithDerivatives: typing.Type[GroundReceiverCommonParametersWithDerivatives]
    GroundReceiverCommonParametersWithoutDerivatives: typing.Type[GroundReceiverCommonParametersWithoutDerivatives]
    GroundReceiverMeasurement: typing.Type[GroundReceiverMeasurement]
    GroundStation: typing.Type[GroundStation]
    InterSatellitesRange: typing.Type[InterSatellitesRange]
    MultiplexedMeasurement: typing.Type[MultiplexedMeasurement]
    ObservableSatellite: typing.Type[ObservableSatellite]
    ObservedMeasurement: typing.Type[ObservedMeasurement]
    PV: typing.Type[PV]
    Position: typing.Type[Position]
    PythonAbstractMeasurement: typing.Type[PythonAbstractMeasurement]
    PythonComparableMeasurement: typing.Type[PythonComparableMeasurement]
    PythonEstimationModifier: typing.Type[PythonEstimationModifier]
    PythonEstimationsProvider: typing.Type[PythonEstimationsProvider]
    PythonGroundReceiverMeasurement: typing.Type[PythonGroundReceiverMeasurement]
    PythonObservedMeasurement: typing.Type[PythonObservedMeasurement]
    QuadraticClockModel: typing.Type[QuadraticClockModel]
    QuadraticFieldClockModel: typing.Type[QuadraticFieldClockModel]
    Range: typing.Type[Range]
    RangeRate: typing.Type[RangeRate]
    TDOA: typing.Type[TDOA]
    TurnAroundRange: typing.Type[TurnAroundRange]
    filtering: org.orekit.estimation.measurements.filtering.__module_protocol__
    generation: org.orekit.estimation.measurements.generation.__module_protocol__
    gnss: org.orekit.estimation.measurements.gnss.__module_protocol__
    modifiers: org.orekit.estimation.measurements.modifiers.__module_protocol__
