import java.util
import org.orekit.gnss.metric.messages
import org.orekit.gnss.metric.messages.ssr.igm
import org.orekit.gnss.metric.messages.ssr.subtype
import typing



class SsrData:
    def __init__(self): ...

class SsrHeader:
    def __init__(self): ...
    def getIodSsr(self) -> int: ...
    def getSsrEpoch1s(self) -> float: ...
    def getSsrMultipleMessageIndicator(self) -> int: ...
    def getSsrProviderId(self) -> int: ...
    def getSsrSolutionId(self) -> int: ...
    def getSsrUpdateInterval(self) -> int: ...
    def setIodSsr(self, int: int) -> None: ...
    def setSsrEpoch1s(self, double: float) -> None: ...
    def setSsrMultipleMessageIndicator(self, int: int) -> None: ...
    def setSsrProviderId(self, int: int) -> None: ...
    def setSsrSolutionId(self, int: int) -> None: ...
    def setSsrUpdateInterval(self, int: int) -> None: ...

_SsrMessage__H = typing.TypeVar('_SsrMessage__H', bound=SsrHeader)  # <H>
_SsrMessage__D = typing.TypeVar('_SsrMessage__D', bound=SsrData)  # <D>
class SsrMessage(org.orekit.gnss.metric.messages.ParsedMessage, typing.Generic[_SsrMessage__H, _SsrMessage__D]):
    def __init__(self, int: int, h: _SsrMessage__H, list: java.util.List[_SsrMessage__D]): ...
    def getData(self) -> java.util.List[_SsrMessage__D]: ...
    def getHeader(self) -> _SsrMessage__H: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss.metric.messages.ssr")``.

    SsrData: typing.Type[SsrData]
    SsrHeader: typing.Type[SsrHeader]
    SsrMessage: typing.Type[SsrMessage]
    igm: org.orekit.gnss.metric.messages.ssr.igm.__module_protocol__
    subtype: org.orekit.gnss.metric.messages.ssr.subtype.__module_protocol__
