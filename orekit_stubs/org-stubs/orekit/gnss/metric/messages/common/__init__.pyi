import typing



class AccuracyProvider:
    def getAccuracy(self) -> float: ...

class ClockCorrection:
    def __init__(self, double: float, double2: float, double3: float): ...
    def getDeltaClockC0(self) -> float: ...
    def getDeltaClockC1(self) -> float: ...
    def getDeltaClockC2(self) -> float: ...

class CodeBias:
    def __init__(self, int: int, double: float): ...
    def getCodeBias(self) -> float: ...
    def getSignalID(self) -> int: ...

class OrbitCorrection:
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
    def getDeltaOrbitAlongTrack(self) -> float: ...
    def getDeltaOrbitCrossTrack(self) -> float: ...
    def getDeltaOrbitRadial(self) -> float: ...
    def getDotOrbitDeltaAlongTrack(self) -> float: ...
    def getDotOrbitDeltaCrossTrack(self) -> float: ...
    def getDotOrbitDeltaRadial(self) -> float: ...

class PhaseBias:
    def __init__(self, int: int, boolean: bool, int2: int, int3: int, double: float): ...
    def getDiscontinuityCounter(self) -> int: ...
    def getPhaseBias(self) -> float: ...
    def getSignalID(self) -> int: ...
    def getSignalWideLaneIntegerIndicator(self) -> int: ...
    def isSignalInteger(self) -> bool: ...

class SsrUpdateInterval:
    def __init__(self, int: int): ...
    def getUpdateInterval(self) -> float: ...

class GlonassUserRangeAccuracy(AccuracyProvider):
    def __init__(self, int: int): ...
    def getAccuracy(self) -> float: ...

class PythonAccuracyProvider(AccuracyProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getAccuracy(self) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class SignalInSpaceAccuracy(AccuracyProvider):
    def __init__(self, int: int): ...
    def getAccuracy(self) -> float: ...

class UserRangeAccuracy(AccuracyProvider):
    def __init__(self, int: int): ...
    def getAccuracy(self) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss.metric.messages.common")``.

    AccuracyProvider: typing.Type[AccuracyProvider]
    ClockCorrection: typing.Type[ClockCorrection]
    CodeBias: typing.Type[CodeBias]
    GlonassUserRangeAccuracy: typing.Type[GlonassUserRangeAccuracy]
    OrbitCorrection: typing.Type[OrbitCorrection]
    PhaseBias: typing.Type[PhaseBias]
    PythonAccuracyProvider: typing.Type[PythonAccuracyProvider]
    SignalInSpaceAccuracy: typing.Type[SignalInSpaceAccuracy]
    SsrUpdateInterval: typing.Type[SsrUpdateInterval]
    UserRangeAccuracy: typing.Type[UserRangeAccuracy]
