import java.io
import java.lang
import java.util
import java.util.stream
import org.hipparchus
import org.hipparchus.analysis.polynomials
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.linear
import org.orekit.attitudes
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation.analytical
import org.orekit.propagation.conversion
import org.orekit.propagation.events
import org.orekit.propagation.integration
import org.orekit.propagation.numerical
import org.orekit.propagation.sampling
import org.orekit.propagation.semianalytical
import org.orekit.time
import org.orekit.utils
import typing



class AbstractStateCovarianceInterpolator(org.orekit.time.AbstractTimeInterpolator[org.orekit.time.TimeStampedPair[org.orekit.orbits.Orbit, 'StateCovariance']]):
    DEFAULT_POSITION_ANGLE: typing.ClassVar[org.orekit.orbits.PositionAngleType] = ...
    COLUMN_DIM: typing.ClassVar[int] = ...
    ROW_DIM: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, double: float, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, int: int, double: float, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], lOFType: org.orekit.frames.LOFType): ...
    def getOrbitInterpolator(self) -> org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit]: ...
    def getOutFrame(self) -> org.orekit.frames.Frame: ...
    def getOutLOF(self) -> org.orekit.frames.LOFType: ...
    def getOutOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getOutPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeStamped], typing.Sequence[org.orekit.time.TimeStamped], typing.Set[org.orekit.time.TimeStamped]]) -> org.orekit.time.TimeStamped: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[org.orekit.time.TimeStamped]) -> org.orekit.time.TimeStamped: ...
    @typing.overload
    def interpolate(self, abstractTimeInterpolator: org.orekit.time.AbstractTimeInterpolator.InterpolationData) -> org.orekit.time.TimeStampedPair[org.orekit.orbits.Orbit, 'StateCovariance']: ...

class AdditionalStateProvider:
    def getAdditionalState(self, spacecraftState: 'SpacecraftState') -> typing.List[float]: ...
    def getName(self) -> str: ...
    def init(self, spacecraftState: 'SpacecraftState', absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def update(self, spacecraftState: 'SpacecraftState') -> 'SpacecraftState': ...
    def yields(self, spacecraftState: 'SpacecraftState') -> bool: ...

class EphemerisGenerator:
    def getGeneratedEphemeris(self) -> 'BoundedPropagator': ...

_FieldAdditionalStateProvider__T = typing.TypeVar('_FieldAdditionalStateProvider__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAdditionalStateProvider(typing.Generic[_FieldAdditionalStateProvider__T]):
    def getAdditionalState(self, fieldSpacecraftState: 'FieldSpacecraftState'[_FieldAdditionalStateProvider__T]) -> typing.List[_FieldAdditionalStateProvider__T]: ...
    def getName(self) -> str: ...
    def init(self, fieldSpacecraftState: 'FieldSpacecraftState'[_FieldAdditionalStateProvider__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAdditionalStateProvider__T]) -> None: ...
    def update(self, fieldSpacecraftState: 'FieldSpacecraftState'[_FieldAdditionalStateProvider__T]) -> 'FieldSpacecraftState'[_FieldAdditionalStateProvider__T]: ...
    def yields(self, fieldSpacecraftState: 'FieldSpacecraftState'[_FieldAdditionalStateProvider__T]) -> bool: ...

_FieldEphemerisGenerator__T = typing.TypeVar('_FieldEphemerisGenerator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEphemerisGenerator(typing.Generic[_FieldEphemerisGenerator__T]):
    def getGeneratedEphemeris(self) -> 'FieldBoundedPropagator'[_FieldEphemerisGenerator__T]: ...

_FieldPropagator__T = typing.TypeVar('_FieldPropagator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldPropagator(org.orekit.utils.FieldPVCoordinatesProvider[_FieldPropagator__T], typing.Generic[_FieldPropagator__T]):
    DEFAULT_MASS: typing.ClassVar[float] = ...
    def addAdditionalStateProvider(self, fieldAdditionalStateProvider: FieldAdditionalStateProvider[_FieldPropagator__T]) -> None: ...
    _addEventDetector__D = typing.TypeVar('_addEventDetector__D', bound=org.orekit.propagation.events.FieldEventDetector)  # <D>
    def addEventDetector(self, d: _addEventDetector__D) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def clearStepHandlers(self) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[FieldAdditionalStateProvider[_FieldPropagator__T]]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getEphemerisGenerator(self) -> FieldEphemerisGenerator[_FieldPropagator__T]: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.FieldEventDetector[_FieldPropagator__T]]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> 'FieldSpacecraftState'[_FieldPropagator__T]: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.FieldStepHandlerMultiplexer[_FieldPropagator__T]: ...
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldPropagator__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldPropagator__T]: ...
    def getPosition(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldPropagator__T], frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPropagator__T]: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldPropagator__T]) -> 'FieldSpacecraftState'[_FieldPropagator__T]: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldPropagator__T], fieldAbsoluteDate2: org.orekit.time.FieldAbsoluteDate[_FieldPropagator__T]) -> 'FieldSpacecraftState'[_FieldPropagator__T]: ...
    def resetInitialState(self, fieldSpacecraftState: 'FieldSpacecraftState'[_FieldPropagator__T]) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    @typing.overload
    def setStepHandler(self, t: _FieldPropagator__T, fieldOrekitFixedStepHandler: org.orekit.propagation.sampling.FieldOrekitFixedStepHandler[_FieldPropagator__T]) -> None: ...
    @typing.overload
    def setStepHandler(self, fieldOrekitStepHandler: org.orekit.propagation.sampling.FieldOrekitStepHandler[_FieldPropagator__T]) -> None: ...

_FieldSpacecraftState__T = typing.TypeVar('_FieldSpacecraftState__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldSpacecraftState(org.orekit.time.FieldTimeStamped[_FieldSpacecraftState__T], org.orekit.time.FieldTimeShiftable['FieldSpacecraftState'[_FieldSpacecraftState__T], _FieldSpacecraftState__T], typing.Generic[_FieldSpacecraftState__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldSpacecraftState__T], spacecraftState: 'SpacecraftState'): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T, fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T, fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T, fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T], fieldArrayDictionary2: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T], fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T, fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T, fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], t: _FieldSpacecraftState__T, fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T], fieldArrayDictionary2: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], fieldAttitude: org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T], fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    @typing.overload
    def __init__(self, fieldAbsolutePVCoordinates: org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T], fieldArrayDictionary: org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]): ...
    def addAdditionalState(self, string: str, *t: _FieldSpacecraftState__T) -> 'FieldSpacecraftState'[_FieldSpacecraftState__T]: ...
    def addAdditionalStateDerivative(self, string: str, *t: _FieldSpacecraftState__T) -> 'FieldSpacecraftState'[_FieldSpacecraftState__T]: ...
    def ensureCompatibleAdditionalStates(self, fieldSpacecraftState: 'FieldSpacecraftState'[_FieldSpacecraftState__T]) -> None: ...
    def getA(self) -> _FieldSpacecraftState__T: ...
    def getAbsPVA(self) -> org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftState__T]: ...
    def getAdditionalState(self, string: str) -> typing.List[_FieldSpacecraftState__T]: ...
    def getAdditionalStateDerivative(self, string: str) -> typing.List[_FieldSpacecraftState__T]: ...
    def getAdditionalStatesDerivatives(self) -> org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]: ...
    def getAdditionalStatesValues(self) -> org.orekit.utils.FieldArrayDictionary[_FieldSpacecraftState__T]: ...
    def getAttitude(self) -> org.orekit.attitudes.FieldAttitude[_FieldSpacecraftState__T]: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldSpacecraftState__T]: ...
    def getE(self) -> _FieldSpacecraftState__T: ...
    def getEquinoctialEx(self) -> _FieldSpacecraftState__T: ...
    def getEquinoctialEy(self) -> _FieldSpacecraftState__T: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getHx(self) -> _FieldSpacecraftState__T: ...
    def getHy(self) -> _FieldSpacecraftState__T: ...
    def getI(self) -> _FieldSpacecraftState__T: ...
    def getKeplerianMeanMotion(self) -> _FieldSpacecraftState__T: ...
    def getKeplerianPeriod(self) -> _FieldSpacecraftState__T: ...
    def getLE(self) -> _FieldSpacecraftState__T: ...
    def getLM(self) -> _FieldSpacecraftState__T: ...
    def getLv(self) -> _FieldSpacecraftState__T: ...
    def getMass(self) -> _FieldSpacecraftState__T: ...
    def getMu(self) -> _FieldSpacecraftState__T: ...
    def getOrbit(self) -> org.orekit.orbits.FieldOrbit[_FieldSpacecraftState__T]: ...
    @typing.overload
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldSpacecraftState__T]: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldSpacecraftState__T]: ...
    @typing.overload
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldSpacecraftState__T]: ...
    @typing.overload
    def getPosition(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldSpacecraftState__T]: ...
    def hasAdditionalState(self, string: str) -> bool: ...
    def hasAdditionalStateDerivative(self, string: str) -> bool: ...
    def isOrbitDefined(self) -> bool: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldSpacecraftState'[_FieldSpacecraftState__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldSpacecraftState__T) -> 'FieldSpacecraftState'[_FieldSpacecraftState__T]: ...
    def toSpacecraftState(self) -> 'SpacecraftState': ...
    def toStaticTransform(self) -> org.orekit.frames.FieldStaticTransform[_FieldSpacecraftState__T]: ...
    def toString(self) -> str: ...
    def toTransform(self) -> org.orekit.frames.FieldTransform[_FieldSpacecraftState__T]: ...

_FieldSpacecraftStateInterpolator__KK = typing.TypeVar('_FieldSpacecraftStateInterpolator__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class FieldSpacecraftStateInterpolator(org.orekit.time.AbstractFieldTimeInterpolator[FieldSpacecraftState[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], typing.Generic[_FieldSpacecraftStateInterpolator__KK]):
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, frame2: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, frame2: org.orekit.frames.Frame, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter): ...
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, fieldTimeInterpolator: org.orekit.time.FieldTimeInterpolator[org.orekit.orbits.FieldOrbit[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator2: org.orekit.time.FieldTimeInterpolator[org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator3: org.orekit.time.FieldTimeInterpolator[org.orekit.time.TimeStampedField[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator4: org.orekit.time.FieldTimeInterpolator[org.orekit.attitudes.FieldAttitude[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator5: org.orekit.time.FieldTimeInterpolator[org.orekit.time.TimeStampedField[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame, frame2: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, fieldTimeInterpolator: org.orekit.time.FieldTimeInterpolator[org.orekit.orbits.FieldOrbit[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator2: org.orekit.time.FieldTimeInterpolator[org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator3: org.orekit.time.FieldTimeInterpolator[org.orekit.time.TimeStampedField[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator4: org.orekit.time.FieldTimeInterpolator[org.orekit.attitudes.FieldAttitude[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK], fieldTimeInterpolator5: org.orekit.time.FieldTimeInterpolator[org.orekit.time.TimeStampedField[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]): ...
    def getAbsPVAInterpolator(self) -> java.util.Optional[org.orekit.time.FieldTimeInterpolator[org.orekit.utils.FieldAbsolutePVCoordinates[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]]: ...
    def getAdditionalStateInterpolator(self) -> java.util.Optional[org.orekit.time.FieldTimeInterpolator[org.orekit.time.TimeStampedField[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]]: ...
    def getAttitudeInterpolator(self) -> java.util.Optional[org.orekit.time.FieldTimeInterpolator[org.orekit.attitudes.FieldAttitude[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]]: ...
    def getMassInterpolator(self) -> java.util.Optional[org.orekit.time.FieldTimeInterpolator[org.orekit.time.TimeStampedField[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]]: ...
    def getOrbitInterpolator(self) -> java.util.Optional[org.orekit.time.FieldTimeInterpolator[org.orekit.orbits.FieldOrbit[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]]: ...
    def getOutputFrame(self) -> org.orekit.frames.Frame: ...
    def getSubInterpolators(self) -> java.util.List[org.orekit.time.FieldTimeInterpolator[org.orekit.time.FieldTimeStamped[_FieldSpacecraftStateInterpolator__KK], _FieldSpacecraftStateInterpolator__KK]]: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.FieldTimeStamped], typing.Sequence[org.orekit.time.FieldTimeStamped], typing.Set[org.orekit.time.FieldTimeStamped]]) -> org.orekit.time.FieldTimeStamped: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[org.orekit.time.FieldTimeStamped]) -> org.orekit.time.FieldTimeStamped: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldSpacecraftStateInterpolator__KK], collection: typing.Union[java.util.Collection[FieldSpacecraftState[_FieldSpacecraftStateInterpolator__KK]], typing.Sequence[FieldSpacecraftState[_FieldSpacecraftStateInterpolator__KK]], typing.Set[FieldSpacecraftState[_FieldSpacecraftStateInterpolator__KK]]]) -> FieldSpacecraftState[_FieldSpacecraftStateInterpolator__KK]: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldSpacecraftStateInterpolator__KK], stream: java.util.stream.Stream[org.orekit.time.FieldTimeStamped]) -> org.orekit.time.FieldTimeStamped: ...

_FieldStateCovariance__T = typing.TypeVar('_FieldStateCovariance__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldStateCovariance(org.orekit.time.FieldTimeStamped[_FieldStateCovariance__T], typing.Generic[_FieldStateCovariance__T]):
    @typing.overload
    def __init__(self, fieldMatrix: org.hipparchus.linear.FieldMatrix[_FieldStateCovariance__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldStateCovariance__T], frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, fieldMatrix: org.hipparchus.linear.FieldMatrix[_FieldStateCovariance__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldStateCovariance__T], lOF: org.orekit.frames.LOF): ...
    @typing.overload
    def changeCovarianceFrame(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldStateCovariance__T], frame: org.orekit.frames.Frame) -> 'FieldStateCovariance'[_FieldStateCovariance__T]: ...
    @typing.overload
    def changeCovarianceFrame(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldStateCovariance__T], lOF: org.orekit.frames.LOF) -> 'FieldStateCovariance'[_FieldStateCovariance__T]: ...
    def changeCovarianceType(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldStateCovariance__T], orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType) -> 'FieldStateCovariance'[_FieldStateCovariance__T]: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldStateCovariance__T]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getLOF(self) -> org.orekit.frames.LOF: ...
    def getMatrix(self) -> org.hipparchus.linear.FieldMatrix[_FieldStateCovariance__T]: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def shiftedBy(self, field: org.hipparchus.Field[_FieldStateCovariance__T], fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldStateCovariance__T], t: _FieldStateCovariance__T) -> 'FieldStateCovariance'[_FieldStateCovariance__T]: ...
    def toStateCovariance(self) -> 'StateCovariance': ...

class MatricesHarvester:
    def getJacobiansColumnsNames(self) -> java.util.List[str]: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getParametersJacobian(self, spacecraftState: 'SpacecraftState') -> org.hipparchus.linear.RealMatrix: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def getStateTransitionMatrix(self, spacecraftState: 'SpacecraftState') -> org.hipparchus.linear.RealMatrix: ...
    def setReferenceState(self, spacecraftState: 'SpacecraftState') -> None: ...

class PropagationType(java.lang.Enum['PropagationType']):
    MEAN: typing.ClassVar['PropagationType'] = ...
    OSCULATING: typing.ClassVar['PropagationType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PropagationType': ...
    @staticmethod
    def values() -> typing.List['PropagationType']: ...

class Propagator(org.orekit.utils.PVCoordinatesProvider):
    DEFAULT_MASS: typing.ClassVar[float] = ...
    def addAdditionalStateProvider(self, additionalStateProvider: AdditionalStateProvider) -> None: ...
    _addEventDetector__T = typing.TypeVar('_addEventDetector__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
    def addEventDetector(self, t: _addEventDetector__T) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def clearStepHandlers(self) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[AdditionalStateProvider]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    @staticmethod
    def getDefaultLaw(frames: org.orekit.frames.Frames) -> org.orekit.attitudes.AttitudeProvider: ...
    def getEphemerisGenerator(self) -> EphemerisGenerator: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.EventDetector]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> 'SpacecraftState': ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.StepHandlerMultiplexer: ...
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def getPosition(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'SpacecraftState': ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> 'SpacecraftState': ...
    def resetInitialState(self, spacecraftState: 'SpacecraftState') -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    @typing.overload
    def setStepHandler(self, double: float, orekitFixedStepHandler: typing.Union[org.orekit.propagation.sampling.OrekitFixedStepHandler, typing.Callable]) -> None: ...
    @typing.overload
    def setStepHandler(self, orekitStepHandler: org.orekit.propagation.sampling.OrekitStepHandler) -> None: ...
    def setupMatricesComputation(self, string: str, realMatrix: org.hipparchus.linear.RealMatrix, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary) -> MatricesHarvester: ...

class PropagatorsParallelizer:
    @typing.overload
    def __init__(self, list: java.util.List[Propagator], double: float, multiSatFixedStepHandler: org.orekit.propagation.sampling.MultiSatFixedStepHandler): ...
    @typing.overload
    def __init__(self, list: java.util.List[Propagator], multiSatStepHandler: org.orekit.propagation.sampling.MultiSatStepHandler): ...
    def getPropagators(self) -> java.util.List[Propagator]: ...
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> java.util.List['SpacecraftState']: ...

class SpacecraftState(org.orekit.time.TimeStamped, org.orekit.time.TimeShiftable['SpacecraftState'], java.io.Serializable):
    DEFAULT_MASS: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, double: float): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, double: float, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, attitude: org.orekit.attitudes.Attitude): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, attitude: org.orekit.attitudes.Attitude, double: float): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, attitude: org.orekit.attitudes.Attitude, double: float, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, attitude: org.orekit.attitudes.Attitude, double: float, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary, doubleArrayDictionary2: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, attitude: org.orekit.attitudes.Attitude, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, double: float): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, double: float, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, attitude: org.orekit.attitudes.Attitude): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, attitude: org.orekit.attitudes.Attitude, double: float): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, attitude: org.orekit.attitudes.Attitude, double: float, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, attitude: org.orekit.attitudes.Attitude, double: float, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary, doubleArrayDictionary2: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, attitude: org.orekit.attitudes.Attitude, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    @typing.overload
    def __init__(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    def addAdditionalState(self, string: str, *double: float) -> 'SpacecraftState': ...
    def addAdditionalStateDerivative(self, string: str, *double: float) -> 'SpacecraftState': ...
    def ensureCompatibleAdditionalStates(self, spacecraftState: 'SpacecraftState') -> None: ...
    def getA(self) -> float: ...
    def getAbsPVA(self) -> org.orekit.utils.AbsolutePVCoordinates: ...
    def getAdditionalState(self, string: str) -> typing.List[float]: ...
    def getAdditionalStateDerivative(self, string: str) -> typing.List[float]: ...
    def getAdditionalStatesDerivatives(self) -> org.orekit.utils.DoubleArrayDictionary: ...
    def getAdditionalStatesValues(self) -> org.orekit.utils.DoubleArrayDictionary: ...
    def getAttitude(self) -> org.orekit.attitudes.Attitude: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getE(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getHx(self) -> float: ...
    def getHy(self) -> float: ...
    def getI(self) -> float: ...
    def getKeplerianMeanMotion(self) -> float: ...
    def getKeplerianPeriod(self) -> float: ...
    def getLE(self) -> float: ...
    def getLM(self) -> float: ...
    def getLv(self) -> float: ...
    def getMass(self) -> float: ...
    def getMu(self) -> float: ...
    def getOrbit(self) -> org.orekit.orbits.Orbit: ...
    @typing.overload
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def getPosition(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def hasAdditionalState(self, string: str) -> bool: ...
    def hasAdditionalStateDerivative(self, string: str) -> bool: ...
    def isOrbitDefined(self) -> bool: ...
    def shiftedBy(self, double: float) -> 'SpacecraftState': ...
    def toStaticTransform(self) -> org.orekit.frames.StaticTransform: ...
    def toString(self) -> str: ...
    def toTransform(self) -> org.orekit.frames.Transform: ...

class SpacecraftStateInterpolator(org.orekit.time.AbstractTimeInterpolator[SpacecraftState]):
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, frame2: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, frame2: org.orekit.frames.Frame, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter): ...
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], timeInterpolator2: org.orekit.time.TimeInterpolator[org.orekit.utils.AbsolutePVCoordinates], timeInterpolator3: org.orekit.time.TimeInterpolator[org.orekit.time.TimeStampedDouble], timeInterpolator4: org.orekit.time.TimeInterpolator[org.orekit.attitudes.Attitude], timeInterpolator5: org.orekit.time.TimeInterpolator[org.orekit.time.TimeStampedDouble]): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame, frame2: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], timeInterpolator2: org.orekit.time.TimeInterpolator[org.orekit.utils.AbsolutePVCoordinates], timeInterpolator3: org.orekit.time.TimeInterpolator[org.orekit.time.TimeStampedDouble], timeInterpolator4: org.orekit.time.TimeInterpolator[org.orekit.attitudes.Attitude], timeInterpolator5: org.orekit.time.TimeInterpolator[org.orekit.time.TimeStampedDouble]): ...
    @staticmethod
    def checkSampleAndInterpolatorConsistency(list: java.util.List[SpacecraftState], boolean: bool, boolean2: bool) -> None: ...
    @staticmethod
    def checkStatesDefinitionsConsistency(list: java.util.List[SpacecraftState]) -> None: ...
    def getAbsPVAInterpolator(self) -> java.util.Optional[org.orekit.time.TimeInterpolator[org.orekit.utils.AbsolutePVCoordinates]]: ...
    def getAdditionalStateInterpolator(self) -> java.util.Optional[org.orekit.time.TimeInterpolator[org.orekit.time.TimeStampedDouble]]: ...
    def getAttitudeInterpolator(self) -> java.util.Optional[org.orekit.time.TimeInterpolator[org.orekit.attitudes.Attitude]]: ...
    def getMassInterpolator(self) -> java.util.Optional[org.orekit.time.TimeInterpolator[org.orekit.time.TimeStampedDouble]]: ...
    def getOrbitInterpolator(self) -> java.util.Optional[org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit]]: ...
    def getOutputFrame(self) -> org.orekit.frames.Frame: ...
    def getSubInterpolators(self) -> java.util.List[org.orekit.time.TimeInterpolator[org.orekit.time.TimeStamped]]: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[SpacecraftState], typing.Sequence[SpacecraftState], typing.Set[SpacecraftState]]) -> SpacecraftState: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[org.orekit.time.TimeStamped]) -> org.orekit.time.TimeStamped: ...

class StateCovariance(org.orekit.time.TimeStamped):
    STATE_DIMENSION: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, absoluteDate: org.orekit.time.AbsoluteDate, lOF: org.orekit.frames.LOF): ...
    @typing.overload
    def changeCovarianceFrame(self, orbit: org.orekit.orbits.Orbit, frame: org.orekit.frames.Frame) -> 'StateCovariance': ...
    @typing.overload
    def changeCovarianceFrame(self, orbit: org.orekit.orbits.Orbit, lOF: org.orekit.frames.LOF) -> 'StateCovariance': ...
    def changeCovarianceType(self, orbit: org.orekit.orbits.Orbit, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType) -> 'StateCovariance': ...
    @staticmethod
    def checkFrameAndOrbitTypeConsistency(frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType) -> None: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getLOF(self) -> org.orekit.frames.LOF: ...
    def getMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    @staticmethod
    def getStm(orbit: org.orekit.orbits.Orbit, double: float) -> org.hipparchus.linear.RealMatrix: ...
    def shiftedBy(self, orbit: org.orekit.orbits.Orbit, double: float) -> 'StateCovariance': ...

class AbstractMatricesHarvester(MatricesHarvester):
    STATE_DIMENSION: typing.ClassVar[int] = ...
    def freezeColumnsNames(self) -> None: ...
    def getInitialJacobianColumn(self, string: str) -> typing.List[float]: ...
    def getInitialStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getParametersJacobian(self, spacecraftState: SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getStateTransitionMatrix(self, spacecraftState: SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getStmName(self) -> str: ...
    def setReferenceState(self, spacecraftState: SpacecraftState) -> None: ...

class AbstractPropagator(Propagator):
    def addAdditionalStateProvider(self, additionalStateProvider: AdditionalStateProvider) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[AdditionalStateProvider]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> SpacecraftState: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.StepHandlerMultiplexer: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    def resetInitialState(self, spacecraftState: SpacecraftState) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    def setupMatricesComputation(self, string: str, realMatrix: org.hipparchus.linear.RealMatrix, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary) -> MatricesHarvester: ...

class AbstractStateModifier(AdditionalStateProvider):
    def __init__(self): ...
    def change(self, spacecraftState: SpacecraftState) -> SpacecraftState: ...
    def getAdditionalState(self, spacecraftState: SpacecraftState) -> typing.List[float]: ...
    def getName(self) -> str: ...
    def update(self, spacecraftState: SpacecraftState) -> SpacecraftState: ...

class BoundedPropagator(Propagator):
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...

_FieldAbstractPropagator__T = typing.TypeVar('_FieldAbstractPropagator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbstractPropagator(FieldPropagator[_FieldAbstractPropagator__T], typing.Generic[_FieldAbstractPropagator__T]):
    def addAdditionalStateProvider(self, fieldAdditionalStateProvider: FieldAdditionalStateProvider[_FieldAbstractPropagator__T]) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[FieldAdditionalStateProvider[_FieldAbstractPropagator__T]]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getField(self) -> org.hipparchus.Field[_FieldAbstractPropagator__T]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> FieldSpacecraftState[_FieldAbstractPropagator__T]: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.FieldStepHandlerMultiplexer[_FieldAbstractPropagator__T]: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbstractPropagator__T], fieldAbsoluteDate2: org.orekit.time.FieldAbsoluteDate[_FieldAbstractPropagator__T]) -> FieldSpacecraftState[_FieldAbstractPropagator__T]: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbstractPropagator__T]) -> FieldSpacecraftState[_FieldAbstractPropagator__T]: ...
    def resetInitialState(self, fieldSpacecraftState: FieldSpacecraftState[_FieldAbstractPropagator__T]) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...

_FieldAbstractStateModifier__T = typing.TypeVar('_FieldAbstractStateModifier__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbstractStateModifier(FieldAdditionalStateProvider[_FieldAbstractStateModifier__T], typing.Generic[_FieldAbstractStateModifier__T]):
    def __init__(self): ...
    def change(self, fieldSpacecraftState: FieldSpacecraftState[_FieldAbstractStateModifier__T]) -> FieldSpacecraftState[_FieldAbstractStateModifier__T]: ...
    def getAdditionalState(self, fieldSpacecraftState: FieldSpacecraftState[_FieldAbstractStateModifier__T]) -> typing.List[_FieldAbstractStateModifier__T]: ...
    def getName(self) -> str: ...
    def update(self, fieldSpacecraftState: FieldSpacecraftState[_FieldAbstractStateModifier__T]) -> FieldSpacecraftState[_FieldAbstractStateModifier__T]: ...

_FieldBoundedPropagator__T = typing.TypeVar('_FieldBoundedPropagator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldBoundedPropagator(FieldPropagator[_FieldBoundedPropagator__T], typing.Generic[_FieldBoundedPropagator__T]):
    def getMaxDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldBoundedPropagator__T]: ...
    def getMinDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldBoundedPropagator__T]: ...

class PythonAdditionalStateProvider(AdditionalStateProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getAdditionalState(self, spacecraftState: SpacecraftState) -> typing.List[float]: ...
    def getName(self) -> str: ...
    def init(self, spacecraftState: SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def yield_(self, spacecraftState: SpacecraftState) -> bool: ...

class PythonEphemerisGenerator(EphemerisGenerator):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getGeneratedEphemeris(self) -> BoundedPropagator: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldAdditionalStateProvider__T = typing.TypeVar('_PythonFieldAdditionalStateProvider__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldAdditionalStateProvider(FieldAdditionalStateProvider[_PythonFieldAdditionalStateProvider__T], typing.Generic[_PythonFieldAdditionalStateProvider__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getAdditionalState(self, fieldSpacecraftState: FieldSpacecraftState[_PythonFieldAdditionalStateProvider__T]) -> typing.List[_PythonFieldAdditionalStateProvider__T]: ...
    def getName(self) -> str: ...
    def init(self, fieldSpacecraftState: FieldSpacecraftState[_PythonFieldAdditionalStateProvider__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldAdditionalStateProvider__T]) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def yield_(self, fieldSpacecraftState: FieldSpacecraftState[_PythonFieldAdditionalStateProvider__T]) -> bool: ...

_PythonFieldEphemerisGenerator__T = typing.TypeVar('_PythonFieldEphemerisGenerator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldEphemerisGenerator(FieldEphemerisGenerator[_PythonFieldEphemerisGenerator__T], typing.Generic[_PythonFieldEphemerisGenerator__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getGeneratedEphemeris(self) -> FieldBoundedPropagator[_PythonFieldEphemerisGenerator__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldPropagator__T = typing.TypeVar('_PythonFieldPropagator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldPropagator(FieldPropagator[_PythonFieldPropagator__T], typing.Generic[_PythonFieldPropagator__T]):
    def __init__(self): ...
    def addAdditionalStateProvider(self, fieldAdditionalStateProvider: FieldAdditionalStateProvider[_PythonFieldPropagator__T]) -> None: ...
    _addEventDetector__D = typing.TypeVar('_addEventDetector__D', bound=org.orekit.propagation.events.FieldEventDetector)  # <D>
    def addEventDetector(self, d: _addEventDetector__D) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def finalize(self) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[FieldAdditionalStateProvider[_PythonFieldPropagator__T]]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getEphemerisGenerator(self) -> FieldEphemerisGenerator[_PythonFieldPropagator__T]: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.FieldEventDetector[_PythonFieldPropagator__T]]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> FieldSpacecraftState[_PythonFieldPropagator__T]: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.FieldStepHandlerMultiplexer[_PythonFieldPropagator__T]: ...
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldPropagator__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_PythonFieldPropagator__T]: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldPropagator__T]) -> FieldSpacecraftState[_PythonFieldPropagator__T]: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldPropagator__T], fieldAbsoluteDate2: org.orekit.time.FieldAbsoluteDate[_PythonFieldPropagator__T]) -> FieldSpacecraftState[_PythonFieldPropagator__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def resetInitialState(self, fieldSpacecraftState: FieldSpacecraftState[_PythonFieldPropagator__T]) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...

class PythonMatricesHarvester(MatricesHarvester):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getJacobiansColumnsNames(self) -> java.util.List[str]: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getParametersJacobian(self, spacecraftState: SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def getStateTransitionMatrix(self, spacecraftState: SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def setReferenceState(self, spacecraftState: SpacecraftState) -> None: ...

class PythonPropagator(Propagator):
    def __init__(self): ...
    def addAdditionalStateProvider(self, additionalStateProvider: AdditionalStateProvider) -> None: ...
    _addEventDetector__T = typing.TypeVar('_addEventDetector__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
    def addEventDetector(self, t: _addEventDetector__T) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def finalize(self) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[AdditionalStateProvider]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getEphemerisGenerator(self) -> EphemerisGenerator: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.EventDetector]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> SpacecraftState: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.StepHandlerMultiplexer: ...
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def resetInitialState(self, spacecraftState: SpacecraftState) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    def setEphemerisModeHandler(self, orekitStepHandler: org.orekit.propagation.sampling.OrekitStepHandler) -> None: ...
    def setupMatricesComputation(self, string: str, realMatrix: org.hipparchus.linear.RealMatrix, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary) -> MatricesHarvester: ...

class StateCovarianceBlender(AbstractStateCovarianceInterpolator):
    @typing.overload
    def __init__(self, smoothStepFunction: org.hipparchus.analysis.polynomials.SmoothStepFactory.SmoothStepFunction, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, smoothStepFunction: org.hipparchus.analysis.polynomials.SmoothStepFactory.SmoothStepFunction, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], lOFType: org.orekit.frames.LOFType): ...

class StateCovarianceKeplerianHermiteInterpolator(AbstractStateCovarianceInterpolator):
    @typing.overload
    def __init__(self, int: int, double: float, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, int: int, double: float, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, lOFType: org.orekit.frames.LOFType): ...
    @typing.overload
    def __init__(self, int: int, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, int: int, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], lOFType: org.orekit.frames.LOFType): ...
    @typing.overload
    def __init__(self, int: int, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, int: int, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, lOFType: org.orekit.frames.LOFType): ...
    @typing.overload
    def __init__(self, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], frame: org.orekit.frames.Frame, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType): ...
    @typing.overload
    def __init__(self, timeInterpolator: org.orekit.time.TimeInterpolator[org.orekit.orbits.Orbit], lOFType: org.orekit.frames.LOFType): ...
    def getFilter(self) -> org.orekit.utils.CartesianDerivativesFilter: ...

class StateCovarianceMatrixProvider(AdditionalStateProvider):
    def __init__(self, string: str, string2: str, matricesHarvester: MatricesHarvester, stateCovariance: StateCovariance): ...
    def getAdditionalState(self, spacecraftState: SpacecraftState) -> typing.List[float]: ...
    def getCovarianceOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getName(self) -> str: ...
    @typing.overload
    def getStateCovariance(self, spacecraftState: SpacecraftState) -> StateCovariance: ...
    @typing.overload
    def getStateCovariance(self, spacecraftState: SpacecraftState, frame: org.orekit.frames.Frame) -> StateCovariance: ...
    @typing.overload
    def getStateCovariance(self, spacecraftState: SpacecraftState, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType) -> StateCovariance: ...
    def init(self, spacecraftState: SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def yields(self, spacecraftState: SpacecraftState) -> bool: ...

class PythonAbstractMatricesHarvester(AbstractMatricesHarvester):
    def __init__(self, string: str, realMatrix: org.hipparchus.linear.RealMatrix, doubleArrayDictionary: org.orekit.utils.DoubleArrayDictionary): ...
    def finalize(self) -> None: ...
    def freezeColumnsNames(self) -> None: ...
    def getJacobiansColumnsNames(self) -> java.util.List[str]: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonAbstractPropagator(AbstractPropagator):
    def __init__(self): ...
    _addEventDetector__T = typing.TypeVar('_addEventDetector__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
    def addEventDetector(self, t: _addEventDetector__T) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def finalize(self) -> None: ...
    def getEphemerisGenerator(self) -> EphemerisGenerator: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.EventDetector]: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonAbstractStateModifier(AbstractStateModifier):
    def __init__(self): ...
    def change(self, spacecraftState: SpacecraftState) -> SpacecraftState: ...

class PythonBoundedPropagator(BoundedPropagator):
    def __init__(self): ...
    def addAdditionalStateProvider(self, additionalStateProvider: AdditionalStateProvider) -> None: ...
    _addEventDetector__T = typing.TypeVar('_addEventDetector__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
    def addEventDetector(self, t: _addEventDetector__T) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def finalize(self) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[AdditionalStateProvider]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getEphemerisGenerator(self) -> EphemerisGenerator: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.EventDetector]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> SpacecraftState: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.StepHandlerMultiplexer: ...
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    @typing.overload
    def propagate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> SpacecraftState: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def resetInitialState(self, spacecraftState: SpacecraftState) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...

_PythonFieldAbstractPropagator__T = typing.TypeVar('_PythonFieldAbstractPropagator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldAbstractPropagator(FieldAbstractPropagator[_PythonFieldAbstractPropagator__T], typing.Generic[_PythonFieldAbstractPropagator__T]):
    def __init__(self, field: org.hipparchus.Field[_PythonFieldAbstractPropagator__T]): ...
    _addEventDetector__D = typing.TypeVar('_addEventDetector__D', bound=org.orekit.propagation.events.FieldEventDetector)  # <D>
    def addEventDetector(self, d: _addEventDetector__D) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def finalize(self) -> None: ...
    def getEphemerisGenerator(self) -> FieldEphemerisGenerator[_PythonFieldAbstractPropagator__T]: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.FieldEventDetector[_PythonFieldAbstractPropagator__T]]: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldAbstractPropagator__T], fieldAbsoluteDate2: org.orekit.time.FieldAbsoluteDate[_PythonFieldAbstractPropagator__T]) -> FieldSpacecraftState[_PythonFieldAbstractPropagator__T]: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldAbstractPropagator__T]) -> FieldSpacecraftState[_PythonFieldAbstractPropagator__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldBoundedPropagator__T = typing.TypeVar('_PythonFieldBoundedPropagator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldBoundedPropagator(FieldBoundedPropagator[_PythonFieldBoundedPropagator__T], typing.Generic[_PythonFieldBoundedPropagator__T]):
    def __init__(self): ...
    def addAdditionalStateProvider(self, fieldAdditionalStateProvider: FieldAdditionalStateProvider[_PythonFieldBoundedPropagator__T]) -> None: ...
    _addEventDetector__D = typing.TypeVar('_addEventDetector__D', bound=org.orekit.propagation.events.FieldEventDetector)  # <D>
    def addEventDetector(self, d: _addEventDetector__D) -> None: ...
    def clearEventsDetectors(self) -> None: ...
    def finalize(self) -> None: ...
    def getAdditionalStateProviders(self) -> java.util.List[FieldAdditionalStateProvider[_PythonFieldBoundedPropagator__T]]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.AttitudeProvider: ...
    def getEphemerisGenerator(self) -> FieldEphemerisGenerator[_PythonFieldBoundedPropagator__T]: ...
    def getEventsDetectors(self) -> java.util.Collection[org.orekit.propagation.events.FieldEventDetector[_PythonFieldBoundedPropagator__T]]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInitialState(self) -> FieldSpacecraftState[_PythonFieldBoundedPropagator__T]: ...
    def getManagedAdditionalStates(self) -> typing.List[str]: ...
    def getMaxDate(self) -> org.orekit.time.FieldAbsoluteDate[_PythonFieldBoundedPropagator__T]: ...
    def getMinDate(self) -> org.orekit.time.FieldAbsoluteDate[_PythonFieldBoundedPropagator__T]: ...
    def getMultiplexer(self) -> org.orekit.propagation.sampling.FieldStepHandlerMultiplexer[_PythonFieldBoundedPropagator__T]: ...
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldBoundedPropagator__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_PythonFieldBoundedPropagator__T]: ...
    def isAdditionalStateManaged(self, string: str) -> bool: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldBoundedPropagator__T]) -> FieldSpacecraftState[_PythonFieldBoundedPropagator__T]: ...
    @typing.overload
    def propagate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldBoundedPropagator__T], fieldAbsoluteDate2: org.orekit.time.FieldAbsoluteDate[_PythonFieldBoundedPropagator__T]) -> FieldSpacecraftState[_PythonFieldBoundedPropagator__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def resetInitialState(self, fieldSpacecraftState: FieldSpacecraftState[_PythonFieldBoundedPropagator__T]) -> None: ...
    def setAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation")``.

    AbstractMatricesHarvester: typing.Type[AbstractMatricesHarvester]
    AbstractPropagator: typing.Type[AbstractPropagator]
    AbstractStateCovarianceInterpolator: typing.Type[AbstractStateCovarianceInterpolator]
    AbstractStateModifier: typing.Type[AbstractStateModifier]
    AdditionalStateProvider: typing.Type[AdditionalStateProvider]
    BoundedPropagator: typing.Type[BoundedPropagator]
    EphemerisGenerator: typing.Type[EphemerisGenerator]
    FieldAbstractPropagator: typing.Type[FieldAbstractPropagator]
    FieldAbstractStateModifier: typing.Type[FieldAbstractStateModifier]
    FieldAdditionalStateProvider: typing.Type[FieldAdditionalStateProvider]
    FieldBoundedPropagator: typing.Type[FieldBoundedPropagator]
    FieldEphemerisGenerator: typing.Type[FieldEphemerisGenerator]
    FieldPropagator: typing.Type[FieldPropagator]
    FieldSpacecraftState: typing.Type[FieldSpacecraftState]
    FieldSpacecraftStateInterpolator: typing.Type[FieldSpacecraftStateInterpolator]
    FieldStateCovariance: typing.Type[FieldStateCovariance]
    MatricesHarvester: typing.Type[MatricesHarvester]
    PropagationType: typing.Type[PropagationType]
    Propagator: typing.Type[Propagator]
    PropagatorsParallelizer: typing.Type[PropagatorsParallelizer]
    PythonAbstractMatricesHarvester: typing.Type[PythonAbstractMatricesHarvester]
    PythonAbstractPropagator: typing.Type[PythonAbstractPropagator]
    PythonAbstractStateModifier: typing.Type[PythonAbstractStateModifier]
    PythonAdditionalStateProvider: typing.Type[PythonAdditionalStateProvider]
    PythonBoundedPropagator: typing.Type[PythonBoundedPropagator]
    PythonEphemerisGenerator: typing.Type[PythonEphemerisGenerator]
    PythonFieldAbstractPropagator: typing.Type[PythonFieldAbstractPropagator]
    PythonFieldAdditionalStateProvider: typing.Type[PythonFieldAdditionalStateProvider]
    PythonFieldBoundedPropagator: typing.Type[PythonFieldBoundedPropagator]
    PythonFieldEphemerisGenerator: typing.Type[PythonFieldEphemerisGenerator]
    PythonFieldPropagator: typing.Type[PythonFieldPropagator]
    PythonMatricesHarvester: typing.Type[PythonMatricesHarvester]
    PythonPropagator: typing.Type[PythonPropagator]
    SpacecraftState: typing.Type[SpacecraftState]
    SpacecraftStateInterpolator: typing.Type[SpacecraftStateInterpolator]
    StateCovariance: typing.Type[StateCovariance]
    StateCovarianceBlender: typing.Type[StateCovarianceBlender]
    StateCovarianceKeplerianHermiteInterpolator: typing.Type[StateCovarianceKeplerianHermiteInterpolator]
    StateCovarianceMatrixProvider: typing.Type[StateCovarianceMatrixProvider]
    analytical: org.orekit.propagation.analytical.__module_protocol__
    conversion: org.orekit.propagation.conversion.__module_protocol__
    events: org.orekit.propagation.events.__module_protocol__
    integration: org.orekit.propagation.integration.__module_protocol__
    numerical: org.orekit.propagation.numerical.__module_protocol__
    sampling: org.orekit.propagation.sampling.__module_protocol__
    semianalytical: org.orekit.propagation.semianalytical.__module_protocol__
