import org.orekit.data
import org.orekit.forces.gravity.potential
import org.orekit.orbits
import org.orekit.propagation.conversion.averaging
import typing



_OsculatingToAveragedConverter__T = typing.TypeVar('_OsculatingToAveragedConverter__T', bound=org.orekit.propagation.conversion.averaging.AveragedOrbitalState)  # <T>
class OsculatingToAveragedConverter(typing.Generic[_OsculatingToAveragedConverter__T]):
    def convertToAveraged(self, orbit: org.orekit.orbits.Orbit) -> _OsculatingToAveragedConverter__T: ...

_FixedPointOsculatingToAveragedConverter__T = typing.TypeVar('_FixedPointOsculatingToAveragedConverter__T', bound=org.orekit.propagation.conversion.averaging.AveragedOrbitalState)  # <T>
class FixedPointOsculatingToAveragedConverter(OsculatingToAveragedConverter[_FixedPointOsculatingToAveragedConverter__T], typing.Generic[_FixedPointOsculatingToAveragedConverter__T]):
    DEFAULT_EPSILON: typing.ClassVar[float] = ...
    DEFAULT_MAX_ITERATIONS: typing.ClassVar[int] = ...
    def getEpsilon(self) -> float: ...
    def getMaxIterations(self) -> int: ...
    def setEpsilon(self, double: float) -> None: ...
    def setMaxIterations(self, int: int) -> None: ...

class OsculatingToBrouwerLyddaneConverter(FixedPointOsculatingToAveragedConverter[org.orekit.propagation.conversion.averaging.BrouwerLyddaneOrbitalState]):
    @typing.overload
    def __init__(self, double: float, int: int, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    @typing.overload
    def __init__(self, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def convertToAveraged(self, orbit: org.orekit.orbits.Orbit) -> org.orekit.propagation.conversion.averaging.BrouwerLyddaneOrbitalState: ...

class OsculatingToDSST6X0Converter(FixedPointOsculatingToAveragedConverter[org.orekit.propagation.conversion.averaging.DSST6X0OrbitalState]):
    @typing.overload
    def __init__(self, double: float, int: int, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    @typing.overload
    def __init__(self, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def convertToAveraged(self, orbit: org.orekit.orbits.Orbit) -> org.orekit.propagation.conversion.averaging.DSST6X0OrbitalState: ...

class OsculatingToEcksteinHechlerConverter(FixedPointOsculatingToAveragedConverter[org.orekit.propagation.conversion.averaging.EcksteinHechlerOrbitalState]):
    @typing.overload
    def __init__(self, double: float, int: int, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    @typing.overload
    def __init__(self, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def convertToAveraged(self, orbit: org.orekit.orbits.Orbit) -> org.orekit.propagation.conversion.averaging.EcksteinHechlerOrbitalState: ...

class OsculatingToSGP4Converter(FixedPointOsculatingToAveragedConverter[org.orekit.propagation.conversion.averaging.SGP4OrbitalState]):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int, double2: float, dataContext: org.orekit.data.DataContext): ...
    @typing.overload
    def __init__(self, dataContext: org.orekit.data.DataContext): ...
    def convertToAveraged(self, orbit: org.orekit.orbits.Orbit) -> org.orekit.propagation.conversion.averaging.SGP4OrbitalState: ...

_PythonFixedPointOsculatingToAveragedConverter__T = typing.TypeVar('_PythonFixedPointOsculatingToAveragedConverter__T', bound=org.orekit.propagation.conversion.averaging.AveragedOrbitalState)  # <T>
class PythonFixedPointOsculatingToAveragedConverter(FixedPointOsculatingToAveragedConverter[_PythonFixedPointOsculatingToAveragedConverter__T], typing.Generic[_PythonFixedPointOsculatingToAveragedConverter__T]):
    def __init__(self, double: float, int: int): ...
    def convertToAveraged(self, orbit: org.orekit.orbits.Orbit) -> _PythonFixedPointOsculatingToAveragedConverter__T: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.conversion.averaging.converters")``.

    FixedPointOsculatingToAveragedConverter: typing.Type[FixedPointOsculatingToAveragedConverter]
    OsculatingToAveragedConverter: typing.Type[OsculatingToAveragedConverter]
    OsculatingToBrouwerLyddaneConverter: typing.Type[OsculatingToBrouwerLyddaneConverter]
    OsculatingToDSST6X0Converter: typing.Type[OsculatingToDSST6X0Converter]
    OsculatingToEcksteinHechlerConverter: typing.Type[OsculatingToEcksteinHechlerConverter]
    OsculatingToSGP4Converter: typing.Type[OsculatingToSGP4Converter]
    PythonFixedPointOsculatingToAveragedConverter: typing.Type[PythonFixedPointOsculatingToAveragedConverter]
