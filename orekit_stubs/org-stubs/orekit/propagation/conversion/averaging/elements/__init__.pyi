import typing



class AveragedOrbitalElements:
    def toArray(self) -> typing.List[float]: ...

class AveragedCircularWithMeanAngle(AveragedOrbitalElements):
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
    def getAveragedCircularEx(self) -> float: ...
    def getAveragedCircularEy(self) -> float: ...
    def getAveragedInclination(self) -> float: ...
    def getAveragedMeanLatitudeArgument(self) -> float: ...
    def getAveragedRightAscensionOfTheAscendingNode(self) -> float: ...
    def getAveragedSemiMajorAxis(self) -> float: ...
    def toArray(self) -> typing.List[float]: ...

class AveragedEquinoctialWithMeanAngle(AveragedOrbitalElements):
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
    def getAveragedEquinoctialEx(self) -> float: ...
    def getAveragedEquinoctialEy(self) -> float: ...
    def getAveragedHx(self) -> float: ...
    def getAveragedHy(self) -> float: ...
    def getAveragedMeanLongitudeArgument(self) -> float: ...
    def getAveragedSemiMajorAxis(self) -> float: ...
    def toArray(self) -> typing.List[float]: ...

class AveragedKeplerianWithMeanAngle(AveragedOrbitalElements):
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
    def getAveragedEccentricity(self) -> float: ...
    def getAveragedInclination(self) -> float: ...
    def getAveragedMeanAnomaly(self) -> float: ...
    def getAveragedPerigeeArgument(self) -> float: ...
    def getAveragedRightAscensionOfTheAscendingNode(self) -> float: ...
    def getAveragedSemiMajorAxis(self) -> float: ...
    def toArray(self) -> typing.List[float]: ...

class PythonAveragedOrbitalElements(AveragedOrbitalElements):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def toArray(self) -> typing.List[float]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.conversion.averaging.elements")``.

    AveragedCircularWithMeanAngle: typing.Type[AveragedCircularWithMeanAngle]
    AveragedEquinoctialWithMeanAngle: typing.Type[AveragedEquinoctialWithMeanAngle]
    AveragedKeplerianWithMeanAngle: typing.Type[AveragedKeplerianWithMeanAngle]
    AveragedOrbitalElements: typing.Type[AveragedOrbitalElements]
    PythonAveragedOrbitalElements: typing.Type[PythonAveragedOrbitalElements]
