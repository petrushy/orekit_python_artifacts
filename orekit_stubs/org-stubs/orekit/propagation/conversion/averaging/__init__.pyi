import java.util
import org
import org.orekit.data
import org.orekit.forces.gravity.potential
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation.analytical.tle
import org.orekit.propagation.conversion.averaging.converters
import org.orekit.propagation.conversion.averaging.elements
import org.orekit.propagation.semianalytical.dsst.forces
import org.orekit.time
import typing



class AveragedOrbitalState(org.orekit.time.TimeStamped):
    def getAveragedElements(self) -> org.orekit.propagation.conversion.averaging.elements.AveragedOrbitalElements: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getMu(self) -> float: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def toOsculatingOrbit(self) -> org.orekit.orbits.Orbit: ...

class AbstractAveragedOrbitalState(AveragedOrbitalState):
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...

class PythonAbstractAveragedOrbitalState(AbstractAveragedOrbitalState):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame): ...
    def finalize(self) -> None: ...
    def getAveragedElements(self) -> org.orekit.propagation.conversion.averaging.elements.AveragedOrbitalElements: ...
    def getMu(self) -> float: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def toOsculatingOrbit(self) -> org.orekit.orbits.Orbit: ...

class SGP4OrbitalState(AbstractAveragedOrbitalState):
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, averagedKeplerianWithMeanAngle: org.orekit.propagation.conversion.averaging.elements.AveragedKeplerianWithMeanAngle): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, averagedKeplerianWithMeanAngle: org.orekit.propagation.conversion.averaging.elements.AveragedKeplerianWithMeanAngle, dataContext: org.orekit.data.DataContext): ...
    def getAveragedElements(self) -> org.orekit.propagation.conversion.averaging.elements.AveragedKeplerianWithMeanAngle: ...
    def getMu(self) -> float: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    @staticmethod
    def of(tLE: org.orekit.propagation.analytical.tle.TLE, frame: org.orekit.frames.Frame) -> 'SGP4OrbitalState': ...
    def toOsculatingOrbit(self) -> org.orekit.orbits.Orbit: ...

class BrouwerLyddaneOrbitalState(org.orekit.propagation.conversion.averaging.AbstractHarmonicsBasedOrbitalState):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, averagedKeplerianWithMeanAngle: org.orekit.propagation.conversion.averaging.elements.AveragedKeplerianWithMeanAngle, frame: org.orekit.frames.Frame, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def getAveragedElements(self) -> org.orekit.propagation.conversion.averaging.elements.AveragedKeplerianWithMeanAngle: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def toOsculatingOrbit(self) -> org.orekit.orbits.Orbit: ...

class DSST6X0OrbitalState(org.orekit.propagation.conversion.averaging.AbstractHarmonicsBasedOrbitalState):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, averagedEquinoctialWithMeanAngle: org.orekit.propagation.conversion.averaging.elements.AveragedEquinoctialWithMeanAngle, frame: org.orekit.frames.Frame, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    @staticmethod
    def createForces(unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider) -> java.util.Collection[org.orekit.propagation.semianalytical.dsst.forces.DSSTForceModel]: ...
    def getAveragedElements(self) -> org.orekit.propagation.conversion.averaging.elements.AveragedEquinoctialWithMeanAngle: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def toOsculatingOrbit(self) -> org.orekit.orbits.Orbit: ...

class EcksteinHechlerOrbitalState(org.orekit.propagation.conversion.averaging.AbstractHarmonicsBasedOrbitalState):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, averagedCircularWithMeanAngle: org.orekit.propagation.conversion.averaging.elements.AveragedCircularWithMeanAngle, frame: org.orekit.frames.Frame, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def getAveragedElements(self) -> org.orekit.propagation.conversion.averaging.elements.AveragedCircularWithMeanAngle: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def toOsculatingOrbit(self) -> org.orekit.orbits.Orbit: ...

class AbstractHarmonicsBasedOrbitalState: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.conversion.averaging")``.

    AbstractAveragedOrbitalState: typing.Type[AbstractAveragedOrbitalState]
    AbstractHarmonicsBasedOrbitalState: typing.Type[AbstractHarmonicsBasedOrbitalState]
    AveragedOrbitalState: typing.Type[AveragedOrbitalState]
    BrouwerLyddaneOrbitalState: typing.Type[BrouwerLyddaneOrbitalState]
    DSST6X0OrbitalState: typing.Type[DSST6X0OrbitalState]
    EcksteinHechlerOrbitalState: typing.Type[EcksteinHechlerOrbitalState]
    PythonAbstractAveragedOrbitalState: typing.Type[PythonAbstractAveragedOrbitalState]
    SGP4OrbitalState: typing.Type[SGP4OrbitalState]
    converters: org.orekit.propagation.conversion.averaging.converters.__module_protocol__
    elements: org.orekit.propagation.conversion.averaging.elements.__module_protocol__
