import java.util
import java.util.stream
import org.hipparchus
import org.orekit.attitudes
import org.orekit.bodies
import org.orekit.forces
import org.orekit.forces.drag
import org.orekit.forces.gravity.potential
import org.orekit.forces.radiation
import org.orekit.frames
import org.orekit.models.earth.atmosphere
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.propagation.events
import org.orekit.propagation.semianalytical.dsst.utilities
import org.orekit.time
import org.orekit.utils
import typing



class DSSTForceModel(org.orekit.utils.ParameterDriversProvider, org.orekit.propagation.events.EventDetectorsProvider):
    _extractParameters_1__T = typing.TypeVar('_extractParameters_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def extractParameters(self, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def extractParameters(self, tArray: typing.List[_extractParameters_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_extractParameters_1__T]) -> typing.List[_extractParameters_1__T]: ...
    @typing.overload
    def getEventDetectors(self, list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[org.orekit.propagation.events.EventDetector]: ...
    @typing.overload
    def getEventDetectors(self) -> java.util.stream.Stream[org.orekit.propagation.events.EventDetector]: ...
    _getFieldEventDetectors_0__T = typing.TypeVar('_getFieldEventDetectors_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _getFieldEventDetectors_1__T = typing.TypeVar('_getFieldEventDetectors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_0__T], list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[org.orekit.propagation.events.FieldEventDetector[_getFieldEventDetectors_0__T]]: ...
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_1__T]) -> java.util.stream.Stream[org.orekit.propagation.events.FieldEventDetector[_getFieldEventDetectors_1__T]]: ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    _init_0__T = typing.TypeVar('_init_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_init_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_init_0__T]) -> None: ...
    @typing.overload
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List['ShortPeriodTerms']: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List['FieldShortPeriodTerms'[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

_FieldForceModelContext__T = typing.TypeVar('_FieldForceModelContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldForceModelContext(typing.Generic[_FieldForceModelContext__T]):
    def getFieldAuxiliaryElements(self) -> org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_FieldForceModelContext__T]: ...

_FieldShortPeriodTerms__T = typing.TypeVar('_FieldShortPeriodTerms__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldShortPeriodTerms(typing.Generic[_FieldShortPeriodTerms__T]):
    def getCoefficients(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldShortPeriodTerms__T], set: java.util.Set[str]) -> java.util.Map[str, typing.List[_FieldShortPeriodTerms__T]]: ...
    def getCoefficientsKeyPrefix(self) -> str: ...
    def value(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldShortPeriodTerms__T]) -> typing.List[_FieldShortPeriodTerms__T]: ...

class ForceModelContext:
    def getAuxiliaryElements(self) -> org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements: ...

class J2SquaredModel:
    _computeMeanEquinoctialSecondOrderTerms_1__T = typing.TypeVar('_computeMeanEquinoctialSecondOrderTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeMeanEquinoctialSecondOrderTerms(self, dSSTJ2SquaredClosedFormContext: 'DSSTJ2SquaredClosedFormContext') -> typing.List[float]: ...
    @typing.overload
    def computeMeanEquinoctialSecondOrderTerms(self, fieldDSSTJ2SquaredClosedFormContext: 'FieldDSSTJ2SquaredClosedFormContext'[_computeMeanEquinoctialSecondOrderTerms_1__T]) -> typing.List[_computeMeanEquinoctialSecondOrderTerms_1__T]: ...

class ShortPeriodTerms:
    def getCoefficients(self, absoluteDate: org.orekit.time.AbsoluteDate, set: java.util.Set[str]) -> java.util.Map[str, typing.List[float]]: ...
    def getCoefficientsKeyPrefix(self) -> str: ...
    def value(self, orbit: org.orekit.orbits.Orbit) -> typing.List[float]: ...

class AbstractGaussianContribution(DSSTForceModel):
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _init_0__T = typing.TypeVar('_init_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_init_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_init_0__T]) -> None: ...
    @typing.overload
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

class AbstractGaussianContributionContext(ForceModelContext):
    def getCo2AB(self) -> float: ...
    def getMeanMotion(self) -> float: ...
    def getMu(self) -> float: ...
    def getOOA(self) -> float: ...
    def getOOAB(self) -> float: ...
    def getOoBpo(self) -> float: ...
    def getOoMU(self) -> float: ...
    def getTon2a(self) -> float: ...

class DSSTJ2SquaredClosedForm(DSSTForceModel):
    def __init__(self, j2SquaredModel: J2SquaredModel, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

class DSSTJ2SquaredClosedFormContext(ForceModelContext):
    def __init__(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def getA4(self) -> float: ...
    def getAlpha4(self) -> float: ...
    def getC(self) -> float: ...
    def getEta(self) -> float: ...
    def getS2(self) -> float: ...

class DSSTNewtonianAttraction(DSSTForceModel):
    CENTRAL_ATTRACTION_COEFFICIENT: typing.ClassVar[str] = ...
    def __init__(self, double: float): ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getMu(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

class DSSTNewtonianAttractionContext(ForceModelContext):
    def __init__(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]): ...
    def getGM(self) -> float: ...

class DSSTTesseral(DSSTForceModel):
    SHORT_PERIOD_PREFIX: typing.ClassVar[str] = ...
    CM_COEFFICIENTS: typing.ClassVar[str] = ...
    SM_COEFFICIENTS: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, double: float, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, double: float, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int): ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

class DSSTTesseralContext(ForceModelContext):
    def getAx2oA(self) -> float: ...
    def getBoA(self) -> float: ...
    def getBoABpo(self) -> float: ...
    def getChi(self) -> float: ...
    def getChi2(self) -> float: ...
    def getCo2AB(self) -> float: ...
    def getE2(self) -> float: ...
    def getMeanMotion(self) -> float: ...
    def getMoa(self) -> float: ...
    def getOoAB(self) -> float: ...
    def getOrbitPeriod(self) -> float: ...
    def getRatio(self) -> float: ...
    def getRoa(self) -> float: ...
    def getTheta(self) -> float: ...

class DSSTThirdBody(DSSTForceModel):
    SHORT_PERIOD_PREFIX: typing.ClassVar[str] = ...
    ATTRACTION_COEFFICIENT: typing.ClassVar[str] = ...
    MAX_POWER: typing.ClassVar[int] = ...
    BIG_TRUNCATION_TOLERANCE: typing.ClassVar[float] = ...
    SMALL_TRUNCATION_TOLERANCE: typing.ClassVar[float] = ...
    def __init__(self, celestialBody: org.orekit.bodies.CelestialBody, double: float): ...
    def getBody(self) -> org.orekit.bodies.CelestialBody: ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

class DSSTThirdBodyDynamicContext(ForceModelContext):
    def __init__(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, celestialBody: org.orekit.bodies.CelestialBody, doubleArray: typing.List[float]): ...
    def getA(self) -> float: ...
    def getAlpha(self) -> float: ...
    def getBB(self) -> float: ...
    def getBBB(self) -> float: ...
    def getBeta(self) -> float: ...
    def getBoA(self) -> float: ...
    def getBoABpo(self) -> float: ...
    def getGamma(self) -> float: ...
    def getHXXX(self) -> float: ...
    def getKXXX(self) -> float: ...
    def getM2aoA(self) -> float: ...
    def getMCo2AB(self) -> float: ...
    def getMeanMotion(self) -> float: ...
    def getMuoR3(self) -> float: ...
    def getOoAB(self) -> float: ...
    def getR3(self) -> float: ...
    def getX(self) -> float: ...
    def getXX(self) -> float: ...
    def getb(self) -> float: ...

class DSSTThirdBodyStaticContext(ForceModelContext):
    def __init__(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, double: float, double2: float, doubleArray: typing.List[float]): ...
    def getMaxAR3Pow(self) -> int: ...
    def getMaxEccPow(self) -> int: ...
    def getMaxFreqF(self) -> int: ...

class DSSTZonal(DSSTForceModel):
    SHORT_PERIOD_PREFIX: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    @typing.overload
    def __init__(self, unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider, int: int, int2: int, int3: int): ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getProvider(self) -> org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

class DSSTZonalContext(ForceModelContext):
    def getBB(self) -> float: ...
    def getBoA(self) -> float: ...
    def getBoABpo(self) -> float: ...
    def getCXO2N2A2(self) -> float: ...
    def getHK(self) -> float: ...
    def getK2MH2(self) -> float: ...
    def getK2MH2O2(self) -> float: ...
    def getM2aoA(self) -> float: ...
    def getMCo2AB(self) -> float: ...
    def getMeanMotion(self) -> float: ...
    def getMuoa(self) -> float: ...
    def getOON2A2(self) -> float: ...
    def getOoAB(self) -> float: ...
    def getRoa(self) -> float: ...
    def getX(self) -> float: ...
    def getX2ON2A2XP1(self) -> float: ...
    def getX3ON2A(self) -> float: ...
    def getXON2A2(self) -> float: ...
    def getXX(self) -> float: ...
    def getXXX(self) -> float: ...

_FieldAbstractGaussianContributionContext__T = typing.TypeVar('_FieldAbstractGaussianContributionContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbstractGaussianContributionContext(FieldForceModelContext[_FieldAbstractGaussianContributionContext__T], typing.Generic[_FieldAbstractGaussianContributionContext__T]):
    def getA(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getCo2AB(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getMeanMotion(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getMu(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getOOA(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getOOAB(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getOoBpo(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getOoMU(self) -> _FieldAbstractGaussianContributionContext__T: ...
    def getTon2a(self) -> _FieldAbstractGaussianContributionContext__T: ...

_FieldDSSTJ2SquaredClosedFormContext__T = typing.TypeVar('_FieldDSSTJ2SquaredClosedFormContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDSSTJ2SquaredClosedFormContext(FieldForceModelContext[_FieldDSSTJ2SquaredClosedFormContext__T], typing.Generic[_FieldDSSTJ2SquaredClosedFormContext__T]):
    def __init__(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_FieldDSSTJ2SquaredClosedFormContext__T], unnormalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.UnnormalizedSphericalHarmonicsProvider): ...
    def getA4(self) -> _FieldDSSTJ2SquaredClosedFormContext__T: ...
    def getAlpha4(self) -> float: ...
    def getC(self) -> _FieldDSSTJ2SquaredClosedFormContext__T: ...
    def getEta(self) -> _FieldDSSTJ2SquaredClosedFormContext__T: ...
    def getS2(self) -> _FieldDSSTJ2SquaredClosedFormContext__T: ...

_FieldDSSTNewtonianAttractionContext__T = typing.TypeVar('_FieldDSSTNewtonianAttractionContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDSSTNewtonianAttractionContext(FieldForceModelContext[_FieldDSSTNewtonianAttractionContext__T], typing.Generic[_FieldDSSTNewtonianAttractionContext__T]):
    def getGM(self) -> _FieldDSSTNewtonianAttractionContext__T: ...

_FieldDSSTTesseralContext__T = typing.TypeVar('_FieldDSSTTesseralContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDSSTTesseralContext(FieldForceModelContext[_FieldDSSTTesseralContext__T], typing.Generic[_FieldDSSTTesseralContext__T]):
    def getAx2oA(self) -> _FieldDSSTTesseralContext__T: ...
    def getBoA(self) -> _FieldDSSTTesseralContext__T: ...
    def getBoABpo(self) -> _FieldDSSTTesseralContext__T: ...
    def getChi(self) -> _FieldDSSTTesseralContext__T: ...
    def getChi2(self) -> _FieldDSSTTesseralContext__T: ...
    def getCo2AB(self) -> _FieldDSSTTesseralContext__T: ...
    def getE2(self) -> _FieldDSSTTesseralContext__T: ...
    def getMeanMotion(self) -> _FieldDSSTTesseralContext__T: ...
    def getMoa(self) -> _FieldDSSTTesseralContext__T: ...
    def getOoAB(self) -> _FieldDSSTTesseralContext__T: ...
    def getOrbitPeriod(self) -> _FieldDSSTTesseralContext__T: ...
    def getRatio(self) -> _FieldDSSTTesseralContext__T: ...
    def getRoa(self) -> _FieldDSSTTesseralContext__T: ...
    def getTheta(self) -> _FieldDSSTTesseralContext__T: ...

_FieldDSSTThirdBodyDynamicContext__T = typing.TypeVar('_FieldDSSTThirdBodyDynamicContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDSSTThirdBodyDynamicContext(FieldForceModelContext[_FieldDSSTThirdBodyDynamicContext__T], typing.Generic[_FieldDSSTThirdBodyDynamicContext__T]):
    def __init__(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_FieldDSSTThirdBodyDynamicContext__T], celestialBody: org.orekit.bodies.CelestialBody, tArray: typing.List[_FieldDSSTThirdBodyDynamicContext__T]): ...
    def getA(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getAlpha(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getBB(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getBBB(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getBeta(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getBoA(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getBoABpo(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getGamma(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getHXXX(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getKXXX(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getM2aoA(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getMCo2AB(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getMeanMotion(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getMuoR3(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getOoAB(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getR3(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getX(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getXX(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...
    def getb(self) -> _FieldDSSTThirdBodyDynamicContext__T: ...

_FieldDSSTZonalContext__T = typing.TypeVar('_FieldDSSTZonalContext__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDSSTZonalContext(FieldForceModelContext[_FieldDSSTZonalContext__T], typing.Generic[_FieldDSSTZonalContext__T]):
    def getBB(self) -> _FieldDSSTZonalContext__T: ...
    def getBoA(self) -> _FieldDSSTZonalContext__T: ...
    def getBoABpo(self) -> _FieldDSSTZonalContext__T: ...
    def getCXO2N2A2(self) -> _FieldDSSTZonalContext__T: ...
    def getHK(self) -> _FieldDSSTZonalContext__T: ...
    def getK2MH2(self) -> _FieldDSSTZonalContext__T: ...
    def getK2MH2O2(self) -> _FieldDSSTZonalContext__T: ...
    def getM2aoA(self) -> _FieldDSSTZonalContext__T: ...
    def getMCo2AB(self) -> _FieldDSSTZonalContext__T: ...
    def getMeanMotion(self) -> _FieldDSSTZonalContext__T: ...
    def getMuoa(self) -> _FieldDSSTZonalContext__T: ...
    def getOON2A2(self) -> _FieldDSSTZonalContext__T: ...
    def getOoAB(self) -> _FieldDSSTZonalContext__T: ...
    def getRoa(self) -> _FieldDSSTZonalContext__T: ...
    def getX(self) -> _FieldDSSTZonalContext__T: ...
    def getX2ON2A2XP1(self) -> _FieldDSSTZonalContext__T: ...
    def getX3ON2A(self) -> _FieldDSSTZonalContext__T: ...
    def getXON2A2(self) -> _FieldDSSTZonalContext__T: ...
    def getXX(self) -> _FieldDSSTZonalContext__T: ...
    def getXXX(self) -> _FieldDSSTZonalContext__T: ...

class PythonDSSTForceModel(DSSTForceModel):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getMeanElementRate_1__T = typing.TypeVar('_getMeanElementRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getMeanElementRate(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getMeanElementRate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getMeanElementRate_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getMeanElementRate_1__T], tArray: typing.List[_getMeanElementRate_1__T]) -> typing.List[_getMeanElementRate_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _initializeShortPeriodTerms_1__T = typing.TypeVar('_initializeShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def initializeShortPeriodTerms(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements, propagationType: org.orekit.propagation.PropagationType, doubleArray: typing.List[float]) -> java.util.List[ShortPeriodTerms]: ...
    @typing.overload
    def initializeShortPeriodTerms(self, fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_initializeShortPeriodTerms_1__T], propagationType: org.orekit.propagation.PropagationType, tArray: typing.List[_initializeShortPeriodTerms_1__T]) -> java.util.List[FieldShortPeriodTerms[_initializeShortPeriodTerms_1__T]]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def registerAttitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> None: ...
    _updateShortPeriodTerms_1__T = typing.TypeVar('_updateShortPeriodTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def updateShortPeriodTerms(self, doubleArray: typing.List[float], *spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
    @typing.overload
    def updateShortPeriodTerms(self, tArray: typing.List[_updateShortPeriodTerms_1__T], *fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_updateShortPeriodTerms_1__T]) -> None: ...

_PythonFieldShortPeriodTerms__T = typing.TypeVar('_PythonFieldShortPeriodTerms__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldShortPeriodTerms(FieldShortPeriodTerms[_PythonFieldShortPeriodTerms__T], typing.Generic[_PythonFieldShortPeriodTerms__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getCoefficients(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldShortPeriodTerms__T], set: java.util.Set[str]) -> java.util.Map[str, typing.List[_PythonFieldShortPeriodTerms__T]]: ...
    def getCoefficientsKeyPrefix(self) -> str: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_PythonFieldShortPeriodTerms__T]) -> typing.List[_PythonFieldShortPeriodTerms__T]: ...

class PythonForceModelContext(ForceModelContext):
    def __init__(self, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonJ2SquaredModel(J2SquaredModel):
    def __init__(self): ...
    _computeMeanEquinoctialSecondOrderTerms_1__T = typing.TypeVar('_computeMeanEquinoctialSecondOrderTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeMeanEquinoctialSecondOrderTerms(self, dSSTJ2SquaredClosedFormContext: DSSTJ2SquaredClosedFormContext) -> typing.List[float]: ...
    @typing.overload
    def computeMeanEquinoctialSecondOrderTerms(self, fieldDSSTJ2SquaredClosedFormContext: FieldDSSTJ2SquaredClosedFormContext[_computeMeanEquinoctialSecondOrderTerms_1__T]) -> typing.List[_computeMeanEquinoctialSecondOrderTerms_1__T]: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonShortPeriodTerms(ShortPeriodTerms):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getCoefficients(self, absoluteDate: org.orekit.time.AbsoluteDate, set: java.util.Set[str]) -> java.util.Map[str, typing.List[float]]: ...
    def getCoefficientsKeyPrefix(self) -> str: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, orbit: org.orekit.orbits.Orbit) -> typing.List[float]: ...

class ZeisModel(J2SquaredModel):
    def __init__(self): ...
    _computeC2Z_1__T = typing.TypeVar('_computeC2Z_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeC2Z(self, dSSTJ2SquaredClosedFormContext: DSSTJ2SquaredClosedFormContext) -> float: ...
    @typing.overload
    def computeC2Z(self, fieldDSSTJ2SquaredClosedFormContext: FieldDSSTJ2SquaredClosedFormContext[_computeC2Z_1__T]) -> _computeC2Z_1__T: ...
    _computeMeanEquinoctialSecondOrderTerms_1__T = typing.TypeVar('_computeMeanEquinoctialSecondOrderTerms_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeMeanEquinoctialSecondOrderTerms(self, dSSTJ2SquaredClosedFormContext: DSSTJ2SquaredClosedFormContext) -> typing.List[float]: ...
    @typing.overload
    def computeMeanEquinoctialSecondOrderTerms(self, fieldDSSTJ2SquaredClosedFormContext: FieldDSSTJ2SquaredClosedFormContext[_computeMeanEquinoctialSecondOrderTerms_1__T]) -> typing.List[_computeMeanEquinoctialSecondOrderTerms_1__T]: ...

class DSSTAtmosphericDrag(AbstractGaussianContribution):
    @typing.overload
    def __init__(self, dragForce: org.orekit.forces.drag.DragForce, double: float): ...
    @typing.overload
    def __init__(self, atmosphere: org.orekit.models.earth.atmosphere.Atmosphere, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, atmosphere: org.orekit.models.earth.atmosphere.Atmosphere, dragSensitive: org.orekit.forces.drag.DragSensitive, double: float): ...
    def getAtmosphere(self) -> org.orekit.models.earth.atmosphere.Atmosphere: ...
    def getDrag(self) -> org.orekit.forces.drag.DragForce: ...
    @typing.overload
    def getEventDetectors(self, list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[org.orekit.propagation.events.EventDetector]: ...
    @typing.overload
    def getEventDetectors(self) -> java.util.stream.Stream[org.orekit.propagation.events.EventDetector]: ...
    _getFieldEventDetectors_0__T = typing.TypeVar('_getFieldEventDetectors_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _getFieldEventDetectors_1__T = typing.TypeVar('_getFieldEventDetectors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_0__T], list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[org.orekit.propagation.events.FieldEventDetector[_getFieldEventDetectors_0__T]]: ...
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_1__T]) -> java.util.stream.Stream[org.orekit.propagation.events.FieldEventDetector[_getFieldEventDetectors_1__T]]: ...
    def getRbar(self) -> float: ...
    def getSpacecraft(self) -> org.orekit.forces.drag.DragSensitive: ...
    def setRbar(self, double: float) -> None: ...

class DSSTSolarRadiationPressure(AbstractGaussianContribution):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double5: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double3: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, radiationSensitive: org.orekit.forces.radiation.RadiationSensitive, double3: float): ...
    @typing.overload
    def __init__(self, extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, radiationSensitive: org.orekit.forces.radiation.RadiationSensitive, double: float): ...
    def getEquatorialRadius(self) -> float: ...
    def getSpacecraft(self) -> org.orekit.forces.radiation.RadiationSensitive: ...

class PythonAbstractGaussianContribution(AbstractGaussianContribution):
    def __init__(self, string: str, double: float, forceModel: org.orekit.forces.ForceModel, double2: float): ...
    def finalize(self) -> None: ...
    _getLLimits_1__T = typing.TypeVar('_getLLimits_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getLLimits(self, spacecraftState: org.orekit.propagation.SpacecraftState, auxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.AuxiliaryElements) -> typing.List[float]: ...
    @typing.overload
    def getLLimits(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_getLLimits_1__T], fieldAuxiliaryElements: org.orekit.propagation.semianalytical.dsst.utilities.FieldAuxiliaryElements[_getLLimits_1__T]) -> typing.List[_getLLimits_1__T]: ...
    def getParametersDriversWithoutMu(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.semianalytical.dsst.forces")``.

    AbstractGaussianContribution: typing.Type[AbstractGaussianContribution]
    AbstractGaussianContributionContext: typing.Type[AbstractGaussianContributionContext]
    DSSTAtmosphericDrag: typing.Type[DSSTAtmosphericDrag]
    DSSTForceModel: typing.Type[DSSTForceModel]
    DSSTJ2SquaredClosedForm: typing.Type[DSSTJ2SquaredClosedForm]
    DSSTJ2SquaredClosedFormContext: typing.Type[DSSTJ2SquaredClosedFormContext]
    DSSTNewtonianAttraction: typing.Type[DSSTNewtonianAttraction]
    DSSTNewtonianAttractionContext: typing.Type[DSSTNewtonianAttractionContext]
    DSSTSolarRadiationPressure: typing.Type[DSSTSolarRadiationPressure]
    DSSTTesseral: typing.Type[DSSTTesseral]
    DSSTTesseralContext: typing.Type[DSSTTesseralContext]
    DSSTThirdBody: typing.Type[DSSTThirdBody]
    DSSTThirdBodyDynamicContext: typing.Type[DSSTThirdBodyDynamicContext]
    DSSTThirdBodyStaticContext: typing.Type[DSSTThirdBodyStaticContext]
    DSSTZonal: typing.Type[DSSTZonal]
    DSSTZonalContext: typing.Type[DSSTZonalContext]
    FieldAbstractGaussianContributionContext: typing.Type[FieldAbstractGaussianContributionContext]
    FieldDSSTJ2SquaredClosedFormContext: typing.Type[FieldDSSTJ2SquaredClosedFormContext]
    FieldDSSTNewtonianAttractionContext: typing.Type[FieldDSSTNewtonianAttractionContext]
    FieldDSSTTesseralContext: typing.Type[FieldDSSTTesseralContext]
    FieldDSSTThirdBodyDynamicContext: typing.Type[FieldDSSTThirdBodyDynamicContext]
    FieldDSSTZonalContext: typing.Type[FieldDSSTZonalContext]
    FieldForceModelContext: typing.Type[FieldForceModelContext]
    FieldShortPeriodTerms: typing.Type[FieldShortPeriodTerms]
    ForceModelContext: typing.Type[ForceModelContext]
    J2SquaredModel: typing.Type[J2SquaredModel]
    PythonAbstractGaussianContribution: typing.Type[PythonAbstractGaussianContribution]
    PythonDSSTForceModel: typing.Type[PythonDSSTForceModel]
    PythonFieldShortPeriodTerms: typing.Type[PythonFieldShortPeriodTerms]
    PythonForceModelContext: typing.Type[PythonForceModelContext]
    PythonJ2SquaredModel: typing.Type[PythonJ2SquaredModel]
    PythonShortPeriodTerms: typing.Type[PythonShortPeriodTerms]
    ShortPeriodTerms: typing.Type[ShortPeriodTerms]
    ZeisModel: typing.Type[ZeisModel]
