import java.lang
import java.util
import org.hipparchus
import org.hipparchus.analysis.differentiation
import org.hipparchus.geometry.euclidean.threed
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation.semianalytical.dsst.utilities.hansen
import org.orekit.time
import typing



class AuxiliaryElements:
    def __init__(self, orbit: org.orekit.orbits.Orbit, int: int): ...
    def getAlpha(self) -> float: ...
    def getB(self) -> float: ...
    def getBeta(self) -> float: ...
    def getC(self) -> float: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getEcc(self) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getGamma(self) -> float: ...
    def getH(self) -> float: ...
    def getK(self) -> float: ...
    def getKeplerianPeriod(self) -> float: ...
    def getLM(self) -> float: ...
    def getLf(self) -> float: ...
    def getLv(self) -> float: ...
    def getMeanMotion(self) -> float: ...
    def getOrbit(self) -> org.orekit.orbits.Orbit: ...
    def getP(self) -> float: ...
    def getQ(self) -> float: ...
    def getRetrogradeFactor(self) -> int: ...
    def getSma(self) -> float: ...
    def getVectorF(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVectorG(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVectorW(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class CjSjCoefficient:
    def __init__(self, double: float, double2: float): ...
    def getCj(self, int: int) -> float: ...
    def getDcjDh(self, int: int) -> float: ...
    def getDcjDk(self, int: int) -> float: ...
    def getDsjDh(self, int: int) -> float: ...
    def getDsjDk(self, int: int) -> float: ...
    def getSj(self, int: int) -> float: ...

class CoefficientsFactory:
    _computeGsHs_1__T = typing.TypeVar('_computeGsHs_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def computeGsHs(double: float, double2: float, double3: float, double4: float, int: int) -> typing.List[typing.List[float]]: ...
    @typing.overload
    @staticmethod
    def computeGsHs(t: _computeGsHs_1__T, t2: _computeGsHs_1__T, t3: _computeGsHs_1__T, t4: _computeGsHs_1__T, int: int, field: org.hipparchus.Field[_computeGsHs_1__T]) -> typing.List[typing.List[_computeGsHs_1__T]]: ...
    _computeQns_1__T = typing.TypeVar('_computeQns_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def computeQns(double: float, int: int, int2: int) -> typing.List[typing.List[float]]: ...
    @typing.overload
    @staticmethod
    def computeQns(t: _computeQns_1__T, int: int, int2: int) -> typing.List[typing.List[_computeQns_1__T]]: ...
    @staticmethod
    def computeVns(int: int) -> java.util.SortedMap['CoefficientsFactory.NSKey', float]: ...
    @staticmethod
    def getVmns(int: int, int2: int, int3: int) -> float: ...
    class NSKey(java.lang.Comparable['CoefficientsFactory.NSKey']):
        def __init__(self, int: int, int2: int): ...
        def compareTo(self, nSKey: 'CoefficientsFactory.NSKey') -> int: ...
        def equals(self, object: typing.Any) -> bool: ...
        def getN(self) -> int: ...
        def getS(self) -> int: ...
        def hashCode(self) -> int: ...

_FieldAuxiliaryElements__T = typing.TypeVar('_FieldAuxiliaryElements__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAuxiliaryElements(typing.Generic[_FieldAuxiliaryElements__T]):
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldAuxiliaryElements__T], int: int): ...
    def getAlpha(self) -> _FieldAuxiliaryElements__T: ...
    def getB(self) -> _FieldAuxiliaryElements__T: ...
    def getBeta(self) -> _FieldAuxiliaryElements__T: ...
    def getC(self) -> _FieldAuxiliaryElements__T: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldAuxiliaryElements__T]: ...
    def getEcc(self) -> _FieldAuxiliaryElements__T: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getGamma(self) -> _FieldAuxiliaryElements__T: ...
    def getH(self) -> _FieldAuxiliaryElements__T: ...
    def getK(self) -> _FieldAuxiliaryElements__T: ...
    def getKeplerianPeriod(self) -> _FieldAuxiliaryElements__T: ...
    def getLM(self) -> _FieldAuxiliaryElements__T: ...
    def getLe(self) -> _FieldAuxiliaryElements__T: ...
    def getLv(self) -> _FieldAuxiliaryElements__T: ...
    def getMeanMotion(self) -> _FieldAuxiliaryElements__T: ...
    def getOrbit(self) -> org.orekit.orbits.FieldOrbit[_FieldAuxiliaryElements__T]: ...
    def getP(self) -> _FieldAuxiliaryElements__T: ...
    def getQ(self) -> _FieldAuxiliaryElements__T: ...
    def getRetrogradeFactor(self) -> int: ...
    def getSma(self) -> _FieldAuxiliaryElements__T: ...
    def getVectorF(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAuxiliaryElements__T]: ...
    def getVectorG(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAuxiliaryElements__T]: ...
    def getVectorW(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAuxiliaryElements__T]: ...
    def toAuxiliaryElements(self) -> AuxiliaryElements: ...

_FieldCjSjCoefficient__T = typing.TypeVar('_FieldCjSjCoefficient__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCjSjCoefficient(typing.Generic[_FieldCjSjCoefficient__T]):
    def __init__(self, t: _FieldCjSjCoefficient__T, t2: _FieldCjSjCoefficient__T, field: org.hipparchus.Field[_FieldCjSjCoefficient__T]): ...
    def getCj(self, int: int) -> _FieldCjSjCoefficient__T: ...
    def getDcjDh(self, int: int) -> _FieldCjSjCoefficient__T: ...
    def getDcjDk(self, int: int) -> _FieldCjSjCoefficient__T: ...
    def getDsjDh(self, int: int) -> _FieldCjSjCoefficient__T: ...
    def getDsjDk(self, int: int) -> _FieldCjSjCoefficient__T: ...
    def getSj(self, int: int) -> _FieldCjSjCoefficient__T: ...

_FieldGHIJjsPolynomials__T = typing.TypeVar('_FieldGHIJjsPolynomials__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGHIJjsPolynomials(typing.Generic[_FieldGHIJjsPolynomials__T]):
    def __init__(self, t: _FieldGHIJjsPolynomials__T, t2: _FieldGHIJjsPolynomials__T, t3: _FieldGHIJjsPolynomials__T, t4: _FieldGHIJjsPolynomials__T): ...
    def getGjs(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getHjs(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getIjs(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getJjs(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdGjsdAlpha(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdGjsdBeta(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdGjsdh(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdGjsdk(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdHjsdAlpha(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdHjsdBeta(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdHjsdh(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdHjsdk(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdIjsdAlpha(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdIjsdBeta(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdIjsdh(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdIjsdk(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdJjsdAlpha(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdJjsdBeta(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdJjsdh(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...
    def getdJjsdk(self, int: int, int2: int) -> _FieldGHIJjsPolynomials__T: ...

_FieldGHmsjPolynomials__T = typing.TypeVar('_FieldGHmsjPolynomials__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGHmsjPolynomials(typing.Generic[_FieldGHmsjPolynomials__T]):
    def __init__(self, t: _FieldGHmsjPolynomials__T, t2: _FieldGHmsjPolynomials__T, t3: _FieldGHmsjPolynomials__T, t4: _FieldGHmsjPolynomials__T, int: int, field: org.hipparchus.Field[_FieldGHmsjPolynomials__T]): ...
    def getGmsj(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getHmsj(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdGmsdAlpha(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdGmsdBeta(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdGmsdh(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdGmsdk(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdHmsdAlpha(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdHmsdBeta(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdHmsdh(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...
    def getdHmsdk(self, int: int, int2: int, int3: int) -> _FieldGHmsjPolynomials__T: ...

_FieldGammaMnsFunction__T = typing.TypeVar('_FieldGammaMnsFunction__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGammaMnsFunction(typing.Generic[_FieldGammaMnsFunction__T]):
    def __init__(self, int: int, t: _FieldGammaMnsFunction__T, int2: int, field: org.hipparchus.Field[_FieldGammaMnsFunction__T]): ...
    def getDerivative(self, int: int, int2: int, int3: int) -> _FieldGammaMnsFunction__T: ...
    def getValue(self, int: int, int2: int, int3: int) -> _FieldGammaMnsFunction__T: ...

_FieldInterpolationGrid__T = typing.TypeVar('_FieldInterpolationGrid__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldInterpolationGrid(typing.Generic[_FieldInterpolationGrid__T]):
    def getGridPoints(self, t: _FieldInterpolationGrid__T, t2: _FieldInterpolationGrid__T) -> typing.List[_FieldInterpolationGrid__T]: ...

_FieldLnsCoefficients__T = typing.TypeVar('_FieldLnsCoefficients__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLnsCoefficients(typing.Generic[_FieldLnsCoefficients__T]):
    def __init__(self, int: int, int2: int, tArray: typing.List[typing.List[_FieldLnsCoefficients__T]], sortedMap: java.util.SortedMap[CoefficientsFactory.NSKey, float], t2: _FieldLnsCoefficients__T, field: org.hipparchus.Field[_FieldLnsCoefficients__T]): ...
    def getLns(self, int: int, int2: int) -> _FieldLnsCoefficients__T: ...
    def getdLnsdGamma(self, int: int, int2: int) -> _FieldLnsCoefficients__T: ...

_FieldShortPeriodicsInterpolatedCoefficient__T = typing.TypeVar('_FieldShortPeriodicsInterpolatedCoefficient__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldShortPeriodicsInterpolatedCoefficient(typing.Generic[_FieldShortPeriodicsInterpolatedCoefficient__T]):
    def __init__(self, int: int): ...
    def addGridPoint(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldShortPeriodicsInterpolatedCoefficient__T], tArray: typing.List[_FieldShortPeriodicsInterpolatedCoefficient__T]) -> None: ...
    def clearHistory(self) -> None: ...
    def value(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldShortPeriodicsInterpolatedCoefficient__T]) -> typing.List[_FieldShortPeriodicsInterpolatedCoefficient__T]: ...

class GHIJjsPolynomials:
    def __init__(self, double: float, double2: float, double3: float, double4: float): ...
    def getGjs(self, int: int, int2: int) -> float: ...
    def getHjs(self, int: int, int2: int) -> float: ...
    def getIjs(self, int: int, int2: int) -> float: ...
    def getJjs(self, int: int, int2: int) -> float: ...
    def getdGjsdAlpha(self, int: int, int2: int) -> float: ...
    def getdGjsdBeta(self, int: int, int2: int) -> float: ...
    def getdGjsdh(self, int: int, int2: int) -> float: ...
    def getdGjsdk(self, int: int, int2: int) -> float: ...
    def getdHjsdAlpha(self, int: int, int2: int) -> float: ...
    def getdHjsdBeta(self, int: int, int2: int) -> float: ...
    def getdHjsdh(self, int: int, int2: int) -> float: ...
    def getdHjsdk(self, int: int, int2: int) -> float: ...
    def getdIjsdAlpha(self, int: int, int2: int) -> float: ...
    def getdIjsdBeta(self, int: int, int2: int) -> float: ...
    def getdIjsdh(self, int: int, int2: int) -> float: ...
    def getdIjsdk(self, int: int, int2: int) -> float: ...
    def getdJjsdAlpha(self, int: int, int2: int) -> float: ...
    def getdJjsdBeta(self, int: int, int2: int) -> float: ...
    def getdJjsdh(self, int: int, int2: int) -> float: ...
    def getdJjsdk(self, int: int, int2: int) -> float: ...

class GHmsjPolynomials:
    def __init__(self, double: float, double2: float, double3: float, double4: float, int: int): ...
    def getGmsj(self, int: int, int2: int, int3: int) -> float: ...
    def getHmsj(self, int: int, int2: int, int3: int) -> float: ...
    def getdGmsdAlpha(self, int: int, int2: int, int3: int) -> float: ...
    def getdGmsdBeta(self, int: int, int2: int, int3: int) -> float: ...
    def getdGmsdh(self, int: int, int2: int, int3: int) -> float: ...
    def getdGmsdk(self, int: int, int2: int, int3: int) -> float: ...
    def getdHmsdAlpha(self, int: int, int2: int, int3: int) -> float: ...
    def getdHmsdBeta(self, int: int, int2: int, int3: int) -> float: ...
    def getdHmsdh(self, int: int, int2: int, int3: int) -> float: ...
    def getdHmsdk(self, int: int, int2: int, int3: int) -> float: ...

class GammaMnsFunction:
    def __init__(self, int: int, double: float, int2: int): ...
    def getDerivative(self, int: int, int2: int, int3: int) -> float: ...
    def getValue(self, int: int, int2: int, int3: int) -> float: ...

class InterpolationGrid:
    def getGridPoints(self, double: float, double2: float) -> typing.List[float]: ...

class JacobiPolynomials:
    _getValue_0__T = typing.TypeVar('_getValue_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def getValue(int: int, int2: int, int3: int, fieldGradient: org.hipparchus.analysis.differentiation.FieldGradient[_getValue_0__T]) -> org.hipparchus.analysis.differentiation.FieldGradient[_getValue_0__T]: ...
    @typing.overload
    @staticmethod
    def getValue(int: int, int2: int, int3: int, gradient: org.hipparchus.analysis.differentiation.Gradient) -> org.hipparchus.analysis.differentiation.Gradient: ...
    @staticmethod
    def getValueAndDerivative(int: int, int2: int, int3: int, double: float) -> typing.List[float]: ...

class LnsCoefficients:
    def __init__(self, int: int, int2: int, doubleArray: typing.List[typing.List[float]], sortedMap: java.util.SortedMap[CoefficientsFactory.NSKey, float], double2: float): ...
    def getLns(self, int: int, int2: int) -> float: ...
    def getdLnsdGamma(self, int: int, int2: int) -> float: ...

class NewcombOperators:
    @staticmethod
    def getValue(int: int, int2: int, int3: int, int4: int) -> float: ...

class ShortPeriodicsInterpolatedCoefficient:
    def __init__(self, int: int): ...
    def addGridPoint(self, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float]) -> None: ...
    def clearHistory(self) -> None: ...
    def value(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...

class UpperBounds:
    _getDnl_1__T = typing.TypeVar('_getDnl_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def getDnl(double: float, double2: float, int: int, int2: int) -> float: ...
    @typing.overload
    @staticmethod
    def getDnl(t: _getDnl_1__T, t2: _getDnl_1__T, int: int, int2: int) -> _getDnl_1__T: ...
    _getRnml_1__T = typing.TypeVar('_getRnml_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def getRnml(double: float, int: int, int2: int, int3: int, int4: int, int5: int) -> float: ...
    @typing.overload
    @staticmethod
    def getRnml(t: _getRnml_1__T, int: int, int2: int, int3: int, int4: int, int5: int) -> _getRnml_1__T: ...

_FieldFixedNumberInterpolationGrid__T = typing.TypeVar('_FieldFixedNumberInterpolationGrid__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldFixedNumberInterpolationGrid(FieldInterpolationGrid[_FieldFixedNumberInterpolationGrid__T], typing.Generic[_FieldFixedNumberInterpolationGrid__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldFixedNumberInterpolationGrid__T], int: int): ...
    def getGridPoints(self, t: _FieldFixedNumberInterpolationGrid__T, t2: _FieldFixedNumberInterpolationGrid__T) -> typing.List[_FieldFixedNumberInterpolationGrid__T]: ...

_FieldMaxGapInterpolationGrid__T = typing.TypeVar('_FieldMaxGapInterpolationGrid__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldMaxGapInterpolationGrid(FieldInterpolationGrid[_FieldMaxGapInterpolationGrid__T], typing.Generic[_FieldMaxGapInterpolationGrid__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldMaxGapInterpolationGrid__T], t: _FieldMaxGapInterpolationGrid__T): ...
    def getGridPoints(self, t: _FieldMaxGapInterpolationGrid__T, t2: _FieldMaxGapInterpolationGrid__T) -> typing.List[_FieldMaxGapInterpolationGrid__T]: ...

class FixedNumberInterpolationGrid(InterpolationGrid):
    def __init__(self, int: int): ...
    def getGridPoints(self, double: float, double2: float) -> typing.List[float]: ...

class MaxGapInterpolationGrid(InterpolationGrid):
    def __init__(self, double: float): ...
    def getGridPoints(self, double: float, double2: float) -> typing.List[float]: ...

_PythonFieldInterpolationGrid__T = typing.TypeVar('_PythonFieldInterpolationGrid__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldInterpolationGrid(FieldInterpolationGrid[_PythonFieldInterpolationGrid__T], typing.Generic[_PythonFieldInterpolationGrid__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getGridPoints(self, t: _PythonFieldInterpolationGrid__T, t2: _PythonFieldInterpolationGrid__T) -> typing.List[_PythonFieldInterpolationGrid__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonInterpolationGrid(InterpolationGrid):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getGridPoints(self, double: float, double2: float) -> typing.List[float]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.semianalytical.dsst.utilities")``.

    AuxiliaryElements: typing.Type[AuxiliaryElements]
    CjSjCoefficient: typing.Type[CjSjCoefficient]
    CoefficientsFactory: typing.Type[CoefficientsFactory]
    FieldAuxiliaryElements: typing.Type[FieldAuxiliaryElements]
    FieldCjSjCoefficient: typing.Type[FieldCjSjCoefficient]
    FieldFixedNumberInterpolationGrid: typing.Type[FieldFixedNumberInterpolationGrid]
    FieldGHIJjsPolynomials: typing.Type[FieldGHIJjsPolynomials]
    FieldGHmsjPolynomials: typing.Type[FieldGHmsjPolynomials]
    FieldGammaMnsFunction: typing.Type[FieldGammaMnsFunction]
    FieldInterpolationGrid: typing.Type[FieldInterpolationGrid]
    FieldLnsCoefficients: typing.Type[FieldLnsCoefficients]
    FieldMaxGapInterpolationGrid: typing.Type[FieldMaxGapInterpolationGrid]
    FieldShortPeriodicsInterpolatedCoefficient: typing.Type[FieldShortPeriodicsInterpolatedCoefficient]
    FixedNumberInterpolationGrid: typing.Type[FixedNumberInterpolationGrid]
    GHIJjsPolynomials: typing.Type[GHIJjsPolynomials]
    GHmsjPolynomials: typing.Type[GHmsjPolynomials]
    GammaMnsFunction: typing.Type[GammaMnsFunction]
    InterpolationGrid: typing.Type[InterpolationGrid]
    JacobiPolynomials: typing.Type[JacobiPolynomials]
    LnsCoefficients: typing.Type[LnsCoefficients]
    MaxGapInterpolationGrid: typing.Type[MaxGapInterpolationGrid]
    NewcombOperators: typing.Type[NewcombOperators]
    PythonFieldInterpolationGrid: typing.Type[PythonFieldInterpolationGrid]
    PythonInterpolationGrid: typing.Type[PythonInterpolationGrid]
    ShortPeriodicsInterpolatedCoefficient: typing.Type[ShortPeriodicsInterpolatedCoefficient]
    UpperBounds: typing.Type[UpperBounds]
    hansen: org.orekit.propagation.semianalytical.dsst.utilities.hansen.__module_protocol__
