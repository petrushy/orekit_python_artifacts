import java.lang
import java.util
import java.util.function
import java.util.stream
import org.hipparchus
import org.hipparchus.geometry.spherical.twod
import org.hipparchus.ode.events
import org.orekit.bodies
import org.orekit.data
import org.orekit.frames
import org.orekit.geometry.fov
import org.orekit.models
import org.orekit.models.earth
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.propagation.events.handlers
import org.orekit.propagation.events.intervals
import org.orekit.propagation.sampling
import org.orekit.time
import org.orekit.utils
import typing



class AdaptableInterval:
    def currentInterval(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    @staticmethod
    def of(double: float) -> 'AdaptableInterval': ...

class EnablingPredicate:
    def eventIsEnabled(self, spacecraftState: org.orekit.propagation.SpacecraftState, eventDetector: 'EventDetector', double: float) -> bool: ...

class EventDetector:
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.EventHandler: ...
    def getMaxCheckInterval(self) -> AdaptableInterval: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class EventDetectorsProvider:
    DATATION_ACCURACY: typing.ClassVar[float] = ...
    @typing.overload
    def getEventDetectors(self) -> java.util.stream.Stream[EventDetector]: ...
    @typing.overload
    def getEventDetectors(self, list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[EventDetector]: ...
    _getFieldEventDetectors_0__T = typing.TypeVar('_getFieldEventDetectors_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _getFieldEventDetectors_1__T = typing.TypeVar('_getFieldEventDetectors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_0__T]) -> java.util.stream.Stream['FieldEventDetector'[_getFieldEventDetectors_0__T]]: ...
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_1__T], list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream['FieldEventDetector'[_getFieldEventDetectors_1__T]]: ...

_EventState__T = typing.TypeVar('_EventState__T', bound=EventDetector)  # <T>
class EventState(typing.Generic[_EventState__T]):
    def __init__(self, t: _EventState__T): ...
    def doEvent(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> 'EventState.EventOccurrence': ...
    def evaluateStep(self, orekitStepInterpolator: org.orekit.propagation.sampling.OrekitStepInterpolator) -> bool: ...
    def getEventDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getEventDetector(self) -> _EventState__T: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def reinitializeBegin(self, orekitStepInterpolator: org.orekit.propagation.sampling.OrekitStepInterpolator) -> None: ...
    def tryAdvance(self, spacecraftState: org.orekit.propagation.SpacecraftState, orekitStepInterpolator: org.orekit.propagation.sampling.OrekitStepInterpolator) -> bool: ...
    class EventOccurrence:
        def getAction(self) -> org.hipparchus.ode.events.Action: ...
        def getNewState(self) -> org.orekit.propagation.SpacecraftState: ...
        def getStopDate(self) -> org.orekit.time.AbsoluteDate: ...

class EventsLogger:
    def __init__(self): ...
    def clearLoggedEvents(self) -> None: ...
    def getLoggedEvents(self) -> java.util.List['EventsLogger.LoggedEvent']: ...
    _monitorDetector__T = typing.TypeVar('_monitorDetector__T', bound=EventDetector)  # <T>
    def monitorDetector(self, t: _monitorDetector__T) -> EventDetector: ...
    class LoggedEvent(org.orekit.time.TimeStamped):
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getEventDetector(self) -> EventDetector: ...
        def getState(self) -> org.orekit.propagation.SpacecraftState: ...
        def isIncreasing(self) -> bool: ...

_FieldAdaptableInterval__T = typing.TypeVar('_FieldAdaptableInterval__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAdaptableInterval(typing.Generic[_FieldAdaptableInterval__T]):
    def currentInterval(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldAdaptableInterval__T]) -> float: ...
    _of__T = typing.TypeVar('_of__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def of(double: float) -> 'FieldAdaptableInterval'[_of__T]: ...

_FieldEnablingPredicate__T = typing.TypeVar('_FieldEnablingPredicate__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEnablingPredicate(typing.Generic[_FieldEnablingPredicate__T]):
    def eventIsEnabled(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEnablingPredicate__T], fieldEventDetector: 'FieldEventDetector'[_FieldEnablingPredicate__T], t: _FieldEnablingPredicate__T) -> bool: ...

_FieldEventDetector__T = typing.TypeVar('_FieldEventDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEventDetector(typing.Generic[_FieldEventDetector__T]):
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventDetector__T]) -> _FieldEventDetector__T: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.FieldEventHandler[_FieldEventDetector__T]: ...
    def getMaxCheckInterval(self) -> FieldAdaptableInterval[_FieldEventDetector__T]: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> _FieldEventDetector__T: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEventDetector__T]) -> None: ...

_FieldEventState__EventOccurrence__T = typing.TypeVar('_FieldEventState__EventOccurrence__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
_FieldEventState__D = typing.TypeVar('_FieldEventState__D', bound=FieldEventDetector)  # <D>
_FieldEventState__T = typing.TypeVar('_FieldEventState__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEventState(typing.Generic[_FieldEventState__D, _FieldEventState__T]):
    def __init__(self, d: _FieldEventState__D): ...
    def doEvent(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventState__T]) -> 'FieldEventState.EventOccurrence'[_FieldEventState__T]: ...
    def evaluateStep(self, fieldOrekitStepInterpolator: org.orekit.propagation.sampling.FieldOrekitStepInterpolator[_FieldEventState__T]) -> bool: ...
    def getEventDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldEventState__T]: ...
    def getEventDetector(self) -> _FieldEventState__D: ...
    def getPendingEvent(self) -> bool: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventState__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEventState__T]) -> None: ...
    def reinitializeBegin(self, fieldOrekitStepInterpolator: org.orekit.propagation.sampling.FieldOrekitStepInterpolator[_FieldEventState__T]) -> None: ...
    def tryAdvance(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventState__T], fieldOrekitStepInterpolator: org.orekit.propagation.sampling.FieldOrekitStepInterpolator[_FieldEventState__T]) -> bool: ...
    class EventOccurrence(typing.Generic[_FieldEventState__EventOccurrence__T]):
        def getAction(self) -> org.hipparchus.ode.events.Action: ...
        def getNewState(self) -> org.orekit.propagation.FieldSpacecraftState[_FieldEventState__EventOccurrence__T]: ...
        def getStopDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldEventState__EventOccurrence__T]: ...

_FieldEventsLogger__FieldLoggedEvent__T = typing.TypeVar('_FieldEventsLogger__FieldLoggedEvent__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
_FieldEventsLogger__T = typing.TypeVar('_FieldEventsLogger__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEventsLogger(typing.Generic[_FieldEventsLogger__T]):
    def __init__(self): ...
    def clearLoggedEvents(self) -> None: ...
    def getLoggedEvents(self) -> java.util.List['FieldEventsLogger.FieldLoggedEvent'[_FieldEventsLogger__T]]: ...
    def monitorDetector(self, fieldEventDetector: FieldEventDetector[_FieldEventsLogger__T]) -> 'FieldAbstractDetector'['FieldEventsLogger.FieldLoggingWrapper', _FieldEventsLogger__T]: ...
    class FieldLoggedEvent(typing.Generic[_FieldEventsLogger__FieldLoggedEvent__T]):
        def getEventDetector(self) -> FieldEventDetector[_FieldEventsLogger__FieldLoggedEvent__T]: ...
        def getState(self) -> org.orekit.propagation.FieldSpacecraftState[_FieldEventsLogger__FieldLoggedEvent__T]: ...
        def isIncreasing(self) -> bool: ...
    class FieldLoggingWrapper: ...

class FilterType(java.lang.Enum['FilterType']):
    TRIGGER_ONLY_DECREASING_EVENTS: typing.ClassVar['FilterType'] = ...
    TRIGGER_ONLY_INCREASING_EVENTS: typing.ClassVar['FilterType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'FilterType': ...
    @staticmethod
    def values() -> typing.List['FilterType']: ...

class VisibilityTrigger(java.lang.Enum['VisibilityTrigger']):
    VISIBLE_ONLY_WHEN_FULLY_IN_FOV: typing.ClassVar['VisibilityTrigger'] = ...
    VISIBLE_AS_SOON_AS_PARTIALLY_IN_FOV: typing.ClassVar['VisibilityTrigger'] = ...
    def radiusCorrection(self, double: float) -> float: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'VisibilityTrigger': ...
    @staticmethod
    def values() -> typing.List['VisibilityTrigger']: ...

_AbstractDetector__T = typing.TypeVar('_AbstractDetector__T', bound='AbstractDetector')  # <T>
class AbstractDetector(EventDetector, typing.Generic[_AbstractDetector__T]):
    DEFAULT_MAXCHECK: typing.ClassVar[float] = ...
    DEFAULT_THRESHOLD: typing.ClassVar[float] = ...
    DEFAULT_MAX_ITER: typing.ClassVar[int] = ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.EventHandler: ...
    def getMaxCheckInterval(self) -> AdaptableInterval: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def isForward(self) -> bool: ...
    def withHandler(self, eventHandler: org.orekit.propagation.events.handlers.EventHandler) -> _AbstractDetector__T: ...
    @typing.overload
    def withMaxCheck(self, double: float) -> _AbstractDetector__T: ...
    @typing.overload
    def withMaxCheck(self, adaptableInterval: typing.Union[AdaptableInterval, typing.Callable]) -> _AbstractDetector__T: ...
    def withMaxIter(self, int: int) -> _AbstractDetector__T: ...
    def withThreshold(self, double: float) -> _AbstractDetector__T: ...

class AdapterDetector(EventDetector):
    def __init__(self, eventDetector: EventDetector): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDetector(self) -> EventDetector: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.EventHandler: ...
    def getMaxCheckInterval(self) -> AdaptableInterval: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

_FieldAbstractDetector__D = typing.TypeVar('_FieldAbstractDetector__D', bound='FieldAbstractDetector')  # <D>
_FieldAbstractDetector__T = typing.TypeVar('_FieldAbstractDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbstractDetector(FieldEventDetector[_FieldAbstractDetector__T], typing.Generic[_FieldAbstractDetector__D, _FieldAbstractDetector__T]):
    DEFAULT_MAXCHECK: typing.ClassVar[float] = ...
    DEFAULT_THRESHOLD: typing.ClassVar[float] = ...
    DEFAULT_MAX_ITER: typing.ClassVar[int] = ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldAbstractDetector__T]) -> _FieldAbstractDetector__T: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.FieldEventHandler[_FieldAbstractDetector__T]: ...
    def getMaxCheckInterval(self) -> FieldAdaptableInterval[_FieldAbstractDetector__T]: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> _FieldAbstractDetector__T: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldAbstractDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbstractDetector__T]) -> None: ...
    def isForward(self) -> bool: ...
    def withHandler(self, fieldEventHandler: org.orekit.propagation.events.handlers.FieldEventHandler[_FieldAbstractDetector__T]) -> _FieldAbstractDetector__D: ...
    @typing.overload
    def withMaxCheck(self, double: float) -> _FieldAbstractDetector__D: ...
    @typing.overload
    def withMaxCheck(self, fieldAdaptableInterval: typing.Union[FieldAdaptableInterval[_FieldAbstractDetector__T], typing.Callable[[org.orekit.propagation.FieldSpacecraftState[org.hipparchus.CalculusFieldElement]], float]]) -> _FieldAbstractDetector__D: ...
    def withMaxIter(self, int: int) -> _FieldAbstractDetector__D: ...
    def withThreshold(self, t: _FieldAbstractDetector__T) -> _FieldAbstractDetector__D: ...

_FieldAdapterDetector__T = typing.TypeVar('_FieldAdapterDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAdapterDetector(FieldEventDetector[_FieldAdapterDetector__T], typing.Generic[_FieldAdapterDetector__T]):
    def __init__(self, fieldEventDetector: FieldEventDetector[_FieldAdapterDetector__T]): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldAdapterDetector__T]) -> _FieldAdapterDetector__T: ...
    def getDetector(self) -> FieldEventDetector[_FieldAdapterDetector__T]: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.FieldEventHandler[_FieldAdapterDetector__T]: ...
    def getMaxCheckInterval(self) -> FieldAdaptableInterval[_FieldAdapterDetector__T]: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> _FieldAdapterDetector__T: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldAdapterDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAdapterDetector__T]) -> None: ...

class PythonAdaptableInterval(AdaptableInterval):
    def __init__(self): ...
    def currentInterval(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEnablingPredicate(EnablingPredicate):
    def __init__(self): ...
    def eventIsEnabled(self, spacecraftState: org.orekit.propagation.SpacecraftState, eventDetector: EventDetector, double: float) -> bool: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEventDetector(EventDetector):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.EventHandler: ...
    def getMaxCheckInterval(self) -> AdaptableInterval: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEventDetectorsProvider(EventDetectorsProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    @typing.overload
    def getEventDetectors(self, list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[EventDetector]: ...
    @typing.overload
    def getEventDetectors(self) -> java.util.stream.Stream[EventDetector]: ...
    _getFieldEventDetectors_0__T = typing.TypeVar('_getFieldEventDetectors_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _getFieldEventDetectors_1__T = typing.TypeVar('_getFieldEventDetectors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_0__T], list: java.util.List[org.orekit.utils.ParameterDriver]) -> java.util.stream.Stream[FieldEventDetector[_getFieldEventDetectors_0__T]]: ...
    @typing.overload
    def getFieldEventDetectors(self, field: org.hipparchus.Field[_getFieldEventDetectors_1__T]) -> java.util.stream.Stream[FieldEventDetector[_getFieldEventDetectors_1__T]]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldAdaptableInterval__T = typing.TypeVar('_PythonFieldAdaptableInterval__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldAdaptableInterval(FieldAdaptableInterval[_PythonFieldAdaptableInterval__T], typing.Generic[_PythonFieldAdaptableInterval__T]):
    def __init__(self): ...
    def currentInterval(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldAdaptableInterval__T]) -> float: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldEnablingPredicate__T = typing.TypeVar('_PythonFieldEnablingPredicate__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldEnablingPredicate(FieldEnablingPredicate[_PythonFieldEnablingPredicate__T], typing.Generic[_PythonFieldEnablingPredicate__T]):
    def __init__(self): ...
    def eventIsEnabled(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldEnablingPredicate__T], fieldEventDetector: FieldEventDetector[_PythonFieldEnablingPredicate__T], t: _PythonFieldEnablingPredicate__T) -> bool: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldEventDetector__T = typing.TypeVar('_PythonFieldEventDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldEventDetector(FieldEventDetector[_PythonFieldEventDetector__T], typing.Generic[_PythonFieldEventDetector__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldEventDetector__T]) -> _PythonFieldEventDetector__T: ...
    def getHandler(self) -> org.orekit.propagation.events.handlers.FieldEventHandler[_PythonFieldEventDetector__T]: ...
    def getMaxCheckInterval(self) -> FieldAdaptableInterval[_PythonFieldEventDetector__T]: ...
    def getMaxIterationCount(self) -> int: ...
    def getThreshold(self) -> _PythonFieldEventDetector__T: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldEventDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldEventDetector__T]) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class AlignmentDetector(AbstractDetector['AlignmentDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double3: float): ...
    @typing.overload
    def __init__(self, double: float, orbit: org.orekit.orbits.Orbit, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double2: float): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getAlignAngle(self) -> float: ...
    def getPVCoordinatesProvider(self) -> org.orekit.utils.PVCoordinatesProvider: ...

class AltitudeDetector(AbstractDetector['AltitudeDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, bodyShape: org.orekit.bodies.BodyShape): ...
    @typing.overload
    def __init__(self, double: float, double2: float, bodyShape: org.orekit.bodies.BodyShape): ...
    @typing.overload
    def __init__(self, double: float, bodyShape: org.orekit.bodies.BodyShape): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getAltitude(self) -> float: ...
    def getBodyShape(self) -> org.orekit.bodies.BodyShape: ...

class AngularSeparationDetector(AbstractDetector['AngularSeparationDetector']):
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, pVCoordinatesProvider2: org.orekit.utils.PVCoordinatesProvider, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBeacon(self) -> org.orekit.utils.PVCoordinatesProvider: ...
    def getObserver(self) -> org.orekit.utils.PVCoordinatesProvider: ...
    def getProximityAngle(self) -> float: ...

class AngularSeparationFromSatelliteDetector(AbstractDetector['AngularSeparationFromSatelliteDetector']):
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, pVCoordinatesProvider2: org.orekit.utils.PVCoordinatesProvider, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getPrimaryObject(self) -> org.orekit.utils.PVCoordinatesProvider: ...
    def getProximityAngle(self) -> float: ...
    def getSecondaryObject(self) -> org.orekit.utils.PVCoordinatesProvider: ...

class ApsideDetector(AbstractDetector['ApsideDetector']):
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, double: float, orbit: org.orekit.orbits.Orbit): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit): ...
    @typing.overload
    def __init__(self, adaptableInterval: typing.Union[AdaptableInterval, typing.Callable], double: float, int: int, eventHandler: org.orekit.propagation.events.handlers.EventHandler): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...

class BetaAngleDetector(AbstractDetector['BetaAngleDetector']):
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, double: float, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, frame: org.orekit.frames.Frame): ...
    @typing.overload
    @staticmethod
    def calculateBetaAngle(spacecraftState: org.orekit.propagation.SpacecraftState, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider) -> float: ...
    @typing.overload
    @staticmethod
    def calculateBetaAngle(spacecraftState: org.orekit.propagation.SpacecraftState, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, frame: org.orekit.frames.Frame) -> float: ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBetaAngleThreshold(self) -> float: ...
    def getCelestialBodyProvider(self) -> org.orekit.utils.PVCoordinatesProvider: ...
    def getInertialFrame(self) -> org.orekit.frames.Frame: ...
    def withBetaThreshold(self, double: float) -> 'BetaAngleDetector': ...
    def withCelestialProvider(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider) -> 'BetaAngleDetector': ...
    def withInertialFrame(self, frame: org.orekit.frames.Frame) -> 'BetaAngleDetector': ...

class BooleanDetector(AbstractDetector['BooleanDetector']):
    @typing.overload
    @staticmethod
    def andCombine(collection: typing.Union[java.util.Collection[EventDetector], typing.Sequence[EventDetector], typing.Set[EventDetector]]) -> 'BooleanDetector': ...
    @typing.overload
    @staticmethod
    def andCombine(*eventDetector: EventDetector) -> 'BooleanDetector': ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDetectors(self) -> java.util.List[EventDetector]: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    @staticmethod
    def notCombine(eventDetector: EventDetector) -> 'NegateDetector': ...
    @typing.overload
    @staticmethod
    def orCombine(collection: typing.Union[java.util.Collection[EventDetector], typing.Sequence[EventDetector], typing.Set[EventDetector]]) -> 'BooleanDetector': ...
    @typing.overload
    @staticmethod
    def orCombine(*eventDetector: EventDetector) -> 'BooleanDetector': ...

class CylindricalShadowEclipseDetector(AbstractDetector['CylindricalShadowEclipseDetector']):
    @typing.overload
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double: float, adaptableInterval: typing.Union[AdaptableInterval, typing.Callable], double2: float, int: int, eventHandler: org.orekit.propagation.events.handlers.EventHandler): ...
    @typing.overload
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double: float, eventHandler: org.orekit.propagation.events.handlers.EventHandler): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getOccultingBodyRadius(self) -> float: ...

class DateDetector(AbstractDetector['DateDetector'], org.orekit.time.TimeStamped):
    DEFAULT_MAX_CHECK: typing.ClassVar[float] = ...
    DEFAULT_MIN_GAP: typing.ClassVar[float] = ...
    DEFAULT_THRESHOLD: typing.ClassVar[float] = ...
    def __init__(self, *timeStamped: org.orekit.time.TimeStamped): ...
    def addEventDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDates(self) -> java.util.List[org.orekit.time.TimeStamped]: ...
    def withMinGap(self, double: float) -> 'DateDetector': ...

class EclipseDetector(AbstractDetector['EclipseDetector']):
    @typing.overload
    def __init__(self, extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, double: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    @typing.overload
    def __init__(self, occultationEngine: org.orekit.utils.OccultationEngine): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getMargin(self) -> float: ...
    def getOccultationEngine(self) -> org.orekit.utils.OccultationEngine: ...
    def getTotalEclipse(self) -> bool: ...
    def withMargin(self, double: float) -> 'EclipseDetector': ...
    def withPenumbra(self) -> 'EclipseDetector': ...
    def withUmbra(self) -> 'EclipseDetector': ...

class ElevationDetector(AbstractDetector['ElevationDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, adaptableInterval: typing.Union[AdaptableInterval, typing.Callable], double: float, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getElevationMask(self) -> org.orekit.utils.ElevationMask: ...
    def getMinElevation(self) -> float: ...
    def getRefractionModel(self) -> org.orekit.models.AtmosphericRefractionModel: ...
    def getTopocentricFrame(self) -> org.orekit.frames.TopocentricFrame: ...
    def withConstantElevation(self, double: float) -> 'ElevationDetector': ...
    def withElevationMask(self, elevationMask: org.orekit.utils.ElevationMask) -> 'ElevationDetector': ...
    def withRefraction(self, atmosphericRefractionModel: org.orekit.models.AtmosphericRefractionModel) -> 'ElevationDetector': ...

class ElevationExtremumDetector(AbstractDetector['ElevationExtremumDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getElevation(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getTopocentricFrame(self) -> org.orekit.frames.TopocentricFrame: ...

class EventEnablingPredicateFilter(AbstractDetector['EventEnablingPredicateFilter']):
    def __init__(self, eventDetector: EventDetector, enablingPredicate: EnablingPredicate): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDetector(self) -> EventDetector: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class EventShifter(AbstractDetector['EventShifter']):
    def __init__(self, eventDetector: EventDetector, boolean: bool, double: float, double2: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDecreasingTimeShift(self) -> float: ...
    def getDetector(self) -> EventDetector: ...
    def getIncreasingTimeShift(self) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

_EventSlopeFilter__T = typing.TypeVar('_EventSlopeFilter__T', bound=EventDetector)  # <T>
class EventSlopeFilter(AbstractDetector['EventSlopeFilter'[_EventSlopeFilter__T]], typing.Generic[_EventSlopeFilter__T]):
    def __init__(self, t: _EventSlopeFilter__T, filterType: FilterType): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDetector(self) -> _EventSlopeFilter__T: ...
    def getFilter(self) -> FilterType: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class ExtremumApproachDetector(AbstractDetector['ExtremumApproachDetector']):
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider): ...
    def computeDeltaPV(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.orekit.utils.PVCoordinates: ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getSecondaryPVProvider(self) -> org.orekit.utils.PVCoordinatesProvider: ...

_FieldAltitudeDetector__T = typing.TypeVar('_FieldAltitudeDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAltitudeDetector(FieldAbstractDetector['FieldAltitudeDetector'[_FieldAltitudeDetector__T], _FieldAltitudeDetector__T], typing.Generic[_FieldAltitudeDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldAltitudeDetector__T, t2: _FieldAltitudeDetector__T, t3: _FieldAltitudeDetector__T, bodyShape: org.orekit.bodies.BodyShape): ...
    @typing.overload
    def __init__(self, t: _FieldAltitudeDetector__T, t2: _FieldAltitudeDetector__T, bodyShape: org.orekit.bodies.BodyShape): ...
    @typing.overload
    def __init__(self, t: _FieldAltitudeDetector__T, bodyShape: org.orekit.bodies.BodyShape): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldAltitudeDetector__T]) -> _FieldAltitudeDetector__T: ...
    def getAltitude(self) -> _FieldAltitudeDetector__T: ...
    def getBodyShape(self) -> org.orekit.bodies.BodyShape: ...

_FieldApsideDetector__T = typing.TypeVar('_FieldApsideDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldApsideDetector(FieldAbstractDetector['FieldApsideDetector'[_FieldApsideDetector__T], _FieldApsideDetector__T], typing.Generic[_FieldApsideDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldApsideDetector__T): ...
    @typing.overload
    def __init__(self, t: _FieldApsideDetector__T, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldApsideDetector__T]): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldApsideDetector__T]): ...
    @typing.overload
    def __init__(self, fieldAdaptableInterval: typing.Union[FieldAdaptableInterval[_FieldApsideDetector__T], typing.Callable[[org.orekit.propagation.FieldSpacecraftState[org.hipparchus.CalculusFieldElement]], float]], t: _FieldApsideDetector__T, int: int, fieldEventHandler: org.orekit.propagation.events.handlers.FieldEventHandler[_FieldApsideDetector__T]): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldApsideDetector__T]) -> _FieldApsideDetector__T: ...

_FieldBetaAngleDetector__T = typing.TypeVar('_FieldBetaAngleDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldBetaAngleDetector(FieldAbstractDetector['FieldBetaAngleDetector'[_FieldBetaAngleDetector__T], _FieldBetaAngleDetector__T], typing.Generic[_FieldBetaAngleDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldBetaAngleDetector__T): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldBetaAngleDetector__T], t: _FieldBetaAngleDetector__T, fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_FieldBetaAngleDetector__T], frame: org.orekit.frames.Frame): ...
    _calculateBetaAngle_0__T = typing.TypeVar('_calculateBetaAngle_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _calculateBetaAngle_1__T = typing.TypeVar('_calculateBetaAngle_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def calculateBetaAngle(fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_calculateBetaAngle_0__T], fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_calculateBetaAngle_0__T]) -> _calculateBetaAngle_0__T: ...
    @typing.overload
    @staticmethod
    def calculateBetaAngle(fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_calculateBetaAngle_1__T], fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_calculateBetaAngle_1__T], frame: org.orekit.frames.Frame) -> _calculateBetaAngle_1__T: ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldBetaAngleDetector__T]) -> _FieldBetaAngleDetector__T: ...
    def getBetaAngleThreshold(self) -> _FieldBetaAngleDetector__T: ...
    def getCelestialBodyProvider(self) -> org.orekit.utils.FieldPVCoordinatesProvider[_FieldBetaAngleDetector__T]: ...
    def getInertialFrame(self) -> org.orekit.frames.Frame: ...
    def withBetaThreshold(self, t: _FieldBetaAngleDetector__T) -> 'FieldBetaAngleDetector'[_FieldBetaAngleDetector__T]: ...
    def withCelestialProvider(self, fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_FieldBetaAngleDetector__T]) -> 'FieldBetaAngleDetector'[_FieldBetaAngleDetector__T]: ...
    def withInertialFrame(self, frame: org.orekit.frames.Frame) -> 'FieldBetaAngleDetector'[_FieldBetaAngleDetector__T]: ...

_FieldBooleanDetector__T = typing.TypeVar('_FieldBooleanDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldBooleanDetector(FieldAbstractDetector['FieldBooleanDetector'[_FieldBooleanDetector__T], _FieldBooleanDetector__T], typing.Generic[_FieldBooleanDetector__T]):
    _andCombine_0__T = typing.TypeVar('_andCombine_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _andCombine_1__T = typing.TypeVar('_andCombine_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def andCombine(collection: typing.Union[java.util.Collection[FieldEventDetector[_andCombine_0__T]], typing.Sequence[FieldEventDetector[_andCombine_0__T]], typing.Set[FieldEventDetector[_andCombine_0__T]]]) -> 'FieldBooleanDetector'[_andCombine_0__T]: ...
    @typing.overload
    @staticmethod
    def andCombine(*fieldEventDetector: FieldEventDetector[_andCombine_1__T]) -> 'FieldBooleanDetector'[_andCombine_1__T]: ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldBooleanDetector__T]) -> _FieldBooleanDetector__T: ...
    def getDetectors(self) -> java.util.List[FieldEventDetector[_FieldBooleanDetector__T]]: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldBooleanDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldBooleanDetector__T]) -> None: ...
    _notCombine__T = typing.TypeVar('_notCombine__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def notCombine(fieldEventDetector: FieldEventDetector[_notCombine__T]) -> 'FieldNegateDetector'[_notCombine__T]: ...
    _orCombine_0__T = typing.TypeVar('_orCombine_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _orCombine_1__T = typing.TypeVar('_orCombine_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def orCombine(collection: typing.Union[java.util.Collection[FieldEventDetector[_orCombine_0__T]], typing.Sequence[FieldEventDetector[_orCombine_0__T]], typing.Set[FieldEventDetector[_orCombine_0__T]]]) -> 'FieldBooleanDetector'[_orCombine_0__T]: ...
    @typing.overload
    @staticmethod
    def orCombine(*fieldEventDetector: FieldEventDetector[_orCombine_1__T]) -> 'FieldBooleanDetector'[_orCombine_1__T]: ...

_FieldCylindricalShadowEclipseDetector__T = typing.TypeVar('_FieldCylindricalShadowEclipseDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCylindricalShadowEclipseDetector(FieldAbstractDetector['FieldCylindricalShadowEclipseDetector'[_FieldCylindricalShadowEclipseDetector__T], _FieldCylindricalShadowEclipseDetector__T], typing.Generic[_FieldCylindricalShadowEclipseDetector__T]):
    @typing.overload
    def __init__(self, extendedPositionProvider: org.orekit.utils.ExtendedPositionProvider, t: _FieldCylindricalShadowEclipseDetector__T, fieldAdaptableInterval: typing.Union[FieldAdaptableInterval[_FieldCylindricalShadowEclipseDetector__T], typing.Callable[[org.orekit.propagation.FieldSpacecraftState[org.hipparchus.CalculusFieldElement]], float]], t2: _FieldCylindricalShadowEclipseDetector__T, int: int, fieldEventHandler: org.orekit.propagation.events.handlers.FieldEventHandler[_FieldCylindricalShadowEclipseDetector__T]): ...
    @typing.overload
    def __init__(self, extendedPositionProvider: org.orekit.utils.ExtendedPositionProvider, t: _FieldCylindricalShadowEclipseDetector__T, fieldEventHandler: org.orekit.propagation.events.handlers.FieldEventHandler[_FieldCylindricalShadowEclipseDetector__T]): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldCylindricalShadowEclipseDetector__T]) -> _FieldCylindricalShadowEclipseDetector__T: ...
    def getOccultingBodyRadius(self) -> _FieldCylindricalShadowEclipseDetector__T: ...

_FieldDateDetector__T = typing.TypeVar('_FieldDateDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDateDetector(FieldAbstractDetector['FieldDateDetector'[_FieldDateDetector__T], _FieldDateDetector__T], org.orekit.time.FieldTimeStamped[_FieldDateDetector__T], typing.Generic[_FieldDateDetector__T]):
    DEFAULT_MAX_CHECK: typing.ClassVar[float] = ...
    DEFAULT_MIN_GAP: typing.ClassVar[float] = ...
    DEFAULT_THRESHOLD: typing.ClassVar[float] = ...
    def __init__(self, field: org.hipparchus.Field[_FieldDateDetector__T], *fieldTimeStamped: org.orekit.time.FieldTimeStamped[_FieldDateDetector__T]): ...
    def addEventDate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldDateDetector__T]) -> None: ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldDateDetector__T]) -> _FieldDateDetector__T: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldDateDetector__T]: ...
    def getDates(self) -> java.util.List[org.orekit.time.FieldTimeStamped[_FieldDateDetector__T]]: ...
    def withMinGap(self, double: float) -> 'FieldDateDetector'[_FieldDateDetector__T]: ...

_FieldEclipseDetector__T = typing.TypeVar('_FieldEclipseDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEclipseDetector(FieldAbstractDetector['FieldEclipseDetector'[_FieldEclipseDetector__T], _FieldEclipseDetector__T], typing.Generic[_FieldEclipseDetector__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldEclipseDetector__T], extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, double: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldEclipseDetector__T], occultationEngine: org.orekit.utils.OccultationEngine): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEclipseDetector__T]) -> _FieldEclipseDetector__T: ...
    def getMargin(self) -> _FieldEclipseDetector__T: ...
    def getOccultationEngine(self) -> org.orekit.utils.OccultationEngine: ...
    def getTotalEclipse(self) -> bool: ...
    def withMargin(self, t: _FieldEclipseDetector__T) -> 'FieldEclipseDetector'[_FieldEclipseDetector__T]: ...
    def withPenumbra(self) -> 'FieldEclipseDetector'[_FieldEclipseDetector__T]: ...
    def withUmbra(self) -> 'FieldEclipseDetector'[_FieldEclipseDetector__T]: ...

_FieldElevationDetector__T = typing.TypeVar('_FieldElevationDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldElevationDetector(FieldAbstractDetector['FieldElevationDetector'[_FieldElevationDetector__T], _FieldElevationDetector__T], typing.Generic[_FieldElevationDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldElevationDetector__T, t2: _FieldElevationDetector__T, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldElevationDetector__T], topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldElevationDetector__T]) -> _FieldElevationDetector__T: ...
    def getElevationMask(self) -> org.orekit.utils.ElevationMask: ...
    def getMinElevation(self) -> float: ...
    def getRefractionModel(self) -> org.orekit.models.AtmosphericRefractionModel: ...
    def getTopocentricFrame(self) -> org.orekit.frames.TopocentricFrame: ...
    def withConstantElevation(self, double: float) -> 'FieldElevationDetector'[_FieldElevationDetector__T]: ...
    def withElevationMask(self, elevationMask: org.orekit.utils.ElevationMask) -> 'FieldElevationDetector'[_FieldElevationDetector__T]: ...
    def withRefraction(self, atmosphericRefractionModel: org.orekit.models.AtmosphericRefractionModel) -> 'FieldElevationDetector'[_FieldElevationDetector__T]: ...

_FieldElevationExtremumDetector__T = typing.TypeVar('_FieldElevationExtremumDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldElevationExtremumDetector(FieldAbstractDetector['FieldElevationExtremumDetector'[_FieldElevationExtremumDetector__T], _FieldElevationExtremumDetector__T], typing.Generic[_FieldElevationExtremumDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldElevationExtremumDetector__T, t2: _FieldElevationExtremumDetector__T, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldElevationExtremumDetector__T], topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldElevationExtremumDetector__T]) -> _FieldElevationExtremumDetector__T: ...
    def getElevation(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldElevationExtremumDetector__T]) -> _FieldElevationExtremumDetector__T: ...
    def getTopocentricFrame(self) -> org.orekit.frames.TopocentricFrame: ...

_FieldEventEnablingPredicateFilter__T = typing.TypeVar('_FieldEventEnablingPredicateFilter__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEventEnablingPredicateFilter(FieldAbstractDetector['FieldEventEnablingPredicateFilter'[_FieldEventEnablingPredicateFilter__T], _FieldEventEnablingPredicateFilter__T], typing.Generic[_FieldEventEnablingPredicateFilter__T]):
    def __init__(self, fieldEventDetector: FieldEventDetector[_FieldEventEnablingPredicateFilter__T], fieldEnablingPredicate: FieldEnablingPredicate[_FieldEventEnablingPredicateFilter__T]): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventEnablingPredicateFilter__T]) -> _FieldEventEnablingPredicateFilter__T: ...
    def getDetector(self) -> FieldEventDetector[_FieldEventEnablingPredicateFilter__T]: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventEnablingPredicateFilter__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEventEnablingPredicateFilter__T]) -> None: ...

_FieldEventSlopeFilter__D = typing.TypeVar('_FieldEventSlopeFilter__D', bound=FieldEventDetector)  # <D>
_FieldEventSlopeFilter__T = typing.TypeVar('_FieldEventSlopeFilter__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEventSlopeFilter(FieldAbstractDetector['FieldEventSlopeFilter'[_FieldEventSlopeFilter__D, _FieldEventSlopeFilter__T], _FieldEventSlopeFilter__T], typing.Generic[_FieldEventSlopeFilter__D, _FieldEventSlopeFilter__T]):
    def __init__(self, d: _FieldEventSlopeFilter__D, filterType: FilterType): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventSlopeFilter__T]) -> _FieldEventSlopeFilter__T: ...
    def getDetector(self) -> _FieldEventSlopeFilter__D: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventSlopeFilter__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEventSlopeFilter__T]) -> None: ...

_FieldExtremumApproachDetector__T = typing.TypeVar('_FieldExtremumApproachDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldExtremumApproachDetector(FieldAbstractDetector['FieldExtremumApproachDetector'[_FieldExtremumApproachDetector__T], _FieldExtremumApproachDetector__T], typing.Generic[_FieldExtremumApproachDetector__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldExtremumApproachDetector__T], fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_FieldExtremumApproachDetector__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldExtremumApproachDetector__T], pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider): ...
    def computeDeltaPV(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldExtremumApproachDetector__T]) -> org.orekit.utils.FieldPVCoordinates[_FieldExtremumApproachDetector__T]: ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldExtremumApproachDetector__T]) -> _FieldExtremumApproachDetector__T: ...
    def getSecondaryPVProvider(self) -> org.orekit.utils.FieldPVCoordinatesProvider[_FieldExtremumApproachDetector__T]: ...

_FieldFunctionalDetector__T = typing.TypeVar('_FieldFunctionalDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldFunctionalDetector(FieldAbstractDetector['FieldFunctionalDetector'[_FieldFunctionalDetector__T], _FieldFunctionalDetector__T], typing.Generic[_FieldFunctionalDetector__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldFunctionalDetector__T]): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldFunctionalDetector__T]) -> _FieldFunctionalDetector__T: ...
    def getFunction(self) -> java.util.function.Function[org.orekit.propagation.FieldSpacecraftState[_FieldFunctionalDetector__T], _FieldFunctionalDetector__T]: ...
    def withFunction(self, function: typing.Union[java.util.function.Function[org.orekit.propagation.FieldSpacecraftState[_FieldFunctionalDetector__T], _FieldFunctionalDetector__T], typing.Callable[[org.orekit.propagation.FieldSpacecraftState[_FieldFunctionalDetector__T]], _FieldFunctionalDetector__T]]) -> 'FieldFunctionalDetector'[_FieldFunctionalDetector__T]: ...

_FieldLatitudeCrossingDetector__T = typing.TypeVar('_FieldLatitudeCrossingDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLatitudeCrossingDetector(FieldAbstractDetector['FieldLatitudeCrossingDetector'[_FieldLatitudeCrossingDetector__T], _FieldLatitudeCrossingDetector__T], typing.Generic[_FieldLatitudeCrossingDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldLatitudeCrossingDetector__T, t2: _FieldLatitudeCrossingDetector__T, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldLatitudeCrossingDetector__T], oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldLatitudeCrossingDetector__T]) -> _FieldLatitudeCrossingDetector__T: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getLatitude(self) -> float: ...

_FieldLatitudeRangeCrossingDetector__T = typing.TypeVar('_FieldLatitudeRangeCrossingDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLatitudeRangeCrossingDetector(FieldAbstractDetector['FieldLatitudeRangeCrossingDetector'[_FieldLatitudeRangeCrossingDetector__T], _FieldLatitudeRangeCrossingDetector__T], typing.Generic[_FieldLatitudeRangeCrossingDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldLatitudeRangeCrossingDetector__T, t2: _FieldLatitudeRangeCrossingDetector__T, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float, double2: float): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldLatitudeRangeCrossingDetector__T], oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float, double2: float): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldLatitudeRangeCrossingDetector__T]) -> _FieldLatitudeRangeCrossingDetector__T: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getFromLatitude(self) -> float: ...
    def getToLatitude(self) -> float: ...

_FieldLongitudeCrossingDetector__T = typing.TypeVar('_FieldLongitudeCrossingDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLongitudeCrossingDetector(FieldAbstractDetector['FieldLongitudeCrossingDetector'[_FieldLongitudeCrossingDetector__T], _FieldLongitudeCrossingDetector__T], typing.Generic[_FieldLongitudeCrossingDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldLongitudeCrossingDetector__T, t2: _FieldLongitudeCrossingDetector__T, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldLongitudeCrossingDetector__T], oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldLongitudeCrossingDetector__T]) -> _FieldLongitudeCrossingDetector__T: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getLongitude(self) -> float: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldLongitudeCrossingDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldLongitudeCrossingDetector__T]) -> None: ...

_FieldLongitudeRangeCrossingDetector__T = typing.TypeVar('_FieldLongitudeRangeCrossingDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLongitudeRangeCrossingDetector(FieldAbstractDetector['FieldLongitudeRangeCrossingDetector'[_FieldLongitudeRangeCrossingDetector__T], _FieldLongitudeRangeCrossingDetector__T], typing.Generic[_FieldLongitudeRangeCrossingDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldLongitudeRangeCrossingDetector__T, t2: _FieldLongitudeRangeCrossingDetector__T, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float, double2: float): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldLongitudeRangeCrossingDetector__T], oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float, double2: float): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldLongitudeRangeCrossingDetector__T]) -> _FieldLongitudeRangeCrossingDetector__T: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getFromLongitude(self) -> float: ...
    def getToLongitude(self) -> float: ...

_FieldNegateDetector__T = typing.TypeVar('_FieldNegateDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldNegateDetector(FieldAbstractDetector['FieldNegateDetector'[_FieldNegateDetector__T], _FieldNegateDetector__T], typing.Generic[_FieldNegateDetector__T]):
    def __init__(self, fieldEventDetector: FieldEventDetector[_FieldNegateDetector__T]): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldNegateDetector__T]) -> _FieldNegateDetector__T: ...
    def getOriginal(self) -> FieldEventDetector[_FieldNegateDetector__T]: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldNegateDetector__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldNegateDetector__T]) -> None: ...

_FieldNodeDetector__T = typing.TypeVar('_FieldNodeDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldNodeDetector(FieldAbstractDetector['FieldNodeDetector'[_FieldNodeDetector__T], _FieldNodeDetector__T], typing.Generic[_FieldNodeDetector__T]):
    @typing.overload
    def __init__(self, t: _FieldNodeDetector__T, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldNodeDetector__T], frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldNodeDetector__T], frame: org.orekit.frames.Frame): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldNodeDetector__T]) -> _FieldNodeDetector__T: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...

class FieldOfViewDetector(AbstractDetector['FieldOfViewDetector']):
    @typing.overload
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double: float, visibilityTrigger: VisibilityTrigger, fieldOfView: org.orekit.geometry.fov.FieldOfView): ...
    @typing.overload
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, fieldOfView: org.orekit.geometry.fov.FieldOfView): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getFOV(self) -> org.orekit.geometry.fov.FieldOfView: ...
    def getPVTarget(self) -> org.orekit.utils.PVCoordinatesProvider: ...

_FieldParameterDrivenDateIntervalDetector__T = typing.TypeVar('_FieldParameterDrivenDateIntervalDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldParameterDrivenDateIntervalDetector(FieldAbstractDetector['FieldParameterDrivenDateIntervalDetector'[_FieldParameterDrivenDateIntervalDetector__T], _FieldParameterDrivenDateIntervalDetector__T], typing.Generic[_FieldParameterDrivenDateIntervalDetector__T]):
    START_SUFFIX: typing.ClassVar[str] = ...
    STOP_SUFFIX: typing.ClassVar[str] = ...
    MEDIAN_SUFFIX: typing.ClassVar[str] = ...
    DURATION_SUFFIX: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldParameterDrivenDateIntervalDetector__T], string: str, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldParameterDrivenDateIntervalDetector__T], string: str, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldParameterDrivenDateIntervalDetector__T]) -> _FieldParameterDrivenDateIntervalDetector__T: ...
    def getDurationDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getMedianDriver(self) -> org.orekit.utils.DateDriver: ...
    def getStartDriver(self) -> org.orekit.utils.DateDriver: ...
    def getStopDriver(self) -> org.orekit.utils.DateDriver: ...

_FieldRelativeDistanceDetector__T = typing.TypeVar('_FieldRelativeDistanceDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldRelativeDistanceDetector(FieldAbstractDetector['FieldRelativeDistanceDetector'[_FieldRelativeDistanceDetector__T], _FieldRelativeDistanceDetector__T], typing.Generic[_FieldRelativeDistanceDetector__T]):
    def __init__(self, fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_FieldRelativeDistanceDetector__T], t: _FieldRelativeDistanceDetector__T): ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldRelativeDistanceDetector__T]) -> _FieldRelativeDistanceDetector__T: ...
    def getDistanceThreshold(self) -> _FieldRelativeDistanceDetector__T: ...
    def getSecondaryPVProvider(self) -> org.orekit.utils.FieldPVCoordinatesProvider[_FieldRelativeDistanceDetector__T]: ...

class FootprintOverlapDetector(AbstractDetector['FootprintOverlapDetector']):
    def __init__(self, fieldOfView: org.orekit.geometry.fov.FieldOfView, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.BodyShape: ...
    def getFOV(self) -> org.orekit.geometry.fov.FieldOfView: ...
    def getZone(self) -> org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet: ...

class FunctionalDetector(AbstractDetector['FunctionalDetector']):
    def __init__(self): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getFunction(self) -> java.util.function.ToDoubleFunction[org.orekit.propagation.SpacecraftState]: ...
    def withFunction(self, toDoubleFunction: typing.Union[java.util.function.ToDoubleFunction[org.orekit.propagation.SpacecraftState], typing.Callable[[org.orekit.propagation.SpacecraftState], float]]) -> 'FunctionalDetector': ...

class GeographicZoneDetector(AbstractDetector['GeographicZoneDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, bodyShape: org.orekit.bodies.BodyShape, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet, double3: float): ...
    @typing.overload
    def __init__(self, bodyShape: org.orekit.bodies.BodyShape, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.BodyShape: ...
    def getMargin(self) -> float: ...
    def getZone(self) -> org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet: ...
    def withMargin(self, double: float) -> 'GeographicZoneDetector': ...

class GroundAtNightDetector(AbstractDetector['GroundAtNightDetector']):
    CIVIL_DAWN_DUSK_ELEVATION: typing.ClassVar[float] = ...
    NAUTICAL_DAWN_DUSK_ELEVATION: typing.ClassVar[float] = ...
    ASTRONOMICAL_DAWN_DUSK_ELEVATION: typing.ClassVar[float] = ...
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double: float, atmosphericRefractionModel: org.orekit.models.AtmosphericRefractionModel): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...

class GroundFieldOfViewDetector(AbstractDetector['GroundFieldOfViewDetector']):
    def __init__(self, frame: org.orekit.frames.Frame, fieldOfView: org.orekit.geometry.fov.FieldOfView): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getFOV(self) -> org.orekit.geometry.fov.FieldOfView: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...

class HaloXZPlaneCrossingDetector(AbstractDetector['HaloXZPlaneCrossingDetector']):
    def __init__(self, double: float, double2: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...

class InterSatDirectViewDetector(AbstractDetector['InterSatDirectViewDetector']):
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getCentralBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getSecondary(self) -> org.orekit.utils.PVCoordinatesProvider: ...
    def getSkimmingAltitude(self) -> float: ...
    def withSkimmingAltitude(self, double: float) -> 'InterSatDirectViewDetector': ...

class LatitudeCrossingDetector(AbstractDetector['LatitudeCrossingDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double3: float): ...
    @typing.overload
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getLatitude(self) -> float: ...

class LatitudeExtremumDetector(AbstractDetector['LatitudeExtremumDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    @typing.overload
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.BodyShape: ...

class LatitudeRangeCrossingDetector(AbstractDetector['LatitudeRangeCrossingDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double3: float, double4: float): ...
    @typing.overload
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float, double2: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getFromLatitude(self) -> float: ...
    def getToLatitude(self) -> float: ...

class LongitudeCrossingDetector(AbstractDetector['LongitudeCrossingDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double3: float): ...
    @typing.overload
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getLongitude(self) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class LongitudeExtremumDetector(AbstractDetector['LongitudeExtremumDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    @typing.overload
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.BodyShape: ...

class LongitudeRangeCrossingDetector(AbstractDetector['LongitudeRangeCrossingDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double3: float, double4: float): ...
    @typing.overload
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float, double2: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getBody(self) -> org.orekit.bodies.OneAxisEllipsoid: ...
    def getFromLongitude(self) -> float: ...
    def getToLongitude(self) -> float: ...

class MagneticFieldDetector(AbstractDetector['MagneticFieldDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, fieldModel: org.orekit.models.earth.GeoMagneticFieldFactory.FieldModel, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, boolean: bool): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, fieldModel: org.orekit.models.earth.GeoMagneticFieldFactory.FieldModel, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, boolean: bool, dataContext: org.orekit.data.DataContext): ...
    @typing.overload
    def __init__(self, double: float, fieldModel: org.orekit.models.earth.GeoMagneticFieldFactory.FieldModel, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid): ...
    @typing.overload
    def __init__(self, double: float, fieldModel: org.orekit.models.earth.GeoMagneticFieldFactory.FieldModel, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, boolean: bool): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class NegateDetector(AbstractDetector['NegateDetector']):
    def __init__(self, eventDetector: EventDetector): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getOriginal(self) -> EventDetector: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class NodeDetector(AbstractDetector['NodeDetector']):
    @typing.overload
    def __init__(self, double: float, orbit: org.orekit.orbits.Orbit, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, frame: org.orekit.frames.Frame): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...

class ParameterDrivenDateIntervalDetector(AbstractDetector['ParameterDrivenDateIntervalDetector']):
    START_SUFFIX: typing.ClassVar[str] = ...
    STOP_SUFFIX: typing.ClassVar[str] = ...
    MEDIAN_SUFFIX: typing.ClassVar[str] = ...
    DURATION_SUFFIX: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, string: str, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDurationDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getMedianDriver(self) -> org.orekit.utils.DateDriver: ...
    def getStartDriver(self) -> org.orekit.utils.DateDriver: ...
    def getStopDriver(self) -> org.orekit.utils.DateDriver: ...

class PositionAngleDetector(AbstractDetector['PositionAngleDetector']):
    @typing.overload
    def __init__(self, double: float, double2: float, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType, double3: float): ...
    @typing.overload
    def __init__(self, orbitType: org.orekit.orbits.OrbitType, positionAngleType: org.orekit.orbits.PositionAngleType, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getAngle(self) -> float: ...
    def getOrbitType(self) -> org.orekit.orbits.OrbitType: ...
    def getPositionAngleType(self) -> org.orekit.orbits.PositionAngleType: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

_PythonAbstractDetector__T = typing.TypeVar('_PythonAbstractDetector__T', bound=AbstractDetector)  # <T>
class PythonAbstractDetector(AbstractDetector[_PythonAbstractDetector__T], typing.Generic[_PythonAbstractDetector__T]):
    @typing.overload
    def __init__(self, double: float, double2: float, int: int, eventHandler: org.orekit.propagation.events.handlers.EventHandler): ...
    @typing.overload
    def __init__(self, adaptableInterval: typing.Union[AdaptableInterval, typing.Callable], double: float, int: int, eventHandler: org.orekit.propagation.events.handlers.EventHandler): ...
    def create(self, adaptableInterval: typing.Union[AdaptableInterval, typing.Callable], double: float, int: int, eventHandler: org.orekit.propagation.events.handlers.EventHandler) -> _PythonAbstractDetector__T: ...
    def finalize(self) -> None: ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonFieldAbstractDetector__D = typing.TypeVar('_PythonFieldAbstractDetector__D', bound=FieldAbstractDetector)  # <D>
_PythonFieldAbstractDetector__T = typing.TypeVar('_PythonFieldAbstractDetector__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldAbstractDetector(FieldAbstractDetector[_PythonFieldAbstractDetector__D, _PythonFieldAbstractDetector__T], typing.Generic[_PythonFieldAbstractDetector__D, _PythonFieldAbstractDetector__T]):
    def __init__(self, fieldAdaptableInterval: typing.Union[FieldAdaptableInterval[_PythonFieldAbstractDetector__T], typing.Callable[[org.orekit.propagation.FieldSpacecraftState[org.hipparchus.CalculusFieldElement]], float]], t: _PythonFieldAbstractDetector__T, int: int, fieldEventHandler: org.orekit.propagation.events.handlers.FieldEventHandler[_PythonFieldAbstractDetector__T]): ...
    def create(self, fieldAdaptableInterval: typing.Union[FieldAdaptableInterval[_PythonFieldAbstractDetector__T], typing.Callable[[org.orekit.propagation.FieldSpacecraftState[org.hipparchus.CalculusFieldElement]], float]], t: _PythonFieldAbstractDetector__T, int: int, fieldEventHandler: org.orekit.propagation.events.handlers.FieldEventHandler[_PythonFieldAbstractDetector__T]) -> _PythonFieldAbstractDetector__D: ...
    def finalize(self) -> None: ...
    def g(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldAbstractDetector__T]) -> _PythonFieldAbstractDetector__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class RelativeDistanceDetector(AbstractDetector['RelativeDistanceDetector']):
    def __init__(self, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, double: float): ...
    def g(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> float: ...
    def getDistanceThreshold(self) -> float: ...
    def getSecondaryPVProvider(self) -> org.orekit.utils.PVCoordinatesProvider: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.events")``.

    AbstractDetector: typing.Type[AbstractDetector]
    AdaptableInterval: typing.Type[AdaptableInterval]
    AdapterDetector: typing.Type[AdapterDetector]
    AlignmentDetector: typing.Type[AlignmentDetector]
    AltitudeDetector: typing.Type[AltitudeDetector]
    AngularSeparationDetector: typing.Type[AngularSeparationDetector]
    AngularSeparationFromSatelliteDetector: typing.Type[AngularSeparationFromSatelliteDetector]
    ApsideDetector: typing.Type[ApsideDetector]
    BetaAngleDetector: typing.Type[BetaAngleDetector]
    BooleanDetector: typing.Type[BooleanDetector]
    CylindricalShadowEclipseDetector: typing.Type[CylindricalShadowEclipseDetector]
    DateDetector: typing.Type[DateDetector]
    EclipseDetector: typing.Type[EclipseDetector]
    ElevationDetector: typing.Type[ElevationDetector]
    ElevationExtremumDetector: typing.Type[ElevationExtremumDetector]
    EnablingPredicate: typing.Type[EnablingPredicate]
    EventDetector: typing.Type[EventDetector]
    EventDetectorsProvider: typing.Type[EventDetectorsProvider]
    EventEnablingPredicateFilter: typing.Type[EventEnablingPredicateFilter]
    EventShifter: typing.Type[EventShifter]
    EventSlopeFilter: typing.Type[EventSlopeFilter]
    EventState: typing.Type[EventState]
    EventsLogger: typing.Type[EventsLogger]
    ExtremumApproachDetector: typing.Type[ExtremumApproachDetector]
    FieldAbstractDetector: typing.Type[FieldAbstractDetector]
    FieldAdaptableInterval: typing.Type[FieldAdaptableInterval]
    FieldAdapterDetector: typing.Type[FieldAdapterDetector]
    FieldAltitudeDetector: typing.Type[FieldAltitudeDetector]
    FieldApsideDetector: typing.Type[FieldApsideDetector]
    FieldBetaAngleDetector: typing.Type[FieldBetaAngleDetector]
    FieldBooleanDetector: typing.Type[FieldBooleanDetector]
    FieldCylindricalShadowEclipseDetector: typing.Type[FieldCylindricalShadowEclipseDetector]
    FieldDateDetector: typing.Type[FieldDateDetector]
    FieldEclipseDetector: typing.Type[FieldEclipseDetector]
    FieldElevationDetector: typing.Type[FieldElevationDetector]
    FieldElevationExtremumDetector: typing.Type[FieldElevationExtremumDetector]
    FieldEnablingPredicate: typing.Type[FieldEnablingPredicate]
    FieldEventDetector: typing.Type[FieldEventDetector]
    FieldEventEnablingPredicateFilter: typing.Type[FieldEventEnablingPredicateFilter]
    FieldEventSlopeFilter: typing.Type[FieldEventSlopeFilter]
    FieldEventState: typing.Type[FieldEventState]
    FieldEventsLogger: typing.Type[FieldEventsLogger]
    FieldExtremumApproachDetector: typing.Type[FieldExtremumApproachDetector]
    FieldFunctionalDetector: typing.Type[FieldFunctionalDetector]
    FieldLatitudeCrossingDetector: typing.Type[FieldLatitudeCrossingDetector]
    FieldLatitudeRangeCrossingDetector: typing.Type[FieldLatitudeRangeCrossingDetector]
    FieldLongitudeCrossingDetector: typing.Type[FieldLongitudeCrossingDetector]
    FieldLongitudeRangeCrossingDetector: typing.Type[FieldLongitudeRangeCrossingDetector]
    FieldNegateDetector: typing.Type[FieldNegateDetector]
    FieldNodeDetector: typing.Type[FieldNodeDetector]
    FieldOfViewDetector: typing.Type[FieldOfViewDetector]
    FieldParameterDrivenDateIntervalDetector: typing.Type[FieldParameterDrivenDateIntervalDetector]
    FieldRelativeDistanceDetector: typing.Type[FieldRelativeDistanceDetector]
    FilterType: typing.Type[FilterType]
    FootprintOverlapDetector: typing.Type[FootprintOverlapDetector]
    FunctionalDetector: typing.Type[FunctionalDetector]
    GeographicZoneDetector: typing.Type[GeographicZoneDetector]
    GroundAtNightDetector: typing.Type[GroundAtNightDetector]
    GroundFieldOfViewDetector: typing.Type[GroundFieldOfViewDetector]
    HaloXZPlaneCrossingDetector: typing.Type[HaloXZPlaneCrossingDetector]
    InterSatDirectViewDetector: typing.Type[InterSatDirectViewDetector]
    LatitudeCrossingDetector: typing.Type[LatitudeCrossingDetector]
    LatitudeExtremumDetector: typing.Type[LatitudeExtremumDetector]
    LatitudeRangeCrossingDetector: typing.Type[LatitudeRangeCrossingDetector]
    LongitudeCrossingDetector: typing.Type[LongitudeCrossingDetector]
    LongitudeExtremumDetector: typing.Type[LongitudeExtremumDetector]
    LongitudeRangeCrossingDetector: typing.Type[LongitudeRangeCrossingDetector]
    MagneticFieldDetector: typing.Type[MagneticFieldDetector]
    NegateDetector: typing.Type[NegateDetector]
    NodeDetector: typing.Type[NodeDetector]
    ParameterDrivenDateIntervalDetector: typing.Type[ParameterDrivenDateIntervalDetector]
    PositionAngleDetector: typing.Type[PositionAngleDetector]
    PythonAbstractDetector: typing.Type[PythonAbstractDetector]
    PythonAdaptableInterval: typing.Type[PythonAdaptableInterval]
    PythonEnablingPredicate: typing.Type[PythonEnablingPredicate]
    PythonEventDetector: typing.Type[PythonEventDetector]
    PythonEventDetectorsProvider: typing.Type[PythonEventDetectorsProvider]
    PythonFieldAbstractDetector: typing.Type[PythonFieldAbstractDetector]
    PythonFieldAdaptableInterval: typing.Type[PythonFieldAdaptableInterval]
    PythonFieldEnablingPredicate: typing.Type[PythonFieldEnablingPredicate]
    PythonFieldEventDetector: typing.Type[PythonFieldEventDetector]
    RelativeDistanceDetector: typing.Type[RelativeDistanceDetector]
    VisibilityTrigger: typing.Type[VisibilityTrigger]
    handlers: org.orekit.propagation.events.handlers.__module_protocol__
    intervals: org.orekit.propagation.events.intervals.__module_protocol__
