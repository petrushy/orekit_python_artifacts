import org.hipparchus
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.propagation.analytical.tle
import org.orekit.time
import typing



class TleGenerationAlgorithm:
    _generate_0__T = typing.TypeVar('_generate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def generate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_generate_0__T], fieldTLE: org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]) -> org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]: ...
    @typing.overload
    def generate(self, spacecraftState: org.orekit.propagation.SpacecraftState, tLE: org.orekit.propagation.analytical.tle.TLE) -> org.orekit.propagation.analytical.tle.TLE: ...

class TleGenerationUtil:
    _newTLE_0__T = typing.TypeVar('_newTLE_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def newTLE(fieldKeplerianOrbit: org.orekit.orbits.FieldKeplerianOrbit[_newTLE_0__T], fieldTLE: org.orekit.propagation.analytical.tle.FieldTLE[_newTLE_0__T], t: _newTLE_0__T, timeScale: org.orekit.time.TimeScale) -> org.orekit.propagation.analytical.tle.FieldTLE[_newTLE_0__T]: ...
    @typing.overload
    @staticmethod
    def newTLE(keplerianOrbit: org.orekit.orbits.KeplerianOrbit, tLE: org.orekit.propagation.analytical.tle.TLE, double: float, timeScale: org.orekit.time.TimeScale) -> org.orekit.propagation.analytical.tle.TLE: ...

class FixedPointTleGenerationAlgorithm(TleGenerationAlgorithm):
    EPSILON_DEFAULT: typing.ClassVar[float] = ...
    MAX_ITERATIONS_DEFAULT: typing.ClassVar[int] = ...
    SCALE_DEFAULT: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int, double2: float): ...
    @typing.overload
    def __init__(self, double: float, int: int, double2: float, timeScale: org.orekit.time.TimeScale, frame: org.orekit.frames.Frame): ...
    _generate_0__T = typing.TypeVar('_generate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def generate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_generate_0__T], fieldTLE: org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]) -> org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]: ...
    @typing.overload
    def generate(self, spacecraftState: org.orekit.propagation.SpacecraftState, tLE: org.orekit.propagation.analytical.tle.TLE) -> org.orekit.propagation.analytical.tle.TLE: ...

class LeastSquaresTleGenerationAlgorithm(TleGenerationAlgorithm):
    DEFAULT_MAX_ITERATIONS: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, timeScale: org.orekit.time.TimeScale, frame: org.orekit.frames.Frame): ...
    _generate_0__T = typing.TypeVar('_generate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def generate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_generate_0__T], fieldTLE: org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]) -> org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]: ...
    @typing.overload
    def generate(self, spacecraftState: org.orekit.propagation.SpacecraftState, tLE: org.orekit.propagation.analytical.tle.TLE) -> org.orekit.propagation.analytical.tle.TLE: ...
    def getRms(self) -> float: ...

class PythonTleGenerationAlgorithm(TleGenerationAlgorithm):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _generate_0__T = typing.TypeVar('_generate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def generate(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_generate_0__T], fieldTLE: org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]) -> org.orekit.propagation.analytical.tle.FieldTLE[_generate_0__T]: ...
    @typing.overload
    def generate(self, spacecraftState: org.orekit.propagation.SpacecraftState, tLE: org.orekit.propagation.analytical.tle.TLE) -> org.orekit.propagation.analytical.tle.TLE: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.analytical.tle.generation")``.

    FixedPointTleGenerationAlgorithm: typing.Type[FixedPointTleGenerationAlgorithm]
    LeastSquaresTleGenerationAlgorithm: typing.Type[LeastSquaresTleGenerationAlgorithm]
    PythonTleGenerationAlgorithm: typing.Type[PythonTleGenerationAlgorithm]
    TleGenerationAlgorithm: typing.Type[TleGenerationAlgorithm]
    TleGenerationUtil: typing.Type[TleGenerationUtil]
