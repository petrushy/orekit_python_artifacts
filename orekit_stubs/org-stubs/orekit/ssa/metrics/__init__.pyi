import org.hipparchus
import typing



_FieldProbabilityOfCollision__T = typing.TypeVar('_FieldProbabilityOfCollision__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldProbabilityOfCollision(typing.Generic[_FieldProbabilityOfCollision__T]):
    @typing.overload
    def __init__(self, t: _FieldProbabilityOfCollision__T, string: str): ...
    @typing.overload
    def __init__(self, t: _FieldProbabilityOfCollision__T, string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, t: _FieldProbabilityOfCollision__T, t2: _FieldProbabilityOfCollision__T, t3: _FieldProbabilityOfCollision__T, string: str, boolean: bool): ...
    def getLowerLimit(self) -> _FieldProbabilityOfCollision__T: ...
    def getProbabilityOfCollisionMethodName(self) -> str: ...
    def getUpperLimit(self) -> _FieldProbabilityOfCollision__T: ...
    def getValue(self) -> _FieldProbabilityOfCollision__T: ...
    def isMaxProbability(self) -> bool: ...

class ProbabilityOfCollision:
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, double: float, string: str): ...
    @typing.overload
    def __init__(self, double: float, string: str, boolean: bool): ...
    def getLowerLimit(self) -> float: ...
    def getProbabilityOfCollisionMethodName(self) -> str: ...
    def getUpperLimit(self) -> float: ...
    def getValue(self) -> float: ...
    def isMaxProbability(self) -> bool: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.ssa.metrics")``.

    FieldProbabilityOfCollision: typing.Type[FieldProbabilityOfCollision]
    ProbabilityOfCollision: typing.Type[ProbabilityOfCollision]
