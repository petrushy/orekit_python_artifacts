import java.lang
import org.hipparchus
import org.hipparchus.analysis.integration
import org.hipparchus.geometry.euclidean.twod
import org.hipparchus.linear
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm.cdm
import org.orekit.frames.encounter
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.ssa.metrics
import org.orekit.time
import org.orekit.utils
import typing



_FieldShortTermEncounter2DDefinition__T = typing.TypeVar('_FieldShortTermEncounter2DDefinition__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldShortTermEncounter2DDefinition(typing.Generic[_FieldShortTermEncounter2DDefinition__T]):
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], t: _FieldShortTermEncounter2DDefinition__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], t2: _FieldShortTermEncounter2DDefinition__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], t: _FieldShortTermEncounter2DDefinition__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], t2: _FieldShortTermEncounter2DDefinition__T, encounterLOFType: org.orekit.frames.encounter.EncounterLOFType, double: float): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], t: _FieldShortTermEncounter2DDefinition__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T], t: _FieldShortTermEncounter2DDefinition__T, encounterLOFType: org.orekit.frames.encounter.EncounterLOFType, double: float): ...
    def computeCombinedCovarianceInEncounterFrame(self) -> org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T]: ...
    def computeCombinedCovarianceInReferenceTNW(self) -> org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T]: ...
    def computeCoppolaEncounterDuration(self) -> _FieldShortTermEncounter2DDefinition__T: ...
    @typing.overload
    def computeMahalanobisDistance(self) -> _FieldShortTermEncounter2DDefinition__T: ...
    @typing.overload
    def computeMahalanobisDistance(self, double: float) -> _FieldShortTermEncounter2DDefinition__T: ...
    def computeMissDistance(self) -> _FieldShortTermEncounter2DDefinition__T: ...
    def computeOtherPositionInCollisionPlane(self) -> org.hipparchus.geometry.euclidean.twod.FieldVector2D[_FieldShortTermEncounter2DDefinition__T]: ...
    @typing.overload
    def computeOtherPositionInRotatedCollisionPlane(self) -> org.hipparchus.geometry.euclidean.twod.FieldVector2D[_FieldShortTermEncounter2DDefinition__T]: ...
    @typing.overload
    def computeOtherPositionInRotatedCollisionPlane(self, double: float) -> org.hipparchus.geometry.euclidean.twod.FieldVector2D[_FieldShortTermEncounter2DDefinition__T]: ...
    def computeOtherRelativeToReferencePVInReferenceInertial(self) -> org.orekit.utils.FieldPVCoordinates[_FieldShortTermEncounter2DDefinition__T]: ...
    def computeProjectedAndDiagonalizedCombinedPositionalCovarianceMatrix(self) -> org.hipparchus.linear.FieldMatrix[_FieldShortTermEncounter2DDefinition__T]: ...
    def computeProjectedCombinedPositionalCovarianceMatrix(self) -> org.hipparchus.linear.FieldMatrix[_FieldShortTermEncounter2DDefinition__T]: ...
    def computeReferenceInertialToCollisionPlaneProjectionMatrix(self) -> org.hipparchus.linear.FieldMatrix[_FieldShortTermEncounter2DDefinition__T]: ...
    _computeSquaredMahalanobisDistance_2__T = typing.TypeVar('_computeSquaredMahalanobisDistance_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _computeSquaredMahalanobisDistance_3__T = typing.TypeVar('_computeSquaredMahalanobisDistance_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeSquaredMahalanobisDistance(self) -> _FieldShortTermEncounter2DDefinition__T: ...
    @typing.overload
    def computeSquaredMahalanobisDistance(self, double: float) -> _FieldShortTermEncounter2DDefinition__T: ...
    @typing.overload
    @staticmethod
    def computeSquaredMahalanobisDistance(t: _computeSquaredMahalanobisDistance_2__T, t2: _computeSquaredMahalanobisDistance_2__T, t3: _computeSquaredMahalanobisDistance_2__T, t4: _computeSquaredMahalanobisDistance_2__T) -> _computeSquaredMahalanobisDistance_2__T: ...
    @typing.overload
    @staticmethod
    def computeSquaredMahalanobisDistance(fieldVector2D: org.hipparchus.geometry.euclidean.twod.FieldVector2D[_computeSquaredMahalanobisDistance_3__T], fieldMatrix: org.hipparchus.linear.FieldMatrix[_computeSquaredMahalanobisDistance_3__T]) -> _computeSquaredMahalanobisDistance_3__T: ...
    def getCombinedRadius(self) -> _FieldShortTermEncounter2DDefinition__T: ...
    def getEncounterFrame(self) -> org.orekit.frames.encounter.EncounterLOF: ...
    def getOtherAtTCA(self) -> org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T]: ...
    def getOtherCovariance(self) -> org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T]: ...
    def getReferenceAtTCA(self) -> org.orekit.orbits.FieldOrbit[_FieldShortTermEncounter2DDefinition__T]: ...
    def getReferenceCovariance(self) -> org.orekit.propagation.FieldStateCovariance[_FieldShortTermEncounter2DDefinition__T]: ...
    def getTca(self) -> org.orekit.time.FieldAbsoluteDate[_FieldShortTermEncounter2DDefinition__T]: ...
    def toEncounter(self) -> 'ShortTermEncounter2DDefinition': ...

class ShortTermEncounter2DDefinition:
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float, encounterLOFType: org.orekit.frames.encounter.EncounterLOFType, double3: float): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float): ...
    @typing.overload
    def __init__(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, encounterLOFType: org.orekit.frames.encounter.EncounterLOFType, double2: float): ...
    def computeCombinedCovarianceInEncounterFrame(self) -> org.orekit.propagation.StateCovariance: ...
    def computeCombinedCovarianceInReferenceTNW(self) -> org.orekit.propagation.StateCovariance: ...
    def computeCoppolaEncounterDuration(self) -> float: ...
    @typing.overload
    def computeMahalanobisDistance(self) -> float: ...
    @typing.overload
    def computeMahalanobisDistance(self, double: float) -> float: ...
    def computeMissDistance(self) -> float: ...
    def computeOtherPositionInCollisionPlane(self) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    @typing.overload
    def computeOtherPositionInRotatedCollisionPlane(self) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    @typing.overload
    def computeOtherPositionInRotatedCollisionPlane(self, double: float) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    def computeOtherRelativeToReferencePVInReferenceInertial(self) -> org.orekit.utils.PVCoordinates: ...
    def computeProjectedAndDiagonalizedCombinedPositionalCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def computeProjectedCombinedPositionalCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def computeReferenceInertialToCollisionPlaneProjectionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    @typing.overload
    def computeSquaredMahalanobisDistance(self) -> float: ...
    @typing.overload
    def computeSquaredMahalanobisDistance(self, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def computeSquaredMahalanobisDistance(double: float, double2: float, double3: float, double4: float) -> float: ...
    @typing.overload
    @staticmethod
    def computeSquaredMahalanobisDistance(vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D, realMatrix: org.hipparchus.linear.RealMatrix) -> float: ...
    def getCombinedRadius(self) -> float: ...
    def getEncounterFrame(self) -> org.orekit.frames.encounter.EncounterLOF: ...
    def getOtherAtTCA(self) -> org.orekit.orbits.Orbit: ...
    def getOtherCovariance(self) -> org.orekit.propagation.StateCovariance: ...
    def getReferenceAtTCA(self) -> org.orekit.orbits.Orbit: ...
    def getReferenceCovariance(self) -> org.orekit.propagation.StateCovariance: ...
    def getTca(self) -> org.orekit.time.AbsoluteDate: ...

class ShortTermEncounter2DPOCMethod:
    DEFAULT_ZERO_THRESHOLD: typing.ClassVar[float] = ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_8__T = typing.TypeVar('_compute_8__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_10__T = typing.TypeVar('_compute_10__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, t: _compute_0__T, t2: _compute_0__T, t3: _compute_0__T, t4: _compute_0__T, t5: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_3__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_8__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_8__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_9__T, t2: _compute_9__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_10__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_10__T], t: _compute_10__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_10__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_10__T], t2: _compute_10__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_10__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_11__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_11__T], t: _compute_11__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_12__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def getName(self) -> str: ...
    def getType(self) -> 'ShortTermEncounter2DPOCMethodType': ...
    def isAMaximumProbabilityOfCollisionMethod(self) -> bool: ...

class ShortTermEncounter2DPOCMethodType(java.lang.Enum['ShortTermEncounter2DPOCMethodType']):
    LAAS_2015: typing.ClassVar['ShortTermEncounter2DPOCMethodType'] = ...
    ALFANO_2005: typing.ClassVar['ShortTermEncounter2DPOCMethodType'] = ...
    PATERA_2005: typing.ClassVar['ShortTermEncounter2DPOCMethodType'] = ...
    ALFRIEND_1999: typing.ClassVar['ShortTermEncounter2DPOCMethodType'] = ...
    ALFRIEND_1999_MAX: typing.ClassVar['ShortTermEncounter2DPOCMethodType'] = ...
    CHAN_1997: typing.ClassVar['ShortTermEncounter2DPOCMethodType'] = ...
    def getCCSDSType(self) -> org.orekit.files.ccsds.definitions.PocMethodType: ...
    def getMethod(self) -> ShortTermEncounter2DPOCMethod: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ShortTermEncounter2DPOCMethodType': ...
    @staticmethod
    def values() -> typing.List['ShortTermEncounter2DPOCMethodType']: ...

class AbstractShortTermEncounter2DPOCMethod(ShortTermEncounter2DPOCMethod):
    DEFAULT_TCA_DIFFERENCE_TOLERANCE: typing.ClassVar[float] = ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_5__T = typing.TypeVar('_compute_5__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_6__T = typing.TypeVar('_compute_6__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_13__T = typing.TypeVar('_compute_13__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, t: _compute_0__T, t2: _compute_0__T, t3: _compute_0__T, t4: _compute_0__T, t5: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_3__T, t2: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_4__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_4__T], t: _compute_4__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_4__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_4__T], t2: _compute_4__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_5__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_5__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_5__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_5__T], t: _compute_5__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_5__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_6__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_6__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_11__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_12__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_12__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_12__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_12__T], t: _compute_12__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_13__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_13__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def getName(self) -> str: ...
    def isAMaximumProbabilityOfCollisionMethod(self) -> bool: ...

class PythonShortTermEncounter2DPOCMethod(ShortTermEncounter2DPOCMethod):
    def __init__(self): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_10__T = typing.TypeVar('_compute_10__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_9__T, t2: _compute_9__T, t3: _compute_9__T, t4: _compute_9__T, t5: _compute_9__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_10__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_10__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_11__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_11__T], t: _compute_11__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_12__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def finalize(self) -> None: ...
    def getName(self) -> str: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...
    def isAMaximumProbabilityOfCollisionMethod(self) -> bool: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class AbstractAlfriend1999(AbstractShortTermEncounter2DPOCMethod):
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_10__T = typing.TypeVar('_compute_10__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_9__T, t2: _compute_9__T, t3: _compute_9__T, t4: _compute_9__T, t5: _compute_9__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_10__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_10__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_11__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_11__T], t: _compute_11__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_12__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...

class AbstractShortTermEncounter1DNumerical2DPOCMethod(AbstractShortTermEncounter2DPOCMethod):
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_5__T = typing.TypeVar('_compute_5__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_6__T = typing.TypeVar('_compute_6__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_13__T = typing.TypeVar('_compute_13__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_14__T = typing.TypeVar('_compute_14__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_15__T = typing.TypeVar('_compute_15__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_16__T = typing.TypeVar('_compute_16__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_17__T = typing.TypeVar('_compute_17__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, t: _compute_0__T, t2: _compute_0__T, t3: _compute_0__T, t4: _compute_0__T, t5: _compute_0__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_0__T], int: int) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_3__T, t2: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_4__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_4__T], t: _compute_4__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_4__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_4__T], t2: _compute_4__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_5__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_5__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_5__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_5__T], t: _compute_5__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_5__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_6__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_6__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_11__T, t2: _compute_11__T, t3: _compute_11__T, t4: _compute_11__T, t5: _compute_11__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_12__T, t2: _compute_12__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_12__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_13__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_13__T], t: _compute_13__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_13__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_13__T], t2: _compute_13__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_13__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_13__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_14__T], fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_14__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_14__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_15__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_15__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_16__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_16__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_16__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_16__T], t: _compute_16__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_16__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_17__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_17__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double3: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double3: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...

class Alfano2005(AbstractShortTermEncounter2DPOCMethod):
    def __init__(self): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_10__T = typing.TypeVar('_compute_10__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_9__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_10__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_10__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_10__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_10__T], t: _compute_10__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_10__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_11__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, t: _compute_12__T, t2: _compute_12__T, t3: _compute_12__T, t4: _compute_12__T, t5: _compute_12__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...

class Chan1997(AbstractShortTermEncounter2DPOCMethod):
    def __init__(self): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_10__T = typing.TypeVar('_compute_10__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_9__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_10__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_10__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_10__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_10__T], t: _compute_10__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_10__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_11__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, t: _compute_12__T, t2: _compute_12__T, t3: _compute_12__T, t4: _compute_12__T, t5: _compute_12__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...

class Laas2015(AbstractShortTermEncounter2DPOCMethod):
    DEFAULT_SCALING_THRESHOLD: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_13__T = typing.TypeVar('_compute_13__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_9__T, t2: _compute_9__T, t3: _compute_9__T, t4: _compute_9__T, t5: _compute_9__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_11__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_12__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_12__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_12__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_12__T], t: _compute_12__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_13__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_13__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...

class PythonAbstractShortTermEncounter2DPOCMethod(AbstractShortTermEncounter2DPOCMethod):
    def __init__(self, string: str): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_13__T = typing.TypeVar('_compute_13__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_9__T, t2: _compute_9__T, t3: _compute_9__T, t4: _compute_9__T, t5: _compute_9__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_11__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_12__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_12__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_12__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_12__T], t: _compute_12__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_13__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_13__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def finalize(self) -> None: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class Alfriend1999(AbstractAlfriend1999):
    def __init__(self): ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...
    def isAMaximumProbabilityOfCollisionMethod(self) -> bool: ...

class Alfriend1999Max(AbstractAlfriend1999):
    def __init__(self): ...
    _computeValue_1__T = typing.TypeVar('_computeValue_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeValue(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def computeValue(self, t: _computeValue_1__T, t2: _computeValue_1__T, t3: _computeValue_1__T) -> _computeValue_1__T: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...
    def isAMaximumProbabilityOfCollisionMethod(self) -> bool: ...

class Patera2005(AbstractShortTermEncounter1DNumerical2DPOCMethod):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_10__T = typing.TypeVar('_compute_10__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_13__T = typing.TypeVar('_compute_13__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_14__T = typing.TypeVar('_compute_14__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_15__T = typing.TypeVar('_compute_15__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_16__T = typing.TypeVar('_compute_16__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_9__T, t2: _compute_9__T, t3: _compute_9__T, t4: _compute_9__T, t5: _compute_9__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_10__T, t2: _compute_10__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_10__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_10__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_11__T], t: _compute_11__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_11__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_11__T], t2: _compute_11__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_11__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_12__T], fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_12__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_13__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_13__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_14__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_14__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_14__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_14__T], t: _compute_14__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_14__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_15__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_15__T]: ...
    @typing.overload
    def compute(self, t: _compute_16__T, t2: _compute_16__T, t3: _compute_16__T, t4: _compute_16__T, t5: _compute_16__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_16__T], int: int) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_16__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double3: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double3: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...

class PythonAbstractAlfriend1999(AbstractAlfriend1999):
    def __init__(self, string: str): ...
    _computeValue_1__T = typing.TypeVar('_computeValue_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeValue(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def computeValue(self, t: _computeValue_1__T, t2: _computeValue_1__T, t3: _computeValue_1__T) -> _computeValue_1__T: ...
    def finalize(self) -> None: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonAbstractShortTermEncounter1DNumerical2DPOCMethod(AbstractShortTermEncounter1DNumerical2DPOCMethod):
    def __init__(self, string: str, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int): ...
    _compute_0__T = typing.TypeVar('_compute_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_1__T = typing.TypeVar('_compute_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_2__T = typing.TypeVar('_compute_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_3__T = typing.TypeVar('_compute_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_4__T = typing.TypeVar('_compute_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_9__T = typing.TypeVar('_compute_9__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_11__T = typing.TypeVar('_compute_11__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_12__T = typing.TypeVar('_compute_12__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_13__T = typing.TypeVar('_compute_13__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_14__T = typing.TypeVar('_compute_14__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_15__T = typing.TypeVar('_compute_15__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_16__T = typing.TypeVar('_compute_16__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compute_17__T = typing.TypeVar('_compute_17__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_0__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_0__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_1__T, t2: _compute_1__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_1__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t: _compute_2__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_2__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_2__T], t2: _compute_2__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_2__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_3__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_3__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_3__T], t: _compute_3__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_3__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_4__T]) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_4__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_9__T, t2: _compute_9__T, t3: _compute_9__T, t4: _compute_9__T, t5: _compute_9__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_9__T], int: int) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_9__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, t: _compute_11__T, t2: _compute_11__T, t3: _compute_11__T, t4: _compute_11__T, t5: _compute_11__T) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_11__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_12__T, t2: _compute_12__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_12__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_12__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_13__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_13__T], t: _compute_13__T, fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_13__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_13__T], t2: _compute_13__T, fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_13__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_13__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_14__T], fieldUnivariateIntegrator: org.hipparchus.analysis.integration.FieldUnivariateIntegrator[_compute_14__T], int: int, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_14__T]: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, t: _compute_15__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_15__T]: ...
    @typing.overload
    def compute(self, fieldOrbit: org.orekit.orbits.FieldOrbit[_compute_16__T], fieldStateCovariance: org.orekit.propagation.FieldStateCovariance[_compute_16__T], fieldOrbit2: org.orekit.orbits.FieldOrbit[_compute_16__T], fieldStateCovariance2: org.orekit.propagation.FieldStateCovariance[_compute_16__T], t: _compute_16__T, double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_16__T]: ...
    @typing.overload
    def compute(self, fieldShortTermEncounter2DDefinition: FieldShortTermEncounter2DDefinition[_compute_17__T], double: float) -> org.orekit.ssa.metrics.FieldProbabilityOfCollision[_compute_17__T]: ...
    @typing.overload
    def compute(self, double: float, double2: float, double3: float, double4: float, double5: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float, double2: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double3: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, double: float, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double2: float, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double3: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, univariateIntegrator: org.hipparchus.analysis.integration.UnivariateIntegrator, int: int, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, cdm: org.orekit.files.ccsds.ndm.cdm.Cdm, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, orbit: org.orekit.orbits.Orbit, stateCovariance: org.orekit.propagation.StateCovariance, orbit2: org.orekit.orbits.Orbit, stateCovariance2: org.orekit.propagation.StateCovariance, double: float, double2: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    @typing.overload
    def compute(self, shortTermEncounter2DDefinition: ShortTermEncounter2DDefinition, double: float) -> org.orekit.ssa.metrics.ProbabilityOfCollision: ...
    def finalize(self) -> None: ...
    def getType(self) -> ShortTermEncounter2DPOCMethodType: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.ssa.collision.shorttermencounter.probability.twod")``.

    AbstractAlfriend1999: typing.Type[AbstractAlfriend1999]
    AbstractShortTermEncounter1DNumerical2DPOCMethod: typing.Type[AbstractShortTermEncounter1DNumerical2DPOCMethod]
    AbstractShortTermEncounter2DPOCMethod: typing.Type[AbstractShortTermEncounter2DPOCMethod]
    Alfano2005: typing.Type[Alfano2005]
    Alfriend1999: typing.Type[Alfriend1999]
    Alfriend1999Max: typing.Type[Alfriend1999Max]
    Chan1997: typing.Type[Chan1997]
    FieldShortTermEncounter2DDefinition: typing.Type[FieldShortTermEncounter2DDefinition]
    Laas2015: typing.Type[Laas2015]
    Patera2005: typing.Type[Patera2005]
    PythonAbstractAlfriend1999: typing.Type[PythonAbstractAlfriend1999]
    PythonAbstractShortTermEncounter1DNumerical2DPOCMethod: typing.Type[PythonAbstractShortTermEncounter1DNumerical2DPOCMethod]
    PythonAbstractShortTermEncounter2DPOCMethod: typing.Type[PythonAbstractShortTermEncounter2DPOCMethod]
    PythonShortTermEncounter2DPOCMethod: typing.Type[PythonShortTermEncounter2DPOCMethod]
    ShortTermEncounter2DDefinition: typing.Type[ShortTermEncounter2DDefinition]
    ShortTermEncounter2DPOCMethod: typing.Type[ShortTermEncounter2DPOCMethod]
    ShortTermEncounter2DPOCMethodType: typing.Type[ShortTermEncounter2DPOCMethodType]
