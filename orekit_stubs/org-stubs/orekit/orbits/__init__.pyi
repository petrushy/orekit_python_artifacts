import java.io
import java.lang
import java.util
import java.util.stream
import org.hipparchus
import org.hipparchus.analysis.polynomials
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.analytical
import org.orekit.time
import org.orekit.utils
import typing



_AbstractFieldOrbitInterpolator__KK = typing.TypeVar('_AbstractFieldOrbitInterpolator__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class AbstractFieldOrbitInterpolator(org.orekit.time.AbstractFieldTimeInterpolator['FieldOrbit'[_AbstractFieldOrbitInterpolator__KK], _AbstractFieldOrbitInterpolator__KK], typing.Generic[_AbstractFieldOrbitInterpolator__KK]):
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame): ...
    def getOutputInertialFrame(self) -> org.orekit.frames.Frame: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.FieldTimeStamped], typing.Sequence[org.orekit.time.FieldTimeStamped], typing.Set[org.orekit.time.FieldTimeStamped]]) -> org.orekit.time.FieldTimeStamped: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[org.orekit.time.FieldTimeStamped]) -> org.orekit.time.FieldTimeStamped: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_AbstractFieldOrbitInterpolator__KK], collection: typing.Union[java.util.Collection['FieldOrbit'[_AbstractFieldOrbitInterpolator__KK]], typing.Sequence['FieldOrbit'[_AbstractFieldOrbitInterpolator__KK]], typing.Set['FieldOrbit'[_AbstractFieldOrbitInterpolator__KK]]]) -> 'FieldOrbit'[_AbstractFieldOrbitInterpolator__KK]: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_AbstractFieldOrbitInterpolator__KK], stream: java.util.stream.Stream[org.orekit.time.FieldTimeStamped]) -> org.orekit.time.FieldTimeStamped: ...

class AbstractOrbitInterpolator(org.orekit.time.AbstractTimeInterpolator['Orbit']):
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame): ...
    @staticmethod
    def checkOrbitsConsistency(collection: typing.Union[java.util.Collection['Orbit'], typing.Sequence['Orbit'], typing.Set['Orbit']]) -> None: ...
    def getOutputInertialFrame(self) -> org.orekit.frames.Frame: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection['Orbit'], typing.Sequence['Orbit'], typing.Set['Orbit']]) -> 'Orbit': ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[org.orekit.time.TimeStamped]) -> org.orekit.time.TimeStamped: ...

class CR3BPDifferentialCorrection:
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, cR3BPSystem: org.orekit.bodies.CR3BPSystem, double: float): ...
    def compute(self, librationOrbitType: 'LibrationOrbitType') -> org.orekit.utils.PVCoordinates: ...
    def computeLyapunov(self) -> org.orekit.utils.PVCoordinates: ...
    def getOrbitalPeriod(self) -> float: ...

class CircularLatitudeArgumentUtility:
    @staticmethod
    def eccentricToMean(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def eccentricToTrue(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def meanToEccentric(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def meanToTrue(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def trueToEccentric(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def trueToMean(double: float, double2: float, double3: float) -> float: ...

class EquinoctialLongitudeArgumentUtility:
    @staticmethod
    def eccentricToMean(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def eccentricToTrue(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def meanToEccentric(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def meanToTrue(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def trueToEccentric(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def trueToMean(double: float, double2: float, double3: float) -> float: ...

class FieldCircularLatitudeArgumentUtility:
    _eccentricToMean__T = typing.TypeVar('_eccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToMean(t: _eccentricToMean__T, t2: _eccentricToMean__T, t3: _eccentricToMean__T) -> _eccentricToMean__T: ...
    _eccentricToTrue__T = typing.TypeVar('_eccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToTrue(t: _eccentricToTrue__T, t2: _eccentricToTrue__T, t3: _eccentricToTrue__T) -> _eccentricToTrue__T: ...
    _meanToEccentric__T = typing.TypeVar('_meanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEccentric(t: _meanToEccentric__T, t2: _meanToEccentric__T, t3: _meanToEccentric__T) -> _meanToEccentric__T: ...
    _meanToTrue__T = typing.TypeVar('_meanToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToTrue(t: _meanToTrue__T, t2: _meanToTrue__T, t3: _meanToTrue__T) -> _meanToTrue__T: ...
    _trueToEccentric__T = typing.TypeVar('_trueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEccentric(t: _trueToEccentric__T, t2: _trueToEccentric__T, t3: _trueToEccentric__T) -> _trueToEccentric__T: ...
    _trueToMean__T = typing.TypeVar('_trueToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToMean(t: _trueToMean__T, t2: _trueToMean__T, t3: _trueToMean__T) -> _trueToMean__T: ...

class FieldEquinoctialLongitudeArgumentUtility:
    _eccentricToMean__T = typing.TypeVar('_eccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToMean(t: _eccentricToMean__T, t2: _eccentricToMean__T, t3: _eccentricToMean__T) -> _eccentricToMean__T: ...
    _eccentricToTrue__T = typing.TypeVar('_eccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToTrue(t: _eccentricToTrue__T, t2: _eccentricToTrue__T, t3: _eccentricToTrue__T) -> _eccentricToTrue__T: ...
    _meanToEccentric__T = typing.TypeVar('_meanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEccentric(t: _meanToEccentric__T, t2: _meanToEccentric__T, t3: _meanToEccentric__T) -> _meanToEccentric__T: ...
    _meanToTrue__T = typing.TypeVar('_meanToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToTrue(t: _meanToTrue__T, t2: _meanToTrue__T, t3: _meanToTrue__T) -> _meanToTrue__T: ...
    _trueToEccentric__T = typing.TypeVar('_trueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEccentric(t: _trueToEccentric__T, t2: _trueToEccentric__T, t3: _trueToEccentric__T) -> _trueToEccentric__T: ...
    _trueToMean__T = typing.TypeVar('_trueToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToMean(t: _trueToMean__T, t2: _trueToMean__T, t3: _trueToMean__T) -> _trueToMean__T: ...

class FieldKeplerianAnomalyUtility:
    _ellipticEccentricToMean__T = typing.TypeVar('_ellipticEccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticEccentricToMean(t: _ellipticEccentricToMean__T, t2: _ellipticEccentricToMean__T) -> _ellipticEccentricToMean__T: ...
    _ellipticEccentricToTrue__T = typing.TypeVar('_ellipticEccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticEccentricToTrue(t: _ellipticEccentricToTrue__T, t2: _ellipticEccentricToTrue__T) -> _ellipticEccentricToTrue__T: ...
    _ellipticMeanToEccentric__T = typing.TypeVar('_ellipticMeanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticMeanToEccentric(t: _ellipticMeanToEccentric__T, t2: _ellipticMeanToEccentric__T) -> _ellipticMeanToEccentric__T: ...
    _ellipticMeanToTrue__T = typing.TypeVar('_ellipticMeanToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticMeanToTrue(t: _ellipticMeanToTrue__T, t2: _ellipticMeanToTrue__T) -> _ellipticMeanToTrue__T: ...
    _ellipticTrueToEccentric__T = typing.TypeVar('_ellipticTrueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticTrueToEccentric(t: _ellipticTrueToEccentric__T, t2: _ellipticTrueToEccentric__T) -> _ellipticTrueToEccentric__T: ...
    _ellipticTrueToMean__T = typing.TypeVar('_ellipticTrueToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticTrueToMean(t: _ellipticTrueToMean__T, t2: _ellipticTrueToMean__T) -> _ellipticTrueToMean__T: ...
    _hyperbolicEccentricToMean__T = typing.TypeVar('_hyperbolicEccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicEccentricToMean(t: _hyperbolicEccentricToMean__T, t2: _hyperbolicEccentricToMean__T) -> _hyperbolicEccentricToMean__T: ...
    _hyperbolicEccentricToTrue__T = typing.TypeVar('_hyperbolicEccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicEccentricToTrue(t: _hyperbolicEccentricToTrue__T, t2: _hyperbolicEccentricToTrue__T) -> _hyperbolicEccentricToTrue__T: ...
    _hyperbolicMeanToEccentric__T = typing.TypeVar('_hyperbolicMeanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicMeanToEccentric(t: _hyperbolicMeanToEccentric__T, t2: _hyperbolicMeanToEccentric__T) -> _hyperbolicMeanToEccentric__T: ...
    _hyperbolicMeanToTrue__T = typing.TypeVar('_hyperbolicMeanToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicMeanToTrue(t: _hyperbolicMeanToTrue__T, t2: _hyperbolicMeanToTrue__T) -> _hyperbolicMeanToTrue__T: ...
    _hyperbolicTrueToEccentric__T = typing.TypeVar('_hyperbolicTrueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicTrueToEccentric(t: _hyperbolicTrueToEccentric__T, t2: _hyperbolicTrueToEccentric__T) -> _hyperbolicTrueToEccentric__T: ...
    _hyperbolicTrueToMean__T = typing.TypeVar('_hyperbolicTrueToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicTrueToMean(t: _hyperbolicTrueToMean__T, t2: _hyperbolicTrueToMean__T) -> _hyperbolicTrueToMean__T: ...

_FieldOrbit__T = typing.TypeVar('_FieldOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldOrbit(org.orekit.utils.FieldPVCoordinatesProvider[_FieldOrbit__T], org.orekit.time.FieldTimeStamped[_FieldOrbit__T], org.orekit.time.FieldTimeShiftable['FieldOrbit'[_FieldOrbit__T], _FieldOrbit__T], typing.Generic[_FieldOrbit__T]):
    def addKeplerContribution(self, positionAngleType: 'PositionAngleType', t: _FieldOrbit__T, tArray: typing.List[_FieldOrbit__T]) -> None: ...
    def getA(self) -> _FieldOrbit__T: ...
    def getADot(self) -> _FieldOrbit__T: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldOrbit__T]: ...
    def getE(self) -> _FieldOrbit__T: ...
    def getEDot(self) -> _FieldOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldOrbit__T: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getHx(self) -> _FieldOrbit__T: ...
    def getHxDot(self) -> _FieldOrbit__T: ...
    def getHy(self) -> _FieldOrbit__T: ...
    def getHyDot(self) -> _FieldOrbit__T: ...
    def getI(self) -> _FieldOrbit__T: ...
    def getIDot(self) -> _FieldOrbit__T: ...
    def getJacobianWrtCartesian(self, positionAngleType: 'PositionAngleType', tArray: typing.List[typing.List[_FieldOrbit__T]]) -> None: ...
    def getJacobianWrtParameters(self, positionAngleType: 'PositionAngleType', tArray: typing.List[typing.List[_FieldOrbit__T]]) -> None: ...
    def getKeplerianMeanMotion(self) -> _FieldOrbit__T: ...
    def getKeplerianPeriod(self) -> _FieldOrbit__T: ...
    def getLE(self) -> _FieldOrbit__T: ...
    def getLEDot(self) -> _FieldOrbit__T: ...
    def getLM(self) -> _FieldOrbit__T: ...
    def getLMDot(self) -> _FieldOrbit__T: ...
    def getLv(self) -> _FieldOrbit__T: ...
    def getLvDot(self) -> _FieldOrbit__T: ...
    def getMeanAnomalyDotWrtA(self) -> _FieldOrbit__T: ...
    def getMu(self) -> _FieldOrbit__T: ...
    @typing.overload
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldOrbit__T]: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldOrbit__T]: ...
    @typing.overload
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldOrbit__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldOrbit__T]: ...
    @typing.overload
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldOrbit__T]: ...
    @typing.overload
    def getPosition(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldOrbit__T]: ...
    @typing.overload
    def getPosition(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldOrbit__T], frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldOrbit__T]: ...
    def getType(self) -> 'OrbitType': ...
    def hasDerivatives(self) -> bool: ...
    def isElliptical(self) -> bool: ...
    @typing.overload
    def shiftedBy(self, t: _FieldOrbit__T) -> 'FieldOrbit'[_FieldOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> _FieldOrbit__T: ...
    def toOrbit(self) -> 'Orbit': ...

class KeplerianAnomalyUtility:
    @staticmethod
    def ellipticEccentricToMean(double: float, double2: float) -> float: ...
    @staticmethod
    def ellipticEccentricToTrue(double: float, double2: float) -> float: ...
    @staticmethod
    def ellipticMeanToEccentric(double: float, double2: float) -> float: ...
    @staticmethod
    def ellipticMeanToTrue(double: float, double2: float) -> float: ...
    @staticmethod
    def ellipticTrueToEccentric(double: float, double2: float) -> float: ...
    @staticmethod
    def ellipticTrueToMean(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicEccentricToMean(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicEccentricToTrue(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicMeanToEccentric(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicMeanToTrue(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicTrueToEccentric(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicTrueToMean(double: float, double2: float) -> float: ...

class KeplerianMotionCartesianUtility:
    _predictPositionVelocity_0__T = typing.TypeVar('_predictPositionVelocity_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def predictPositionVelocity(t: _predictPositionVelocity_0__T, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_predictPositionVelocity_0__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_predictPositionVelocity_0__T], t2: _predictPositionVelocity_0__T) -> org.orekit.utils.FieldPVCoordinates[_predictPositionVelocity_0__T]: ...
    @typing.overload
    @staticmethod
    def predictPositionVelocity(double: float, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double2: float) -> org.orekit.utils.PVCoordinates: ...

class LibrationOrbit:
    def applyDifferentialCorrection(self) -> None: ...
    def getInitialPV(self) -> org.orekit.utils.PVCoordinates: ...
    def getManifolds(self, spacecraftState: org.orekit.propagation.SpacecraftState, boolean: bool) -> org.orekit.utils.PVCoordinates: ...
    def getOrbitalPeriod(self) -> float: ...

class LibrationOrbitFamily(java.lang.Enum['LibrationOrbitFamily']):
    NORTHERN: typing.ClassVar['LibrationOrbitFamily'] = ...
    SOUTHERN: typing.ClassVar['LibrationOrbitFamily'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LibrationOrbitFamily': ...
    @staticmethod
    def values() -> typing.List['LibrationOrbitFamily']: ...

class LibrationOrbitType(java.lang.Enum['LibrationOrbitType']):
    HALO: typing.ClassVar['LibrationOrbitType'] = ...
    LYAPUNOV: typing.ClassVar['LibrationOrbitType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LibrationOrbitType': ...
    @staticmethod
    def values() -> typing.List['LibrationOrbitType']: ...

class Orbit(org.orekit.time.TimeStamped, org.orekit.time.TimeShiftable['Orbit'], java.io.Serializable, org.orekit.utils.PVCoordinatesProvider):
    def addKeplerContribution(self, positionAngleType: 'PositionAngleType', double: float, doubleArray: typing.List[float]) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getJacobianWrtCartesian(self, positionAngleType: 'PositionAngleType', doubleArray: typing.List[typing.List[float]]) -> None: ...
    def getJacobianWrtParameters(self, positionAngleType: 'PositionAngleType', doubleArray: typing.List[typing.List[float]]) -> None: ...
    def getKeplerianMeanMotion(self) -> float: ...
    def getKeplerianPeriod(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getMeanAnomalyDotWrtA(self) -> float: ...
    def getMu(self) -> float: ...
    @typing.overload
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def getPosition(self, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def getPosition(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getType(self) -> 'OrbitType': ...
    def hasDerivatives(self) -> bool: ...
    def isElliptical(self) -> bool: ...
    def shiftedBy(self, double: float) -> 'Orbit': ...

class OrbitType(java.lang.Enum['OrbitType']):
    CARTESIAN: typing.ClassVar['OrbitType'] = ...
    CIRCULAR: typing.ClassVar['OrbitType'] = ...
    EQUINOCTIAL: typing.ClassVar['OrbitType'] = ...
    KEPLERIAN: typing.ClassVar['OrbitType'] = ...
    POS_X: typing.ClassVar[str] = ...
    POS_Y: typing.ClassVar[str] = ...
    POS_Z: typing.ClassVar[str] = ...
    VEL_X: typing.ClassVar[str] = ...
    VEL_Y: typing.ClassVar[str] = ...
    VEL_Z: typing.ClassVar[str] = ...
    A: typing.ClassVar[str] = ...
    ECC: typing.ClassVar[str] = ...
    E_X: typing.ClassVar[str] = ...
    E_Y: typing.ClassVar[str] = ...
    INC: typing.ClassVar[str] = ...
    H_X: typing.ClassVar[str] = ...
    H_Y: typing.ClassVar[str] = ...
    PA: typing.ClassVar[str] = ...
    RAAN: typing.ClassVar[str] = ...
    MEAN_ANOM: typing.ClassVar[str] = ...
    ECC_ANOM: typing.ClassVar[str] = ...
    TRUE_ANOM: typing.ClassVar[str] = ...
    MEAN_LAT_ARG: typing.ClassVar[str] = ...
    ECC_LAT_ARG: typing.ClassVar[str] = ...
    TRUE_LAT_ARG: typing.ClassVar[str] = ...
    MEAN_LON_ARG: typing.ClassVar[str] = ...
    ECC_LON_ARG: typing.ClassVar[str] = ...
    TRUE_LON_ARG: typing.ClassVar[str] = ...
    _convertToFieldOrbit__T = typing.TypeVar('_convertToFieldOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def convertToFieldOrbit(self, field: org.hipparchus.Field[_convertToFieldOrbit__T], orbit: Orbit) -> FieldOrbit[_convertToFieldOrbit__T]: ...
    _convertType_0__T = typing.TypeVar('_convertType_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def convertType(self, fieldOrbit: FieldOrbit[_convertType_0__T]) -> FieldOrbit[_convertType_0__T]: ...
    @typing.overload
    def convertType(self, orbit: Orbit) -> Orbit: ...
    def getDrivers(self, double: float, orbit: Orbit, positionAngleType: 'PositionAngleType') -> org.orekit.utils.ParameterDriversList: ...
    def isPositionAngleBased(self) -> bool: ...
    _mapArrayToOrbit_0__T = typing.TypeVar('_mapArrayToOrbit_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mapArrayToOrbit(self, tArray: typing.List[_mapArrayToOrbit_0__T], tArray2: typing.List[_mapArrayToOrbit_0__T], positionAngleType: 'PositionAngleType', fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mapArrayToOrbit_0__T], t3: _mapArrayToOrbit_0__T, frame: org.orekit.frames.Frame) -> FieldOrbit[_mapArrayToOrbit_0__T]: ...
    @typing.overload
    def mapArrayToOrbit(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], positionAngleType: 'PositionAngleType', absoluteDate: org.orekit.time.AbsoluteDate, double3: float, frame: org.orekit.frames.Frame) -> Orbit: ...
    _mapOrbitToArray_0__T = typing.TypeVar('_mapOrbitToArray_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mapOrbitToArray(self, fieldOrbit: FieldOrbit[_mapOrbitToArray_0__T], positionAngleType: 'PositionAngleType', tArray: typing.List[_mapOrbitToArray_0__T], tArray2: typing.List[_mapOrbitToArray_0__T]) -> None: ...
    @typing.overload
    def mapOrbitToArray(self, orbit: Orbit, positionAngleType: 'PositionAngleType', doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> None: ...
    _normalize_0__T = typing.TypeVar('_normalize_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def normalize(self, fieldOrbit: FieldOrbit[_normalize_0__T], fieldOrbit2: FieldOrbit[_normalize_0__T]) -> FieldOrbit[_normalize_0__T]: ...
    @typing.overload
    def normalize(self, orbit: Orbit, orbit2: Orbit) -> Orbit: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OrbitType': ...
    @staticmethod
    def values() -> typing.List['OrbitType']: ...

class PositionAngleBased:
    def getCachedPositionAngleType(self) -> 'PositionAngleType': ...
    def hasRates(self) -> bool: ...
    def removeRates(self) -> 'PositionAngleBased': ...

class PositionAngleType(java.lang.Enum['PositionAngleType']):
    MEAN: typing.ClassVar['PositionAngleType'] = ...
    ECCENTRIC: typing.ClassVar['PositionAngleType'] = ...
    TRUE: typing.ClassVar['PositionAngleType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PositionAngleType': ...
    @staticmethod
    def values() -> typing.List['PositionAngleType']: ...

class RichardsonExpansion:
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, lagrangianPoints: org.orekit.utils.LagrangianPoints): ...
    def computeHaloFirstGuess(self, double: float, librationOrbitFamily: LibrationOrbitFamily, double2: float, double3: float) -> org.orekit.utils.PVCoordinates: ...
    def computeLyapunovFirstGuess(self, double: float, double2: float, double3: float) -> org.orekit.utils.PVCoordinates: ...
    def getCr3bpSystem(self) -> org.orekit.bodies.CR3BPSystem: ...
    def getHaloOrbitalPeriod(self, double: float) -> float: ...
    def getLagrangianPoint(self) -> org.orekit.utils.LagrangianPoints: ...
    def getLyapunovOrbitalPeriod(self, double: float) -> float: ...

class WalkerConstellation:
    def __init__(self, int: int, int2: int, int3: int): ...
    _buildReferenceSlot__O = typing.TypeVar('_buildReferenceSlot__O', bound=Orbit)  # <O>
    def buildReferenceSlot(self, o: _buildReferenceSlot__O) -> 'WalkerConstellationSlot'[_buildReferenceSlot__O]: ...
    _buildRegularSlots__O = typing.TypeVar('_buildRegularSlots__O', bound=Orbit)  # <O>
    def buildRegularSlots(self, o: _buildRegularSlots__O) -> java.util.List[java.util.List['WalkerConstellationSlot'[_buildRegularSlots__O]]]: ...
    _buildSlot__O = typing.TypeVar('_buildSlot__O', bound=Orbit)  # <O>
    def buildSlot(self, walkerConstellationSlot: 'WalkerConstellationSlot'[_buildSlot__O], int: int, double: float) -> 'WalkerConstellationSlot'[_buildSlot__O]: ...
    def getF(self) -> int: ...
    def getP(self) -> int: ...
    def getT(self) -> int: ...

_WalkerConstellationSlot__O = typing.TypeVar('_WalkerConstellationSlot__O', bound=Orbit)  # <O>
class WalkerConstellationSlot(typing.Generic[_WalkerConstellationSlot__O]):
    def getConstellation(self) -> WalkerConstellation: ...
    def getOrbit(self) -> _WalkerConstellationSlot__O: ...
    def getPlane(self) -> int: ...
    def getSatellite(self) -> float: ...

class CartesianOrbit(Orbit):
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, double: float, doubleArray: typing.List[float]) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    def shiftedBy(self, double: float) -> 'CartesianOrbit': ...
    def toString(self) -> str: ...

class CircularOrbit(Orbit, PositionAngleBased):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, double: float, doubleArray: typing.List[float]) -> None: ...
    @staticmethod
    def eccentricToMean(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def eccentricToTrue(double: float, double2: float, double3: float) -> float: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getAlpha(self, positionAngleType: PositionAngleType) -> float: ...
    def getAlphaDot(self, positionAngleType: PositionAngleType) -> float: ...
    def getAlphaE(self) -> float: ...
    def getAlphaEDot(self) -> float: ...
    def getAlphaM(self) -> float: ...
    def getAlphaMDot(self) -> float: ...
    def getAlphaV(self) -> float: ...
    def getAlphaVDot(self) -> float: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def getCircularEx(self) -> float: ...
    def getCircularExDot(self) -> float: ...
    def getCircularEy(self) -> float: ...
    def getCircularEyDot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getRightAscensionOfAscendingNode(self) -> float: ...
    def getRightAscensionOfAscendingNodeDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def hasRates(self) -> bool: ...
    @staticmethod
    def meanToEccentric(double: float, double2: float, double3: float) -> float: ...
    def removeRates(self) -> 'CircularOrbit': ...
    def shiftedBy(self, double: float) -> 'CircularOrbit': ...
    def toString(self) -> str: ...
    @staticmethod
    def trueToEccentric(double: float, double2: float, double3: float) -> float: ...

class EquinoctialOrbit(Orbit, PositionAngleBased):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, double: float, doubleArray: typing.List[float]) -> None: ...
    @staticmethod
    def eccentricToMean(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def eccentricToTrue(double: float, double2: float, double3: float) -> float: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getL(self, positionAngleType: PositionAngleType) -> float: ...
    def getLDot(self, positionAngleType: PositionAngleType) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def hasRates(self) -> bool: ...
    @staticmethod
    def meanToEccentric(double: float, double2: float, double3: float) -> float: ...
    def removeRates(self) -> 'EquinoctialOrbit': ...
    def shiftedBy(self, double: float) -> 'EquinoctialOrbit': ...
    def toString(self) -> str: ...
    @staticmethod
    def trueToEccentric(double: float, double2: float, double3: float) -> float: ...

_FieldCartesianOrbit__T = typing.TypeVar('_FieldCartesianOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCartesianOrbit(FieldOrbit[_FieldCartesianOrbit__T], typing.Generic[_FieldCartesianOrbit__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldCartesianOrbit__T], cartesianOrbit: CartesianOrbit): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldCartesianOrbit__T], orbit: Orbit): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldCartesianOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldCartesianOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCartesianOrbit__T], t: _FieldCartesianOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldCartesianOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldCartesianOrbit__T): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, t: _FieldCartesianOrbit__T, tArray: typing.List[_FieldCartesianOrbit__T]) -> None: ...
    def getA(self) -> _FieldCartesianOrbit__T: ...
    def getADot(self) -> _FieldCartesianOrbit__T: ...
    def getE(self) -> _FieldCartesianOrbit__T: ...
    def getEDot(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldCartesianOrbit__T: ...
    def getHx(self) -> _FieldCartesianOrbit__T: ...
    def getHxDot(self) -> _FieldCartesianOrbit__T: ...
    def getHy(self) -> _FieldCartesianOrbit__T: ...
    def getHyDot(self) -> _FieldCartesianOrbit__T: ...
    def getI(self) -> _FieldCartesianOrbit__T: ...
    def getIDot(self) -> _FieldCartesianOrbit__T: ...
    def getLE(self) -> _FieldCartesianOrbit__T: ...
    def getLEDot(self) -> _FieldCartesianOrbit__T: ...
    def getLM(self) -> _FieldCartesianOrbit__T: ...
    def getLMDot(self) -> _FieldCartesianOrbit__T: ...
    def getLv(self) -> _FieldCartesianOrbit__T: ...
    def getLvDot(self) -> _FieldCartesianOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldCartesianOrbit'[_FieldCartesianOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldCartesianOrbit__T) -> 'FieldCartesianOrbit'[_FieldCartesianOrbit__T]: ...
    def toOrbit(self) -> CartesianOrbit: ...
    def toString(self) -> str: ...

_FieldCircularOrbit__T = typing.TypeVar('_FieldCircularOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCircularOrbit(FieldOrbit[_FieldCircularOrbit__T], PositionAngleBased, typing.Generic[_FieldCircularOrbit__T]):
    @typing.overload
    def __init__(self, t: _FieldCircularOrbit__T, t2: _FieldCircularOrbit__T, t3: _FieldCircularOrbit__T, t4: _FieldCircularOrbit__T, t5: _FieldCircularOrbit__T, t6: _FieldCircularOrbit__T, t7: _FieldCircularOrbit__T, t8: _FieldCircularOrbit__T, t9: _FieldCircularOrbit__T, t10: _FieldCircularOrbit__T, t11: _FieldCircularOrbit__T, t12: _FieldCircularOrbit__T, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t13: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldCircularOrbit__T, t2: _FieldCircularOrbit__T, t3: _FieldCircularOrbit__T, t4: _FieldCircularOrbit__T, t5: _FieldCircularOrbit__T, t6: _FieldCircularOrbit__T, t7: _FieldCircularOrbit__T, t8: _FieldCircularOrbit__T, t9: _FieldCircularOrbit__T, t10: _FieldCircularOrbit__T, t11: _FieldCircularOrbit__T, t12: _FieldCircularOrbit__T, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t13: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldCircularOrbit__T, t2: _FieldCircularOrbit__T, t3: _FieldCircularOrbit__T, t4: _FieldCircularOrbit__T, t5: _FieldCircularOrbit__T, t6: _FieldCircularOrbit__T, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t7: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldCircularOrbit__T, t2: _FieldCircularOrbit__T, t3: _FieldCircularOrbit__T, t4: _FieldCircularOrbit__T, t5: _FieldCircularOrbit__T, t6: _FieldCircularOrbit__T, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t7: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldCircularOrbit__T], circularOrbit: CircularOrbit): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldCircularOrbit__T], orbit: Orbit): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldCircularOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldCircularOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldCircularOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldCircularOrbit__T): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, t: _FieldCircularOrbit__T, tArray: typing.List[_FieldCircularOrbit__T]) -> None: ...
    _eccentricToMean__T = typing.TypeVar('_eccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToMean(t: _eccentricToMean__T, t2: _eccentricToMean__T, t3: _eccentricToMean__T) -> _eccentricToMean__T: ...
    _eccentricToTrue__T = typing.TypeVar('_eccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToTrue(t: _eccentricToTrue__T, t2: _eccentricToTrue__T, t3: _eccentricToTrue__T) -> _eccentricToTrue__T: ...
    def getA(self) -> _FieldCircularOrbit__T: ...
    def getADot(self) -> _FieldCircularOrbit__T: ...
    def getAlpha(self, positionAngleType: PositionAngleType) -> _FieldCircularOrbit__T: ...
    def getAlphaDot(self, positionAngleType: PositionAngleType) -> _FieldCircularOrbit__T: ...
    def getAlphaE(self) -> _FieldCircularOrbit__T: ...
    def getAlphaEDot(self) -> _FieldCircularOrbit__T: ...
    def getAlphaM(self) -> _FieldCircularOrbit__T: ...
    def getAlphaMDot(self) -> _FieldCircularOrbit__T: ...
    def getAlphaV(self) -> _FieldCircularOrbit__T: ...
    def getAlphaVDot(self) -> _FieldCircularOrbit__T: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def getCircularEx(self) -> _FieldCircularOrbit__T: ...
    def getCircularExDot(self) -> _FieldCircularOrbit__T: ...
    def getCircularEy(self) -> _FieldCircularOrbit__T: ...
    def getCircularEyDot(self) -> _FieldCircularOrbit__T: ...
    def getE(self) -> _FieldCircularOrbit__T: ...
    def getEDot(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldCircularOrbit__T: ...
    def getHx(self) -> _FieldCircularOrbit__T: ...
    def getHxDot(self) -> _FieldCircularOrbit__T: ...
    def getHy(self) -> _FieldCircularOrbit__T: ...
    def getHyDot(self) -> _FieldCircularOrbit__T: ...
    def getI(self) -> _FieldCircularOrbit__T: ...
    def getIDot(self) -> _FieldCircularOrbit__T: ...
    def getLE(self) -> _FieldCircularOrbit__T: ...
    def getLEDot(self) -> _FieldCircularOrbit__T: ...
    def getLM(self) -> _FieldCircularOrbit__T: ...
    def getLMDot(self) -> _FieldCircularOrbit__T: ...
    def getLv(self) -> _FieldCircularOrbit__T: ...
    def getLvDot(self) -> _FieldCircularOrbit__T: ...
    def getRightAscensionOfAscendingNode(self) -> _FieldCircularOrbit__T: ...
    def getRightAscensionOfAscendingNodeDot(self) -> _FieldCircularOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    def hasRates(self) -> bool: ...
    _meanToEccentric__T = typing.TypeVar('_meanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEccentric(t: _meanToEccentric__T, t2: _meanToEccentric__T, t3: _meanToEccentric__T) -> _meanToEccentric__T: ...
    def removeRates(self) -> 'FieldCircularOrbit'[_FieldCircularOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldCircularOrbit'[_FieldCircularOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldCircularOrbit__T) -> 'FieldCircularOrbit'[_FieldCircularOrbit__T]: ...
    def toOrbit(self) -> CircularOrbit: ...
    def toString(self) -> str: ...
    _trueToEccentric__T = typing.TypeVar('_trueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEccentric(t: _trueToEccentric__T, t2: _trueToEccentric__T, t3: _trueToEccentric__T) -> _trueToEccentric__T: ...

_FieldEquinoctialOrbit__T = typing.TypeVar('_FieldEquinoctialOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEquinoctialOrbit(FieldOrbit[_FieldEquinoctialOrbit__T], PositionAngleBased, typing.Generic[_FieldEquinoctialOrbit__T]):
    @typing.overload
    def __init__(self, t: _FieldEquinoctialOrbit__T, t2: _FieldEquinoctialOrbit__T, t3: _FieldEquinoctialOrbit__T, t4: _FieldEquinoctialOrbit__T, t5: _FieldEquinoctialOrbit__T, t6: _FieldEquinoctialOrbit__T, t7: _FieldEquinoctialOrbit__T, t8: _FieldEquinoctialOrbit__T, t9: _FieldEquinoctialOrbit__T, t10: _FieldEquinoctialOrbit__T, t11: _FieldEquinoctialOrbit__T, t12: _FieldEquinoctialOrbit__T, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t13: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldEquinoctialOrbit__T, t2: _FieldEquinoctialOrbit__T, t3: _FieldEquinoctialOrbit__T, t4: _FieldEquinoctialOrbit__T, t5: _FieldEquinoctialOrbit__T, t6: _FieldEquinoctialOrbit__T, t7: _FieldEquinoctialOrbit__T, t8: _FieldEquinoctialOrbit__T, t9: _FieldEquinoctialOrbit__T, t10: _FieldEquinoctialOrbit__T, t11: _FieldEquinoctialOrbit__T, t12: _FieldEquinoctialOrbit__T, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t13: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldEquinoctialOrbit__T, t2: _FieldEquinoctialOrbit__T, t3: _FieldEquinoctialOrbit__T, t4: _FieldEquinoctialOrbit__T, t5: _FieldEquinoctialOrbit__T, t6: _FieldEquinoctialOrbit__T, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t7: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldEquinoctialOrbit__T, t2: _FieldEquinoctialOrbit__T, t3: _FieldEquinoctialOrbit__T, t4: _FieldEquinoctialOrbit__T, t5: _FieldEquinoctialOrbit__T, t6: _FieldEquinoctialOrbit__T, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t7: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldEquinoctialOrbit__T], equinoctialOrbit: EquinoctialOrbit): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldEquinoctialOrbit__T], orbit: Orbit): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldEquinoctialOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldEquinoctialOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldEquinoctialOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldEquinoctialOrbit__T): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, t: _FieldEquinoctialOrbit__T, tArray: typing.List[_FieldEquinoctialOrbit__T]) -> None: ...
    _eccentricToMean__T = typing.TypeVar('_eccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToMean(t: _eccentricToMean__T, t2: _eccentricToMean__T, t3: _eccentricToMean__T) -> _eccentricToMean__T: ...
    _eccentricToTrue__T = typing.TypeVar('_eccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToTrue(t: _eccentricToTrue__T, t2: _eccentricToTrue__T, t3: _eccentricToTrue__T) -> _eccentricToTrue__T: ...
    def getA(self) -> _FieldEquinoctialOrbit__T: ...
    def getADot(self) -> _FieldEquinoctialOrbit__T: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def getE(self) -> _FieldEquinoctialOrbit__T: ...
    def getEDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getHx(self) -> _FieldEquinoctialOrbit__T: ...
    def getHxDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getHy(self) -> _FieldEquinoctialOrbit__T: ...
    def getHyDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getI(self) -> _FieldEquinoctialOrbit__T: ...
    def getIDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getL(self, positionAngleType: PositionAngleType) -> _FieldEquinoctialOrbit__T: ...
    def getLDot(self, positionAngleType: PositionAngleType) -> _FieldEquinoctialOrbit__T: ...
    def getLE(self) -> _FieldEquinoctialOrbit__T: ...
    def getLEDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getLM(self) -> _FieldEquinoctialOrbit__T: ...
    def getLMDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getLv(self) -> _FieldEquinoctialOrbit__T: ...
    def getLvDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    def hasRates(self) -> bool: ...
    _meanToEccentric__T = typing.TypeVar('_meanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEccentric(t: _meanToEccentric__T, t2: _meanToEccentric__T, t3: _meanToEccentric__T) -> _meanToEccentric__T: ...
    def removeRates(self) -> 'FieldEquinoctialOrbit'[_FieldEquinoctialOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldEquinoctialOrbit'[_FieldEquinoctialOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldEquinoctialOrbit__T) -> 'FieldEquinoctialOrbit'[_FieldEquinoctialOrbit__T]: ...
    def toOrbit(self) -> EquinoctialOrbit: ...
    def toString(self) -> str: ...
    _trueToEccentric__T = typing.TypeVar('_trueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEccentric(t: _trueToEccentric__T, t2: _trueToEccentric__T, t3: _trueToEccentric__T) -> _trueToEccentric__T: ...

_FieldKeplerianOrbit__T = typing.TypeVar('_FieldKeplerianOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldKeplerianOrbit(FieldOrbit[_FieldKeplerianOrbit__T], PositionAngleBased, typing.Generic[_FieldKeplerianOrbit__T]):
    @typing.overload
    def __init__(self, t: _FieldKeplerianOrbit__T, t2: _FieldKeplerianOrbit__T, t3: _FieldKeplerianOrbit__T, t4: _FieldKeplerianOrbit__T, t5: _FieldKeplerianOrbit__T, t6: _FieldKeplerianOrbit__T, t7: _FieldKeplerianOrbit__T, t8: _FieldKeplerianOrbit__T, t9: _FieldKeplerianOrbit__T, t10: _FieldKeplerianOrbit__T, t11: _FieldKeplerianOrbit__T, t12: _FieldKeplerianOrbit__T, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t13: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldKeplerianOrbit__T, t2: _FieldKeplerianOrbit__T, t3: _FieldKeplerianOrbit__T, t4: _FieldKeplerianOrbit__T, t5: _FieldKeplerianOrbit__T, t6: _FieldKeplerianOrbit__T, t7: _FieldKeplerianOrbit__T, t8: _FieldKeplerianOrbit__T, t9: _FieldKeplerianOrbit__T, t10: _FieldKeplerianOrbit__T, t11: _FieldKeplerianOrbit__T, t12: _FieldKeplerianOrbit__T, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t13: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldKeplerianOrbit__T, t2: _FieldKeplerianOrbit__T, t3: _FieldKeplerianOrbit__T, t4: _FieldKeplerianOrbit__T, t5: _FieldKeplerianOrbit__T, t6: _FieldKeplerianOrbit__T, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t7: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldKeplerianOrbit__T, t2: _FieldKeplerianOrbit__T, t3: _FieldKeplerianOrbit__T, t4: _FieldKeplerianOrbit__T, t5: _FieldKeplerianOrbit__T, t6: _FieldKeplerianOrbit__T, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t7: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldKeplerianOrbit__T], keplerianOrbit: 'KeplerianOrbit'): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldKeplerianOrbit__T], orbit: Orbit): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldKeplerianOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldKeplerianOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldKeplerianOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldKeplerianOrbit__T): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, t: _FieldKeplerianOrbit__T, tArray: typing.List[_FieldKeplerianOrbit__T]) -> None: ...
    def getA(self) -> _FieldKeplerianOrbit__T: ...
    def getADot(self) -> _FieldKeplerianOrbit__T: ...
    def getAnomaly(self, positionAngleType: PositionAngleType) -> _FieldKeplerianOrbit__T: ...
    def getAnomalyDot(self, positionAngleType: PositionAngleType) -> _FieldKeplerianOrbit__T: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def getE(self) -> _FieldKeplerianOrbit__T: ...
    def getEDot(self) -> _FieldKeplerianOrbit__T: ...
    def getEccentricAnomaly(self) -> _FieldKeplerianOrbit__T: ...
    def getEccentricAnomalyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getHx(self) -> _FieldKeplerianOrbit__T: ...
    def getHxDot(self) -> _FieldKeplerianOrbit__T: ...
    def getHy(self) -> _FieldKeplerianOrbit__T: ...
    def getHyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getI(self) -> _FieldKeplerianOrbit__T: ...
    def getIDot(self) -> _FieldKeplerianOrbit__T: ...
    def getLE(self) -> _FieldKeplerianOrbit__T: ...
    def getLEDot(self) -> _FieldKeplerianOrbit__T: ...
    def getLM(self) -> _FieldKeplerianOrbit__T: ...
    def getLMDot(self) -> _FieldKeplerianOrbit__T: ...
    def getLv(self) -> _FieldKeplerianOrbit__T: ...
    def getLvDot(self) -> _FieldKeplerianOrbit__T: ...
    def getMeanAnomaly(self) -> _FieldKeplerianOrbit__T: ...
    def getMeanAnomalyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getPerigeeArgument(self) -> _FieldKeplerianOrbit__T: ...
    def getPerigeeArgumentDot(self) -> _FieldKeplerianOrbit__T: ...
    def getRightAscensionOfAscendingNode(self) -> _FieldKeplerianOrbit__T: ...
    def getRightAscensionOfAscendingNodeDot(self) -> _FieldKeplerianOrbit__T: ...
    def getTrueAnomaly(self) -> _FieldKeplerianOrbit__T: ...
    def getTrueAnomalyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    def hasRates(self) -> bool: ...
    def removeRates(self) -> 'FieldKeplerianOrbit'[_FieldKeplerianOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldKeplerianOrbit'[_FieldKeplerianOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldKeplerianOrbit__T) -> 'FieldKeplerianOrbit'[_FieldKeplerianOrbit__T]: ...
    def toOrbit(self) -> 'KeplerianOrbit': ...
    def toString(self) -> str: ...

_FieldOrbitBlender__KK = typing.TypeVar('_FieldOrbitBlender__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class FieldOrbitBlender(AbstractFieldOrbitInterpolator[_FieldOrbitBlender__KK], typing.Generic[_FieldOrbitBlender__KK]):
    def __init__(self, fieldSmoothStepFunction: org.hipparchus.analysis.polynomials.SmoothStepFactory.FieldSmoothStepFunction[_FieldOrbitBlender__KK], fieldAbstractAnalyticalPropagator: org.orekit.propagation.analytical.FieldAbstractAnalyticalPropagator[_FieldOrbitBlender__KK], frame: org.orekit.frames.Frame): ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.FieldTimeStamped], typing.Sequence[org.orekit.time.FieldTimeStamped], typing.Set[org.orekit.time.FieldTimeStamped]]) -> org.orekit.time.FieldTimeStamped: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[org.orekit.time.FieldTimeStamped]) -> org.orekit.time.FieldTimeStamped: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldOrbitBlender__KK], collection: typing.Union[java.util.Collection[FieldOrbit[_FieldOrbitBlender__KK]], typing.Sequence[FieldOrbit[_FieldOrbitBlender__KK]], typing.Set[FieldOrbit[_FieldOrbitBlender__KK]]]) -> FieldOrbit[_FieldOrbitBlender__KK]: ...
    @typing.overload
    def interpolate(self, abstractFieldTimeInterpolator: org.orekit.time.AbstractFieldTimeInterpolator.InterpolationData) -> FieldOrbit[_FieldOrbitBlender__KK]: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldOrbitBlender__KK], stream: java.util.stream.Stream[org.orekit.time.FieldTimeStamped]) -> org.orekit.time.FieldTimeStamped: ...

_FieldOrbitHermiteInterpolator__KK = typing.TypeVar('_FieldOrbitHermiteInterpolator__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class FieldOrbitHermiteInterpolator(AbstractFieldOrbitInterpolator[_FieldOrbitHermiteInterpolator__KK], typing.Generic[_FieldOrbitHermiteInterpolator__KK]):
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame): ...
    def getPVAFilter(self) -> org.orekit.utils.CartesianDerivativesFilter: ...

class HaloOrbit(LibrationOrbit):
    @typing.overload
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, pVCoordinates: org.orekit.utils.PVCoordinates, double: float): ...
    @typing.overload
    def __init__(self, richardsonExpansion: RichardsonExpansion, double: float, librationOrbitFamily: LibrationOrbitFamily): ...

class KeplerianOrbit(Orbit, PositionAngleBased):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngleType: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngleType: PositionAngleType, positionAngleType2: PositionAngleType, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, double: float, doubleArray: typing.List[float]) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getAnomaly(self, positionAngleType: PositionAngleType) -> float: ...
    def getAnomalyDot(self, positionAngleType: PositionAngleType) -> float: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEccentricAnomaly(self) -> float: ...
    def getEccentricAnomalyDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getMeanAnomaly(self) -> float: ...
    def getMeanAnomalyDot(self) -> float: ...
    def getPerigeeArgument(self) -> float: ...
    def getPerigeeArgumentDot(self) -> float: ...
    def getRightAscensionOfAscendingNode(self) -> float: ...
    def getRightAscensionOfAscendingNodeDot(self) -> float: ...
    def getTrueAnomaly(self) -> float: ...
    def getTrueAnomalyDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def hasRates(self) -> bool: ...
    def removeRates(self) -> 'KeplerianOrbit': ...
    def shiftedBy(self, double: float) -> 'KeplerianOrbit': ...
    def toString(self) -> str: ...

class LyapunovOrbit(LibrationOrbit):
    @typing.overload
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, pVCoordinates: org.orekit.utils.PVCoordinates, double: float): ...
    @typing.overload
    def __init__(self, richardsonExpansion: RichardsonExpansion, double: float): ...

class OrbitBlender(AbstractOrbitInterpolator):
    def __init__(self, smoothStepFunction: org.hipparchus.analysis.polynomials.SmoothStepFactory.SmoothStepFunction, propagator: org.orekit.propagation.Propagator, frame: org.orekit.frames.Frame): ...

class OrbitHermiteInterpolator(AbstractOrbitInterpolator):
    @typing.overload
    def __init__(self, int: int, double: float, frame: org.orekit.frames.Frame, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, int: int, frame: org.orekit.frames.Frame, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame): ...
    def getPVAFilter(self) -> org.orekit.utils.CartesianDerivativesFilter: ...

class PythonLibrationOrbit(LibrationOrbit):
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, pVCoordinates: org.orekit.utils.PVCoordinates, double: float): ...
    def applyCorrectionOnPV(self, cR3BPDifferentialCorrection: CR3BPDifferentialCorrection) -> org.orekit.utils.PVCoordinates: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonOrbit(Orbit):
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngleType: PositionAngleType, double: float, doubleArray: typing.List[float]) -> None: ...
    def computeJacobianEccentricWrtCartesian(self) -> typing.List[typing.List[float]]: ...
    def computeJacobianMeanWrtCartesian(self) -> typing.List[typing.List[float]]: ...
    def computeJacobianTrueWrtCartesian(self) -> typing.List[typing.List[float]]: ...
    def finalize(self) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def initPVCoordinates(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def initPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def shiftedBy(self, double: float) -> Orbit: ...

class PythonPositionAngleBased(PositionAngleBased):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getCachedPositionAngleType(self) -> PositionAngleType: ...
    def hasRates(self) -> bool: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def removeRates(self) -> PositionAngleBased: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.orbits")``.

    AbstractFieldOrbitInterpolator: typing.Type[AbstractFieldOrbitInterpolator]
    AbstractOrbitInterpolator: typing.Type[AbstractOrbitInterpolator]
    CR3BPDifferentialCorrection: typing.Type[CR3BPDifferentialCorrection]
    CartesianOrbit: typing.Type[CartesianOrbit]
    CircularLatitudeArgumentUtility: typing.Type[CircularLatitudeArgumentUtility]
    CircularOrbit: typing.Type[CircularOrbit]
    EquinoctialLongitudeArgumentUtility: typing.Type[EquinoctialLongitudeArgumentUtility]
    EquinoctialOrbit: typing.Type[EquinoctialOrbit]
    FieldCartesianOrbit: typing.Type[FieldCartesianOrbit]
    FieldCircularLatitudeArgumentUtility: typing.Type[FieldCircularLatitudeArgumentUtility]
    FieldCircularOrbit: typing.Type[FieldCircularOrbit]
    FieldEquinoctialLongitudeArgumentUtility: typing.Type[FieldEquinoctialLongitudeArgumentUtility]
    FieldEquinoctialOrbit: typing.Type[FieldEquinoctialOrbit]
    FieldKeplerianAnomalyUtility: typing.Type[FieldKeplerianAnomalyUtility]
    FieldKeplerianOrbit: typing.Type[FieldKeplerianOrbit]
    FieldOrbit: typing.Type[FieldOrbit]
    FieldOrbitBlender: typing.Type[FieldOrbitBlender]
    FieldOrbitHermiteInterpolator: typing.Type[FieldOrbitHermiteInterpolator]
    HaloOrbit: typing.Type[HaloOrbit]
    KeplerianAnomalyUtility: typing.Type[KeplerianAnomalyUtility]
    KeplerianMotionCartesianUtility: typing.Type[KeplerianMotionCartesianUtility]
    KeplerianOrbit: typing.Type[KeplerianOrbit]
    LibrationOrbit: typing.Type[LibrationOrbit]
    LibrationOrbitFamily: typing.Type[LibrationOrbitFamily]
    LibrationOrbitType: typing.Type[LibrationOrbitType]
    LyapunovOrbit: typing.Type[LyapunovOrbit]
    Orbit: typing.Type[Orbit]
    OrbitBlender: typing.Type[OrbitBlender]
    OrbitHermiteInterpolator: typing.Type[OrbitHermiteInterpolator]
    OrbitType: typing.Type[OrbitType]
    PositionAngleBased: typing.Type[PositionAngleBased]
    PositionAngleType: typing.Type[PositionAngleType]
    PythonLibrationOrbit: typing.Type[PythonLibrationOrbit]
    PythonOrbit: typing.Type[PythonOrbit]
    PythonPositionAngleBased: typing.Type[PythonPositionAngleBased]
    RichardsonExpansion: typing.Type[RichardsonExpansion]
    WalkerConstellation: typing.Type[WalkerConstellation]
    WalkerConstellationSlot: typing.Type[WalkerConstellationSlot]
