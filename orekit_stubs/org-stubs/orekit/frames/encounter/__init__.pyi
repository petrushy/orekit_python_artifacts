import java.lang
import org.hipparchus
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.geometry.euclidean.twod
import org.hipparchus.linear
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import typing



class EncounterLOF(org.orekit.frames.LOF):
    _computeProjectionMatrix_0__T = typing.TypeVar('_computeProjectionMatrix_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeProjectionMatrix(self, field: org.hipparchus.Field[_computeProjectionMatrix_0__T]) -> org.hipparchus.linear.FieldMatrix[_computeProjectionMatrix_0__T]: ...
    @typing.overload
    def computeProjectionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    _getAxisNormalToCollisionPlane_0__T = typing.TypeVar('_getAxisNormalToCollisionPlane_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getAxisNormalToCollisionPlane(self, field: org.hipparchus.Field[_getAxisNormalToCollisionPlane_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getAxisNormalToCollisionPlane_0__T]: ...
    @typing.overload
    def getAxisNormalToCollisionPlane(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    _getFieldOther__T = typing.TypeVar('_getFieldOther__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getFieldOther(self, field: org.hipparchus.Field[_getFieldOther__T]) -> org.orekit.utils.FieldPVCoordinates[_getFieldOther__T]: ...
    def getOther(self) -> org.orekit.utils.PVCoordinates: ...
    def isQuasiInertial(self) -> bool: ...
    _projectOntoCollisionPlane_0__T = typing.TypeVar('_projectOntoCollisionPlane_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _projectOntoCollisionPlane_2__T = typing.TypeVar('_projectOntoCollisionPlane_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def projectOntoCollisionPlane(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_projectOntoCollisionPlane_0__T]) -> org.hipparchus.geometry.euclidean.twod.FieldVector2D[_projectOntoCollisionPlane_0__T]: ...
    @typing.overload
    def projectOntoCollisionPlane(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    @typing.overload
    def projectOntoCollisionPlane(self, fieldMatrix: org.hipparchus.linear.FieldMatrix[_projectOntoCollisionPlane_2__T]) -> org.hipparchus.linear.FieldMatrix[_projectOntoCollisionPlane_2__T]: ...
    @typing.overload
    def projectOntoCollisionPlane(self, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealMatrix: ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_2__T = typing.TypeVar('_rotationFromInertial_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_3__T = typing.TypeVar('_rotationFromInertial_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T], fieldPVCoordinates2: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates, pVCoordinates2: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_rotationFromInertial_2__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_2__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_2__T]: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_3__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_3__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_3__T]: ...
    @typing.overload
    def rotationFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...

class EncounterLOFType(java.lang.Enum['EncounterLOFType']):
    DEFAULT: typing.ClassVar['EncounterLOFType'] = ...
    VALSECCHI: typing.ClassVar['EncounterLOFType'] = ...
    _getFrame_0__T = typing.TypeVar('_getFrame_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getFrame(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_getFrame_0__T]) -> EncounterLOF: ...
    @typing.overload
    def getFrame(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> EncounterLOF: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'EncounterLOFType': ...
    @staticmethod
    def values() -> typing.List['EncounterLOFType']: ...

class AbstractEncounterLOF(EncounterLOF):
    _getFieldOther__T = typing.TypeVar('_getFieldOther__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getFieldOther(self, field: org.hipparchus.Field[_getFieldOther__T]) -> org.orekit.utils.FieldPVCoordinates[_getFieldOther__T]: ...
    def getOther(self) -> org.orekit.utils.PVCoordinates: ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_2__T = typing.TypeVar('_rotationFromInertial_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_4__T = typing.TypeVar('_rotationFromInertial_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T], fieldPVCoordinates2: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates, pVCoordinates2: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_rotationFromInertial_2__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_2__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_2__T]: ...
    @typing.overload
    def rotationFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_4__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_4__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_4__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...

class PythonEncounterLOF(EncounterLOF):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getAxisNormalToCollisionPlane_0__T = typing.TypeVar('_getAxisNormalToCollisionPlane_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getAxisNormalToCollisionPlane(self, field: org.hipparchus.Field[_getAxisNormalToCollisionPlane_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getAxisNormalToCollisionPlane_0__T]: ...
    @typing.overload
    def getAxisNormalToCollisionPlane(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    _getFieldOther__T = typing.TypeVar('_getFieldOther__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getFieldOther(self, field: org.hipparchus.Field[_getFieldOther__T]) -> org.orekit.utils.FieldPVCoordinates[_getFieldOther__T]: ...
    def getName(self) -> str: ...
    def getOther(self) -> org.orekit.utils.PVCoordinates: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_1__T = typing.TypeVar('_rotationFromInertial_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_4__T = typing.TypeVar('_rotationFromInertial_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_1__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_1__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_1__T]: ...
    @typing.overload
    def rotationFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_4__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_4__T], fieldPVCoordinates2: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_4__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_4__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates, pVCoordinates2: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...

class DefaultEncounterLOF(AbstractEncounterLOF):
    ___init___0__T = typing.TypeVar('___init___0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[___init___0__T]): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates): ...
    _getAxisNormalToCollisionPlane_0__T = typing.TypeVar('_getAxisNormalToCollisionPlane_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getAxisNormalToCollisionPlane(self, field: org.hipparchus.Field[_getAxisNormalToCollisionPlane_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getAxisNormalToCollisionPlane_0__T]: ...
    @typing.overload
    def getAxisNormalToCollisionPlane(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getName(self) -> str: ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_2__T = typing.TypeVar('_rotationFromInertial_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_3__T = typing.TypeVar('_rotationFromInertial_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_2__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_2__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_2__T]: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_3__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_3__T], fieldPVCoordinates2: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_3__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_3__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates, pVCoordinates2: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...

class PythonAbstractEncounterLOF(AbstractEncounterLOF):
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates): ...
    def finalize(self) -> None: ...
    _getAxisNormalToCollisionPlane_0__T = typing.TypeVar('_getAxisNormalToCollisionPlane_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getAxisNormalToCollisionPlane(self, field: org.hipparchus.Field[_getAxisNormalToCollisionPlane_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getAxisNormalToCollisionPlane_0__T]: ...
    @typing.overload
    def getAxisNormalToCollisionPlane(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getName(self) -> str: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_2__T = typing.TypeVar('_rotationFromInertial_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_4__T = typing.TypeVar('_rotationFromInertial_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_2__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_2__T], fieldPVCoordinates2: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_2__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_2__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates, pVCoordinates2: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_4__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_4__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_4__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...

class ValsecchiEncounterFrame(AbstractEncounterLOF):
    ___init___0__T = typing.TypeVar('___init___0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[___init___0__T]): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates): ...
    _getAxisNormalToCollisionPlane_0__T = typing.TypeVar('_getAxisNormalToCollisionPlane_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getAxisNormalToCollisionPlane(self, field: org.hipparchus.Field[_getAxisNormalToCollisionPlane_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getAxisNormalToCollisionPlane_0__T]: ...
    @typing.overload
    def getAxisNormalToCollisionPlane(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getName(self) -> str: ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_2__T = typing.TypeVar('_rotationFromInertial_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _rotationFromInertial_3__T = typing.TypeVar('_rotationFromInertial_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_2__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_2__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_2__T]: ...
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_3__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_3__T], fieldPVCoordinates2: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_3__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_3__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates, pVCoordinates2: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.frames.encounter")``.

    AbstractEncounterLOF: typing.Type[AbstractEncounterLOF]
    DefaultEncounterLOF: typing.Type[DefaultEncounterLOF]
    EncounterLOF: typing.Type[EncounterLOF]
    EncounterLOFType: typing.Type[EncounterLOFType]
    PythonAbstractEncounterLOF: typing.Type[PythonAbstractEncounterLOF]
    PythonEncounterLOF: typing.Type[PythonEncounterLOF]
    ValsecchiEncounterFrame: typing.Type[ValsecchiEncounterFrame]
