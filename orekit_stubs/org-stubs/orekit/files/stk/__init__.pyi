import java.lang
import java.util
import org.orekit.data
import org.orekit.files.general
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import typing



class STKEphemerisFile(org.orekit.files.general.EphemerisFile[org.orekit.utils.TimeStampedPVCoordinates, 'STKEphemerisFile.STKEphemerisSegment']):
    def __init__(self, string: str, string2: str, sTKEphemeris: 'STKEphemerisFile.STKEphemeris'): ...
    def getSTKVersion(self) -> str: ...
    def getSatellites(self) -> java.util.Map[str, 'STKEphemerisFile.STKEphemeris']: ...
    class STKCoordinateSystem(java.lang.Enum['STKEphemerisFile.STKCoordinateSystem']):
        ICRF: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        J2000: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        INERTIAL: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        FIXED: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        TRUE_OF_DATE: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        MEAN_OF_DATE: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        TEME_OF_DATE: typing.ClassVar['STKEphemerisFile.STKCoordinateSystem'] = ...
        @staticmethod
        def parse(string: str) -> 'STKEphemerisFile.STKCoordinateSystem': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'STKEphemerisFile.STKCoordinateSystem': ...
        @staticmethod
        def values() -> typing.List['STKEphemerisFile.STKCoordinateSystem']: ...
    class STKEphemeris(org.orekit.files.general.EphemerisFile.SatelliteEphemeris[org.orekit.utils.TimeStampedPVCoordinates, 'STKEphemerisFile.STKEphemerisSegment']):
        def __init__(self, string: str, double: float, list: java.util.List['STKEphemerisFile.STKEphemerisSegment']): ...
        def getId(self) -> str: ...
        def getMu(self) -> float: ...
        def getSegments(self) -> java.util.List['STKEphemerisFile.STKEphemerisSegment']: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    class STKEphemerisSegment(org.orekit.files.general.EphemerisFile.EphemerisSegment[org.orekit.utils.TimeStampedPVCoordinates]):
        def __init__(self, double: float, frame: org.orekit.frames.Frame, int: int, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, list: java.util.List[org.orekit.utils.TimeStampedPVCoordinates]): ...
        def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
        def getCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
        def getFrame(self) -> org.orekit.frames.Frame: ...
        def getInterpolationSamples(self) -> int: ...
        def getMu(self) -> float: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class STKEphemerisFileParser(org.orekit.files.general.EphemerisFileParser[STKEphemerisFile]):
    def __init__(self, string: str, double: float, uTCScale: org.orekit.time.UTCScale, map: typing.Union[java.util.Map[STKEphemerisFile.STKCoordinateSystem, org.orekit.frames.Frame], typing.Mapping[STKEphemerisFile.STKCoordinateSystem, org.orekit.frames.Frame]]): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> STKEphemerisFile: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.stk")``.

    STKEphemerisFile: typing.Type[STKEphemerisFile]
    STKEphemerisFileParser: typing.Type[STKEphemerisFileParser]
