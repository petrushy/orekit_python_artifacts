import java.lang
import java.util
import java.util.function
import org.orekit.data
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.ccsds.utils.parsing
import org.orekit.time
import org.orekit.utils
import typing



class AngleType(java.lang.Enum['AngleType']):
    AZEL: typing.ClassVar['AngleType'] = ...
    RADEC: typing.ClassVar['AngleType'] = ...
    XEYN: typing.ClassVar['AngleType'] = ...
    XSYE: typing.ClassVar['AngleType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AngleType': ...
    @staticmethod
    def values() -> typing.List['AngleType']: ...

class CorrectionApplied(java.lang.Enum['CorrectionApplied']):
    YES: typing.ClassVar['CorrectionApplied'] = ...
    NO: typing.ClassVar['CorrectionApplied'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CorrectionApplied': ...
    @staticmethod
    def values() -> typing.List['CorrectionApplied']: ...

class DataQuality(java.lang.Enum['DataQuality']):
    RAW: typing.ClassVar['DataQuality'] = ...
    VALIDATED: typing.ClassVar['DataQuality'] = ...
    DEGRADED: typing.ClassVar['DataQuality'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'DataQuality': ...
    @staticmethod
    def values() -> typing.List['DataQuality']: ...

class IntegrationReference(java.lang.Enum['IntegrationReference']):
    START: typing.ClassVar['IntegrationReference'] = ...
    MIDDLE: typing.ClassVar['IntegrationReference'] = ...
    END: typing.ClassVar['IntegrationReference'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'IntegrationReference': ...
    @staticmethod
    def values() -> typing.List['IntegrationReference']: ...

class Observation:
    def __init__(self, observationType: 'ObservationType', absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getMeasurement(self) -> float: ...
    def getType(self) -> 'ObservationType': ...

class ObservationType(java.lang.Enum['ObservationType']):
    CARRIER_POWER: typing.ClassVar['ObservationType'] = ...
    DOPPLER_COUNT: typing.ClassVar['ObservationType'] = ...
    DOPPLER_INSTANTANEOUS: typing.ClassVar['ObservationType'] = ...
    DOPPLER_INTEGRATED: typing.ClassVar['ObservationType'] = ...
    PC_N0: typing.ClassVar['ObservationType'] = ...
    PR_N0: typing.ClassVar['ObservationType'] = ...
    RECEIVE_PHASE_CT_1: typing.ClassVar['ObservationType'] = ...
    RECEIVE_PHASE_CT_2: typing.ClassVar['ObservationType'] = ...
    RECEIVE_PHASE_CT_3: typing.ClassVar['ObservationType'] = ...
    RECEIVE_PHASE_CT_4: typing.ClassVar['ObservationType'] = ...
    RECEIVE_PHASE_CT_5: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_PHASE_CT_1: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_PHASE_CT_2: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_PHASE_CT_3: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_PHASE_CT_4: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_PHASE_CT_5: typing.ClassVar['ObservationType'] = ...
    RANGE: typing.ClassVar['ObservationType'] = ...
    RECEIVE_FREQ_1: typing.ClassVar['ObservationType'] = ...
    RECEIVE_FREQ_2: typing.ClassVar['ObservationType'] = ...
    RECEIVE_FREQ_3: typing.ClassVar['ObservationType'] = ...
    RECEIVE_FREQ_4: typing.ClassVar['ObservationType'] = ...
    RECEIVE_FREQ_5: typing.ClassVar['ObservationType'] = ...
    RECEIVE_FREQ: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_1: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_2: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_3: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_4: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_5: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_RATE_1: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_RATE_2: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_RATE_3: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_RATE_4: typing.ClassVar['ObservationType'] = ...
    TRANSMIT_FREQ_RATE_5: typing.ClassVar['ObservationType'] = ...
    DOR: typing.ClassVar['ObservationType'] = ...
    VLBI_DELAY: typing.ClassVar['ObservationType'] = ...
    ANGLE_1: typing.ClassVar['ObservationType'] = ...
    ANGLE_2: typing.ClassVar['ObservationType'] = ...
    MAG: typing.ClassVar['ObservationType'] = ...
    RCS: typing.ClassVar['ObservationType'] = ...
    CLOCK_BIAS: typing.ClassVar['ObservationType'] = ...
    CLOCK_DRIFT: typing.ClassVar['ObservationType'] = ...
    STEC: typing.ClassVar['ObservationType'] = ...
    TROPO_DRY: typing.ClassVar['ObservationType'] = ...
    TROPO_WET: typing.ClassVar['ObservationType'] = ...
    PRESSURE: typing.ClassVar['ObservationType'] = ...
    RHUMIDITY: typing.ClassVar['ObservationType'] = ...
    TEMPERATURE: typing.ClassVar['ObservationType'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, rangeUnitsConverter: 'RangeUnitsConverter', tdmMetadata: 'TdmMetadata', observationsBlock: 'ObservationsBlock') -> bool: ...
    def rawToSI(self, rangeUnitsConverter: 'RangeUnitsConverter', tdmMetadata: 'TdmMetadata', absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...
    def siToRaw(self, rangeUnitsConverter: 'RangeUnitsConverter', tdmMetadata: 'TdmMetadata', absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ObservationType': ...
    @staticmethod
    def values() -> typing.List['ObservationType']: ...

class ObservationsBlock(org.orekit.files.ccsds.section.CommentsContainer, org.orekit.files.ccsds.section.Data):
    def __init__(self): ...
    @typing.overload
    def addObservation(self, observation: Observation) -> None: ...
    @typing.overload
    def addObservation(self, observationType: ObservationType, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> None: ...
    def getObservations(self) -> java.util.List[Observation]: ...
    def setObservations(self, list: java.util.List[Observation]) -> None: ...

class RangeMode(java.lang.Enum['RangeMode']):
    COHERENT: typing.ClassVar['RangeMode'] = ...
    CONSTANT: typing.ClassVar['RangeMode'] = ...
    ONE_WAY: typing.ClassVar['RangeMode'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RangeMode': ...
    @staticmethod
    def values() -> typing.List['RangeMode']: ...

class RangeUnits(java.lang.Enum['RangeUnits']):
    km: typing.ClassVar['RangeUnits'] = ...
    s: typing.ClassVar['RangeUnits'] = ...
    RU: typing.ClassVar['RangeUnits'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RangeUnits': ...
    @staticmethod
    def values() -> typing.List['RangeUnits']: ...

class RangeUnitsConverter:
    def metersToRu(self, tdmMetadata: 'TdmMetadata', absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...
    def ruToMeters(self, tdmMetadata: 'TdmMetadata', absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...

class Tdm(org.orekit.files.ccsds.ndm.NdmConstituent['TdmHeader', org.orekit.files.ccsds.section.Segment['TdmMetadata', ObservationsBlock]]):
    ROOT: typing.ClassVar[str] = ...
    FORMAT_VERSION_KEY: typing.ClassVar[str] = ...
    def __init__(self, tdmHeader: 'TdmHeader', list: java.util.List[org.orekit.files.ccsds.section.Segment['TdmMetadata', ObservationsBlock]], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...

class TdmDataKey(java.lang.Enum['TdmDataKey']):
    observation: typing.ClassVar['TdmDataKey'] = ...
    COMMENT: typing.ClassVar['TdmDataKey'] = ...
    EPOCH: typing.ClassVar['TdmDataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, observationsBlock: ObservationsBlock) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TdmDataKey': ...
    @staticmethod
    def values() -> typing.List['TdmDataKey']: ...

class TdmHeader(org.orekit.files.ccsds.section.Header):
    def __init__(self): ...

class TdmMetadata(org.orekit.files.ccsds.section.Metadata):
    def __init__(self): ...
    def addEphemerisName(self, int: int, string: str) -> None: ...
    def addParticipant(self, int: int, string: str) -> None: ...
    def addReceiveDelay(self, int: int, double: float) -> None: ...
    def addTransmitDelay(self, int: int, double: float) -> None: ...
    def getAngleType(self) -> AngleType: ...
    def getCorrectionAberrationDiurnal(self) -> float: ...
    def getCorrectionAberrationYearly(self) -> float: ...
    def getCorrectionAngle1(self) -> float: ...
    def getCorrectionAngle2(self) -> float: ...
    def getCorrectionDoppler(self) -> float: ...
    def getCorrectionMagnitude(self) -> float: ...
    def getCorrectionRange(self, rangeUnitsConverter: RangeUnitsConverter) -> float: ...
    def getCorrectionRcs(self) -> float: ...
    def getCorrectionReceive(self) -> float: ...
    def getCorrectionTransmit(self) -> float: ...
    def getCorrectionsApplied(self) -> CorrectionApplied: ...
    def getDataQuality(self) -> DataQuality: ...
    def getDataTypes(self) -> java.util.List[ObservationType]: ...
    def getDopplerCountBias(self) -> float: ...
    def getDopplerCountScale(self) -> float: ...
    def getEphemerisNames(self) -> java.util.Map[int, str]: ...
    def getFreqOffset(self) -> float: ...
    def getIntegrationInterval(self) -> float: ...
    def getIntegrationRef(self) -> IntegrationReference: ...
    def getInterpolationDegree(self) -> int: ...
    def getInterpolationMethod(self) -> str: ...
    def getMode(self) -> 'TrackingMode': ...
    def getParticipants(self) -> java.util.Map[int, str]: ...
    def getPath(self) -> typing.List[int]: ...
    def getPath1(self) -> typing.List[int]: ...
    def getPath2(self) -> typing.List[int]: ...
    def getRangeMode(self) -> RangeMode: ...
    def getRangeModulus(self, rangeUnitsConverter: RangeUnitsConverter) -> float: ...
    def getRangeUnits(self) -> RangeUnits: ...
    def getRawCorrectionRange(self) -> float: ...
    def getRawRangeModulus(self) -> float: ...
    def getReceiveBand(self) -> str: ...
    def getReceiveDelays(self) -> java.util.Map[int, float]: ...
    def getReferenceFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getStopTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getTimetagRef(self) -> 'TimetagReference': ...
    def getTrackId(self) -> str: ...
    def getTransmitBand(self) -> str: ...
    def getTransmitDelays(self) -> java.util.Map[int, float]: ...
    def getTurnaroundDenominator(self) -> int: ...
    def getTurnaroundNumerator(self) -> int: ...
    def hasDopplerCountRollover(self) -> bool: ...
    def setAngleType(self, angleType: AngleType) -> None: ...
    def setCorrectionAberrationDiurnal(self, double: float) -> None: ...
    def setCorrectionAberrationYearly(self, double: float) -> None: ...
    def setCorrectionAngle1(self, double: float) -> None: ...
    def setCorrectionAngle2(self, double: float) -> None: ...
    def setCorrectionDoppler(self, double: float) -> None: ...
    def setCorrectionMagnitude(self, double: float) -> None: ...
    def setCorrectionRcs(self, double: float) -> None: ...
    def setCorrectionReceive(self, double: float) -> None: ...
    def setCorrectionTransmit(self, double: float) -> None: ...
    def setCorrectionsApplied(self, correctionApplied: CorrectionApplied) -> None: ...
    def setDataQuality(self, dataQuality: DataQuality) -> None: ...
    def setDataTypes(self, list: java.util.List[ObservationType]) -> None: ...
    def setDopplerCountBias(self, double: float) -> None: ...
    def setDopplerCountRollover(self, boolean: bool) -> None: ...
    def setDopplerCountScale(self, double: float) -> None: ...
    def setEphemerisNames(self, map: typing.Union[java.util.Map[int, str], typing.Mapping[int, str]]) -> None: ...
    def setFreqOffset(self, double: float) -> None: ...
    def setIntegrationInterval(self, double: float) -> None: ...
    def setIntegrationRef(self, integrationReference: IntegrationReference) -> None: ...
    def setInterpolationDegree(self, int: int) -> None: ...
    def setInterpolationMethod(self, string: str) -> None: ...
    def setMode(self, trackingMode: 'TrackingMode') -> None: ...
    def setParticipants(self, map: typing.Union[java.util.Map[int, str], typing.Mapping[int, str]]) -> None: ...
    def setPath(self, intArray: typing.List[int]) -> None: ...
    def setPath1(self, intArray: typing.List[int]) -> None: ...
    def setPath2(self, intArray: typing.List[int]) -> None: ...
    def setRangeMode(self, rangeMode: RangeMode) -> None: ...
    def setRangeUnits(self, rangeUnits: RangeUnits) -> None: ...
    def setRawCorrectionRange(self, double: float) -> None: ...
    def setRawRangeModulus(self, double: float) -> None: ...
    def setReceiveBand(self, string: str) -> None: ...
    def setReceiveDelays(self, map: typing.Union[java.util.Map[int, float], typing.Mapping[int, float]]) -> None: ...
    def setReferenceFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setStartTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setStopTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTimetagRef(self, timetagReference: 'TimetagReference') -> None: ...
    def setTrackId(self, string: str) -> None: ...
    def setTransmitBand(self, string: str) -> None: ...
    def setTransmitDelays(self, map: typing.Union[java.util.Map[int, float], typing.Mapping[int, float]]) -> None: ...
    def setTurnaroundDenominator(self, int: int) -> None: ...
    def setTurnaroundNumerator(self, int: int) -> None: ...
    def validate(self, double: float) -> None: ...

class TdmMetadataKey(java.lang.Enum['TdmMetadataKey']):
    TRACK_ID: typing.ClassVar['TdmMetadataKey'] = ...
    DATA_TYPES: typing.ClassVar['TdmMetadataKey'] = ...
    START_TIME: typing.ClassVar['TdmMetadataKey'] = ...
    STOP_TIME: typing.ClassVar['TdmMetadataKey'] = ...
    PARTICIPANT_1: typing.ClassVar['TdmMetadataKey'] = ...
    PARTICIPANT_2: typing.ClassVar['TdmMetadataKey'] = ...
    PARTICIPANT_3: typing.ClassVar['TdmMetadataKey'] = ...
    PARTICIPANT_4: typing.ClassVar['TdmMetadataKey'] = ...
    PARTICIPANT_5: typing.ClassVar['TdmMetadataKey'] = ...
    MODE: typing.ClassVar['TdmMetadataKey'] = ...
    PATH: typing.ClassVar['TdmMetadataKey'] = ...
    PATH_1: typing.ClassVar['TdmMetadataKey'] = ...
    PATH_2: typing.ClassVar['TdmMetadataKey'] = ...
    EPHEMERIS_NAME_1: typing.ClassVar['TdmMetadataKey'] = ...
    EPHEMERIS_NAME_2: typing.ClassVar['TdmMetadataKey'] = ...
    EPHEMERIS_NAME_3: typing.ClassVar['TdmMetadataKey'] = ...
    EPHEMERIS_NAME_4: typing.ClassVar['TdmMetadataKey'] = ...
    EPHEMERIS_NAME_5: typing.ClassVar['TdmMetadataKey'] = ...
    TRANSMIT_BAND: typing.ClassVar['TdmMetadataKey'] = ...
    RECEIVE_BAND: typing.ClassVar['TdmMetadataKey'] = ...
    TURNAROUND_NUMERATOR: typing.ClassVar['TdmMetadataKey'] = ...
    TURNAROUND_DENOMINATOR: typing.ClassVar['TdmMetadataKey'] = ...
    TIMETAG_REF: typing.ClassVar['TdmMetadataKey'] = ...
    INTEGRATION_INTERVAL: typing.ClassVar['TdmMetadataKey'] = ...
    INTEGRATION_REF: typing.ClassVar['TdmMetadataKey'] = ...
    FREQ_OFFSET: typing.ClassVar['TdmMetadataKey'] = ...
    RANGE_MODE: typing.ClassVar['TdmMetadataKey'] = ...
    RANGE_MODULUS: typing.ClassVar['TdmMetadataKey'] = ...
    RANGE_UNITS: typing.ClassVar['TdmMetadataKey'] = ...
    ANGLE_TYPE: typing.ClassVar['TdmMetadataKey'] = ...
    REFERENCE_FRAME: typing.ClassVar['TdmMetadataKey'] = ...
    INTERPOLATION: typing.ClassVar['TdmMetadataKey'] = ...
    INTERPOLATION_DEGREE: typing.ClassVar['TdmMetadataKey'] = ...
    DOPPLER_COUNT_BIAS: typing.ClassVar['TdmMetadataKey'] = ...
    DOPPLER_COUNT_SCALE: typing.ClassVar['TdmMetadataKey'] = ...
    DOPPLER_COUNT_ROLLOVER: typing.ClassVar['TdmMetadataKey'] = ...
    TRANSMIT_DELAY_1: typing.ClassVar['TdmMetadataKey'] = ...
    TRANSMIT_DELAY_2: typing.ClassVar['TdmMetadataKey'] = ...
    TRANSMIT_DELAY_3: typing.ClassVar['TdmMetadataKey'] = ...
    TRANSMIT_DELAY_4: typing.ClassVar['TdmMetadataKey'] = ...
    TRANSMIT_DELAY_5: typing.ClassVar['TdmMetadataKey'] = ...
    RECEIVE_DELAY_1: typing.ClassVar['TdmMetadataKey'] = ...
    RECEIVE_DELAY_2: typing.ClassVar['TdmMetadataKey'] = ...
    RECEIVE_DELAY_3: typing.ClassVar['TdmMetadataKey'] = ...
    RECEIVE_DELAY_4: typing.ClassVar['TdmMetadataKey'] = ...
    RECEIVE_DELAY_5: typing.ClassVar['TdmMetadataKey'] = ...
    DATA_QUALITY: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_ANGLE_1: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_ANGLE_2: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_DOPPLER: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_MAG: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_RANGE: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_RCS: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_RECEIVE: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_TRANSMIT: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_ABERRATION_YEARLY: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTION_ABERRATION_DIURNAL: typing.ClassVar['TdmMetadataKey'] = ...
    CORRECTIONS_APPLIED: typing.ClassVar['TdmMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, tdmMetadata: TdmMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TdmMetadataKey': ...
    @staticmethod
    def values() -> typing.List['TdmMetadataKey']: ...

class TdmParser(org.orekit.files.ccsds.utils.parsing.AbstractConstituentParser[TdmHeader, Tdm, 'TdmParser']):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, parsedUnitsBehavior: org.orekit.files.ccsds.ndm.ParsedUnitsBehavior, rangeUnitsConverter: RangeUnitsConverter, functionArray: typing.List[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]): ...
    def build(self) -> Tdm: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> TdmHeader: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class TdmWriter(org.orekit.files.ccsds.utils.generation.AbstractMessageWriter[TdmHeader, org.orekit.files.ccsds.section.Segment[TdmMetadata, ObservationsBlock], Tdm]):
    CCSDS_TDM_VERS: typing.ClassVar[float] = ...
    KVN_PADDING_WIDTH: typing.ClassVar[int] = ...
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext, rangeUnitsConverter: RangeUnitsConverter): ...

class TimetagReference(java.lang.Enum['TimetagReference']):
    TRANSMIT: typing.ClassVar['TimetagReference'] = ...
    RECEIVE: typing.ClassVar['TimetagReference'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TimetagReference': ...
    @staticmethod
    def values() -> typing.List['TimetagReference']: ...

class TrackingMode(java.lang.Enum['TrackingMode']):
    SEQUENTIAL: typing.ClassVar['TrackingMode'] = ...
    SINGLE_DIFF: typing.ClassVar['TrackingMode'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TrackingMode': ...
    @staticmethod
    def values() -> typing.List['TrackingMode']: ...

class IdentityConverter(RangeUnitsConverter):
    def __init__(self): ...
    def metersToRu(self, tdmMetadata: TdmMetadata, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...
    def ruToMeters(self, tdmMetadata: TdmMetadata, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...

class PythonRangeUnitsConverter(RangeUnitsConverter):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def metersToRu(self, tdmMetadata: TdmMetadata, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def ruToMeters(self, tdmMetadata: TdmMetadata, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.tdm")``.

    AngleType: typing.Type[AngleType]
    CorrectionApplied: typing.Type[CorrectionApplied]
    DataQuality: typing.Type[DataQuality]
    IdentityConverter: typing.Type[IdentityConverter]
    IntegrationReference: typing.Type[IntegrationReference]
    Observation: typing.Type[Observation]
    ObservationType: typing.Type[ObservationType]
    ObservationsBlock: typing.Type[ObservationsBlock]
    PythonRangeUnitsConverter: typing.Type[PythonRangeUnitsConverter]
    RangeMode: typing.Type[RangeMode]
    RangeUnits: typing.Type[RangeUnits]
    RangeUnitsConverter: typing.Type[RangeUnitsConverter]
    Tdm: typing.Type[Tdm]
    TdmDataKey: typing.Type[TdmDataKey]
    TdmHeader: typing.Type[TdmHeader]
    TdmMetadata: typing.Type[TdmMetadata]
    TdmMetadataKey: typing.Type[TdmMetadataKey]
    TdmParser: typing.Type[TdmParser]
    TdmWriter: typing.Type[TdmWriter]
    TimetagReference: typing.Type[TimetagReference]
    TrackingMode: typing.Type[TrackingMode]
