import java.lang
import java.util
import java.util.function
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.linear
import org.orekit.data
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.ndm.odm
import org.orekit.files.ccsds.ndm.odm.ocm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.ccsds.utils.parsing
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import typing



class AdditionalCovarianceMetadata(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getDcpSensitivityVectorPosition(self) -> typing.List[float]: ...
    def getDcpSensitivityVectorVelocity(self) -> typing.List[float]: ...
    def getDensityForecastUncertainty(self) -> float: ...
    def getScreeningDataSource(self) -> str: ...
    def getcScaleFactor(self) -> float: ...
    def getcScaleFactorMax(self) -> float: ...
    def getcScaleFactorMin(self) -> float: ...
    def setDcpSensitivityVectorPosition(self, doubleArray: typing.List[float]) -> None: ...
    def setDcpSensitivityVectorVelocity(self, doubleArray: typing.List[float]) -> None: ...
    def setDensityForecastUncertainty(self, double: float) -> None: ...
    def setScreeningDataSource(self, string: str) -> None: ...
    def setcScaleFactor(self, double: float) -> None: ...
    def setcScaleFactorMax(self, double: float) -> None: ...
    def setcScaleFactorMin(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class AdditionalCovarianceMetadataKey(java.lang.Enum['AdditionalCovarianceMetadataKey']):
    COMMENT: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    DENSITY_FORECAST_UNCERTAINTY: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    CSCALE_FACTOR_MIN: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    CSCALE_FACTOR: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    CSCALE_FACTOR_MAX: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    SCREENING_DATA_SOURCE: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    DCP_SENSITIVITY_VECTOR_POSITION: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    DCP_SENSITIVITY_VECTOR_VELOCITY: typing.ClassVar['AdditionalCovarianceMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, additionalCovarianceMetadata: AdditionalCovarianceMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AdditionalCovarianceMetadataKey': ...
    @staticmethod
    def values() -> typing.List['AdditionalCovarianceMetadataKey']: ...

class AdditionalParameters(org.orekit.files.ccsds.ndm.CommonPhysicalProperties):
    def __init__(self): ...
    def getApoapsisAltitude(self) -> float: ...
    def getAreaDRG(self) -> float: ...
    def getAreaPC(self) -> float: ...
    def getAreaPCMax(self) -> float: ...
    def getAreaPCMin(self) -> float: ...
    def getAreaSRP(self) -> float: ...
    def getCDAreaOverMass(self) -> float: ...
    def getCRAreaOverMass(self) -> float: ...
    def getCovConfidence(self) -> float: ...
    def getCovConfidenceMethod(self) -> str: ...
    def getHbr(self) -> float: ...
    def getInclination(self) -> float: ...
    def getMass(self) -> float: ...
    def getPeriapsisAltitude(self) -> float: ...
    def getSedr(self) -> float: ...
    def getThrustAcceleration(self) -> float: ...
    def setApoapsisAltitude(self, double: float) -> None: ...
    def setAreaDRG(self, double: float) -> None: ...
    def setAreaPC(self, double: float) -> None: ...
    def setAreaPCMax(self, double: float) -> None: ...
    def setAreaPCMin(self, double: float) -> None: ...
    def setAreaSRP(self, double: float) -> None: ...
    def setCDAreaOverMass(self, double: float) -> None: ...
    def setCRAreaOverMass(self, double: float) -> None: ...
    def setCovConfidence(self, double: float) -> None: ...
    def setCovConfidenceMethod(self, string: str) -> None: ...
    def setHbr(self, double: float) -> None: ...
    def setInclination(self, double: float) -> None: ...
    def setMass(self, double: float) -> None: ...
    def setPeriapsisAltitude(self, double: float) -> None: ...
    def setSedr(self, double: float) -> None: ...
    def setThrustAcceleration(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class AdditionalParametersKey(java.lang.Enum['AdditionalParametersKey']):
    COMMENT: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_PC: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_PC_MIN: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_PC_MAX: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_DRG: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_SRP: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_PARENT_FRAME: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_PARENT_FRAME_EPOCH: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_Q1: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_Q2: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_Q3: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_QC: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_MAX: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_INT: typing.ClassVar['AdditionalParametersKey'] = ...
    OEB_MIN: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_ALONG_OEB_MAX: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_ALONG_OEB_INT: typing.ClassVar['AdditionalParametersKey'] = ...
    AREA_ALONG_OEB_MIN: typing.ClassVar['AdditionalParametersKey'] = ...
    RCS: typing.ClassVar['AdditionalParametersKey'] = ...
    RCS_MIN: typing.ClassVar['AdditionalParametersKey'] = ...
    RCS_MAX: typing.ClassVar['AdditionalParametersKey'] = ...
    VM_ABSOLUTE: typing.ClassVar['AdditionalParametersKey'] = ...
    VM_APPARENT_MIN: typing.ClassVar['AdditionalParametersKey'] = ...
    VM_APPARENT: typing.ClassVar['AdditionalParametersKey'] = ...
    VM_APPARENT_MAX: typing.ClassVar['AdditionalParametersKey'] = ...
    REFLECTANCE: typing.ClassVar['AdditionalParametersKey'] = ...
    MASS: typing.ClassVar['AdditionalParametersKey'] = ...
    HBR: typing.ClassVar['AdditionalParametersKey'] = ...
    CD_AREA_OVER_MASS: typing.ClassVar['AdditionalParametersKey'] = ...
    CR_AREA_OVER_MASS: typing.ClassVar['AdditionalParametersKey'] = ...
    THRUST_ACCELERATION: typing.ClassVar['AdditionalParametersKey'] = ...
    SEDR: typing.ClassVar['AdditionalParametersKey'] = ...
    APOAPSIS_ALTITUDE: typing.ClassVar['AdditionalParametersKey'] = ...
    PERIAPSIS_ALTITUDE: typing.ClassVar['AdditionalParametersKey'] = ...
    INCLINATION: typing.ClassVar['AdditionalParametersKey'] = ...
    COV_CONFIDENCE: typing.ClassVar['AdditionalParametersKey'] = ...
    COV_CONFIDENCE_METHOD: typing.ClassVar['AdditionalParametersKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, additionalParameters: AdditionalParameters) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AdditionalParametersKey': ...
    @staticmethod
    def values() -> typing.List['AdditionalParametersKey']: ...

class AdditionalParametersWriter(org.orekit.files.ccsds.section.AbstractWriter): ...

class AltCovarianceType(java.lang.Enum['AltCovarianceType']):
    XYZ: typing.ClassVar['AltCovarianceType'] = ...
    CSIG3EIGVEC3: typing.ClassVar['AltCovarianceType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AltCovarianceType': ...
    @staticmethod
    def values() -> typing.List['AltCovarianceType']: ...

class Cdm(org.orekit.files.ccsds.ndm.NdmConstituent['CdmHeader', 'CdmSegment']):
    ROOT: typing.ClassVar[str] = ...
    FORMAT_VERSION_KEY: typing.ClassVar[str] = ...
    def __init__(self, cdmHeader: 'CdmHeader', list: java.util.List['CdmSegment'], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...
    def getDataObject1(self) -> 'CdmData': ...
    def getDataObject2(self) -> 'CdmData': ...
    def getMetadataObject1(self) -> 'CdmMetadata': ...
    def getMetadataObject2(self) -> 'CdmMetadata': ...
    def getRelativeMetadata(self) -> 'CdmRelativeMetadata': ...
    def getUserDefinedParameters(self) -> org.orekit.files.ccsds.ndm.odm.UserDefined: ...

class CdmData(org.orekit.files.ccsds.section.Data):
    @typing.overload
    def __init__(self, commentsContainer: org.orekit.files.ccsds.section.CommentsContainer, oDParameters: 'ODParameters', additionalParameters: AdditionalParameters, stateVector: 'StateVector', rTNCovariance: 'RTNCovariance'): ...
    @typing.overload
    def __init__(self, commentsContainer: org.orekit.files.ccsds.section.CommentsContainer, oDParameters: 'ODParameters', additionalParameters: AdditionalParameters, stateVector: 'StateVector', rTNCovariance: 'RTNCovariance', additionalCovarianceMetadata: AdditionalCovarianceMetadata): ...
    @typing.overload
    def __init__(self, commentsContainer: org.orekit.files.ccsds.section.CommentsContainer, oDParameters: 'ODParameters', additionalParameters: AdditionalParameters, stateVector: 'StateVector', rTNCovariance: 'RTNCovariance', sigmaEigenvectorsCovariance: 'SigmaEigenvectorsCovariance', additionalCovarianceMetadata: AdditionalCovarianceMetadata): ...
    @typing.overload
    def __init__(self, commentsContainer: org.orekit.files.ccsds.section.CommentsContainer, oDParameters: 'ODParameters', additionalParameters: AdditionalParameters, stateVector: 'StateVector', rTNCovariance: 'RTNCovariance', xYZCovariance: 'XYZCovariance', additionalCovarianceMetadata: AdditionalCovarianceMetadata): ...
    def getAdditionalCovMetadataBlock(self) -> AdditionalCovarianceMetadata: ...
    def getAdditionalParametersBlock(self) -> AdditionalParameters: ...
    def getComments(self) -> java.util.List[str]: ...
    def getODParametersBlock(self) -> 'ODParameters': ...
    def getRTNCovarianceBlock(self) -> 'RTNCovariance': ...
    def getSig3EigVec3CovarianceBlock(self) -> 'SigmaEigenvectorsCovariance': ...
    def getStateVectorBlock(self) -> 'StateVector': ...
    def getUserDefinedBlock(self) -> org.orekit.files.ccsds.ndm.odm.UserDefined: ...
    def getXYZCovarianceBlock(self) -> 'XYZCovariance': ...
    def setAdditionalParametersBlock(self, additionalParameters: AdditionalParameters) -> None: ...
    def setCovarianceMatrixBlock(self, rTNCovariance: 'RTNCovariance') -> None: ...
    def setODParametersBlock(self, oDParameters: 'ODParameters') -> None: ...
    def setUserDefinedBlock(self, userDefined: org.orekit.files.ccsds.ndm.odm.UserDefined) -> None: ...
    def validate(self, double: float) -> None: ...

class CdmHeader(org.orekit.files.ccsds.section.Header):
    def __init__(self): ...
    def getMessageFor(self) -> str: ...
    def setMessageFor(self, string: str) -> None: ...
    def validate(self, double: float) -> None: ...

class CdmHeaderKey(java.lang.Enum['CdmHeaderKey']):
    MESSAGE_FOR: typing.ClassVar['CdmHeaderKey'] = ...
    CLASSIFICATION: typing.ClassVar['CdmHeaderKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, cdmHeader: CdmHeader) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CdmHeaderKey': ...
    @staticmethod
    def values() -> typing.List['CdmHeaderKey']: ...

class CdmHeaderProcessingState(org.orekit.files.ccsds.utils.parsing.ProcessingState):
    def __init__(self, cdmParser: 'CdmParser'): ...
    def processToken(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken) -> bool: ...

class CdmMessageWriter(org.orekit.files.ccsds.utils.generation.MessageWriter[CdmHeader, 'CdmSegment', Cdm]):
    DEFAULT_ORIGINATOR: typing.ClassVar[str] = ...
    def __init__(self, string: str, string2: str, double: float, contextBinding: org.orekit.files.ccsds.utils.ContextBinding): ...
    def getContext(self) -> org.orekit.files.ccsds.utils.ContextBinding: ...
    def getDefaultVersion(self) -> float: ...
    def getFormatVersionKey(self) -> str: ...
    def getRoot(self) -> str: ...
    def getTimeConverter(self) -> org.orekit.files.ccsds.definitions.TimeConverter: ...
    def getVersion(self) -> float: ...
    def setContext(self, contextBinding: org.orekit.files.ccsds.utils.ContextBinding) -> None: ...
    def writeFooter(self, generator: org.orekit.files.ccsds.utils.generation.Generator) -> None: ...
    def writeHeader(self, generator: org.orekit.files.ccsds.utils.generation.Generator, cdmHeader: CdmHeader) -> None: ...
    def writeRelativeMetadataContent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, double: float, cdmRelativeMetadata: 'CdmRelativeMetadata') -> None: ...
    def writeSegment(self, generator: org.orekit.files.ccsds.utils.generation.Generator, cdmSegment: 'CdmSegment') -> None: ...
    def writeSegmentContent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, double: float, segment: org.orekit.files.ccsds.section.Segment['CdmMetadata', CdmData]) -> None: ...

class CdmMetadata(org.orekit.files.ccsds.section.Metadata):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dataContext: org.orekit.data.DataContext): ...
    def getAdmMsgLink(self) -> str: ...
    def getAltCovRefFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getAltCovType(self) -> AltCovarianceType: ...
    def getAtmosphericModel(self) -> str: ...
    def getCatalogName(self) -> str: ...
    def getCovarianceMethod(self) -> 'CovarianceMethod': ...
    def getCovarianceSource(self) -> str: ...
    def getEarthTides(self) -> org.orekit.files.ccsds.definitions.YesNoUnknown: ...
    def getEphemName(self) -> str: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getGravityDegree(self) -> int: ...
    def getGravityModel(self) -> str: ...
    def getGravityOrder(self) -> int: ...
    def getInternationalDes(self) -> str: ...
    def getIntrackThrust(self) -> org.orekit.files.ccsds.definitions.YesNoUnknown: ...
    def getManeuverable(self) -> 'Maneuvrable': ...
    def getNBodyPerturbations(self) -> java.util.List[org.orekit.files.ccsds.definitions.BodyFacade]: ...
    def getObject(self) -> str: ...
    def getObjectDesignator(self) -> str: ...
    def getObjectName(self) -> str: ...
    def getObjectType(self) -> org.orekit.files.ccsds.ndm.odm.ocm.ObjectType: ...
    def getObsBeforeNextMessage(self) -> org.orekit.files.ccsds.definitions.YesNoUnknown: ...
    def getOdmMsgLink(self) -> str: ...
    def getOperatorContactPosition(self) -> str: ...
    def getOperatorEmail(self) -> str: ...
    def getOperatorOrganization(self) -> str: ...
    def getOperatorPhone(self) -> str: ...
    def getOrbitCenter(self) -> org.orekit.files.ccsds.definitions.BodyFacade: ...
    def getRefFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getRelativeMetadata(self) -> 'CdmRelativeMetadata': ...
    def getSolarRadiationPressure(self) -> org.orekit.files.ccsds.definitions.YesNoUnknown: ...
    def setAdmMsgLink(self, string: str) -> None: ...
    def setAltCovRefFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setAltCovType(self, altCovarianceType: AltCovarianceType) -> None: ...
    def setAtmosphericModel(self, string: str) -> None: ...
    def setCatalogName(self, string: str) -> None: ...
    def setCovarianceMethod(self, covarianceMethod: 'CovarianceMethod') -> None: ...
    def setCovarianceSource(self, string: str) -> None: ...
    def setEarthTides(self, yesNoUnknown: org.orekit.files.ccsds.definitions.YesNoUnknown) -> None: ...
    def setEphemName(self, string: str) -> None: ...
    def setGravityModel(self, string: str, int: int, int2: int) -> None: ...
    def setInternationalDes(self, string: str) -> None: ...
    def setIntrackThrust(self, yesNoUnknown: org.orekit.files.ccsds.definitions.YesNoUnknown) -> None: ...
    def setManeuverable(self, maneuvrable: 'Maneuvrable') -> None: ...
    def setNBodyPerturbations(self, list: java.util.List[org.orekit.files.ccsds.definitions.BodyFacade]) -> None: ...
    def setObject(self, string: str) -> None: ...
    def setObjectDesignator(self, string: str) -> None: ...
    def setObjectName(self, string: str) -> None: ...
    def setObjectType(self, objectType: org.orekit.files.ccsds.ndm.odm.ocm.ObjectType) -> None: ...
    def setObsBeforeNextMessage(self, yesNoUnknown: org.orekit.files.ccsds.definitions.YesNoUnknown) -> None: ...
    def setOdmMsgLink(self, string: str) -> None: ...
    def setOperatorContactPosition(self, string: str) -> None: ...
    def setOperatorEmail(self, string: str) -> None: ...
    def setOperatorOrganization(self, string: str) -> None: ...
    def setOperatorPhone(self, string: str) -> None: ...
    def setOrbitCenter(self, bodyFacade: org.orekit.files.ccsds.definitions.BodyFacade) -> None: ...
    def setRefFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setRelativeMetadata(self, cdmRelativeMetadata: 'CdmRelativeMetadata') -> None: ...
    def setSolarRadiationPressure(self, yesNoUnknown: org.orekit.files.ccsds.definitions.YesNoUnknown) -> None: ...
    def validate(self, double: float) -> None: ...

class CdmMetadataKey(java.lang.Enum['CdmMetadataKey']):
    OBJECT: typing.ClassVar['CdmMetadataKey'] = ...
    OBJECT_DESIGNATOR: typing.ClassVar['CdmMetadataKey'] = ...
    CATALOG_NAME: typing.ClassVar['CdmMetadataKey'] = ...
    OBJECT_NAME: typing.ClassVar['CdmMetadataKey'] = ...
    INTERNATIONAL_DESIGNATOR: typing.ClassVar['CdmMetadataKey'] = ...
    OBJECT_TYPE: typing.ClassVar['CdmMetadataKey'] = ...
    OPERATOR_CONTACT_POSITION: typing.ClassVar['CdmMetadataKey'] = ...
    OPERATOR_ORGANIZATION: typing.ClassVar['CdmMetadataKey'] = ...
    OPERATOR_PHONE: typing.ClassVar['CdmMetadataKey'] = ...
    OPERATOR_EMAIL: typing.ClassVar['CdmMetadataKey'] = ...
    ODM_MSG_LINK: typing.ClassVar['CdmMetadataKey'] = ...
    ADM_MSG_LINK: typing.ClassVar['CdmMetadataKey'] = ...
    EPHEMERIS_NAME: typing.ClassVar['CdmMetadataKey'] = ...
    OBS_BEFORE_NEXT_MESSAGE: typing.ClassVar['CdmMetadataKey'] = ...
    COVARIANCE_METHOD: typing.ClassVar['CdmMetadataKey'] = ...
    COVARIANCE_SOURCE: typing.ClassVar['CdmMetadataKey'] = ...
    MANEUVERABLE: typing.ClassVar['CdmMetadataKey'] = ...
    ORBIT_CENTER: typing.ClassVar['CdmMetadataKey'] = ...
    REF_FRAME: typing.ClassVar['CdmMetadataKey'] = ...
    ALT_COV_TYPE: typing.ClassVar['CdmMetadataKey'] = ...
    ALT_COV_REF_FRAME: typing.ClassVar['CdmMetadataKey'] = ...
    GRAVITY_MODEL: typing.ClassVar['CdmMetadataKey'] = ...
    ATMOSPHERIC_MODEL: typing.ClassVar['CdmMetadataKey'] = ...
    N_BODY_PERTURBATIONS: typing.ClassVar['CdmMetadataKey'] = ...
    SOLAR_RAD_PRESSURE: typing.ClassVar['CdmMetadataKey'] = ...
    EARTH_TIDES: typing.ClassVar['CdmMetadataKey'] = ...
    INTRACK_THRUST: typing.ClassVar['CdmMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, cdmMetadata: CdmMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CdmMetadataKey': ...
    @staticmethod
    def values() -> typing.List['CdmMetadataKey']: ...

class CdmMetadataWriter(org.orekit.files.ccsds.section.AbstractWriter):
    def __init__(self, cdmMetadata: CdmMetadata): ...

class CdmParser(org.orekit.files.ccsds.utils.parsing.AbstractConstituentParser[CdmHeader, Cdm, 'CdmParser']):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, parsedUnitsBehavior: org.orekit.files.ccsds.ndm.ParsedUnitsBehavior, functionArray: typing.List[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]): ...
    def build(self) -> Cdm: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> CdmHeader: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class CdmRelativeMetadata:
    def __init__(self): ...
    def addComment(self, string: str) -> None: ...
    def checkNotNull(self, object: typing.Any, enum: java.lang.Enum[typing.Any]) -> None: ...
    def checkScreenVolumeConditions(self) -> None: ...
    def getApproachAngle(self) -> float: ...
    def getCollisionPercentile(self) -> typing.List[int]: ...
    def getCollisionProbaMethod(self) -> org.orekit.files.ccsds.definitions.PocMethodFacade: ...
    def getCollisionProbability(self) -> float: ...
    def getComment(self) -> java.util.List[str]: ...
    def getConjunctionId(self) -> str: ...
    def getMahalanobisDistance(self) -> float: ...
    def getMaxCollisionProbability(self) -> float: ...
    def getMaxCollisionProbabilityMethod(self) -> org.orekit.files.ccsds.definitions.PocMethodFacade: ...
    def getMissDistance(self) -> float: ...
    def getNextMessageEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getPreviousMessageEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getPreviousMessageId(self) -> str: ...
    def getRelativePosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getRelativeSpeed(self) -> float: ...
    def getRelativeVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getScreenEntryTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getScreenExitTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getScreenPcThreshold(self) -> float: ...
    def getScreenType(self) -> 'ScreenType': ...
    def getScreenVolumeFrame(self) -> 'ScreenVolumeFrame': ...
    def getScreenVolumeRadius(self) -> float: ...
    def getScreenVolumeShape(self) -> 'ScreenVolumeShape': ...
    def getScreenVolumeX(self) -> float: ...
    def getScreenVolumeY(self) -> float: ...
    def getScreenVolumeZ(self) -> float: ...
    def getSefiCollisionProbability(self) -> float: ...
    def getSefiCollisionProbabilityMethod(self) -> org.orekit.files.ccsds.definitions.PocMethodFacade: ...
    def getSefiFragmentationModel(self) -> str: ...
    def getStartScreenPeriod(self) -> org.orekit.time.AbsoluteDate: ...
    def getStopScreenPeriod(self) -> org.orekit.time.AbsoluteDate: ...
    def getTca(self) -> org.orekit.time.AbsoluteDate: ...
    def getTimeSystem(self) -> org.orekit.files.ccsds.definitions.TimeSystem: ...
    def setApproachAngle(self, double: float) -> None: ...
    def setCollisionPercentile(self, intArray: typing.List[int]) -> None: ...
    def setCollisionProbaMethod(self, pocMethodFacade: org.orekit.files.ccsds.definitions.PocMethodFacade) -> None: ...
    def setCollisionProbability(self, double: float) -> None: ...
    def setConjunctionId(self, string: str) -> None: ...
    def setMahalanobisDistance(self, double: float) -> None: ...
    def setMaxCollisionProbability(self, double: float) -> None: ...
    def setMaxCollisionProbabilityMethod(self, pocMethodFacade: org.orekit.files.ccsds.definitions.PocMethodFacade) -> None: ...
    def setMissDistance(self, double: float) -> None: ...
    def setNextMessageEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setPreviousMessageEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setPreviousMessageId(self, string: str) -> None: ...
    def setRelativePositionN(self, double: float) -> None: ...
    def setRelativePositionR(self, double: float) -> None: ...
    def setRelativePositionT(self, double: float) -> None: ...
    def setRelativeSpeed(self, double: float) -> None: ...
    def setRelativeVelocityN(self, double: float) -> None: ...
    def setRelativeVelocityR(self, double: float) -> None: ...
    def setRelativeVelocityT(self, double: float) -> None: ...
    def setScreenEntryTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setScreenExitTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setScreenPcThreshold(self, double: float) -> None: ...
    def setScreenType(self, screenType: 'ScreenType') -> None: ...
    def setScreenVolumeFrame(self, screenVolumeFrame: 'ScreenVolumeFrame') -> None: ...
    def setScreenVolumeRadius(self, double: float) -> None: ...
    def setScreenVolumeShape(self, screenVolumeShape: 'ScreenVolumeShape') -> None: ...
    def setScreenVolumeX(self, double: float) -> None: ...
    def setScreenVolumeY(self, double: float) -> None: ...
    def setScreenVolumeZ(self, double: float) -> None: ...
    def setSefiCollisionProbability(self, double: float) -> None: ...
    def setSefiCollisionProbabilityMethod(self, pocMethodFacade: org.orekit.files.ccsds.definitions.PocMethodFacade) -> None: ...
    def setSefiFragmentationModel(self, string: str) -> None: ...
    def setStartScreenPeriod(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setStopScreenPeriod(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTca(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTimeSystem(self, timeSystem: org.orekit.files.ccsds.definitions.TimeSystem) -> None: ...
    def validate(self) -> None: ...

class CdmRelativeMetadataKey(java.lang.Enum['CdmRelativeMetadataKey']):
    CONJUNCTION_ID: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    TCA: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    MISS_DISTANCE: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    MAHALANOBIS_DISTANCE: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_SPEED: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_POSITION_R: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_POSITION_T: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_POSITION_N: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_VELOCITY_R: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_VELOCITY_T: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    RELATIVE_VELOCITY_N: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    APPROACH_ANGLE: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    START_SCREEN_PERIOD: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    STOP_SCREEN_PERIOD: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_VOLUME_FRAME: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_TYPE: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_VOLUME_SHAPE: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_VOLUME_RADIUS: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_VOLUME_X: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_VOLUME_Y: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_VOLUME_Z: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_ENTRY_TIME: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_EXIT_TIME: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SCREEN_PC_THRESHOLD: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    COLLISION_PERCENTILE: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    COLLISION_PROBABILITY: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    COLLISION_PROBABILITY_METHOD: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    COLLISION_MAX_PROBABILITY: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    COLLISION_MAX_PC_METHOD: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SEFI_COLLISION_PROBABILITY: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SEFI_COLLISION_PROBABILITY_METHOD: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    SEFI_FRAGMENTATION_MODEL: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    PREVIOUS_MESSAGE_ID: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    PREVIOUS_MESSAGE_EPOCH: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    NEXT_MESSAGE_EPOCH: typing.ClassVar['CdmRelativeMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, cdmRelativeMetadata: CdmRelativeMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CdmRelativeMetadataKey': ...
    @staticmethod
    def values() -> typing.List['CdmRelativeMetadataKey']: ...

class CdmSegment(org.orekit.files.ccsds.section.Segment[CdmMetadata, CdmData]):
    def __init__(self, cdmMetadata: CdmMetadata, cdmData: CdmData): ...

class CovarianceMethod(java.lang.Enum['CovarianceMethod']):
    CALCULATED: typing.ClassVar['CovarianceMethod'] = ...
    DEFAULT: typing.ClassVar['CovarianceMethod'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CovarianceMethod': ...
    @staticmethod
    def values() -> typing.List['CovarianceMethod']: ...

class Maneuvrable(java.lang.Enum['Maneuvrable']):
    YES: typing.ClassVar['Maneuvrable'] = ...
    NO: typing.ClassVar['Maneuvrable'] = ...
    N_A: typing.ClassVar['Maneuvrable'] = ...
    @staticmethod
    def getEnum(string: str) -> 'Maneuvrable': ...
    def getValue(self) -> str: ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Maneuvrable': ...
    @staticmethod
    def values() -> typing.List['Maneuvrable']: ...

class ODParameters(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getActualOdSpan(self) -> float: ...
    def getObsAvailable(self) -> int: ...
    def getObsUsed(self) -> int: ...
    def getOdEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getRecommendedOdSpan(self) -> float: ...
    def getResidualsAccepted(self) -> float: ...
    def getTimeLastObsEnd(self) -> org.orekit.time.AbsoluteDate: ...
    def getTimeLastObsStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getTracksAvailable(self) -> int: ...
    def getTracksUsed(self) -> int: ...
    def getWeightedRMS(self) -> float: ...
    def setActualOdSpan(self, double: float) -> None: ...
    def setObsAvailable(self, int: int) -> None: ...
    def setObsUsed(self, int: int) -> None: ...
    def setOdEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setRecommendedOdSpan(self, double: float) -> None: ...
    def setResidualsAccepted(self, double: float) -> None: ...
    def setTimeLastObsEnd(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTimeLastObsStart(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTracksAvailable(self, int: int) -> None: ...
    def setTracksUsed(self, int: int) -> None: ...
    def setWeightedRMS(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class ODParametersKey(java.lang.Enum['ODParametersKey']):
    COMMENT: typing.ClassVar['ODParametersKey'] = ...
    TIME_LASTOB_START: typing.ClassVar['ODParametersKey'] = ...
    TIME_LASTOB_END: typing.ClassVar['ODParametersKey'] = ...
    RECOMMENDED_OD_SPAN: typing.ClassVar['ODParametersKey'] = ...
    ACTUAL_OD_SPAN: typing.ClassVar['ODParametersKey'] = ...
    OBS_AVAILABLE: typing.ClassVar['ODParametersKey'] = ...
    OBS_USED: typing.ClassVar['ODParametersKey'] = ...
    TRACKS_AVAILABLE: typing.ClassVar['ODParametersKey'] = ...
    TRACKS_USED: typing.ClassVar['ODParametersKey'] = ...
    RESIDUALS_ACCEPTED: typing.ClassVar['ODParametersKey'] = ...
    WEIGHTED_RMS: typing.ClassVar['ODParametersKey'] = ...
    OD_EPOCH: typing.ClassVar['ODParametersKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, oDParameters: ODParameters) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ODParametersKey': ...
    @staticmethod
    def values() -> typing.List['ODParametersKey']: ...

class ODParametersWriter(org.orekit.files.ccsds.section.AbstractWriter): ...

class RTNCovariance(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getCdrgdrg(self) -> float: ...
    def getCdrgn(self) -> float: ...
    def getCdrgndot(self) -> float: ...
    def getCdrgr(self) -> float: ...
    def getCdrgrdot(self) -> float: ...
    def getCdrgt(self) -> float: ...
    def getCdrgtdot(self) -> float: ...
    def getCndotn(self) -> float: ...
    def getCndotndot(self) -> float: ...
    def getCndotr(self) -> float: ...
    def getCndotrdot(self) -> float: ...
    def getCndott(self) -> float: ...
    def getCndottdot(self) -> float: ...
    def getCnn(self) -> float: ...
    def getCnr(self) -> float: ...
    def getCnt(self) -> float: ...
    def getCrdotn(self) -> float: ...
    def getCrdotr(self) -> float: ...
    def getCrdotrdot(self) -> float: ...
    def getCrdott(self) -> float: ...
    def getCrr(self) -> float: ...
    def getCsrpdrg(self) -> float: ...
    def getCsrpn(self) -> float: ...
    def getCsrpndot(self) -> float: ...
    def getCsrpr(self) -> float: ...
    def getCsrprdot(self) -> float: ...
    def getCsrpsrp(self) -> float: ...
    def getCsrpt(self) -> float: ...
    def getCsrptdot(self) -> float: ...
    def getCtdotn(self) -> float: ...
    def getCtdotr(self) -> float: ...
    def getCtdotrdot(self) -> float: ...
    def getCtdott(self) -> float: ...
    def getCtdottdot(self) -> float: ...
    def getCthrdrg(self) -> float: ...
    def getCthrn(self) -> float: ...
    def getCthrndot(self) -> float: ...
    def getCthrr(self) -> float: ...
    def getCthrrdot(self) -> float: ...
    def getCthrsrp(self) -> float: ...
    def getCthrt(self) -> float: ...
    def getCthrtdot(self) -> float: ...
    def getCthrthr(self) -> float: ...
    def getCtr(self) -> float: ...
    def getCtt(self) -> float: ...
    def getRTNCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def setCdrgdrg(self, double: float) -> None: ...
    def setCdrgn(self, double: float) -> None: ...
    def setCdrgndot(self, double: float) -> None: ...
    def setCdrgr(self, double: float) -> None: ...
    def setCdrgrdot(self, double: float) -> None: ...
    def setCdrgt(self, double: float) -> None: ...
    def setCdrgtdot(self, double: float) -> None: ...
    def setCndotn(self, double: float) -> None: ...
    def setCndotndot(self, double: float) -> None: ...
    def setCndotr(self, double: float) -> None: ...
    def setCndotrdot(self, double: float) -> None: ...
    def setCndott(self, double: float) -> None: ...
    def setCndottdot(self, double: float) -> None: ...
    def setCnn(self, double: float) -> None: ...
    def setCnr(self, double: float) -> None: ...
    def setCnt(self, double: float) -> None: ...
    def setCovarianceMatrixEntry(self, int: int, int2: int, double: float) -> None: ...
    def setCrdotn(self, double: float) -> None: ...
    def setCrdotr(self, double: float) -> None: ...
    def setCrdotrdot(self, double: float) -> None: ...
    def setCrdott(self, double: float) -> None: ...
    def setCrr(self, double: float) -> None: ...
    def setCsrpdrg(self, double: float) -> None: ...
    def setCsrpn(self, double: float) -> None: ...
    def setCsrpndot(self, double: float) -> None: ...
    def setCsrpr(self, double: float) -> None: ...
    def setCsrprdot(self, double: float) -> None: ...
    def setCsrpsrp(self, double: float) -> None: ...
    def setCsrpt(self, double: float) -> None: ...
    def setCsrptdot(self, double: float) -> None: ...
    def setCtdotn(self, double: float) -> None: ...
    def setCtdotr(self, double: float) -> None: ...
    def setCtdotrdot(self, double: float) -> None: ...
    def setCtdott(self, double: float) -> None: ...
    def setCtdottdot(self, double: float) -> None: ...
    def setCthrdrg(self, double: float) -> None: ...
    def setCthrn(self, double: float) -> None: ...
    def setCthrndot(self, double: float) -> None: ...
    def setCthrr(self, double: float) -> None: ...
    def setCthrrdot(self, double: float) -> None: ...
    def setCthrsrp(self, double: float) -> None: ...
    def setCthrt(self, double: float) -> None: ...
    def setCthrtdot(self, double: float) -> None: ...
    def setCthrthr(self, double: float) -> None: ...
    def setCtr(self, double: float) -> None: ...
    def setCtt(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class RTNCovarianceKey(java.lang.Enum['RTNCovarianceKey']):
    COMMENT: typing.ClassVar['RTNCovarianceKey'] = ...
    CR_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CT_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CT_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CN_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CN_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CN_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CRDOT_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CRDOT_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CRDOT_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CRDOT_RDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CTDOT_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CTDOT_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CTDOT_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CTDOT_RDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CTDOT_TDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CNDOT_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CNDOT_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CNDOT_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CNDOT_RDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CNDOT_TDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CNDOT_NDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_RDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_TDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_NDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CDRG_DRG: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_RDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_TDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_NDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_DRG: typing.ClassVar['RTNCovarianceKey'] = ...
    CSRP_SRP: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_R: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_T: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_N: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_RDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_TDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_NDOT: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_DRG: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_SRP: typing.ClassVar['RTNCovarianceKey'] = ...
    CTHR_THR: typing.ClassVar['RTNCovarianceKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, rTNCovariance: RTNCovariance) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RTNCovarianceKey': ...
    @staticmethod
    def values() -> typing.List['RTNCovarianceKey']: ...

class RTNCovarianceWriter(org.orekit.files.ccsds.section.AbstractWriter): ...

class ScreenType(java.lang.Enum['ScreenType']):
    SHAPE: typing.ClassVar['ScreenType'] = ...
    PC: typing.ClassVar['ScreenType'] = ...
    PC_MAX: typing.ClassVar['ScreenType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ScreenType': ...
    @staticmethod
    def values() -> typing.List['ScreenType']: ...

class ScreenVolumeFrame(java.lang.Enum['ScreenVolumeFrame']):
    RTN: typing.ClassVar['ScreenVolumeFrame'] = ...
    TVN: typing.ClassVar['ScreenVolumeFrame'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ScreenVolumeFrame': ...
    @staticmethod
    def values() -> typing.List['ScreenVolumeFrame']: ...

class ScreenVolumeShape(java.lang.Enum['ScreenVolumeShape']):
    ELLIPSOID: typing.ClassVar['ScreenVolumeShape'] = ...
    BOX: typing.ClassVar['ScreenVolumeShape'] = ...
    SPHERE: typing.ClassVar['ScreenVolumeShape'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ScreenVolumeShape': ...
    @staticmethod
    def values() -> typing.List['ScreenVolumeShape']: ...

class SigmaEigenvectorsCovariance(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self, boolean: bool): ...
    def getCsig3eigvec3(self) -> typing.List[float]: ...
    def isAltCovFlagSet(self) -> bool: ...
    def setCsig3eigvec3(self, doubleArray: typing.List[float]) -> None: ...
    def validate(self, double: float) -> None: ...

class SigmaEigenvectorsCovarianceKey(java.lang.Enum['SigmaEigenvectorsCovarianceKey']):
    COMMENT: typing.ClassVar['SigmaEigenvectorsCovarianceKey'] = ...
    CSIG3EIGVEC3: typing.ClassVar['SigmaEigenvectorsCovarianceKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, sigmaEigenvectorsCovariance: SigmaEigenvectorsCovariance) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SigmaEigenvectorsCovarianceKey': ...
    @staticmethod
    def values() -> typing.List['SigmaEigenvectorsCovarianceKey']: ...

class StateVector(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getPositionVector(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVelocityVector(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def setX(self, double: float) -> None: ...
    def setXdot(self, double: float) -> None: ...
    def setY(self, double: float) -> None: ...
    def setYdot(self, double: float) -> None: ...
    def setZ(self, double: float) -> None: ...
    def setZdot(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class StateVectorKey(java.lang.Enum['StateVectorKey']):
    COMMENT: typing.ClassVar['StateVectorKey'] = ...
    X: typing.ClassVar['StateVectorKey'] = ...
    Y: typing.ClassVar['StateVectorKey'] = ...
    Z: typing.ClassVar['StateVectorKey'] = ...
    X_DOT: typing.ClassVar['StateVectorKey'] = ...
    Y_DOT: typing.ClassVar['StateVectorKey'] = ...
    Z_DOT: typing.ClassVar['StateVectorKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, stateVector: StateVector) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'StateVectorKey': ...
    @staticmethod
    def values() -> typing.List['StateVectorKey']: ...

class StateVectorWriter(org.orekit.files.ccsds.section.AbstractWriter): ...

class XYZCovariance(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self, boolean: bool): ...
    def getCdrgdrg(self) -> float: ...
    def getCdrgx(self) -> float: ...
    def getCdrgxdot(self) -> float: ...
    def getCdrgy(self) -> float: ...
    def getCdrgydot(self) -> float: ...
    def getCdrgz(self) -> float: ...
    def getCdrgzdot(self) -> float: ...
    def getCsrpdrg(self) -> float: ...
    def getCsrpsrp(self) -> float: ...
    def getCsrpx(self) -> float: ...
    def getCsrpxdot(self) -> float: ...
    def getCsrpy(self) -> float: ...
    def getCsrpydot(self) -> float: ...
    def getCsrpz(self) -> float: ...
    def getCsrpzdot(self) -> float: ...
    def getCthrdrg(self) -> float: ...
    def getCthrsrp(self) -> float: ...
    def getCthrthr(self) -> float: ...
    def getCthrx(self) -> float: ...
    def getCthrxdot(self) -> float: ...
    def getCthry(self) -> float: ...
    def getCthrydot(self) -> float: ...
    def getCthrz(self) -> float: ...
    def getCthrzdot(self) -> float: ...
    def getCxdotx(self) -> float: ...
    def getCxdotxdot(self) -> float: ...
    def getCxdoty(self) -> float: ...
    def getCxdotz(self) -> float: ...
    def getCxx(self) -> float: ...
    def getCydotx(self) -> float: ...
    def getCydotxdot(self) -> float: ...
    def getCydoty(self) -> float: ...
    def getCydotydot(self) -> float: ...
    def getCydotz(self) -> float: ...
    def getCyx(self) -> float: ...
    def getCyy(self) -> float: ...
    def getCzdotx(self) -> float: ...
    def getCzdotxdot(self) -> float: ...
    def getCzdoty(self) -> float: ...
    def getCzdotydot(self) -> float: ...
    def getCzdotz(self) -> float: ...
    def getCzdotzdot(self) -> float: ...
    def getCzx(self) -> float: ...
    def getCzy(self) -> float: ...
    def getCzz(self) -> float: ...
    def getXYZCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def isCovXYZset(self) -> bool: ...
    def setCdrgdrg(self, double: float) -> None: ...
    def setCdrgx(self, double: float) -> None: ...
    def setCdrgxdot(self, double: float) -> None: ...
    def setCdrgy(self, double: float) -> None: ...
    def setCdrgydot(self, double: float) -> None: ...
    def setCdrgz(self, double: float) -> None: ...
    def setCdrgzdot(self, double: float) -> None: ...
    def setCovarianceMatrixEntry(self, int: int, int2: int, double: float) -> None: ...
    def setCsrpdrg(self, double: float) -> None: ...
    def setCsrpsrp(self, double: float) -> None: ...
    def setCsrpx(self, double: float) -> None: ...
    def setCsrpxdot(self, double: float) -> None: ...
    def setCsrpy(self, double: float) -> None: ...
    def setCsrpydot(self, double: float) -> None: ...
    def setCsrpz(self, double: float) -> None: ...
    def setCsrpzdot(self, double: float) -> None: ...
    def setCthrdrg(self, double: float) -> None: ...
    def setCthrsrp(self, double: float) -> None: ...
    def setCthrthr(self, double: float) -> None: ...
    def setCthrx(self, double: float) -> None: ...
    def setCthrxdot(self, double: float) -> None: ...
    def setCthry(self, double: float) -> None: ...
    def setCthrydot(self, double: float) -> None: ...
    def setCthrz(self, double: float) -> None: ...
    def setCthrzdot(self, double: float) -> None: ...
    def setCxdotx(self, double: float) -> None: ...
    def setCxdotxdot(self, double: float) -> None: ...
    def setCxdoty(self, double: float) -> None: ...
    def setCxdotz(self, double: float) -> None: ...
    def setCxx(self, double: float) -> None: ...
    def setCydotx(self, double: float) -> None: ...
    def setCydotxdot(self, double: float) -> None: ...
    def setCydoty(self, double: float) -> None: ...
    def setCydotydot(self, double: float) -> None: ...
    def setCydotz(self, double: float) -> None: ...
    def setCyx(self, double: float) -> None: ...
    def setCyy(self, double: float) -> None: ...
    def setCzdotx(self, double: float) -> None: ...
    def setCzdotxdot(self, double: float) -> None: ...
    def setCzdoty(self, double: float) -> None: ...
    def setCzdotydot(self, double: float) -> None: ...
    def setCzdotz(self, double: float) -> None: ...
    def setCzdotzdot(self, double: float) -> None: ...
    def setCzx(self, double: float) -> None: ...
    def setCzy(self, double: float) -> None: ...
    def setCzz(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class XYZCovarianceKey(java.lang.Enum['XYZCovarianceKey']):
    COMMENT: typing.ClassVar['XYZCovarianceKey'] = ...
    CX_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CY_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CY_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CZ_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CZ_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CZ_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CXDOT_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CXDOT_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CXDOT_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CXDOT_XDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CYDOT_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CYDOT_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CYDOT_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CYDOT_XDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CYDOT_YDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CZDOT_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CZDOT_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CZDOT_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CZDOT_XDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CZDOT_YDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CZDOT_ZDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_XDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_YDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_ZDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CDRG_DRG: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_XDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_YDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_ZDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_DRG: typing.ClassVar['XYZCovarianceKey'] = ...
    CSRP_SRP: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_X: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_Y: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_Z: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_XDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_YDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_ZDOT: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_DRG: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_SRP: typing.ClassVar['XYZCovarianceKey'] = ...
    CTHR_THR: typing.ClassVar['XYZCovarianceKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, xYZCovariance: XYZCovariance) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'XYZCovarianceKey': ...
    @staticmethod
    def values() -> typing.List['XYZCovarianceKey']: ...

class XmlSubStructureKey(java.lang.Enum['XmlSubStructureKey']):
    COMMENT: typing.ClassVar['XmlSubStructureKey'] = ...
    relativeMetadataData: typing.ClassVar['XmlSubStructureKey'] = ...
    segment: typing.ClassVar['XmlSubStructureKey'] = ...
    relativeStateVector: typing.ClassVar['XmlSubStructureKey'] = ...
    odParameters: typing.ClassVar['XmlSubStructureKey'] = ...
    additionalParameters: typing.ClassVar['XmlSubStructureKey'] = ...
    stateVector: typing.ClassVar['XmlSubStructureKey'] = ...
    covarianceMatrix: typing.ClassVar['XmlSubStructureKey'] = ...
    userDefinedParameters: typing.ClassVar['XmlSubStructureKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, cdmParser: CdmParser) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'XmlSubStructureKey': ...
    @staticmethod
    def values() -> typing.List['XmlSubStructureKey']: ...

class CdmWriter(CdmMessageWriter):
    CCSDS_CDM_VERS: typing.ClassVar[float] = ...
    KVN_PADDING_WIDTH: typing.ClassVar[int] = ...
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...
    def writeRelativeMetadataContent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, double: float, cdmRelativeMetadata: CdmRelativeMetadata) -> None: ...
    def writeSegmentContent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, double: float, segment: org.orekit.files.ccsds.section.Segment[CdmMetadata, CdmData]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.cdm")``.

    AdditionalCovarianceMetadata: typing.Type[AdditionalCovarianceMetadata]
    AdditionalCovarianceMetadataKey: typing.Type[AdditionalCovarianceMetadataKey]
    AdditionalParameters: typing.Type[AdditionalParameters]
    AdditionalParametersKey: typing.Type[AdditionalParametersKey]
    AdditionalParametersWriter: typing.Type[AdditionalParametersWriter]
    AltCovarianceType: typing.Type[AltCovarianceType]
    Cdm: typing.Type[Cdm]
    CdmData: typing.Type[CdmData]
    CdmHeader: typing.Type[CdmHeader]
    CdmHeaderKey: typing.Type[CdmHeaderKey]
    CdmHeaderProcessingState: typing.Type[CdmHeaderProcessingState]
    CdmMessageWriter: typing.Type[CdmMessageWriter]
    CdmMetadata: typing.Type[CdmMetadata]
    CdmMetadataKey: typing.Type[CdmMetadataKey]
    CdmMetadataWriter: typing.Type[CdmMetadataWriter]
    CdmParser: typing.Type[CdmParser]
    CdmRelativeMetadata: typing.Type[CdmRelativeMetadata]
    CdmRelativeMetadataKey: typing.Type[CdmRelativeMetadataKey]
    CdmSegment: typing.Type[CdmSegment]
    CdmWriter: typing.Type[CdmWriter]
    CovarianceMethod: typing.Type[CovarianceMethod]
    Maneuvrable: typing.Type[Maneuvrable]
    ODParameters: typing.Type[ODParameters]
    ODParametersKey: typing.Type[ODParametersKey]
    ODParametersWriter: typing.Type[ODParametersWriter]
    RTNCovariance: typing.Type[RTNCovariance]
    RTNCovarianceKey: typing.Type[RTNCovarianceKey]
    RTNCovarianceWriter: typing.Type[RTNCovarianceWriter]
    ScreenType: typing.Type[ScreenType]
    ScreenVolumeFrame: typing.Type[ScreenVolumeFrame]
    ScreenVolumeShape: typing.Type[ScreenVolumeShape]
    SigmaEigenvectorsCovariance: typing.Type[SigmaEigenvectorsCovariance]
    SigmaEigenvectorsCovarianceKey: typing.Type[SigmaEigenvectorsCovarianceKey]
    StateVector: typing.Type[StateVector]
    StateVectorKey: typing.Type[StateVectorKey]
    StateVectorWriter: typing.Type[StateVectorWriter]
    XYZCovariance: typing.Type[XYZCovariance]
    XYZCovarianceKey: typing.Type[XYZCovarianceKey]
    XmlSubStructureKey: typing.Type[XmlSubStructureKey]
