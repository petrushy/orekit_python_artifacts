import java.lang
import java.util
import java.util.function
import org.orekit.data
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.ndm.odm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.general
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.sampling
import org.orekit.time
import org.orekit.utils
import typing



class EphemerisOemWriter(org.orekit.files.general.EphemerisFileWriter):
    def __init__(self, oemWriter: 'OemWriter', odmHeader: org.orekit.files.ccsds.ndm.odm.OdmHeader, oemMetadata: 'OemMetadata', fileFormat: org.orekit.files.ccsds.utils.FileFormat, string: str, double: float, int: int): ...
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    _write_1__C = typing.TypeVar('_write_1__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_1__S = typing.TypeVar('_write_1__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    @typing.overload
    def write(self, string: str, ephemerisFile: org.orekit.files.general.EphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, appendable: java.lang.Appendable, ephemerisFile: org.orekit.files.general.EphemerisFile[_write_1__C, _write_1__S]) -> None: ...
    _writeSegment__C = typing.TypeVar('_writeSegment__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _writeSegment__S = typing.TypeVar('_writeSegment__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    def writeSegment(self, generator: org.orekit.files.ccsds.utils.generation.Generator, s2: _writeSegment__S) -> None: ...

class InterpolationMethod(java.lang.Enum['InterpolationMethod']):
    HERMITE: typing.ClassVar['InterpolationMethod'] = ...
    LAGRANGE: typing.ClassVar['InterpolationMethod'] = ...
    LINEAR: typing.ClassVar['InterpolationMethod'] = ...
    PROPAGATE: typing.ClassVar['InterpolationMethod'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'InterpolationMethod': ...
    @staticmethod
    def values() -> typing.List['InterpolationMethod']: ...

class Oem(org.orekit.files.ccsds.ndm.NdmConstituent[org.orekit.files.ccsds.ndm.odm.OdmHeader, 'OemSegment'], org.orekit.files.general.EphemerisFile[org.orekit.utils.TimeStampedPVCoordinates, 'OemSegment']):
    ROOT: typing.ClassVar[str] = ...
    FORMAT_VERSION_KEY: typing.ClassVar[str] = ...
    def __init__(self, odmHeader: org.orekit.files.ccsds.ndm.odm.OdmHeader, list: java.util.List['OemSegment'], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext, double: float): ...
    def checkTimeSystems(self) -> None: ...
    def getSatellites(self) -> java.util.Map[str, 'OemSatelliteEphemeris']: ...

class OemData(org.orekit.files.ccsds.section.CommentsContainer, org.orekit.files.ccsds.section.Data):
    def __init__(self): ...
    def addCovarianceMatrix(self, cartesianCovariance: org.orekit.files.ccsds.ndm.odm.CartesianCovariance) -> None: ...
    def addData(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, boolean: bool) -> bool: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
    def getCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
    def getCovarianceMatrices(self) -> java.util.List[org.orekit.files.ccsds.ndm.odm.CartesianCovariance]: ...
    def getEphemeridesDataLines(self) -> java.util.List[org.orekit.utils.TimeStampedPVCoordinates]: ...

class OemMetadata(org.orekit.files.ccsds.ndm.odm.OdmCommonMetadata):
    def __init__(self, int: int): ...
    def getInterpolationDegree(self) -> int: ...
    def getInterpolationMethod(self) -> InterpolationMethod: ...
    def getStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getStopTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getUseableStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getUseableStopTime(self) -> org.orekit.time.AbsoluteDate: ...
    def setInterpolationDegree(self, int: int) -> None: ...
    def setInterpolationMethod(self, interpolationMethod: InterpolationMethod) -> None: ...
    def setStartTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setStopTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setUseableStartTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setUseableStopTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def validate(self, double: float) -> None: ...

class OemMetadataKey(java.lang.Enum['OemMetadataKey']):
    START_TIME: typing.ClassVar['OemMetadataKey'] = ...
    STOP_TIME: typing.ClassVar['OemMetadataKey'] = ...
    USEABLE_START_TIME: typing.ClassVar['OemMetadataKey'] = ...
    USEABLE_STOP_TIME: typing.ClassVar['OemMetadataKey'] = ...
    INTERPOLATION: typing.ClassVar['OemMetadataKey'] = ...
    INTERPOLATION_DEGREE: typing.ClassVar['OemMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, oemMetadata: OemMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OemMetadataKey': ...
    @staticmethod
    def values() -> typing.List['OemMetadataKey']: ...

class OemParser(org.orekit.files.ccsds.ndm.odm.OdmParser[Oem, 'OemParser'], org.orekit.files.general.EphemerisFileParser[Oem]):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, parsedUnitsBehavior: org.orekit.files.ccsds.ndm.ParsedUnitsBehavior, functionArray: typing.List[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]): ...
    def build(self) -> Oem: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> org.orekit.files.ccsds.ndm.odm.OdmHeader: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> Oem: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class OemSatelliteEphemeris(org.orekit.files.general.EphemerisFile.SatelliteEphemeris[org.orekit.utils.TimeStampedPVCoordinates, 'OemSegment']):
    def __init__(self, string: str, double: float, list: java.util.List['OemSegment']): ...
    def getId(self) -> str: ...
    def getMu(self) -> float: ...
    def getSegments(self) -> java.util.List['OemSegment']: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class OemSegment(org.orekit.files.ccsds.section.Segment[OemMetadata, OemData], org.orekit.files.general.EphemerisFile.EphemerisSegment[org.orekit.utils.TimeStampedPVCoordinates]):
    def __init__(self, oemMetadata: OemMetadata, oemData: OemData, double: float): ...
    def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
    def getCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
    def getCovarianceMatrices(self) -> java.util.List[org.orekit.files.ccsds.ndm.odm.CartesianCovariance]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInertialFrame(self) -> org.orekit.frames.Frame: ...
    def getInterpolationSamples(self) -> int: ...
    def getMu(self) -> float: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class OemWriter(org.orekit.files.ccsds.utils.generation.AbstractMessageWriter[org.orekit.files.ccsds.ndm.odm.OdmHeader, OemSegment, Oem]):
    CCSDS_OEM_VERS: typing.ClassVar[float] = ...
    DEFAULT_FILE_NAME: typing.ClassVar[str] = ...
    KVN_PADDING_WIDTH: typing.ClassVar[int] = ...
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate): ...

class StreamingOemWriter(java.lang.AutoCloseable):
    @typing.overload
    def __init__(self, generator: org.orekit.files.ccsds.utils.generation.Generator, oemWriter: OemWriter, odmHeader: org.orekit.files.ccsds.ndm.odm.OdmHeader, oemMetadata: OemMetadata): ...
    @typing.overload
    def __init__(self, generator: org.orekit.files.ccsds.utils.generation.Generator, oemWriter: OemWriter, odmHeader: org.orekit.files.ccsds.ndm.odm.OdmHeader, oemMetadata: OemMetadata, boolean: bool): ...
    @typing.overload
    def __init__(self, generator: org.orekit.files.ccsds.utils.generation.Generator, oemWriter: OemWriter, odmHeader: org.orekit.files.ccsds.ndm.odm.OdmHeader, oemMetadata: OemMetadata, boolean: bool, boolean2: bool): ...
    def close(self) -> None: ...
    def newSegment(self) -> 'StreamingOemWriter.SegmentWriter': ...
    class SegmentWriter(org.orekit.propagation.sampling.OrekitFixedStepHandler):
        def __init__(self, streamingOemWriter: 'StreamingOemWriter'): ...
        def finish(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def handleStep(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.odm.oem")``.

    EphemerisOemWriter: typing.Type[EphemerisOemWriter]
    InterpolationMethod: typing.Type[InterpolationMethod]
    Oem: typing.Type[Oem]
    OemData: typing.Type[OemData]
    OemMetadata: typing.Type[OemMetadata]
    OemMetadataKey: typing.Type[OemMetadataKey]
    OemParser: typing.Type[OemParser]
    OemSatelliteEphemeris: typing.Type[OemSatelliteEphemeris]
    OemSegment: typing.Type[OemSegment]
    OemWriter: typing.Type[OemWriter]
    StreamingOemWriter: typing.Type[StreamingOemWriter]
