import java.lang
import java.util
import java.util.function
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.linear
import org.orekit.attitudes
import org.orekit.data
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.ndm.adm
import org.orekit.files.ccsds.ndm.odm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.general
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import org.orekit.utils.units
import typing



class Acm(org.orekit.files.ccsds.ndm.NdmConstituent[org.orekit.files.ccsds.ndm.adm.AdmHeader, org.orekit.files.ccsds.section.Segment['AcmMetadata', 'AcmData']], org.orekit.files.general.AttitudeEphemerisFile[org.orekit.utils.TimeStampedAngularCoordinates, 'AttitudeStateHistory']):
    ROOT: typing.ClassVar[str] = ...
    FORMAT_VERSION_KEY: typing.ClassVar[str] = ...
    ATT_LINE: typing.ClassVar[str] = ...
    COV_LINE: typing.ClassVar[str] = ...
    UNKNOWN_OBJECT: typing.ClassVar[str] = ...
    def __init__(self, admHeader: org.orekit.files.ccsds.ndm.adm.AdmHeader, list: java.util.List[org.orekit.files.ccsds.section.Segment['AcmMetadata', 'AcmData']], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...
    def getData(self) -> 'AcmData': ...
    def getMetadata(self) -> 'AcmMetadata': ...
    def getSatellites(self) -> java.util.Map[str, 'AcmSatelliteEphemeris']: ...

class AcmData(org.orekit.files.ccsds.section.Data):
    def __init__(self, list: java.util.List['AttitudeStateHistory'], attitudePhysicalProperties: 'AttitudePhysicalProperties', list2: java.util.List['AttitudeCovarianceHistory'], list3: java.util.List['AttitudeManeuver'], attitudeDetermination: 'AttitudeDetermination', userDefined: org.orekit.files.ccsds.ndm.odm.UserDefined): ...
    def getAttitudeBlocks(self) -> java.util.List['AttitudeStateHistory']: ...
    def getAttitudeDeterminationBlock(self) -> 'AttitudeDetermination': ...
    def getCovarianceBlocks(self) -> java.util.List['AttitudeCovarianceHistory']: ...
    def getManeuverBlocks(self) -> java.util.List['AttitudeManeuver']: ...
    def getPhysicBlock(self) -> 'AttitudePhysicalProperties': ...
    def getUserDefinedBlock(self) -> org.orekit.files.ccsds.ndm.odm.UserDefined: ...
    def validate(self, double: float) -> None: ...

class AcmDataSubStructureKey(java.lang.Enum['AcmDataSubStructureKey']):
    ATT: typing.ClassVar['AcmDataSubStructureKey'] = ...
    att: typing.ClassVar['AcmDataSubStructureKey'] = ...
    PHYS: typing.ClassVar['AcmDataSubStructureKey'] = ...
    phys: typing.ClassVar['AcmDataSubStructureKey'] = ...
    COV: typing.ClassVar['AcmDataSubStructureKey'] = ...
    cov: typing.ClassVar['AcmDataSubStructureKey'] = ...
    MAN: typing.ClassVar['AcmDataSubStructureKey'] = ...
    man: typing.ClassVar['AcmDataSubStructureKey'] = ...
    AD: typing.ClassVar['AcmDataSubStructureKey'] = ...
    ad: typing.ClassVar['AcmDataSubStructureKey'] = ...
    USER: typing.ClassVar['AcmDataSubStructureKey'] = ...
    user: typing.ClassVar['AcmDataSubStructureKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, acmParser: 'AcmParser') -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AcmDataSubStructureKey': ...
    @staticmethod
    def values() -> typing.List['AcmDataSubStructureKey']: ...

class AcmElements(java.lang.Enum['AcmElements']):
    ATT: typing.ClassVar['AcmElements'] = ...
    PHYS: typing.ClassVar['AcmElements'] = ...
    COV: typing.ClassVar['AcmElements'] = ...
    MAN: typing.ClassVar['AcmElements'] = ...
    AD: typing.ClassVar['AcmElements'] = ...
    USER: typing.ClassVar['AcmElements'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AcmElements': ...
    @staticmethod
    def values() -> typing.List['AcmElements']: ...

class AcmMetadata(org.orekit.files.ccsds.ndm.adm.AdmMetadata):
    def __init__(self, dataContext: org.orekit.data.DataContext): ...
    def getAcmDataElements(self) -> java.util.List[AcmElements]: ...
    def getCatalogName(self) -> str: ...
    def getEpochT0(self) -> org.orekit.time.AbsoluteDate: ...
    def getInternationalDesignator(self) -> str: ...
    def getNextLeapEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getNextLeapTaimutc(self) -> float: ...
    def getObjectDesignator(self) -> str: ...
    def getOdmMessageLink(self) -> str: ...
    def getOriginatorAddress(self) -> str: ...
    def getOriginatorEmail(self) -> str: ...
    def getOriginatorPOC(self) -> str: ...
    def getOriginatorPhone(self) -> str: ...
    def getOriginatorPosition(self) -> str: ...
    def getStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getStopTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getTaimutcT0(self) -> float: ...
    def setAcmDataElements(self, list: java.util.List[AcmElements]) -> None: ...
    def setCatalogName(self, string: str) -> None: ...
    def setEpochT0(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setInternationalDesignator(self, string: str) -> None: ...
    def setNextLeapEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setNextLeapTaimutc(self, double: float) -> None: ...
    def setObjectDesignator(self, string: str) -> None: ...
    def setOdmMessageLink(self, string: str) -> None: ...
    def setOriginatorAddress(self, string: str) -> None: ...
    def setOriginatorEmail(self, string: str) -> None: ...
    def setOriginatorPOC(self, string: str) -> None: ...
    def setOriginatorPhone(self, string: str) -> None: ...
    def setOriginatorPosition(self, string: str) -> None: ...
    def setStartTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setStopTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTaimutcT0(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class AcmMetadataKey(java.lang.Enum['AcmMetadataKey']):
    INTERNATIONAL_DESIGNATOR: typing.ClassVar['AcmMetadataKey'] = ...
    CATALOG_NAME: typing.ClassVar['AcmMetadataKey'] = ...
    OBJECT_DESIGNATOR: typing.ClassVar['AcmMetadataKey'] = ...
    ORIGINATOR_POC: typing.ClassVar['AcmMetadataKey'] = ...
    ORIGINATOR_POSITION: typing.ClassVar['AcmMetadataKey'] = ...
    ORIGINATOR_PHONE: typing.ClassVar['AcmMetadataKey'] = ...
    ORIGINATOR_EMAIL: typing.ClassVar['AcmMetadataKey'] = ...
    ORIGINATOR_ADDRESS: typing.ClassVar['AcmMetadataKey'] = ...
    ODM_MSG_LINK: typing.ClassVar['AcmMetadataKey'] = ...
    EPOCH_TZERO: typing.ClassVar['AcmMetadataKey'] = ...
    ACM_DATA_ELEMENTS: typing.ClassVar['AcmMetadataKey'] = ...
    START_TIME: typing.ClassVar['AcmMetadataKey'] = ...
    STOP_TIME: typing.ClassVar['AcmMetadataKey'] = ...
    TAIMUTC_AT_TZERO: typing.ClassVar['AcmMetadataKey'] = ...
    NEXT_LEAP_EPOCH: typing.ClassVar['AcmMetadataKey'] = ...
    NEXT_LEAP_TAIMUTC: typing.ClassVar['AcmMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, acmMetadata: AcmMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AcmMetadataKey': ...
    @staticmethod
    def values() -> typing.List['AcmMetadataKey']: ...

class AcmParser(org.orekit.files.ccsds.ndm.adm.AdmParser[Acm, 'AcmParser'], org.orekit.files.general.AttitudeEphemerisFileParser[Acm]):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, parsedUnitsBehavior: org.orekit.files.ccsds.ndm.ParsedUnitsBehavior, functionArray: typing.List[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]): ...
    def build(self) -> Acm: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> org.orekit.files.ccsds.ndm.adm.AdmHeader: ...
    def getSpecialXmlElementsBuilders(self) -> java.util.Map[str, org.orekit.files.ccsds.utils.lexical.XmlTokenBuilder]: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> Acm: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class AcmSatelliteEphemeris(org.orekit.files.general.AttitudeEphemerisFile.SatelliteAttitudeEphemeris[org.orekit.utils.TimeStampedAngularCoordinates, 'AttitudeStateHistory']):
    def __init__(self, string: str, list: java.util.List['AttitudeStateHistory']): ...
    def getId(self) -> str: ...
    def getSegments(self) -> java.util.List['AttitudeStateHistory']: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class AcmWriter(org.orekit.files.ccsds.utils.generation.AbstractMessageWriter[org.orekit.files.ccsds.ndm.adm.AdmHeader, org.orekit.files.ccsds.section.Segment[AcmMetadata, AcmData], Acm]):
    CCSDS_ACM_VERS: typing.ClassVar[float] = ...
    KVN_PADDING_WIDTH: typing.ClassVar[int] = ...
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...

class AttitudeCovariance(org.orekit.time.TimeStamped):
    def __init__(self, attitudeCovarianceType: 'AttitudeCovarianceType', absoluteDate: org.orekit.time.AbsoluteDate, stringArray: typing.List[str], int: int): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMatrix(self) -> org.hipparchus.linear.DiagonalMatrix: ...
    def getType(self) -> 'AttitudeCovarianceType': ...

class AttitudeCovarianceHistory:
    def __init__(self, attitudeCovarianceHistoryMetadata: 'AttitudeCovarianceHistoryMetadata', list: java.util.List[AttitudeCovariance]): ...
    def getCovariances(self) -> java.util.List[AttitudeCovariance]: ...
    def getMetadata(self) -> 'AttitudeCovarianceHistoryMetadata': ...

class AttitudeCovarianceHistoryMetadata(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getCovBasis(self) -> str: ...
    def getCovBasisID(self) -> str: ...
    def getCovID(self) -> str: ...
    def getCovPrevID(self) -> str: ...
    def getCovReferenceFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getCovType(self) -> 'AttitudeCovarianceType': ...
    def setCovBasis(self, string: str) -> None: ...
    def setCovBasisID(self, string: str) -> None: ...
    def setCovID(self, string: str) -> None: ...
    def setCovPrevID(self, string: str) -> None: ...
    def setCovReferenceFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setCovType(self, attitudeCovarianceType: 'AttitudeCovarianceType') -> None: ...
    def validate(self, double: float) -> None: ...

class AttitudeCovarianceHistoryMetadataKey(java.lang.Enum['AttitudeCovarianceHistoryMetadataKey']):
    COMMENT: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    COV_ID: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    COV_PREV_ID: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    COV_BASIS: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    COV_BASIS_ID: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    COV_REF_FRAME: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    COV_TYPE: typing.ClassVar['AttitudeCovarianceHistoryMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudeCovarianceHistoryMetadata: AttitudeCovarianceHistoryMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeCovarianceHistoryMetadataKey': ...
    @staticmethod
    def values() -> typing.List['AttitudeCovarianceHistoryMetadataKey']: ...

class AttitudeCovarianceType(java.lang.Enum['AttitudeCovarianceType']):
    ANGLE: typing.ClassVar['AttitudeCovarianceType'] = ...
    ANGLE_GYROBIAS: typing.ClassVar['AttitudeCovarianceType'] = ...
    ANGLE_ANGVEL: typing.ClassVar['AttitudeCovarianceType'] = ...
    QUATERNION: typing.ClassVar['AttitudeCovarianceType'] = ...
    QUATERNION_GYROBIAS: typing.ClassVar['AttitudeCovarianceType'] = ...
    QUATERNION_ANGVEL: typing.ClassVar['AttitudeCovarianceType'] = ...
    def getUnits(self) -> java.util.List[org.orekit.utils.units.Unit]: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeCovarianceType': ...
    @staticmethod
    def values() -> typing.List['AttitudeCovarianceType']: ...

class AttitudeDetermination(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def addSensor(self, attitudeDeterminationSensor: 'AttitudeDeterminationSensor') -> None: ...
    def getAttitudeStates(self) -> 'AttitudeElementsType': ...
    def getCovarianceType(self) -> AttitudeCovarianceType: ...
    def getEndpoints(self) -> org.orekit.files.ccsds.ndm.adm.AttitudeEndpoints: ...
    def getEulerRotSeq(self) -> org.hipparchus.geometry.euclidean.threed.RotationOrder: ...
    def getId(self) -> str: ...
    def getMethod(self) -> org.orekit.files.ccsds.definitions.AdMethodType: ...
    def getNbStates(self) -> int: ...
    def getPrevId(self) -> str: ...
    def getRateProcessNoiseStdDev(self) -> float: ...
    def getRateStates(self) -> 'RateElementsType': ...
    def getSensorsUsed(self) -> java.util.List['AttitudeDeterminationSensor']: ...
    def getSigmaU(self) -> float: ...
    def getSigmaV(self) -> float: ...
    def getSource(self) -> str: ...
    def setAttitudeStates(self, attitudeElementsType: 'AttitudeElementsType') -> None: ...
    def setCovarianceType(self, attitudeCovarianceType: AttitudeCovarianceType) -> None: ...
    def setEulerRotSeq(self, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder) -> None: ...
    def setId(self, string: str) -> None: ...
    def setMethod(self, adMethodType: org.orekit.files.ccsds.definitions.AdMethodType) -> None: ...
    def setNbStates(self, int: int) -> None: ...
    def setPrevId(self, string: str) -> None: ...
    def setRateProcessNoiseStdDev(self, double: float) -> None: ...
    def setRateStates(self, rateElementsType: 'RateElementsType') -> None: ...
    def setSigmaU(self, double: float) -> None: ...
    def setSigmaV(self, double: float) -> None: ...
    def setSource(self, string: str) -> None: ...
    def validate(self, double: float) -> None: ...

class AttitudeDeterminationKey(java.lang.Enum['AttitudeDeterminationKey']):
    COMMENT: typing.ClassVar['AttitudeDeterminationKey'] = ...
    AD_ID: typing.ClassVar['AttitudeDeterminationKey'] = ...
    AD_PREV_ID: typing.ClassVar['AttitudeDeterminationKey'] = ...
    AD_METHOD: typing.ClassVar['AttitudeDeterminationKey'] = ...
    ATTITUDE_SOURCE: typing.ClassVar['AttitudeDeterminationKey'] = ...
    EULER_ROT_SEQ: typing.ClassVar['AttitudeDeterminationKey'] = ...
    NUMBER_STATES: typing.ClassVar['AttitudeDeterminationKey'] = ...
    ATTITUDE_STATES: typing.ClassVar['AttitudeDeterminationKey'] = ...
    COV_TYPE: typing.ClassVar['AttitudeDeterminationKey'] = ...
    REF_FRAME_A: typing.ClassVar['AttitudeDeterminationKey'] = ...
    REF_FRAME_B: typing.ClassVar['AttitudeDeterminationKey'] = ...
    RATE_STATES: typing.ClassVar['AttitudeDeterminationKey'] = ...
    SIGMA_U: typing.ClassVar['AttitudeDeterminationKey'] = ...
    SIGMA_V: typing.ClassVar['AttitudeDeterminationKey'] = ...
    RATE_PROCESS_NOISE_STDDEV: typing.ClassVar['AttitudeDeterminationKey'] = ...
    SENSOR: typing.ClassVar['AttitudeDeterminationKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, acmParser: AcmParser, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudeDetermination: AttitudeDetermination) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeDeterminationKey': ...
    @staticmethod
    def values() -> typing.List['AttitudeDeterminationKey']: ...

class AttitudeDeterminationSensor(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getNbSensorNoiseCovariance(self) -> int: ...
    def getSensorFrequency(self) -> float: ...
    def getSensorNoiseCovariance(self) -> typing.List[float]: ...
    def getSensorNumber(self) -> int: ...
    def getSensorUsed(self) -> str: ...
    def setNbSensorNoiseCovariance(self, int: int) -> None: ...
    def setSensorFrequency(self, double: float) -> None: ...
    def setSensorNoiseCovariance(self, doubleArray: typing.List[float]) -> None: ...
    def setSensorNumber(self, int: int) -> None: ...
    def setSensorUsed(self, string: str) -> None: ...
    def validate(self, double: float) -> None: ...

class AttitudeDeterminationSensorKey(java.lang.Enum['AttitudeDeterminationSensorKey']):
    SENSOR_NUMBER: typing.ClassVar['AttitudeDeterminationSensorKey'] = ...
    SENSOR_USED: typing.ClassVar['AttitudeDeterminationSensorKey'] = ...
    NUMBER_SENSOR_NOISE_COVARIANCE: typing.ClassVar['AttitudeDeterminationSensorKey'] = ...
    SENSOR_NOISE_STDDEV: typing.ClassVar['AttitudeDeterminationSensorKey'] = ...
    SENSOR_FREQUENCY: typing.ClassVar['AttitudeDeterminationSensorKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudeDeterminationSensor: AttitudeDeterminationSensor) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeDeterminationSensorKey': ...
    @staticmethod
    def values() -> typing.List['AttitudeDeterminationSensorKey']: ...

class AttitudeElementsType(java.lang.Enum['AttitudeElementsType']):
    QUATERNION: typing.ClassVar['AttitudeElementsType'] = ...
    EULER_ANGLES: typing.ClassVar['AttitudeElementsType'] = ...
    DCM: typing.ClassVar['AttitudeElementsType'] = ...
    def getUnits(self) -> java.util.List[org.orekit.utils.units.Unit]: ...
    def toRotation(self, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder, doubleArray: typing.List[float]) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeElementsType': ...
    @staticmethod
    def values() -> typing.List['AttitudeElementsType']: ...

class AttitudeManeuver(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getActuatorUsed(self) -> str: ...
    def getBeginTime(self) -> float: ...
    def getDuration(self) -> float: ...
    def getEndTime(self) -> float: ...
    def getID(self) -> str: ...
    def getManPurpose(self) -> str: ...
    def getPrevID(self) -> str: ...
    def getTargetAttitude(self) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    def getTargetMomFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getTargetMomentum(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getTargetSpinRate(self) -> float: ...
    def setActuatorUsed(self, string: str) -> None: ...
    def setBeginTime(self, double: float) -> None: ...
    def setDuration(self, double: float) -> None: ...
    def setEndTime(self, double: float) -> None: ...
    def setID(self, string: str) -> None: ...
    def setManPurpose(self, string: str) -> None: ...
    def setPrevID(self, string: str) -> None: ...
    def setTargetAttitude(self, rotation: org.hipparchus.geometry.euclidean.threed.Rotation) -> None: ...
    def setTargetMomFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setTargetMomentum(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setTargetSpinRate(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class AttitudeManeuverKey(java.lang.Enum['AttitudeManeuverKey']):
    COMMENT: typing.ClassVar['AttitudeManeuverKey'] = ...
    MAN_ID: typing.ClassVar['AttitudeManeuverKey'] = ...
    MAN_PREV_ID: typing.ClassVar['AttitudeManeuverKey'] = ...
    MAN_PURPOSE: typing.ClassVar['AttitudeManeuverKey'] = ...
    MAN_BEGIN_TIME: typing.ClassVar['AttitudeManeuverKey'] = ...
    MAN_END_TIME: typing.ClassVar['AttitudeManeuverKey'] = ...
    MAN_DURATION: typing.ClassVar['AttitudeManeuverKey'] = ...
    ACTUATOR_USED: typing.ClassVar['AttitudeManeuverKey'] = ...
    TARGET_MOMENTUM: typing.ClassVar['AttitudeManeuverKey'] = ...
    TARGET_MOM_FRAME: typing.ClassVar['AttitudeManeuverKey'] = ...
    TARGET_ATTITUDE: typing.ClassVar['AttitudeManeuverKey'] = ...
    TARGET_SPINRATE: typing.ClassVar['AttitudeManeuverKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudeManeuver: AttitudeManeuver) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeManeuverKey': ...
    @staticmethod
    def values() -> typing.List['AttitudeManeuverKey']: ...

class AttitudePhysicalProperties(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def getCenterOfPressure(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getCenterOfPressureReferenceFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getDragCoefficient(self) -> float: ...
    def getDryMass(self) -> float: ...
    def getInertiaMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getInertiaReferenceFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getWetMass(self) -> float: ...
    def setCenterOfPressure(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setCenterOfPressureReferenceFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setDragCoefficient(self, double: float) -> None: ...
    def setDryMass(self, double: float) -> None: ...
    def setInertiaMatrixEntry(self, int: int, int2: int, double: float) -> None: ...
    def setInertiaReferenceFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setWetMass(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class AttitudePhysicalPropertiesKey(java.lang.Enum['AttitudePhysicalPropertiesKey']):
    COMMENT: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    DRAG_COEFF: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    WET_MASS: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    DRY_MASS: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    CP_REF_FRAME: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    CP: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    INERTIA_REF_FRAME: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    IXX: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    IYY: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    IZZ: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    IXY: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    IXZ: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    IYZ: typing.ClassVar['AttitudePhysicalPropertiesKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudePhysicalProperties: AttitudePhysicalProperties) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudePhysicalPropertiesKey': ...
    @staticmethod
    def values() -> typing.List['AttitudePhysicalPropertiesKey']: ...

class AttitudeState(org.orekit.time.TimeStamped):
    def __init__(self, attitudeElementsType: AttitudeElementsType, rateElementsType: 'RateElementsType', absoluteDate: org.orekit.time.AbsoluteDate, stringArray: typing.List[str], int: int): ...
    def getAttitudeType(self) -> AttitudeElementsType: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.AngularDerivativesFilter: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getElements(self) -> typing.List[float]: ...
    def getRateElementsType(self) -> 'RateElementsType': ...
    def toAngular(self, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder) -> org.orekit.utils.TimeStampedAngularCoordinates: ...

class AttitudeStateHistory(org.orekit.files.general.AttitudeEphemerisFile.AttitudeEphemerisSegment[org.orekit.utils.TimeStampedAngularCoordinates]):
    def __init__(self, attitudeStateHistoryMetadata: 'AttitudeStateHistoryMetadata', list: java.util.List[AttitudeState]): ...
    def getAngularCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedAngularCoordinates]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
    def getAttitudeStates(self) -> java.util.List[AttitudeState]: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.AngularDerivativesFilter: ...
    def getInterpolationMethod(self) -> str: ...
    def getInterpolationSamples(self) -> int: ...
    def getMetadata(self) -> 'AttitudeStateHistoryMetadata': ...
    def getReferenceFrame(self) -> org.orekit.frames.Frame: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class AttitudeStateHistoryMetadata(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getAttBasis(self) -> str: ...
    def getAttBasisID(self) -> str: ...
    def getAttID(self) -> str: ...
    def getAttPrevID(self) -> str: ...
    def getAttitudeType(self) -> AttitudeElementsType: ...
    def getEndpoints(self) -> org.orekit.files.ccsds.ndm.adm.AttitudeEndpoints: ...
    def getEulerRotSeq(self) -> org.hipparchus.geometry.euclidean.threed.RotationOrder: ...
    def getNbStates(self) -> int: ...
    def getRateType(self) -> 'RateElementsType': ...
    def setAttBasis(self, string: str) -> None: ...
    def setAttBasisID(self, string: str) -> None: ...
    def setAttID(self, string: str) -> None: ...
    def setAttPrevID(self, string: str) -> None: ...
    def setAttitudeType(self, attitudeElementsType: AttitudeElementsType) -> None: ...
    def setEulerRotSeq(self, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder) -> None: ...
    def setNbStates(self, int: int) -> None: ...
    def setRateType(self, rateElementsType: 'RateElementsType') -> None: ...
    def validate(self, double: float) -> None: ...

class AttitudeStateHistoryMetadataKey(java.lang.Enum['AttitudeStateHistoryMetadataKey']):
    COMMENT: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    ATT_ID: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    ATT_PREV_ID: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    ATT_BASIS: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    ATT_BASIS_ID: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    REF_FRAME_A: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    REF_FRAME_B: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    EULER_ROT_SEQ: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    NUMBER_STATES: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    ATT_TYPE: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    RATE_TYPE: typing.ClassVar['AttitudeStateHistoryMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudeStateHistoryMetadata: AttitudeStateHistoryMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeStateHistoryMetadataKey': ...
    @staticmethod
    def values() -> typing.List['AttitudeStateHistoryMetadataKey']: ...

class RateElementsType(java.lang.Enum['RateElementsType']):
    ANGVEL: typing.ClassVar['RateElementsType'] = ...
    Q_DOT: typing.ClassVar['RateElementsType'] = ...
    EULER_RATE: typing.ClassVar['RateElementsType'] = ...
    GYRO_BIAS: typing.ClassVar['RateElementsType'] = ...
    NONE: typing.ClassVar['RateElementsType'] = ...
    def getUnits(self) -> java.util.List[org.orekit.utils.units.Unit]: ...
    def toAngular(self, absoluteDate: org.orekit.time.AbsoluteDate, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder, rotation2: org.hipparchus.geometry.euclidean.threed.Rotation, int: int, doubleArray: typing.List[float]) -> org.orekit.utils.TimeStampedAngularCoordinates: ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RateElementsType': ...
    @staticmethod
    def values() -> typing.List['RateElementsType']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.adm.acm")``.

    Acm: typing.Type[Acm]
    AcmData: typing.Type[AcmData]
    AcmDataSubStructureKey: typing.Type[AcmDataSubStructureKey]
    AcmElements: typing.Type[AcmElements]
    AcmMetadata: typing.Type[AcmMetadata]
    AcmMetadataKey: typing.Type[AcmMetadataKey]
    AcmParser: typing.Type[AcmParser]
    AcmSatelliteEphemeris: typing.Type[AcmSatelliteEphemeris]
    AcmWriter: typing.Type[AcmWriter]
    AttitudeCovariance: typing.Type[AttitudeCovariance]
    AttitudeCovarianceHistory: typing.Type[AttitudeCovarianceHistory]
    AttitudeCovarianceHistoryMetadata: typing.Type[AttitudeCovarianceHistoryMetadata]
    AttitudeCovarianceHistoryMetadataKey: typing.Type[AttitudeCovarianceHistoryMetadataKey]
    AttitudeCovarianceType: typing.Type[AttitudeCovarianceType]
    AttitudeDetermination: typing.Type[AttitudeDetermination]
    AttitudeDeterminationKey: typing.Type[AttitudeDeterminationKey]
    AttitudeDeterminationSensor: typing.Type[AttitudeDeterminationSensor]
    AttitudeDeterminationSensorKey: typing.Type[AttitudeDeterminationSensorKey]
    AttitudeElementsType: typing.Type[AttitudeElementsType]
    AttitudeManeuver: typing.Type[AttitudeManeuver]
    AttitudeManeuverKey: typing.Type[AttitudeManeuverKey]
    AttitudePhysicalProperties: typing.Type[AttitudePhysicalProperties]
    AttitudePhysicalPropertiesKey: typing.Type[AttitudePhysicalPropertiesKey]
    AttitudeState: typing.Type[AttitudeState]
    AttitudeStateHistory: typing.Type[AttitudeStateHistory]
    AttitudeStateHistoryMetadata: typing.Type[AttitudeStateHistoryMetadata]
    AttitudeStateHistoryMetadataKey: typing.Type[AttitudeStateHistoryMetadataKey]
    RateElementsType: typing.Type[RateElementsType]
