import java.lang
import java.util
import java.util.function
import org.hipparchus.complex
import org.orekit.data
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm.adm
import org.orekit.files.ccsds.ndm.adm.acm
import org.orekit.files.ccsds.ndm.adm.aem
import org.orekit.files.ccsds.ndm.adm.apm
import org.orekit.files.ccsds.ndm.cdm
import org.orekit.files.ccsds.ndm.odm
import org.orekit.files.ccsds.ndm.odm.ocm
import org.orekit.files.ccsds.ndm.odm.oem
import org.orekit.files.ccsds.ndm.odm.omm
import org.orekit.files.ccsds.ndm.odm.opm
import org.orekit.files.ccsds.ndm.tdm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.ccsds.utils.parsing
import org.orekit.time
import org.orekit.utils
import org.orekit.utils.units
import typing



_AbstractBuilder__T = typing.TypeVar('_AbstractBuilder__T', bound='AbstractBuilder')  # <T>
class AbstractBuilder(typing.Generic[_AbstractBuilder__T]):
    def getConventions(self) -> org.orekit.utils.IERSConventions: ...
    def getDataContext(self) -> org.orekit.data.DataContext: ...
    def getEquatorialRadius(self) -> float: ...
    def getFlattening(self) -> float: ...
    def getMissionReferenceDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getRangeUnitsConverter(self) -> org.orekit.files.ccsds.ndm.tdm.RangeUnitsConverter: ...
    def withConventions(self, iERSConventions: org.orekit.utils.IERSConventions) -> _AbstractBuilder__T: ...
    def withDataContext(self, dataContext: org.orekit.data.DataContext) -> _AbstractBuilder__T: ...
    def withEquatorialRadius(self, double: float) -> _AbstractBuilder__T: ...
    def withFlattening(self, double: float) -> _AbstractBuilder__T: ...
    def withMissionReferenceDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> _AbstractBuilder__T: ...
    def withRangeUnitsConverter(self, rangeUnitsConverter: org.orekit.files.ccsds.ndm.tdm.RangeUnitsConverter) -> _AbstractBuilder__T: ...

class CommonPhysicalProperties(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def getMaxRcs(self) -> float: ...
    def getMinRcs(self) -> float: ...
    def getOebAreaAlongIntermediate(self) -> float: ...
    def getOebAreaAlongMax(self) -> float: ...
    def getOebAreaAlongMin(self) -> float: ...
    def getOebIntermediate(self) -> float: ...
    def getOebMax(self) -> float: ...
    def getOebMin(self) -> float: ...
    def getOebParentFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getOebParentFrameEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getOebQ(self) -> org.hipparchus.complex.Quaternion: ...
    def getRcs(self) -> float: ...
    def getReflectance(self) -> float: ...
    def getVmAbsolute(self) -> float: ...
    def getVmApparent(self) -> float: ...
    def getVmApparentMax(self) -> float: ...
    def getVmApparentMin(self) -> float: ...
    def setMaxRcs(self, double: float) -> None: ...
    def setMinRcs(self, double: float) -> None: ...
    def setOebAreaAlongIntermediate(self, double: float) -> None: ...
    def setOebAreaAlongMax(self, double: float) -> None: ...
    def setOebAreaAlongMin(self, double: float) -> None: ...
    def setOebIntermediate(self, double: float) -> None: ...
    def setOebMax(self, double: float) -> None: ...
    def setOebMin(self, double: float) -> None: ...
    def setOebParentFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setOebParentFrameEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setOebQ(self, int: int, double: float) -> None: ...
    def setRcs(self, double: float) -> None: ...
    def setReflectance(self, double: float) -> None: ...
    def setVmAbsolute(self, double: float) -> None: ...
    def setVmApparent(self, double: float) -> None: ...
    def setVmApparentMax(self, double: float) -> None: ...
    def setVmApparentMin(self, double: float) -> None: ...
    def validate(self, double: float) -> None: ...

class Ndm:
    def __init__(self, list: java.util.List[str], list2: java.util.List['NdmConstituent'[typing.Any, typing.Any]]): ...
    def getComments(self) -> java.util.List[str]: ...
    def getConstituents(self) -> java.util.List['NdmConstituent'[typing.Any, typing.Any]]: ...

_NdmConstituent__H = typing.TypeVar('_NdmConstituent__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
_NdmConstituent__S = typing.TypeVar('_NdmConstituent__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
class NdmConstituent(typing.Generic[_NdmConstituent__H, _NdmConstituent__S]):
    def getConventions(self) -> org.orekit.utils.IERSConventions: ...
    def getDataContext(self) -> org.orekit.data.DataContext: ...
    def getHeader(self) -> _NdmConstituent__H: ...
    def getSegments(self) -> java.util.List[_NdmConstituent__S]: ...
    def setHeader(self, h: _NdmConstituent__H) -> None: ...
    def setSegments(self, list: java.util.List[_NdmConstituent__S]) -> None: ...
    def validate(self) -> None: ...

class NdmParser(org.orekit.files.ccsds.utils.parsing.AbstractMessageParser[Ndm]):
    def __init__(self, parserBuilder: 'ParserBuilder', functionArray: typing.List[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]): ...
    def addComment(self, string: str) -> bool: ...
    def build(self) -> Ndm: ...
    def getSpecialXmlElementsBuilders(self) -> java.util.Map[str, org.orekit.files.ccsds.utils.lexical.XmlTokenBuilder]: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class NdmWriter:
    def __init__(self, writerBuilder: 'WriterBuilder'): ...
    def writeComment(self, generator: org.orekit.files.ccsds.utils.generation.Generator, string: str) -> None: ...
    _writeConstituent__H = typing.TypeVar('_writeConstituent__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
    _writeConstituent__S = typing.TypeVar('_writeConstituent__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
    _writeConstituent__F = typing.TypeVar('_writeConstituent__F', bound=NdmConstituent)  # <F>
    def writeConstituent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, f: _writeConstituent__F) -> None: ...
    def writeMessage(self, generator: org.orekit.files.ccsds.utils.generation.Generator, ndm: Ndm) -> None: ...

class ParsedUnitsBehavior(java.lang.Enum['ParsedUnitsBehavior']):
    IGNORE_PARSED: typing.ClassVar['ParsedUnitsBehavior'] = ...
    CONVERT_COMPATIBLE: typing.ClassVar['ParsedUnitsBehavior'] = ...
    STRICT_COMPLIANCE: typing.ClassVar['ParsedUnitsBehavior'] = ...
    def select(self, unit: org.orekit.utils.units.Unit, unit2: org.orekit.utils.units.Unit) -> org.orekit.utils.units.Unit: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ParsedUnitsBehavior': ...
    @staticmethod
    def values() -> typing.List['ParsedUnitsBehavior']: ...

class ParserBuilder(AbstractBuilder['ParserBuilder']):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dataContext: org.orekit.data.DataContext): ...
    def buildAcmParser(self) -> org.orekit.files.ccsds.ndm.adm.acm.AcmParser: ...
    def buildAemParser(self) -> org.orekit.files.ccsds.ndm.adm.aem.AemParser: ...
    def buildApmParser(self) -> org.orekit.files.ccsds.ndm.adm.apm.ApmParser: ...
    def buildCdmParser(self) -> org.orekit.files.ccsds.ndm.cdm.CdmParser: ...
    def buildNdmParser(self) -> NdmParser: ...
    def buildOcmParser(self) -> org.orekit.files.ccsds.ndm.odm.ocm.OcmParser: ...
    def buildOemParser(self) -> org.orekit.files.ccsds.ndm.odm.oem.OemParser: ...
    def buildOmmParser(self) -> org.orekit.files.ccsds.ndm.odm.omm.OmmParser: ...
    def buildOpmParser(self) -> org.orekit.files.ccsds.ndm.odm.opm.OpmParser: ...
    def buildTdmParser(self) -> org.orekit.files.ccsds.ndm.tdm.TdmParser: ...
    def getDefaultInterpolationDegree(self) -> int: ...
    def getDefaultMass(self) -> float: ...
    def getFilters(self) -> typing.List[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]: ...
    def getMu(self) -> float: ...
    def getParsedUnitsBehavior(self) -> ParsedUnitsBehavior: ...
    def isSimpleEOP(self) -> bool: ...
    def withDefaultInterpolationDegree(self, int: int) -> 'ParserBuilder': ...
    def withDefaultMass(self, double: float) -> 'ParserBuilder': ...
    def withFilter(self, function: typing.Union[java.util.function.Function[org.orekit.files.ccsds.utils.lexical.ParseToken, java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]], typing.Callable[[org.orekit.files.ccsds.utils.lexical.ParseToken], java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]]]) -> 'ParserBuilder': ...
    def withMu(self, double: float) -> 'ParserBuilder': ...
    def withParsedUnitsBehavior(self, parsedUnitsBehavior: ParsedUnitsBehavior) -> 'ParserBuilder': ...
    def withSimpleEOP(self, boolean: bool) -> 'ParserBuilder': ...

_PythonAbstractBuilder__T = typing.TypeVar('_PythonAbstractBuilder__T', bound=AbstractBuilder)  # <T>
class PythonAbstractBuilder(AbstractBuilder[_PythonAbstractBuilder__T], typing.Generic[_PythonAbstractBuilder__T]):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, double: float, double2: float, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate, rangeUnitsConverter: org.orekit.files.ccsds.ndm.tdm.RangeUnitsConverter): ...
    def create(self, iERSConventions: org.orekit.utils.IERSConventions, double: float, double2: float, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate, rangeUnitsConverter: org.orekit.files.ccsds.ndm.tdm.RangeUnitsConverter) -> _PythonAbstractBuilder__T: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonNdmConstituent__H = typing.TypeVar('_PythonNdmConstituent__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
_PythonNdmConstituent__S = typing.TypeVar('_PythonNdmConstituent__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
class PythonNdmConstituent(NdmConstituent[_PythonNdmConstituent__H, _PythonNdmConstituent__S], typing.Generic[_PythonNdmConstituent__H, _PythonNdmConstituent__S]):
    def __init__(self, h: _PythonNdmConstituent__H, list: java.util.List[_PythonNdmConstituent__S], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...
    def finalize(self) -> None: ...
    def getConventions(self) -> org.orekit.utils.IERSConventions: ...
    def getDataContext(self) -> org.orekit.data.DataContext: ...
    def getHeader(self) -> _PythonNdmConstituent__H: ...
    def getSegments(self) -> java.util.List[_PythonNdmConstituent__S]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def validate(self) -> None: ...

class WriterBuilder(AbstractBuilder['WriterBuilder']):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dataContext: org.orekit.data.DataContext): ...
    def buildAcmWriter(self) -> org.orekit.files.ccsds.ndm.adm.acm.AcmWriter: ...
    def buildAemWriter(self) -> org.orekit.files.ccsds.ndm.adm.aem.AemWriter: ...
    def buildApmWriter(self) -> org.orekit.files.ccsds.ndm.adm.apm.ApmWriter: ...
    def buildCdmWriter(self) -> org.orekit.files.ccsds.ndm.cdm.CdmWriter: ...
    def buildNdmWriter(self) -> NdmWriter: ...
    def buildOcmWriter(self) -> org.orekit.files.ccsds.ndm.odm.ocm.OcmWriter: ...
    def buildOemWriter(self) -> org.orekit.files.ccsds.ndm.odm.oem.OemWriter: ...
    def buildOmmWriter(self) -> org.orekit.files.ccsds.ndm.odm.omm.OmmWriter: ...
    def buildOpmWriter(self) -> org.orekit.files.ccsds.ndm.odm.opm.OpmWriter: ...
    def buildTdmWriter(self) -> org.orekit.files.ccsds.ndm.tdm.TdmWriter: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm")``.

    AbstractBuilder: typing.Type[AbstractBuilder]
    CommonPhysicalProperties: typing.Type[CommonPhysicalProperties]
    Ndm: typing.Type[Ndm]
    NdmConstituent: typing.Type[NdmConstituent]
    NdmParser: typing.Type[NdmParser]
    NdmWriter: typing.Type[NdmWriter]
    ParsedUnitsBehavior: typing.Type[ParsedUnitsBehavior]
    ParserBuilder: typing.Type[ParserBuilder]
    PythonAbstractBuilder: typing.Type[PythonAbstractBuilder]
    PythonNdmConstituent: typing.Type[PythonNdmConstituent]
    WriterBuilder: typing.Type[WriterBuilder]
    adm: org.orekit.files.ccsds.ndm.adm.__module_protocol__
    cdm: org.orekit.files.ccsds.ndm.cdm.__module_protocol__
    odm: org.orekit.files.ccsds.ndm.odm.__module_protocol__
    tdm: org.orekit.files.ccsds.ndm.tdm.__module_protocol__
