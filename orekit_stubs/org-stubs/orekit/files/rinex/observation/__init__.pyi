import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.geometry.euclidean.twod
import org.orekit.data
import org.orekit.files.rinex
import org.orekit.files.rinex.section
import org.orekit.gnss
import org.orekit.time
import typing



class GlonassSatelliteChannel:
    def __init__(self, satInSystem: org.orekit.gnss.SatInSystem, int: int): ...
    def getK(self) -> int: ...
    def getSatellite(self) -> org.orekit.gnss.SatInSystem: ...

class ObservationData:
    def __init__(self, observationType: org.orekit.gnss.ObservationType, double: float, int: int, int2: int): ...
    def getLossOfLockIndicator(self) -> int: ...
    def getObservationType(self) -> org.orekit.gnss.ObservationType: ...
    def getSignalStrength(self) -> int: ...
    def getValue(self) -> float: ...

class ObservationDataSet(org.orekit.time.TimeStamped):
    def __init__(self, satInSystem: org.orekit.gnss.SatInSystem, absoluteDate: org.orekit.time.AbsoluteDate, int: int, double: float, list: java.util.List[ObservationData]): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getEventFlag(self) -> int: ...
    def getObservationData(self) -> java.util.List[ObservationData]: ...
    def getRcvrClkOffset(self) -> float: ...
    def getSatellite(self) -> org.orekit.gnss.SatInSystem: ...

class PhaseShiftCorrection:
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, observationType: org.orekit.gnss.ObservationType, double: float, list: java.util.List[org.orekit.gnss.SatInSystem]): ...
    def getCorrection(self) -> float: ...
    def getSatelliteSystem(self) -> org.orekit.gnss.SatelliteSystem: ...
    def getSatsCorrected(self) -> java.util.List[org.orekit.gnss.SatInSystem]: ...
    def getTypeObs(self) -> org.orekit.gnss.ObservationType: ...

class RinexObservation(org.orekit.files.rinex.RinexFile['RinexObservationHeader']):
    def __init__(self): ...
    def addObservationDataSet(self, observationDataSet: ObservationDataSet) -> None: ...
    def extractClockModel(self, int: int) -> org.orekit.time.SampledClockModel: ...
    def getObservationDataSets(self) -> java.util.List[ObservationDataSet]: ...

class RinexObservationHeader(org.orekit.files.rinex.section.RinexBaseHeader):
    def __init__(self): ...
    def addAppliedDCBS(self, appliedDCBS: org.orekit.files.rinex.AppliedDCBS) -> None: ...
    def addAppliedPCVS(self, appliedPCVS: org.orekit.files.rinex.AppliedPCVS) -> None: ...
    def addGlonassChannel(self, glonassSatelliteChannel: GlonassSatelliteChannel) -> None: ...
    def addPhaseShiftCorrection(self, phaseShiftCorrection: PhaseShiftCorrection) -> None: ...
    def addScaleFactorCorrection(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, scaleFactorCorrection: 'ScaleFactorCorrection') -> None: ...
    def getAgencyName(self) -> str: ...
    def getAntennaAzimuth(self) -> float: ...
    def getAntennaBSight(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAntennaHeight(self) -> float: ...
    def getAntennaNumber(self) -> str: ...
    def getAntennaPhaseCenter(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAntennaReferencePoint(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAntennaType(self) -> str: ...
    def getAntennaZeroDirection(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getApproxPos(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getC1cCodePhaseBias(self) -> float: ...
    def getC1pCodePhaseBias(self) -> float: ...
    def getC2cCodePhaseBias(self) -> float: ...
    def getC2pCodePhaseBias(self) -> float: ...
    def getCenterMass(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getClkOffset(self) -> int: ...
    def getClockOffsetApplied(self) -> bool: ...
    def getEccentricities(self) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    def getGlonassChannels(self) -> java.util.List[GlonassSatelliteChannel]: ...
    def getInterval(self) -> float: ...
    def getLeapSeconds(self) -> int: ...
    def getLeapSecondsDayNum(self) -> int: ...
    def getLeapSecondsFuture(self) -> int: ...
    def getLeapSecondsWeekNum(self) -> int: ...
    def getListAppliedDCBS(self) -> java.util.List[org.orekit.files.rinex.AppliedDCBS]: ...
    def getListAppliedPCVS(self) -> java.util.List[org.orekit.files.rinex.AppliedPCVS]: ...
    def getMarkerName(self) -> str: ...
    def getMarkerNumber(self) -> str: ...
    def getMarkerType(self) -> str: ...
    def getNbObsPerSat(self) -> java.util.Map[org.orekit.gnss.SatInSystem, java.util.Map[org.orekit.gnss.ObservationType, int]]: ...
    def getNbSat(self) -> int: ...
    def getObservationCode(self) -> str: ...
    def getObserverName(self) -> str: ...
    def getPhaseCenterSystem(self) -> org.orekit.gnss.SatelliteSystem: ...
    def getPhaseShiftCorrections(self) -> java.util.List[PhaseShiftCorrection]: ...
    def getReceiverNumber(self) -> str: ...
    def getReceiverType(self) -> str: ...
    def getReceiverVersion(self) -> str: ...
    def getScaleFactorCorrections(self, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> java.util.List['ScaleFactorCorrection']: ...
    def getSignalStrengthUnit(self) -> str: ...
    def getTFirstObs(self) -> org.orekit.time.AbsoluteDate: ...
    def getTLastObs(self) -> org.orekit.time.AbsoluteDate: ...
    def getTypeObs(self) -> java.util.Map[org.orekit.gnss.SatelliteSystem, java.util.List[org.orekit.gnss.ObservationType]]: ...
    def setAgencyName(self, string: str) -> None: ...
    def setAntennaAzimuth(self, double: float) -> None: ...
    def setAntennaBSight(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setAntennaHeight(self, double: float) -> None: ...
    def setAntennaNumber(self, string: str) -> None: ...
    def setAntennaPhaseCenter(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setAntennaReferencePoint(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setAntennaType(self, string: str) -> None: ...
    def setAntennaZeroDirection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setApproxPos(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setC1cCodePhaseBias(self, double: float) -> None: ...
    def setC1pCodePhaseBias(self, double: float) -> None: ...
    def setC2cCodePhaseBias(self, double: float) -> None: ...
    def setC2pCodePhaseBias(self, double: float) -> None: ...
    def setCenterMass(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setClkOffset(self, int: int) -> None: ...
    def setClockOffsetApplied(self, boolean: bool) -> None: ...
    def setEccentricities(self, vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D) -> None: ...
    def setInterval(self, double: float) -> None: ...
    def setLeapSeconds(self, int: int) -> None: ...
    def setLeapSecondsDayNum(self, int: int) -> None: ...
    def setLeapSecondsFuture(self, int: int) -> None: ...
    def setLeapSecondsWeekNum(self, int: int) -> None: ...
    def setMarkerName(self, string: str) -> None: ...
    def setMarkerNumber(self, string: str) -> None: ...
    def setMarkerType(self, string: str) -> None: ...
    def setNbObsPerSatellite(self, satInSystem: org.orekit.gnss.SatInSystem, observationType: org.orekit.gnss.ObservationType, int: int) -> None: ...
    def setNbSat(self, int: int) -> None: ...
    def setObservationCode(self, string: str) -> None: ...
    def setObserverName(self, string: str) -> None: ...
    def setPhaseCenterSystem(self, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> None: ...
    def setReceiverNumber(self, string: str) -> None: ...
    def setReceiverType(self, string: str) -> None: ...
    def setReceiverVersion(self, string: str) -> None: ...
    def setSignalStrengthUnit(self, string: str) -> None: ...
    def setTFirstObs(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTLastObs(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTypeObs(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, list: java.util.List[org.orekit.gnss.ObservationType]) -> None: ...

class RinexObservationParser:
    DEFAULT_RINEX_2_NAMES: typing.ClassVar[str] = ...
    DEFAULT_RINEX_3_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeScales: org.orekit.time.TimeScales): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> RinexObservation: ...

class RinexObservationWriter(java.lang.AutoCloseable):
    def __init__(self, appendable: java.lang.Appendable, string: str): ...
    def close(self) -> None: ...
    def prepareComments(self, list: java.util.List[org.orekit.files.rinex.section.RinexComment]) -> None: ...
    def setReceiverClockModel(self, clockModel: org.orekit.time.ClockModel) -> None: ...
    def writeCompleteFile(self, rinexObservation: RinexObservation) -> None: ...
    def writeHeader(self, rinexObservationHeader: RinexObservationHeader) -> None: ...
    def writeObservationDataSet(self, observationDataSet: ObservationDataSet) -> None: ...
    def writePendingRinex2Observations(self) -> None: ...
    def writePendingRinex34Observations(self) -> None: ...

class ScaleFactorCorrection:
    def __init__(self, double: float, list: java.util.List[org.orekit.gnss.ObservationType]): ...
    def getCorrection(self) -> float: ...
    def getTypesObsScaled(self) -> java.util.List[org.orekit.gnss.ObservationType]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.rinex.observation")``.

    GlonassSatelliteChannel: typing.Type[GlonassSatelliteChannel]
    ObservationData: typing.Type[ObservationData]
    ObservationDataSet: typing.Type[ObservationDataSet]
    PhaseShiftCorrection: typing.Type[PhaseShiftCorrection]
    RinexObservation: typing.Type[RinexObservation]
    RinexObservationHeader: typing.Type[RinexObservationHeader]
    RinexObservationParser: typing.Type[RinexObservationParser]
    RinexObservationWriter: typing.Type[RinexObservationWriter]
    ScaleFactorCorrection: typing.Type[ScaleFactorCorrection]
