import java.lang
import org.orekit.files.rinex.utils
import org.orekit.gnss
import org.orekit.time
import typing



class RinexBaseHeader:
    def getCreationDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCreationDateComponents(self) -> org.orekit.time.DateTimeComponents: ...
    def getCreationTimeZone(self) -> str: ...
    def getDoi(self) -> str: ...
    def getFileType(self) -> org.orekit.files.rinex.utils.RinexFileType: ...
    def getFormatVersion(self) -> float: ...
    def getLicense(self) -> str: ...
    def getProgramName(self) -> str: ...
    def getRunByName(self) -> str: ...
    def getSatelliteSystem(self) -> org.orekit.gnss.SatelliteSystem: ...
    def getStationInformation(self) -> str: ...
    def setCreationDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setCreationDateComponents(self, dateTimeComponents: org.orekit.time.DateTimeComponents) -> None: ...
    def setCreationTimeZone(self, string: str) -> None: ...
    def setDoi(self, string: str) -> None: ...
    def setFormatVersion(self, double: float) -> None: ...
    def setLicense(self, string: str) -> None: ...
    def setProgramName(self, string: str) -> None: ...
    def setRunByName(self, string: str) -> None: ...
    def setSatelliteSystem(self, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> None: ...
    def setStationInformation(self, string: str) -> None: ...

class RinexComment:
    def __init__(self, int: int, string: str): ...
    def getLineNumber(self) -> int: ...
    def getText(self) -> str: ...

class RinexLabels(java.lang.Enum['RinexLabels']):
    VERSION: typing.ClassVar['RinexLabels'] = ...
    PROGRAM: typing.ClassVar['RinexLabels'] = ...
    COMMENT: typing.ClassVar['RinexLabels'] = ...
    MARKER_NAME: typing.ClassVar['RinexLabels'] = ...
    MARKER_NUMBER: typing.ClassVar['RinexLabels'] = ...
    MARKER_TYPE: typing.ClassVar['RinexLabels'] = ...
    OBSERVER_AGENCY: typing.ClassVar['RinexLabels'] = ...
    REC_NB_TYPE_VERS: typing.ClassVar['RinexLabels'] = ...
    ANT_NB_TYPE: typing.ClassVar['RinexLabels'] = ...
    APPROX_POSITION_XYZ: typing.ClassVar['RinexLabels'] = ...
    ANTENNA_DELTA_H_E_N: typing.ClassVar['RinexLabels'] = ...
    ANTENNA_DELTA_X_Y_Z: typing.ClassVar['RinexLabels'] = ...
    ANTENNA_PHASE_CENTER: typing.ClassVar['RinexLabels'] = ...
    ANTENNA_B_SIGHT_XYZ: typing.ClassVar['RinexLabels'] = ...
    ANTENNA_ZERODIR_AZI: typing.ClassVar['RinexLabels'] = ...
    ANTENNA_ZERODIR_XYZ: typing.ClassVar['RinexLabels'] = ...
    WAVELENGTH_FACT_L1_2: typing.ClassVar['RinexLabels'] = ...
    OBS_SCALE_FACTOR: typing.ClassVar['RinexLabels'] = ...
    CENTER_OF_MASS_XYZ: typing.ClassVar['RinexLabels'] = ...
    DOI: typing.ClassVar['RinexLabels'] = ...
    LICENSE: typing.ClassVar['RinexLabels'] = ...
    STATION_INFORMATION: typing.ClassVar['RinexLabels'] = ...
    NB_TYPES_OF_OBSERV: typing.ClassVar['RinexLabels'] = ...
    SYS_NB_TYPES_OF_OBSERV: typing.ClassVar['RinexLabels'] = ...
    SIGNAL_STRENGTH_UNIT: typing.ClassVar['RinexLabels'] = ...
    INTERVAL: typing.ClassVar['RinexLabels'] = ...
    TIME_OF_FIRST_OBS: typing.ClassVar['RinexLabels'] = ...
    TIME_OF_LAST_OBS: typing.ClassVar['RinexLabels'] = ...
    RCV_CLOCK_OFFS_APPL: typing.ClassVar['RinexLabels'] = ...
    SYS_DCBS_APPLIED: typing.ClassVar['RinexLabels'] = ...
    SYS_PCVS_APPLIED: typing.ClassVar['RinexLabels'] = ...
    SYS_SCALE_FACTOR: typing.ClassVar['RinexLabels'] = ...
    SYS_PHASE_SHIFT: typing.ClassVar['RinexLabels'] = ...
    GLONASS_SLOT_FRQ_NB: typing.ClassVar['RinexLabels'] = ...
    GLONASS_COD_PHS_BIS: typing.ClassVar['RinexLabels'] = ...
    LEAP_SECONDS: typing.ClassVar['RinexLabels'] = ...
    NB_OF_SATELLITES: typing.ClassVar['RinexLabels'] = ...
    PRN_NB_OF_OBS: typing.ClassVar['RinexLabels'] = ...
    END: typing.ClassVar['RinexLabels'] = ...
    def getLabel(self) -> str: ...
    def matches(self, string: str) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RinexLabels': ...
    @staticmethod
    def values() -> typing.List['RinexLabels']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.rinex.section")``.

    RinexBaseHeader: typing.Type[RinexBaseHeader]
    RinexComment: typing.Type[RinexComment]
    RinexLabels: typing.Type[RinexLabels]
