import java.lang
import java.util
import org.orekit.data
import org.orekit.files.rinex
import org.orekit.files.rinex.section
import org.orekit.gnss
import org.orekit.propagation.analytical.gnss.data
import org.orekit.time
import org.orekit.utils.units
import typing



class IonosphericCorrectionType(java.lang.Enum['IonosphericCorrectionType']):
    GAL: typing.ClassVar['IonosphericCorrectionType'] = ...
    GPS: typing.ClassVar['IonosphericCorrectionType'] = ...
    QZS: typing.ClassVar['IonosphericCorrectionType'] = ...
    BDS: typing.ClassVar['IonosphericCorrectionType'] = ...
    IRN: typing.ClassVar['IonosphericCorrectionType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'IonosphericCorrectionType': ...
    @staticmethod
    def values() -> typing.List['IonosphericCorrectionType']: ...

class RegionCode(java.lang.Enum['RegionCode']):
    WIDE_AREA: typing.ClassVar['RegionCode'] = ...
    JAPAN: typing.ClassVar['RegionCode'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RegionCode': ...
    @staticmethod
    def values() -> typing.List['RegionCode']: ...

class RinexNavigation(org.orekit.files.rinex.RinexFile['RinexNavigationHeader']):
    def __init__(self): ...
    def addBDGIMMessage(self, ionosphereBDGIMMessage: 'IonosphereBDGIMMessage') -> None: ...
    def addBeidouCivilianNavigationMessage(self, beidouCivilianNavigationMessage: org.orekit.propagation.analytical.gnss.data.BeidouCivilianNavigationMessage) -> None: ...
    def addBeidouLegacyNavigationMessage(self, beidouLegacyNavigationMessage: org.orekit.propagation.analytical.gnss.data.BeidouLegacyNavigationMessage) -> None: ...
    def addEarthOrientationParameter(self, earthOrientationParameterMessage: 'EarthOrientationParameterMessage') -> None: ...
    @typing.overload
    def addGPSLegacyNavigationMessage(self, gPSCivilianNavigationMessage: org.orekit.propagation.analytical.gnss.data.GPSCivilianNavigationMessage) -> None: ...
    @typing.overload
    def addGPSLegacyNavigationMessage(self, gPSLegacyNavigationMessage: org.orekit.propagation.analytical.gnss.data.GPSLegacyNavigationMessage) -> None: ...
    def addGalileoNavigationMessage(self, galileoNavigationMessage: org.orekit.propagation.analytical.gnss.data.GalileoNavigationMessage) -> None: ...
    def addGlonassNavigationMessage(self, gLONASSNavigationMessage: org.orekit.propagation.analytical.gnss.data.GLONASSNavigationMessage) -> None: ...
    def addIRNSSNavigationMessage(self, iRNSSNavigationMessage: org.orekit.propagation.analytical.gnss.data.IRNSSNavigationMessage) -> None: ...
    def addKlobucharMessage(self, ionosphereKlobucharMessage: 'IonosphereKlobucharMessage') -> None: ...
    def addNequickGMessage(self, ionosphereNequickGMessage: 'IonosphereNequickGMessage') -> None: ...
    def addQZSSCivilianNavigationMessage(self, qZSSCivilianNavigationMessage: org.orekit.propagation.analytical.gnss.data.QZSSCivilianNavigationMessage) -> None: ...
    def addQZSSLegacyNavigationMessage(self, qZSSLegacyNavigationMessage: org.orekit.propagation.analytical.gnss.data.QZSSLegacyNavigationMessage) -> None: ...
    def addSBASNavigationMessage(self, sBASNavigationMessage: org.orekit.propagation.analytical.gnss.data.SBASNavigationMessage) -> None: ...
    def addSystemTimeOffset(self, systemTimeOffsetMessage: 'SystemTimeOffsetMessage') -> None: ...
    def getBDGIMMessages(self) -> java.util.List['IonosphereBDGIMMessage']: ...
    @typing.overload
    def getBeidouCivilianNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.BeidouCivilianNavigationMessage]: ...
    @typing.overload
    def getBeidouCivilianNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.BeidouCivilianNavigationMessage]]: ...
    @typing.overload
    def getBeidouLegacyNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.BeidouLegacyNavigationMessage]: ...
    @typing.overload
    def getBeidouLegacyNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.BeidouLegacyNavigationMessage]]: ...
    def getEarthOrientationParameters(self) -> java.util.List['EarthOrientationParameterMessage']: ...
    @typing.overload
    def getGPSCivilianNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.GPSCivilianNavigationMessage]: ...
    @typing.overload
    def getGPSCivilianNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.GPSCivilianNavigationMessage]]: ...
    @typing.overload
    def getGPSLegacyNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.GPSLegacyNavigationMessage]: ...
    @typing.overload
    def getGPSLegacyNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.GPSLegacyNavigationMessage]]: ...
    @typing.overload
    def getGalileoNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.GalileoNavigationMessage]: ...
    @typing.overload
    def getGalileoNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.GalileoNavigationMessage]]: ...
    @typing.overload
    def getGlonassNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.GLONASSNavigationMessage]: ...
    @typing.overload
    def getGlonassNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.GLONASSNavigationMessage]]: ...
    @typing.overload
    def getIRNSSNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.IRNSSNavigationMessage]: ...
    @typing.overload
    def getIRNSSNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.IRNSSNavigationMessage]]: ...
    def getKlobucharAlpha(self) -> typing.List[float]: ...
    def getKlobucharBeta(self) -> typing.List[float]: ...
    def getKlobucharMessages(self) -> java.util.List['IonosphereKlobucharMessage']: ...
    def getNeQuickAlpha(self) -> typing.List[float]: ...
    def getNequickGMessages(self) -> java.util.List['IonosphereNequickGMessage']: ...
    @typing.overload
    def getQZSSCivilianNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.QZSSCivilianNavigationMessage]: ...
    @typing.overload
    def getQZSSCivilianNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.QZSSCivilianNavigationMessage]]: ...
    @typing.overload
    def getQZSSLegacyNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.QZSSLegacyNavigationMessage]: ...
    @typing.overload
    def getQZSSLegacyNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.QZSSLegacyNavigationMessage]]: ...
    @typing.overload
    def getSBASNavigationMessages(self, string: str) -> java.util.List[org.orekit.propagation.analytical.gnss.data.SBASNavigationMessage]: ...
    @typing.overload
    def getSBASNavigationMessages(self) -> java.util.Map[str, java.util.List[org.orekit.propagation.analytical.gnss.data.SBASNavigationMessage]]: ...
    def getSystemTimeOffsets(self) -> java.util.List['SystemTimeOffsetMessage']: ...
    def setKlobucharAlpha(self, doubleArray: typing.List[float]) -> None: ...
    def setKlobucharBeta(self, doubleArray: typing.List[float]) -> None: ...
    def setNeQuickAlpha(self, doubleArray: typing.List[float]) -> None: ...

class RinexNavigationHeader(org.orekit.files.rinex.section.RinexBaseHeader):
    def __init__(self): ...
    def addTimeSystemCorrections(self, timeSystemCorrection: 'TimeSystemCorrection') -> None: ...
    def getIonosphericCorrectionType(self) -> IonosphericCorrectionType: ...
    def getMergedFiles(self) -> int: ...
    def getNumberOfLeapSeconds(self) -> int: ...
    def getTimeSystemCorrections(self) -> java.util.List['TimeSystemCorrection']: ...
    def setIonosphericCorrectionType(self, ionosphericCorrectionType: IonosphericCorrectionType) -> None: ...
    def setMergedFiles(self, int: int) -> None: ...
    def setNumberOfLeapSeconds(self, int: int) -> None: ...

class RinexNavigationParser:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeScales: org.orekit.time.TimeScales): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> RinexNavigation: ...

class SbasId(java.lang.Enum['SbasId']):
    WAAS: typing.ClassVar['SbasId'] = ...
    EGNOS: typing.ClassVar['SbasId'] = ...
    MSAS: typing.ClassVar['SbasId'] = ...
    GAGAN: typing.ClassVar['SbasId'] = ...
    SDCM: typing.ClassVar['SbasId'] = ...
    BDSBAS: typing.ClassVar['SbasId'] = ...
    SACCSA: typing.ClassVar['SbasId'] = ...
    KASS: typing.ClassVar['SbasId'] = ...
    A_SBAS: typing.ClassVar['SbasId'] = ...
    SPAN: typing.ClassVar['SbasId'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SbasId': ...
    @staticmethod
    def values() -> typing.List['SbasId']: ...

class TimeSystemCorrection:
    def __init__(self, string: str, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float): ...
    def getReferenceDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getTimeSystemCorrectionA0(self) -> float: ...
    def getTimeSystemCorrectionA1(self) -> float: ...
    def getTimeSystemCorrectionType(self) -> str: ...

class TypeSvMessage:
    def getNavigationMessageType(self) -> str: ...
    def getPrn(self) -> int: ...
    def getSystem(self) -> org.orekit.gnss.SatelliteSystem: ...

class UtcId(java.lang.Enum['UtcId']):
    USNO: typing.ClassVar['UtcId'] = ...
    SU: typing.ClassVar['UtcId'] = ...
    GAL: typing.ClassVar['UtcId'] = ...
    NTSC: typing.ClassVar['UtcId'] = ...
    NICT: typing.ClassVar['UtcId'] = ...
    IRN: typing.ClassVar['UtcId'] = ...
    OP: typing.ClassVar['UtcId'] = ...
    NIST: typing.ClassVar['UtcId'] = ...
    @staticmethod
    def parseUtcId(string: str) -> 'UtcId': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'UtcId': ...
    @staticmethod
    def values() -> typing.List['UtcId']: ...

class EarthOrientationParameterMessage(TypeSvMessage):
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, string: str): ...
    def getDut1(self) -> float: ...
    def getDut1Dot(self) -> float: ...
    def getDut1DotDot(self) -> float: ...
    def getReferenceEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getTransmissionTime(self) -> float: ...
    def getXp(self) -> float: ...
    def getXpDot(self) -> float: ...
    def getXpDotDot(self) -> float: ...
    def getYp(self) -> float: ...
    def getYpDot(self) -> float: ...
    def getYpDotDot(self) -> float: ...
    def setDut1(self, double: float) -> None: ...
    def setDut1Dot(self, double: float) -> None: ...
    def setDut1DotDot(self, double: float) -> None: ...
    def setReferenceEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTransmissionTime(self, double: float) -> None: ...
    def setXp(self, double: float) -> None: ...
    def setXpDot(self, double: float) -> None: ...
    def setXpDotDot(self, double: float) -> None: ...
    def setYp(self, double: float) -> None: ...
    def setYpDot(self, double: float) -> None: ...
    def setYpDotDot(self, double: float) -> None: ...

class IonosphereBaseMessage(TypeSvMessage):
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, string: str): ...
    def getTransmitTime(self) -> org.orekit.time.AbsoluteDate: ...
    def setTransmitTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class SystemTimeOffsetMessage(TypeSvMessage):
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, string: str): ...
    def getA0(self) -> float: ...
    def getA1(self) -> float: ...
    def getA2(self) -> float: ...
    def getDefinedTimeSystem(self) -> org.orekit.gnss.TimeSystem: ...
    def getReferenceEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getReferenceTimeSystem(self) -> org.orekit.gnss.TimeSystem: ...
    def getSbasId(self) -> SbasId: ...
    def getTransmissionTime(self) -> float: ...
    def getUtcId(self) -> UtcId: ...
    def setA0(self, double: float) -> None: ...
    def setA1(self, double: float) -> None: ...
    def setA2(self, double: float) -> None: ...
    def setDefinedTimeSystem(self, timeSystem: org.orekit.gnss.TimeSystem) -> None: ...
    def setReferenceEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setReferenceTimeSystem(self, timeSystem: org.orekit.gnss.TimeSystem) -> None: ...
    def setSbasId(self, sbasId: SbasId) -> None: ...
    def setTransmissionTime(self, double: float) -> None: ...
    def setUtcId(self, utcId: UtcId) -> None: ...

class IonosphereBDGIMMessage(IonosphereBaseMessage):
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, string: str): ...
    def getAlpha(self) -> typing.List[float]: ...
    def setAlphaI(self, int: int, double: float) -> None: ...

class IonosphereKlobucharMessage(IonosphereBaseMessage):
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, string: str): ...
    def getAlpha(self) -> typing.List[float]: ...
    def getBeta(self) -> typing.List[float]: ...
    def getRegionCode(self) -> RegionCode: ...
    def setAlphaI(self, int: int, double: float) -> None: ...
    def setBetaI(self, int: int, double: float) -> None: ...
    def setRegionCode(self, regionCode: RegionCode) -> None: ...

class IonosphereNequickGMessage(IonosphereBaseMessage):
    SFU: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    SFU_PER_DEG: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    SFU_PER_DEG2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    def __init__(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, string: str): ...
    def getAi0(self) -> float: ...
    def getAi1(self) -> float: ...
    def getAi2(self) -> float: ...
    def getFlags(self) -> int: ...
    def setAi0(self, double: float) -> None: ...
    def setAi1(self, double: float) -> None: ...
    def setAi2(self, double: float) -> None: ...
    def setFlags(self, int: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.rinex.navigation")``.

    EarthOrientationParameterMessage: typing.Type[EarthOrientationParameterMessage]
    IonosphereBDGIMMessage: typing.Type[IonosphereBDGIMMessage]
    IonosphereBaseMessage: typing.Type[IonosphereBaseMessage]
    IonosphereKlobucharMessage: typing.Type[IonosphereKlobucharMessage]
    IonosphereNequickGMessage: typing.Type[IonosphereNequickGMessage]
    IonosphericCorrectionType: typing.Type[IonosphericCorrectionType]
    RegionCode: typing.Type[RegionCode]
    RinexNavigation: typing.Type[RinexNavigation]
    RinexNavigationHeader: typing.Type[RinexNavigationHeader]
    RinexNavigationParser: typing.Type[RinexNavigationParser]
    SbasId: typing.Type[SbasId]
    SystemTimeOffsetMessage: typing.Type[SystemTimeOffsetMessage]
    TimeSystemCorrection: typing.Type[TimeSystemCorrection]
    TypeSvMessage: typing.Type[TypeSvMessage]
    UtcId: typing.Type[UtcId]
