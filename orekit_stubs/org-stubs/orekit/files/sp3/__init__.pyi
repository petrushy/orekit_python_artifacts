import java.lang
import java.util
import java.util.function
import org.hipparchus.geometry.euclidean.threed
import org.orekit.attitudes
import org.orekit.data
import org.orekit.files.general
import org.orekit.frames
import org.orekit.gnss
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import org.orekit.utils.units
import typing



class DataUsed(java.lang.Enum['DataUsed']):
    UNDIFFERENTIATED_CARRIER_PHASE: typing.ClassVar['DataUsed'] = ...
    CHANGE_IN_UNDIFFERENTIATED_CARRIER_PHASE: typing.ClassVar['DataUsed'] = ...
    TWO_RECEIVER_ONE_SATELLITE_CARRIER_PHASE: typing.ClassVar['DataUsed'] = ...
    CHANGE_IN_TWO_RECEIVER_ONE_SATELLITE_CARRIER_PHASE: typing.ClassVar['DataUsed'] = ...
    TWO_RECEIVER_TWO_SATELLITE_CARRIER_PHASE: typing.ClassVar['DataUsed'] = ...
    CHANGE_IN_TWO_RECEIVER_TWO_SATELLITE_CARRIER_PHASE: typing.ClassVar['DataUsed'] = ...
    UNDIFFERENTIATED_CODE_PHASE: typing.ClassVar['DataUsed'] = ...
    CHANGE_IN_UNDIFFERENTIATED_CODE_PHASE: typing.ClassVar['DataUsed'] = ...
    TWO_RECEIVER_ONE_SATELLITE_CODE_PHASE: typing.ClassVar['DataUsed'] = ...
    CHANGE_IN_TWO_RECEIVER_ONE_SATELLITE_CODE_PHASE: typing.ClassVar['DataUsed'] = ...
    TWO_RECEIVER_TWO_SATELLITE_CODE_PHASE: typing.ClassVar['DataUsed'] = ...
    CHANGE_IN_TWO_RECEIVER_TWO_SATELLITE_CODE_PHASE: typing.ClassVar['DataUsed'] = ...
    SATELLITE_LASER_RANGING: typing.ClassVar['DataUsed'] = ...
    MIXED: typing.ClassVar['DataUsed'] = ...
    ORBIT: typing.ClassVar['DataUsed'] = ...
    def getKey(self) -> str: ...
    @staticmethod
    def parse(string: str, string2: str, char: str) -> 'DataUsed': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'DataUsed': ...
    @staticmethod
    def values() -> typing.List['DataUsed']: ...

class NsgfV00Filter(org.orekit.data.DataFilter):
    DEFAULT_V00_PATTERN: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, function: typing.Union[java.util.function.Function[str, str], typing.Callable[[str], str]]): ...
    def filter(self, dataSource: org.orekit.data.DataSource) -> org.orekit.data.DataSource: ...

class SP3(org.orekit.files.general.EphemerisFile['SP3Coordinate', 'SP3Segment']):
    @typing.overload
    def __init__(self, double: float, int: int, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, sP3Header: 'SP3Header', double: float, int: int, frame: org.orekit.frames.Frame): ...
    def addSatellite(self, string: str) -> None: ...
    @staticmethod
    def changeFrame(sP3: 'SP3', frame: org.orekit.frames.Frame) -> 'SP3': ...
    def containsSatellite(self, string: str) -> bool: ...
    @typing.overload
    def getEphemeris(self, int: int) -> 'SP3Ephemeris': ...
    @typing.overload
    def getEphemeris(self, string: str) -> 'SP3Ephemeris': ...
    def getHeader(self) -> 'SP3Header': ...
    def getSatelliteCount(self) -> int: ...
    def getSatellites(self) -> java.util.Map[str, 'SP3Ephemeris']: ...
    @staticmethod
    def splice(collection: typing.Union[java.util.Collection['SP3'], typing.Sequence['SP3'], typing.Set['SP3']]) -> 'SP3': ...
    def validate(self, boolean: bool, string: str) -> None: ...

class SP3Coordinate(org.orekit.utils.TimeStampedPVCoordinates):
    DUMMY: typing.ClassVar['SP3Coordinate'] = ...
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D4: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, double3: float, double4: float, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool): ...
    def getClockAccuracy(self) -> float: ...
    def getClockCorrection(self) -> float: ...
    def getClockRateAccuracy(self) -> float: ...
    def getClockRateChange(self) -> float: ...
    def getPositionAccuracy(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVelocityAccuracy(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def hasClockEvent(self) -> bool: ...
    def hasClockPrediction(self) -> bool: ...
    def hasOrbitManeuverEvent(self) -> bool: ...
    def hasOrbitPrediction(self) -> bool: ...

class SP3CoordinateHermiteInterpolator(org.orekit.time.AbstractTimeInterpolator[SP3Coordinate]):
    def __init__(self, int: int, double: float, boolean: bool): ...

class SP3Ephemeris(org.orekit.files.general.EphemerisFile.SatelliteEphemeris[SP3Coordinate, 'SP3Segment']):
    def __init__(self, string: str, double: float, frame: org.orekit.frames.Frame, int: int, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter): ...
    def addCoordinate(self, sP3Coordinate: SP3Coordinate, double: float) -> None: ...
    def extractClockModel(self) -> org.orekit.time.AggregatedClockModel: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getId(self) -> str: ...
    def getInterpolationSamples(self) -> int: ...
    def getMu(self) -> float: ...
    def getSegments(self) -> java.util.List['SP3Segment']: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class SP3FileType(java.lang.Enum['SP3FileType']):
    GPS: typing.ClassVar['SP3FileType'] = ...
    MIXED: typing.ClassVar['SP3FileType'] = ...
    GLONASS: typing.ClassVar['SP3FileType'] = ...
    LEO: typing.ClassVar['SP3FileType'] = ...
    GALILEO: typing.ClassVar['SP3FileType'] = ...
    SBAS: typing.ClassVar['SP3FileType'] = ...
    IRNSS: typing.ClassVar['SP3FileType'] = ...
    COMPASS: typing.ClassVar['SP3FileType'] = ...
    QZSS: typing.ClassVar['SP3FileType'] = ...
    UNDEFINED: typing.ClassVar['SP3FileType'] = ...
    def getKey(self) -> str: ...
    @staticmethod
    def parse(string: str) -> 'SP3FileType': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SP3FileType': ...
    @staticmethod
    def values() -> typing.List['SP3FileType']: ...

class SP3Header:
    SP3_FRAME_CENTER_STRING: typing.ClassVar[str] = ...
    def __init__(self): ...
    def addComment(self, string: str) -> None: ...
    def addSatId(self, string: str) -> None: ...
    def getAccuracy(self, string: str) -> float: ...
    def getAgency(self) -> str: ...
    def getClockBase(self) -> float: ...
    def getComments(self) -> java.util.List[str]: ...
    def getCoordinateSystem(self) -> str: ...
    def getDataUsed(self) -> java.util.List[DataUsed]: ...
    def getDayFraction(self) -> float: ...
    def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getEpochInterval(self) -> float: ...
    def getFilter(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
    def getGpsWeek(self) -> int: ...
    def getModifiedJulianDay(self) -> int: ...
    def getNumberOfEpochs(self) -> int: ...
    def getOrbitType(self) -> 'SP3OrbitType': ...
    def getOrbitTypeKey(self) -> str: ...
    def getPosVelBase(self) -> float: ...
    def getSatIds(self) -> java.util.List[str]: ...
    def getSecondsOfWeek(self) -> float: ...
    def getTimeSystem(self) -> org.orekit.gnss.TimeSystem: ...
    def getType(self) -> SP3FileType: ...
    def getVersion(self) -> str: ...
    def setAccuracy(self, int: int, double: float) -> None: ...
    def setAgency(self, string: str) -> None: ...
    def setClockBase(self, double: float) -> None: ...
    def setCoordinateSystem(self, string: str) -> None: ...
    def setDataUsed(self, list: java.util.List[DataUsed]) -> None: ...
    def setDayFraction(self, double: float) -> None: ...
    def setEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setEpochInterval(self, double: float) -> None: ...
    def setFilter(self, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter) -> None: ...
    def setGpsWeek(self, int: int) -> None: ...
    def setModifiedJulianDay(self, int: int) -> None: ...
    def setNumberOfEpochs(self, int: int) -> None: ...
    def setOrbitTypeKey(self, string: str) -> None: ...
    def setPosVelBase(self, double: float) -> None: ...
    def setSecondsOfWeek(self, double: float) -> None: ...
    def setTimeSystem(self, timeSystem: org.orekit.gnss.TimeSystem) -> None: ...
    def setType(self, sP3FileType: SP3FileType) -> None: ...
    def setVersion(self, char: str) -> None: ...

class SP3OrbitType(java.lang.Enum['SP3OrbitType']):
    FIT: typing.ClassVar['SP3OrbitType'] = ...
    EXT: typing.ClassVar['SP3OrbitType'] = ...
    BCT: typing.ClassVar['SP3OrbitType'] = ...
    HLM: typing.ClassVar['SP3OrbitType'] = ...
    OTHER: typing.ClassVar['SP3OrbitType'] = ...
    @staticmethod
    def parseType(string: str) -> 'SP3OrbitType': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SP3OrbitType': ...
    @staticmethod
    def values() -> typing.List['SP3OrbitType']: ...

class SP3Parser(org.orekit.files.general.EphemerisFileParser[SP3]):
    SP3_FRAME_CENTER_STRING: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]]): ...
    @typing.overload
    def __init__(self, double: float, int: int, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]], timeScales: org.orekit.time.TimeScales): ...
    @staticmethod
    def guessFrame(string: str) -> org.orekit.frames.Frame: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> SP3: ...

class SP3Segment(org.orekit.files.general.EphemerisFile.EphemerisSegment[SP3Coordinate]):
    def __init__(self, double: float, frame: org.orekit.frames.Frame, int: int, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter): ...
    def addCoordinate(self, sP3Coordinate: SP3Coordinate) -> None: ...
    def extractClockModel(self) -> org.orekit.time.ClockModel: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
    def getCoordinates(self) -> java.util.List[SP3Coordinate]: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getInterpolationSamples(self) -> int: ...
    def getMu(self) -> float: ...
    @typing.overload
    def getPropagator(self) -> org.orekit.propagation.BoundedPropagator: ...
    @typing.overload
    def getPropagator(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> org.orekit.propagation.BoundedPropagator: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class SP3Utils:
    DEFAULT_CLOCK_VALUE: typing.ClassVar[float] = ...
    DEFAULT_CLOCK_RATE_VALUE: typing.ClassVar[float] = ...
    POS_VEL_BASE_ACCURACY: typing.ClassVar[float] = ...
    POSITION_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    POSITION_ACCURACY_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    VELOCITY_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    VELOCITY_ACCURACY_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    CLOCK_ADDITIONAL_STATE: typing.ClassVar[str] = ...
    CLOCK_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    CLOCK_ACCURACY_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    CLOCK_RATE_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    CLOCK_RATE_ACCURACY_UNIT: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    @staticmethod
    def indexAccuracy(unit: org.orekit.utils.units.Unit, double: float, double2: float) -> int: ...
    @staticmethod
    def siAccuracy(unit: org.orekit.utils.units.Unit, double: float, int: int) -> float: ...

class SP3Writer:
    def __init__(self, appendable: java.lang.Appendable, string: str, timeScales: org.orekit.time.TimeScales): ...
    def write(self, sP3: SP3) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.sp3")``.

    DataUsed: typing.Type[DataUsed]
    NsgfV00Filter: typing.Type[NsgfV00Filter]
    SP3: typing.Type[SP3]
    SP3Coordinate: typing.Type[SP3Coordinate]
    SP3CoordinateHermiteInterpolator: typing.Type[SP3CoordinateHermiteInterpolator]
    SP3Ephemeris: typing.Type[SP3Ephemeris]
    SP3FileType: typing.Type[SP3FileType]
    SP3Header: typing.Type[SP3Header]
    SP3OrbitType: typing.Type[SP3OrbitType]
    SP3Parser: typing.Type[SP3Parser]
    SP3Segment: typing.Type[SP3Segment]
    SP3Utils: typing.Type[SP3Utils]
    SP3Writer: typing.Type[SP3Writer]
