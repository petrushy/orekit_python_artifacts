import java.lang
import java.util
import java.util.regex
import org
import org.hipparchus.geometry.euclidean.threed
import org.orekit.attitudes
import org.orekit.data
import org.orekit.files.general
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.sampling
import org.orekit.time
import org.orekit.utils
import typing



class CPF(org.orekit.files.general.EphemerisFile['CPF.CPFCoordinate', 'CPF.CPFEphemeris']):
    DEFAULT_ID: typing.ClassVar[str] = ...
    def __init__(self): ...
    def addSatelliteCoordinate(self, string: str, cPFCoordinate: 'CPF.CPFCoordinate') -> None: ...
    def addSatelliteCoordinates(self, string: str, list: java.util.List['CPF.CPFCoordinate']) -> None: ...
    def addSatelliteVelocityToCPFCoordinate(self, string: str, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def getComments(self) -> java.util.List[str]: ...
    def getHeader(self) -> 'CPFHeader': ...
    def getSatellites(self) -> java.util.Map[str, 'CPF.CPFEphemeris']: ...
    def getTimeScale(self) -> org.orekit.time.TimeScale: ...
    def setFilter(self, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter) -> None: ...
    def setInterpolationSample(self, int: int) -> None: ...
    def setMu(self, double: float) -> None: ...
    def setTimeScale(self, timeScale: org.orekit.time.TimeScale) -> None: ...
    class CPFCoordinate(org.orekit.utils.TimeStampedPVCoordinates):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int): ...
        def getLeap(self) -> int: ...
    class CPFEphemeris(org.orekit.files.general.EphemerisFile.SatelliteEphemeris['CPF.CPFCoordinate', 'CPF.CPFEphemeris'], org.orekit.files.general.EphemerisFile.EphemerisSegment['CPF.CPFCoordinate']):
        def __init__(self, cPF: 'CPF', string: str): ...
        def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
        def getCoordinates(self) -> java.util.List['CPF.CPFCoordinate']: ...
        def getEphemeridesDataLines(self) -> java.util.List['CPF.CPFCoordinate']: ...
        def getFrame(self) -> org.orekit.frames.Frame: ...
        def getId(self) -> str: ...
        def getInterpolationSamples(self) -> int: ...
        def getMu(self) -> float: ...
        @typing.overload
        def getPropagator(self) -> org.orekit.propagation.BoundedPropagator: ...
        @typing.overload
        def getPropagator(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> org.orekit.propagation.BoundedPropagator: ...
        def getSegments(self) -> java.util.List['CPF.CPFEphemeris']: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class CPFParser(org.orekit.files.general.EphemerisFileParser[CPF]):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int, iERSConventions: org.orekit.utils.IERSConventions, timeScale: org.orekit.time.TimeScale, frames: org.orekit.frames.Frames): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> CPF: ...

class CPFWriter(org.orekit.files.general.EphemerisFileWriter):
    @typing.overload
    def __init__(self, cPFHeader: 'CPFHeader', timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, cPFHeader: 'CPFHeader', timeScale: org.orekit.time.TimeScale, boolean: bool): ...
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    _write_1__C = typing.TypeVar('_write_1__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_1__S = typing.TypeVar('_write_1__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    @typing.overload
    def write(self, string: str, ephemerisFile: org.orekit.files.general.EphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, appendable: java.lang.Appendable, ephemerisFile: org.orekit.files.general.EphemerisFile[_write_1__C, _write_1__S]) -> None: ...

class CRDParser:
    DEFAULT_CRD_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    def getTimeScale(self) -> org.orekit.time.TimeScale: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> 'CRD': ...

class ILRSHeader:
    def __init__(self): ...
    def getEndEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getFormat(self) -> str: ...
    def getIlrsSatelliteId(self) -> str: ...
    def getName(self) -> str: ...
    def getNoradId(self) -> str: ...
    def getProductionEpoch(self) -> org.orekit.time.DateComponents: ...
    def getProductionHour(self) -> int: ...
    def getSequenceNumber(self) -> int: ...
    def getSic(self) -> str: ...
    def getStartEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getTargetClass(self) -> int: ...
    def getTargetLocation(self) -> int: ...
    def getVersion(self) -> int: ...
    def setEndEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setFormat(self, string: str) -> None: ...
    def setIlrsSatelliteId(self, string: str) -> None: ...
    def setName(self, string: str) -> None: ...
    def setNoradId(self, string: str) -> None: ...
    def setProductionEpoch(self, dateComponents: org.orekit.time.DateComponents) -> None: ...
    def setProductionHour(self, int: int) -> None: ...
    def setSequenceNumber(self, int: int) -> None: ...
    def setSic(self, string: str) -> None: ...
    def setStartEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTargetClass(self, int: int) -> None: ...
    def setTargetLocation(self, int: int) -> None: ...
    def setVersion(self, int: int) -> None: ...

class StreamingCpfWriter:
    @typing.overload
    def __init__(self, appendable: java.lang.Appendable, timeScale: org.orekit.time.TimeScale, cPFHeader: 'CPFHeader'): ...
    @typing.overload
    def __init__(self, appendable: java.lang.Appendable, timeScale: org.orekit.time.TimeScale, cPFHeader: 'CPFHeader', boolean: bool): ...
    def newSegment(self, frame: org.orekit.frames.Frame) -> 'StreamingCpfWriter.Segment': ...
    def writeEndOfFile(self) -> None: ...
    def writeHeader(self) -> None: ...
    class HeaderLineWriter(java.lang.Enum['StreamingCpfWriter.HeaderLineWriter']):
        H1: typing.ClassVar['StreamingCpfWriter.HeaderLineWriter'] = ...
        H2: typing.ClassVar['StreamingCpfWriter.HeaderLineWriter'] = ...
        def getIdentifier(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'StreamingCpfWriter.HeaderLineWriter': ...
        @staticmethod
        def values() -> typing.List['StreamingCpfWriter.HeaderLineWriter']: ...
        def write(self, cPFHeader: 'CPFHeader', appendable: java.lang.Appendable, timeScale: org.orekit.time.TimeScale) -> None: ...
    class Segment(org.orekit.propagation.sampling.OrekitFixedStepHandler):
        def finish(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def handleStep(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def writeEphemerisLine(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates) -> None: ...

class CPFHeader(ILRSHeader):
    def __init__(self): ...
    def getCenterOfMassOffset(self) -> float: ...
    def getPrf(self) -> float: ...
    def getRefFrame(self) -> org.orekit.frames.Frame: ...
    def getRefFrameId(self) -> int: ...
    def getRotationalAngleType(self) -> int: ...
    def getSource(self) -> str: ...
    def getStep(self) -> int: ...
    def getSubDailySequenceNumber(self) -> int: ...
    def getTranspClkRef(self) -> float: ...
    def getTranspOscDrift(self) -> float: ...
    def getTranspTransmitDelay(self) -> float: ...
    def getTranspUtcOffset(self) -> float: ...
    def isCenterOfMassCorrectionApplied(self) -> bool: ...
    def isCompatibleWithTIVs(self) -> bool: ...
    def setCenterOfMassOffset(self, double: float) -> None: ...
    def setIsCenterOfMassCorrectionApplied(self, boolean: bool) -> None: ...
    def setIsCompatibleWithTIVs(self, boolean: bool) -> None: ...
    def setPrf(self, double: float) -> None: ...
    def setRefFrame(self, frame: org.orekit.frames.Frame) -> None: ...
    def setRefFrameId(self, int: int) -> None: ...
    def setRotationalAngleType(self, int: int) -> None: ...
    def setSource(self, string: str) -> None: ...
    def setStep(self, int: int) -> None: ...
    def setSubDailySequenceNumber(self, int: int) -> None: ...
    def setTranspClkRef(self, double: float) -> None: ...
    def setTranspOscDrift(self, double: float) -> None: ...
    def setTranspTransmitDelay(self, double: float) -> None: ...
    def setTranspUtcOffset(self, double: float) -> None: ...

class CRDHeader(ILRSHeader):
    PATTERN_DATETIME_DELIMITER_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    def __init__(self): ...
    def getDataReleaseFlag(self) -> int: ...
    def getDataType(self) -> int: ...
    def getDateAndTime(self) -> str: ...
    def getEpochIdentifier(self) -> int: ...
    def getH1CrdString(self) -> str: ...
    def getH2CrdString(self) -> str: ...
    def getH3CrdString(self) -> str: ...
    def getH4CrdString(self) -> str: ...
    def getH5CrdString(self) -> str: ...
    def getPredictionProvider(self) -> str: ...
    def getPredictionType(self) -> int: ...
    def getQualityIndicator(self) -> int: ...
    def getRangeType(self) -> 'CRDHeader.RangeType': ...
    def getSpacecraftEpochTimeScale(self) -> int: ...
    def getStationName(self) -> str: ...
    def getStationNetword(self) -> str: ...
    def getSystemIdentifier(self) -> int: ...
    def getSystemNumber(self) -> int: ...
    def getSystemOccupancy(self) -> int: ...
    def getYearOfCentury(self) -> int: ...
    def isCenterOfMassCorrectionApplied(self) -> bool: ...
    def isReceiveAmplitudeCorrectionApplied(self) -> bool: ...
    def isStationSystemDelayApplied(self) -> bool: ...
    def isTransponderDelayApplied(self) -> bool: ...
    def isTroposphericRefractionApplied(self) -> bool: ...
    def setDataReleaseFlag(self, int: int) -> None: ...
    def setDataType(self, int: int) -> None: ...
    def setDateAndTime(self, string: str) -> None: ...
    def setEpochIdentifier(self, int: int) -> None: ...
    def setIsCenterOfMassCorrectionApplied(self, boolean: bool) -> None: ...
    def setIsReceiveAmplitudeCorrectionApplied(self, boolean: bool) -> None: ...
    def setIsStationSystemDelayApplied(self, boolean: bool) -> None: ...
    def setIsTransponderDelayApplied(self, boolean: bool) -> None: ...
    def setIsTroposphericRefractionApplied(self, boolean: bool) -> None: ...
    def setPredictionProvider(self, string: str) -> None: ...
    def setPredictionType(self, int: int) -> None: ...
    def setQualityIndicator(self, int: int) -> None: ...
    def setRangeType(self, int: int) -> None: ...
    def setSpacecraftEpochTimeScale(self, int: int) -> None: ...
    def setStationName(self, string: str) -> None: ...
    def setStationNetword(self, string: str) -> None: ...
    def setSystemIdentifier(self, int: int) -> None: ...
    def setSystemNumber(self, int: int) -> None: ...
    def setSystemOccupancy(self, int: int) -> None: ...
    def setYearOfCentury(self, int: int) -> None: ...
    class DataType(java.lang.Enum['CRDHeader.DataType']):
        FULL_RATE: typing.ClassVar['CRDHeader.DataType'] = ...
        NORMAL_POINT: typing.ClassVar['CRDHeader.DataType'] = ...
        SAMPLED_ENGIEERING: typing.ClassVar['CRDHeader.DataType'] = ...
        @staticmethod
        def getDataType(int: int) -> 'CRDHeader.DataType': ...
        def getIndicator(self) -> int: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'CRDHeader.DataType': ...
        @staticmethod
        def values() -> typing.List['CRDHeader.DataType']: ...
    class RangeType(java.lang.Enum['CRDHeader.RangeType']):
        NO_RANGES: typing.ClassVar['CRDHeader.RangeType'] = ...
        ONE_WAY: typing.ClassVar['CRDHeader.RangeType'] = ...
        TWO_WAY: typing.ClassVar['CRDHeader.RangeType'] = ...
        RECEIVED_ONLY: typing.ClassVar['CRDHeader.RangeType'] = ...
        MIXED: typing.ClassVar['CRDHeader.RangeType'] = ...
        def getIndicator(self) -> int: ...
        @staticmethod
        def getRangeType(int: int) -> 'CRDHeader.RangeType': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'CRDHeader.RangeType': ...
        @staticmethod
        def values() -> typing.List['CRDHeader.RangeType']: ...

class PythonILRSHeader(ILRSHeader):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class CRD:
    STR_VALUE_NOT_AVAILABLE: typing.ClassVar[str] = ...
    STR_NAN: typing.ClassVar[str] = ...
    PATTERN_NAN: typing.ClassVar[java.util.regex.Pattern] = ...
    def __init__(self): ...
    def addDataBlock(self, cRDDataBlock: 'CRD.CRDDataBlock') -> None: ...
    @staticmethod
    def formatIntegerOrNaN(int: int, int2: int) -> str: ...
    def getComments(self) -> java.util.List[str]: ...
    def getDataBlocks(self) -> java.util.List['CRD.CRDDataBlock']: ...
    @staticmethod
    def handleNaN(string: str) -> str: ...
    class AnglesMeasurement(org.orekit.time.TimeStamped):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, int: int, int2: int, boolean: bool, double3: float, double4: float): ...
        def getAzimuth(self) -> float: ...
        def getAzimuthRate(self) -> float: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getDirectionFlag(self) -> int: ...
        def getElevation(self) -> float: ...
        def getElevationRate(self) -> float: ...
        def getOriginIndicator(self) -> int: ...
        def isRefractionCorrected(self) -> bool: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class CRDDataBlock:
        def __init__(self): ...
        def addAnglesData(self, anglesMeasurement: 'CRD.AnglesMeasurement') -> None: ...
        def addCalibrationData(self, calibration: 'CRD.Calibration') -> None: ...
        def addCalibrationDetailData(self, calibrationDetail: 'CRD.CalibrationDetail') -> None: ...
        def addMeteoData(self, meteorologicalMeasurement: 'CRD.MeteorologicalMeasurement') -> None: ...
        def addRangeData(self, rangeMeasurement: 'CRD.RangeMeasurement') -> None: ...
        def addRangeSupplementData(self, rangeSupplement: 'CRD.RangeSupplement') -> None: ...
        def addSessionStatisticsData(self, sessionStatistics: 'CRD.SessionStatistics') -> None: ...
        def getAnglesData(self) -> java.util.List['CRD.AnglesMeasurement']: ...
        def getCalibrationData(self) -> java.util.List['CRD.Calibration']: ...
        def getCalibrationDetailData(self) -> java.util.List['CRD.CalibrationDetail']: ...
        @typing.overload
        def getCalibrationDetailRecords(self) -> java.util.List['CRD.CalibrationDetail']: ...
        @typing.overload
        def getCalibrationDetailRecords(self, string: str) -> java.util.List['CRD.CalibrationDetail']: ...
        @typing.overload
        def getCalibrationRecords(self) -> java.util.List['CRD.Calibration']: ...
        @typing.overload
        def getCalibrationRecords(self, string: str) -> java.util.List['CRD.Calibration']: ...
        def getConfigurationRecords(self) -> 'CRDConfiguration': ...
        def getHeader(self) -> CRDHeader: ...
        def getMeteoData(self) -> 'CRD.Meteo': ...
        def getRangeData(self) -> java.util.List['CRD.RangeMeasurement']: ...
        def getRangeSupplementData(self) -> java.util.List['CRD.RangeSupplement']: ...
        def getSessionStatisticsData(self) -> java.util.List['CRD.SessionStatistics']: ...
        @typing.overload
        def getSessionStatisticsRecord(self) -> 'CRD.SessionStatistics': ...
        @typing.overload
        def getSessionStatisticsRecord(self, string: str) -> 'CRD.SessionStatistics': ...
        def getWavelength(self, rangeMeasurement: 'CRD.RangeMeasurement') -> float: ...
        def setConfigurationRecords(self, cRDConfiguration: 'CRDConfiguration') -> None: ...
        def setHeader(self, cRDHeader: CRDHeader) -> None: ...
    class Calibration(org.orekit.time.TimeStamped):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, int: int, string: str, int2: int, int3: int, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, int4: int, int5: int, int6: int, int7: int, double8: float): ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getDelayShift(self) -> float: ...
        def getDetectorChannel(self) -> int: ...
        def getKurtosis(self) -> float: ...
        def getNumberOfPointsRecorded(self) -> int: ...
        def getNumberOfPointsUsed(self) -> int: ...
        def getOneWayDistance(self) -> float: ...
        def getPeakMinusMean(self) -> float: ...
        def getReturnRate(self) -> float: ...
        def getRms(self) -> float: ...
        def getShiftTypeIndicator(self) -> int: ...
        def getSkew(self) -> float: ...
        def getSpan(self) -> int: ...
        def getSystemConfigurationId(self) -> str: ...
        def getSystemDelay(self) -> float: ...
        def getTypeIndicator(self) -> int: ...
        def getTypeOfData(self) -> int: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class CalibrationDetail(org.orekit.files.ilrs.CRD.Calibration):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, int: int, string: str, int2: int, int3: int, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, int4: int, int5: int, int6: int, int7: int, double8: float): ...
        def toCrdString(self) -> str: ...
    class FrRangeMeasurement(org.orekit.files.ilrs.CRD.RangeMeasurement):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, string: str, int2: int, int3: int, int4: int, int5: int, int6: int): ...
        def getDetectorChannel(self) -> int: ...
        def getFilterFlag(self) -> int: ...
        def getReceiveAmplitude(self) -> int: ...
        def getStopNumber(self) -> int: ...
        def getTransmitAmplitude(self) -> int: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class Meteo:
        def __init__(self, sortedSet: java.util.SortedSet['CRD.MeteorologicalMeasurement']): ...
        def getData(self) -> java.util.List['CRD.MeteorologicalMeasurement']: ...
        def getMeteo(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'CRD.MeteorologicalMeasurement': ...
    class MeteorologicalMeasurement(org.orekit.time.TimeStamped):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, int: int): ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getHumidity(self) -> float: ...
        def getOriginOfValues(self) -> int: ...
        def getPressure(self) -> float: ...
        def getTemperature(self) -> float: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class NptRangeMeasurement(org.orekit.files.ilrs.CRD.RangeMeasurement):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, double2: float, string: str): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, double2: float, string: str, double3: float, int2: int, double4: float, double5: float, double6: float, double7: float, double8: float, int3: int): ...
        def getBinKurtosis(self) -> float: ...
        def getBinPeakMinusMean(self) -> float: ...
        def getBinRms(self) -> float: ...
        def getBinSkew(self) -> float: ...
        def getDetectorChannel(self) -> int: ...
        def getNumberOfRawRanges(self) -> int: ...
        def getReturnRate(self) -> float: ...
        def getWindowLength(self) -> float: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class RangeMeasurement(org.orekit.time.TimeStamped):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, double2: float): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, double2: float, string: str): ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getEpochEvent(self) -> int: ...
        def getSnr(self) -> float: ...
        def getSystemConfigurationId(self) -> str: ...
        def getTimeOfFlight(self) -> float: ...
        def toCrdString(self) -> str: ...
    class RangeSupplement(org.orekit.time.TimeStamped):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, string: str, double: float, double2: float, double3: float, double4: float, double5: float): ...
        def getCenterOfMassCorrection(self) -> float: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getNdFilterValue(self) -> float: ...
        def getRangeRate(self) -> float: ...
        def getSystemConfigurationId(self) -> str: ...
        def getTimeBiasApplied(self) -> float: ...
        def getTroposphericRefractionCorrection(self) -> float: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class SessionStatistics:
        def __init__(self, string: str, double: float, double2: float, double3: float, double4: float, int: int): ...
        def getDataQulityIndicator(self) -> int: ...
        def getKurtosis(self) -> float: ...
        def getPeakMinusMean(self) -> float: ...
        def getRms(self) -> float: ...
        def getSkewness(self) -> float: ...
        def getSystemConfigurationId(self) -> str: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...

class CRDConfiguration:
    def __init__(self): ...
    def addConfigurationRecord(self, baseConfiguration: 'CRDConfiguration.BaseConfiguration') -> None: ...
    @typing.overload
    def getCalibrationTargetRecord(self) -> 'CRDConfiguration.CalibrationTargetConfiguration': ...
    @typing.overload
    def getCalibrationTargetRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.CalibrationTargetConfiguration': ...
    def getConfigurationRecord(self, string: str) -> 'CRDConfiguration.BaseConfiguration': ...
    def getConfigurationRecordMap(self) -> java.util.Map[str, 'CRDConfiguration.BaseConfiguration']: ...
    @typing.overload
    def getDetectorRecord(self) -> 'CRDConfiguration.DetectorConfiguration': ...
    @typing.overload
    def getDetectorRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.DetectorConfiguration': ...
    @typing.overload
    def getLaserRecord(self) -> 'CRDConfiguration.LaserConfiguration': ...
    @typing.overload
    def getLaserRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.LaserConfiguration': ...
    def getLastSystemRecord(self) -> 'CRDConfiguration.SystemConfiguration': ...
    @typing.overload
    def getMeteorologicalRecord(self) -> 'CRDConfiguration.MeteorologicalConfiguration': ...
    @typing.overload
    def getMeteorologicalRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.MeteorologicalConfiguration': ...
    @typing.overload
    def getSoftwareRecord(self) -> 'CRDConfiguration.SoftwareConfiguration': ...
    @typing.overload
    def getSoftwareRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.SoftwareConfiguration': ...
    def getSystemConfigurationIds(self) -> java.util.Set[str]: ...
    def getSystemConfigurationRecords(self) -> java.util.List['CRDConfiguration.SystemConfiguration']: ...
    @typing.overload
    def getSystemRecord(self) -> 'CRDConfiguration.SystemConfiguration': ...
    @typing.overload
    def getSystemRecord(self, string: str) -> 'CRDConfiguration.SystemConfiguration': ...
    @typing.overload
    def getTimingRecord(self) -> 'CRDConfiguration.TimingSystemConfiguration': ...
    @typing.overload
    def getTimingRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.TimingSystemConfiguration': ...
    @typing.overload
    def getTransponderRecord(self) -> 'CRDConfiguration.TransponderConfiguration': ...
    @typing.overload
    def getTransponderRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> 'CRDConfiguration.TransponderConfiguration': ...
    class BaseConfiguration:
        def __init__(self): ...
        def equals(self, object: typing.Any) -> bool: ...
        def getConfigurationId(self) -> str: ...
        def hashCode(self) -> int: ...
        def setConfigurationId(self, string: str) -> None: ...
        def toCrdString(self) -> str: ...
    class CalibrationTargetConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getProcessingSoftwareName(self) -> str: ...
        def getProcessingSoftwareVersion(self) -> str: ...
        def getPulseEnergy(self) -> float: ...
        def getSumOfAllConstantDelays(self) -> float: ...
        def getSurveyError(self) -> float: ...
        def getSurveyedTargetDistance(self) -> float: ...
        def getTargetName(self) -> str: ...
        def setProcessingSoftwareName(self, string: str) -> None: ...
        def setProcessingSoftwareVersion(self, string: str) -> None: ...
        def setPulseEnergy(self, double: float) -> None: ...
        def setSumOfAllConstantDelays(self, double: float) -> None: ...
        def setSurveyError(self, double: float) -> None: ...
        def setSurveyedTargetDistance(self, double: float) -> None: ...
        def setTargetName(self, string: str) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class DetectorConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getAmplifierBandwidth(self) -> float: ...
        def getAmplifierGain(self) -> float: ...
        def getAmplifierInUse(self) -> str: ...
        def getApplicableWavelength(self) -> float: ...
        def getAppliedVoltage(self) -> float: ...
        def getDarkCount(self) -> float: ...
        def getDetectorId(self) -> str: ...
        def getDetectorType(self) -> str: ...
        def getExternalSignalProcessing(self) -> str: ...
        def getOutputPulseType(self) -> str: ...
        def getOutputPulseWidth(self) -> float: ...
        def getQuantumEfficiency(self) -> float: ...
        def getSpatialFilter(self) -> float: ...
        def getSpectralFilter(self) -> float: ...
        def getTransmissionOfSpectralFilter(self) -> float: ...
        def setAmplifierBandwidth(self, double: float) -> None: ...
        def setAmplifierGain(self, double: float) -> None: ...
        def setAmplifierInUse(self, string: str) -> None: ...
        def setApplicableWavelength(self, double: float) -> None: ...
        def setAppliedVoltage(self, double: float) -> None: ...
        def setDarkCount(self, double: float) -> None: ...
        def setDetectorId(self, string: str) -> None: ...
        def setDetectorType(self, string: str) -> None: ...
        def setExternalSignalProcessing(self, string: str) -> None: ...
        def setOutputPulseType(self, string: str) -> None: ...
        def setOutputPulseWidth(self, double: float) -> None: ...
        def setQuantumEfficiency(self, double: float) -> None: ...
        def setSpatialFilter(self, double: float) -> None: ...
        def setSpectralFilter(self, double: float) -> None: ...
        def setTransmissionOfSpectralFilter(self, double: float) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class LaserConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getBeamDivergence(self) -> float: ...
        def getLaserId(self) -> str: ...
        def getLaserType(self) -> str: ...
        def getNominalFireRate(self) -> float: ...
        def getPrimaryWavelength(self) -> float: ...
        def getPulseEnergy(self) -> float: ...
        def getPulseInOutgoingSemiTrain(self) -> int: ...
        def getPulseWidth(self) -> float: ...
        def setBeamDivergence(self, double: float) -> None: ...
        def setLaserId(self, string: str) -> None: ...
        def setLaserType(self, string: str) -> None: ...
        def setNominalFireRate(self, double: float) -> None: ...
        def setPrimaryWavelength(self, double: float) -> None: ...
        def setPulseEnergy(self, double: float) -> None: ...
        def setPulseInOutgoingSemiTrain(self, int: int) -> None: ...
        def setPulseWidth(self, double: float) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class MeteorologicalConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getHumiSensorManufacturer(self) -> str: ...
        def getHumiSensorModel(self) -> str: ...
        def getHumiSensorSerialNumber(self) -> str: ...
        def getMeteorologicalId(self) -> str: ...
        def getPressSensorManufacturer(self) -> str: ...
        def getPressSensorModel(self) -> str: ...
        def getPressSensorSerialNumber(self) -> str: ...
        def getTempSensorManufacturer(self) -> str: ...
        def getTempSensorModel(self) -> str: ...
        def getTempSensorSerialNumber(self) -> str: ...
        def setHumiSensorManufacturer(self, string: str) -> None: ...
        def setHumiSensorModel(self, string: str) -> None: ...
        def setHumiSensorSerialNumber(self, string: str) -> None: ...
        def setMeteorologicalId(self, string: str) -> None: ...
        def setPressSensorManufacturer(self, string: str) -> None: ...
        def setPressSensorModel(self, string: str) -> None: ...
        def setPressSensorSerialNumber(self, string: str) -> None: ...
        def setTempSensorManufacturer(self, string: str) -> None: ...
        def setTempSensorModel(self, string: str) -> None: ...
        def setTempSensorSerialNumber(self, string: str) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class SoftwareConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getProcessingSoftwareVersions(self) -> typing.List[str]: ...
        def getProcessingSoftwares(self) -> typing.List[str]: ...
        def getSoftwareId(self) -> str: ...
        def getTrackingSoftwareVersions(self) -> typing.List[str]: ...
        def getTrackingSoftwares(self) -> typing.List[str]: ...
        def setProcessingSoftwareVersions(self, stringArray: typing.List[str]) -> None: ...
        def setProcessingSoftwares(self, stringArray: typing.List[str]) -> None: ...
        def setSoftwareId(self, string: str) -> None: ...
        def setTrackingSoftwareVersions(self, stringArray: typing.List[str]) -> None: ...
        def setTrackingSoftwares(self, stringArray: typing.List[str]) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class SystemConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getComponents(self) -> java.util.List[str]: ...
        def getSystemId(self) -> str: ...
        def getWavelength(self) -> float: ...
        def setComponents(self, stringArray: typing.List[str]) -> None: ...
        def setSystemId(self, string: str) -> None: ...
        def setWavelength(self, double: float) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class TimingSystemConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getEpochDelayCorrection(self) -> float: ...
        def getFrequencySource(self) -> str: ...
        def getLocalTimingId(self) -> str: ...
        def getTimeSource(self) -> str: ...
        def getTimer(self) -> str: ...
        def getTimerSerialNumber(self) -> str: ...
        def setEpochDelayCorrection(self, double: float) -> None: ...
        def setFrequencySource(self, string: str) -> None: ...
        def setLocalTimingId(self, string: str) -> None: ...
        def setTimeSource(self, string: str) -> None: ...
        def setTimer(self, string: str) -> None: ...
        def setTimerSerialNumber(self, string: str) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...
    class TransponderConfiguration(org.orekit.files.ilrs.CRDConfiguration.BaseConfiguration):
        def __init__(self): ...
        def getSpacecraftClockAndDriftApplied(self) -> int: ...
        def getStationClockAndDriftApplied(self) -> int: ...
        def getStationOscDrift(self) -> float: ...
        def getStationUTCOffset(self) -> float: ...
        def getTranspClkRefTime(self) -> float: ...
        def getTranspOscDrift(self) -> float: ...
        def getTranspUTCOffset(self) -> float: ...
        def getTransponderId(self) -> str: ...
        def isSpacecraftTimeSimplified(self) -> bool: ...
        def setIsSpacecraftTimeSimplified(self, boolean: bool) -> None: ...
        def setSpacecraftClockAndDriftApplied(self, int: int) -> None: ...
        def setStationClockAndDriftApplied(self, int: int) -> None: ...
        def setStationOscDrift(self, double: float) -> None: ...
        def setStationUTCOffset(self, double: float) -> None: ...
        def setTranspClkRefTime(self, double: float) -> None: ...
        def setTranspOscDrift(self, double: float) -> None: ...
        def setTranspUTCOffset(self, double: float) -> None: ...
        def setTransponderId(self, string: str) -> None: ...
        def toCrdString(self) -> str: ...
        def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ilrs")``.

    CPF: typing.Type[CPF]
    CPFHeader: typing.Type[CPFHeader]
    CPFParser: typing.Type[CPFParser]
    CPFWriter: typing.Type[CPFWriter]
    CRD: typing.Type[CRD]
    CRDConfiguration: typing.Type[CRDConfiguration]
    CRDHeader: typing.Type[CRDHeader]
    CRDParser: typing.Type[CRDParser]
    ILRSHeader: typing.Type[ILRSHeader]
    PythonILRSHeader: typing.Type[PythonILRSHeader]
    StreamingCpfWriter: typing.Type[StreamingCpfWriter]
