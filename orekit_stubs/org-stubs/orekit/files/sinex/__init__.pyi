import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.util
import org.orekit.data
import org.orekit.frames
import org.orekit.gnss
import org.orekit.models.earth.displacement
import org.orekit.time
import org.orekit.utils
import typing



class Dcb:
    def __init__(self): ...
    def addDcbLine(self, string: str, string2: str, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate, double: float) -> None: ...
    def getAvailableObservationPairs(self) -> java.util.HashSet[org.hipparchus.util.Pair[org.orekit.gnss.ObservationType, org.orekit.gnss.ObservationType]]: ...
    @typing.overload
    def getDcb(self, string: str, string2: str, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getDcb(self, observationType: org.orekit.gnss.ObservationType, observationType2: org.orekit.gnss.ObservationType, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getMaximumValidDateForObservationPair(self, string: str, string2: str) -> org.orekit.time.AbsoluteDate: ...
    @typing.overload
    def getMaximumValidDateForObservationPair(self, observationType: org.orekit.gnss.ObservationType, observationType2: org.orekit.gnss.ObservationType) -> org.orekit.time.AbsoluteDate: ...
    @typing.overload
    def getMinimumValidDateForObservationPair(self, string: str, string2: str) -> org.orekit.time.AbsoluteDate: ...
    @typing.overload
    def getMinimumValidDateForObservationPair(self, observationType: org.orekit.gnss.ObservationType, observationType2: org.orekit.gnss.ObservationType) -> org.orekit.time.AbsoluteDate: ...

class DcbDescription:
    def __init__(self): ...
    def getBiasMode(self) -> str: ...
    def getDeterminationMethod(self) -> str: ...
    def getObservationSampling(self) -> int: ...
    def getParameterSpacing(self) -> int: ...
    def getTimeSystem(self) -> org.orekit.gnss.TimeSystem: ...
    def setBiasMode(self, string: str) -> None: ...
    def setDeterminationMethod(self, string: str) -> None: ...
    def setObservationSampling(self, int: int) -> None: ...
    def setParameterSpacing(self, int: int) -> None: ...
    def setTimeSystem(self, timeSystem: org.orekit.gnss.TimeSystem) -> None: ...

class DcbSatellite:
    def __init__(self, string: str): ...
    def getDcbData(self) -> Dcb: ...
    def getDescription(self) -> DcbDescription: ...
    def getPRN(self) -> str: ...
    def getSatelliteSytem(self) -> org.orekit.gnss.SatelliteSystem: ...
    def setDescription(self, dcbDescription: DcbDescription) -> None: ...

class DcbStation:
    def __init__(self, string: str): ...
    def addDcb(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, dcb: Dcb) -> None: ...
    def getAvailableSatelliteSystems(self) -> java.lang.Iterable[org.orekit.gnss.SatelliteSystem]: ...
    def getDcbData(self, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> Dcb: ...
    def getDescription(self) -> DcbDescription: ...
    def getSiteCode(self) -> str: ...
    def setDescription(self, dcbDescription: DcbDescription) -> None: ...

class SinexEopEntry(org.orekit.time.TimeStamped):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getLod(self) -> float: ...
    def getNutLn(self) -> float: ...
    def getNutOb(self) -> float: ...
    def getNutX(self) -> float: ...
    def getNutY(self) -> float: ...
    def getUt1MinusUtc(self) -> float: ...
    def getXPo(self) -> float: ...
    def getYPo(self) -> float: ...
    def setLod(self, double: float) -> None: ...
    def setNutLn(self, double: float) -> None: ...
    def setNutOb(self, double: float) -> None: ...
    def setNutX(self, double: float) -> None: ...
    def setNutY(self, double: float) -> None: ...
    def setUt1MinusUtc(self, double: float) -> None: ...
    def setxPo(self, double: float) -> None: ...
    def setyPo(self, double: float) -> None: ...
    def toEopEntry(self, nutationCorrectionConverter: org.orekit.utils.IERSConventions.NutationCorrectionConverter, iTRFVersion: org.orekit.frames.ITRFVersion, timeScale: org.orekit.time.TimeScale) -> org.orekit.frames.EOPEntry: ...

class SinexLoader(org.orekit.frames.EopHistoryLoader):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScales: org.orekit.time.TimeScales): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScales: org.orekit.time.TimeScales): ...
    def fillHistory(self, nutationCorrectionConverter: org.orekit.utils.IERSConventions.NutationCorrectionConverter, sortedSet: java.util.SortedSet[org.orekit.frames.EOPEntry]) -> None: ...
    def getCreationDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDcbSatellite(self, string: str) -> DcbSatellite: ...
    def getDcbStation(self, string: str) -> DcbStation: ...
    def getFileEpochEndTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getFileEpochStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getITRFVersion(self) -> org.orekit.frames.ITRFVersion: ...
    def getParsedEop(self) -> java.util.Map[org.orekit.time.AbsoluteDate, SinexEopEntry]: ...
    def getStation(self, string: str) -> 'Station': ...
    def getStations(self) -> java.util.Map[str, 'Station']: ...
    def setITRFVersion(self, int: int) -> None: ...

class Station:
    def __init__(self): ...
    def addAntennaTypeValidAfter(self, string: str, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addAntennaTypeValidBefore(self, string: str, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addPsdCorrectionValidAfter(self, psdCorrection: org.orekit.models.earth.displacement.PsdCorrection, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addStationEccentricitiesValidAfter(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addStationEccentricitiesValidBefore(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def getAntennaType(self, absoluteDate: org.orekit.time.AbsoluteDate) -> str: ...
    def getAntennaTypeTimeSpanMap(self) -> org.orekit.utils.TimeSpanMap[str]: ...
    def getDomes(self) -> str: ...
    def getEccRefSystem(self) -> 'Station.ReferenceSystem': ...
    def getEccentricities(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getEccentricitiesTimeSpanMap(self) -> org.orekit.utils.TimeSpanMap[org.hipparchus.geometry.euclidean.threed.Vector3D]: ...
    def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getPsdTimeSpanMap(self) -> org.orekit.utils.TimeSpanMap[java.util.List[org.orekit.models.earth.displacement.PsdCorrection]]: ...
    def getSiteCode(self) -> str: ...
    def getValidFrom(self) -> org.orekit.time.AbsoluteDate: ...
    def getValidUntil(self) -> org.orekit.time.AbsoluteDate: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def setDomes(self, string: str) -> None: ...
    def setEccRefSystem(self, referenceSystem: 'Station.ReferenceSystem') -> None: ...
    def setEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setPosition(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setSiteCode(self, string: str) -> None: ...
    def setValidFrom(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setValidUntil(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setVelocity(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    class ReferenceSystem(java.lang.Enum['Station.ReferenceSystem']):
        UNE: typing.ClassVar['Station.ReferenceSystem'] = ...
        XYZ: typing.ClassVar['Station.ReferenceSystem'] = ...
        @staticmethod
        def getEccRefSystem(string: str) -> 'Station.ReferenceSystem': ...
        def getName(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Station.ReferenceSystem': ...
        @staticmethod
        def values() -> typing.List['Station.ReferenceSystem']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.sinex")``.

    Dcb: typing.Type[Dcb]
    DcbDescription: typing.Type[DcbDescription]
    DcbSatellite: typing.Type[DcbSatellite]
    DcbStation: typing.Type[DcbStation]
    SinexEopEntry: typing.Type[SinexEopEntry]
    SinexLoader: typing.Type[SinexLoader]
    Station: typing.Type[Station]
