import java.io
import java.lang
import java.util
import org.hipparchus
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.data
import org.orekit.forces.gravity.potential
import org.orekit.frames
import org.orekit.models
import org.orekit.models.earth.atmosphere
import org.orekit.models.earth.displacement
import org.orekit.models.earth.ionosphere
import org.orekit.models.earth.tessellation
import org.orekit.models.earth.troposphere
import org.orekit.models.earth.weather
import org.orekit.time
import org.orekit.utils
import typing



class EarthITU453AtmosphereRefraction(org.orekit.models.AtmosphericRefractionModel):
    def __init__(self, double: float): ...
    def getRefraction(self, double: float) -> float: ...
    def getTheta0(self) -> float: ...
    def getThetaMin(self) -> float: ...

class EarthShape(org.orekit.bodies.BodyShape):
    def getEllipsoid(self) -> 'ReferenceEllipsoid': ...

class EarthStandardAtmosphereRefraction(org.orekit.models.AtmosphericRefractionModel):
    DEFAULT_CORRECTION_FACTOR: typing.ClassVar[float] = ...
    DEFAULT_PRESSURE: typing.ClassVar[float] = ...
    DEFAULT_TEMPERATURE: typing.ClassVar[float] = ...
    STANDARD_ATM_PRESSURE: typing.ClassVar[float] = ...
    STANDARD_ATM_TEMPERATURE: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def getPressure(self) -> float: ...
    def getRefraction(self, double: float) -> float: ...
    def getTemperature(self) -> float: ...
    def setPressure(self, double: float) -> None: ...
    def setTemperature(self, double: float) -> None: ...

class GeoMagneticElements(java.io.Serializable):
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    def getDeclination(self) -> float: ...
    def getFieldVector(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getHorizontalIntensity(self) -> float: ...
    def getInclination(self) -> float: ...
    def getTotalIntensity(self) -> float: ...
    def toString(self) -> str: ...

class GeoMagneticField:
    def calculateField(self, double: float, double2: float, double3: float) -> GeoMagneticElements: ...
    @staticmethod
    def getDecimalYear(int: int, int2: int, int3: int) -> float: ...
    def getEpoch(self) -> float: ...
    def getModelName(self) -> str: ...
    def supportsTimeTransform(self) -> bool: ...
    @typing.overload
    def transformModel(self, double: float) -> 'GeoMagneticField': ...
    @typing.overload
    def transformModel(self, geoMagneticField: 'GeoMagneticField', double: float) -> 'GeoMagneticField': ...
    def validFrom(self) -> float: ...
    def validTo(self) -> float: ...

class GeoMagneticFieldFactory:
    @staticmethod
    def getField(fieldModel: 'GeoMagneticFieldFactory.FieldModel', double: float) -> GeoMagneticField: ...
    @staticmethod
    def getGeoMagneticFields() -> 'LazyLoadedGeoMagneticFields': ...
    @staticmethod
    def getIGRF(double: float) -> GeoMagneticField: ...
    @staticmethod
    def getWMM(double: float) -> GeoMagneticField: ...
    class FieldModel(java.lang.Enum['GeoMagneticFieldFactory.FieldModel']):
        WMM: typing.ClassVar['GeoMagneticFieldFactory.FieldModel'] = ...
        IGRF: typing.ClassVar['GeoMagneticFieldFactory.FieldModel'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'GeoMagneticFieldFactory.FieldModel': ...
        @staticmethod
        def values() -> typing.List['GeoMagneticFieldFactory.FieldModel']: ...

class GeoMagneticFields:
    def getField(self, fieldModel: GeoMagneticFieldFactory.FieldModel, double: float) -> GeoMagneticField: ...
    def getIGRF(self, double: float) -> GeoMagneticField: ...
    def getWMM(self, double: float) -> GeoMagneticField: ...

class GeoMagneticModelLoader(org.orekit.data.DataLoader):
    def __init__(self): ...
    def getModels(self) -> java.util.Collection[GeoMagneticField]: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...

class Geoid(EarthShape):
    def __init__(self, normalizedSphericalHarmonicsProvider: org.orekit.forces.gravity.potential.NormalizedSphericalHarmonicsProvider, referenceEllipsoid: 'ReferenceEllipsoid'): ...
    def getBodyFrame(self) -> org.orekit.frames.Frame: ...
    def getEllipsoid(self) -> 'ReferenceEllipsoid': ...
    _getIntersectionPoint_0__T = typing.TypeVar('_getIntersectionPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getIntersectionPoint(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_getIntersectionPoint_0__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getIntersectionPoint_0__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getIntersectionPoint_0__T]) -> org.orekit.bodies.FieldGeodeticPoint[_getIntersectionPoint_0__T]: ...
    @typing.overload
    def getIntersectionPoint(self, line: org.hipparchus.geometry.euclidean.threed.Line, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.bodies.GeodeticPoint: ...
    def getUndulation(self, double: float, double2: float, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def projectToGround(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def projectToGround(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    _transform_0__T = typing.TypeVar('_transform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _transform_2__T = typing.TypeVar('_transform_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transform(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_transform_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_0__T]: ...
    @typing.overload
    def transform(self, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def transform(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_2__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transform_2__T]) -> org.orekit.bodies.FieldGeodeticPoint[_transform_2__T]: ...
    @typing.overload
    def transform(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.bodies.GeodeticPoint: ...

class LazyLoadedGeoMagneticFields(GeoMagneticFields):
    def __init__(self, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def getField(self, fieldModel: GeoMagneticFieldFactory.FieldModel, double: float) -> GeoMagneticField: ...
    def getIGRF(self, double: float) -> GeoMagneticField: ...
    def getWMM(self, double: float) -> GeoMagneticField: ...

class PythonEarthShape(EarthShape):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getBodyFrame(self) -> org.orekit.frames.Frame: ...
    def getEllipsoid(self) -> 'ReferenceEllipsoid': ...
    _getIntersectionPoint_0__T = typing.TypeVar('_getIntersectionPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getIntersectionPoint(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_getIntersectionPoint_0__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getIntersectionPoint_0__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getIntersectionPoint_0__T]) -> org.orekit.bodies.FieldGeodeticPoint[_getIntersectionPoint_0__T]: ...
    @typing.overload
    def getIntersectionPoint(self, line: org.hipparchus.geometry.euclidean.threed.Line, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.bodies.GeodeticPoint: ...
    @typing.overload
    def projectToGround(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def projectToGround(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _transform_0__T = typing.TypeVar('_transform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _transform_2__T = typing.TypeVar('_transform_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transform(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_transform_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_0__T]: ...
    @typing.overload
    def transform(self, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def transform(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_2__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transform_2__T]) -> org.orekit.bodies.FieldGeodeticPoint[_transform_2__T]: ...
    @typing.overload
    def transform(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.bodies.GeodeticPoint: ...

class PythonGeoMagneticFields(GeoMagneticFields):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getField(self, fieldModel: GeoMagneticFieldFactory.FieldModel, double: float) -> GeoMagneticField: ...
    def getIGRF(self, double: float) -> GeoMagneticField: ...
    def getWMM(self, double: float) -> GeoMagneticField: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class ReferenceEllipsoid(org.orekit.bodies.OneAxisEllipsoid, EarthShape):
    def __init__(self, double: float, double2: float, frame: org.orekit.frames.Frame, double3: float, double4: float): ...
    def getC2n0(self, int: int) -> float: ...
    def getEllipsoid(self) -> 'ReferenceEllipsoid': ...
    def getGM(self) -> float: ...
    @staticmethod
    def getGrs80(frame: org.orekit.frames.Frame) -> 'ReferenceEllipsoid': ...
    @staticmethod
    def getIers2003(frame: org.orekit.frames.Frame) -> 'ReferenceEllipsoid': ...
    @staticmethod
    def getIers2010(frame: org.orekit.frames.Frame) -> 'ReferenceEllipsoid': ...
    @staticmethod
    def getIers96(frame: org.orekit.frames.Frame) -> 'ReferenceEllipsoid': ...
    def getNormalGravity(self, double: float) -> float: ...
    def getPolarRadius(self) -> float: ...
    def getSpin(self) -> float: ...
    @staticmethod
    def getWgs84(frame: org.orekit.frames.Frame) -> 'ReferenceEllipsoid': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth")``.

    EarthITU453AtmosphereRefraction: typing.Type[EarthITU453AtmosphereRefraction]
    EarthShape: typing.Type[EarthShape]
    EarthStandardAtmosphereRefraction: typing.Type[EarthStandardAtmosphereRefraction]
    GeoMagneticElements: typing.Type[GeoMagneticElements]
    GeoMagneticField: typing.Type[GeoMagneticField]
    GeoMagneticFieldFactory: typing.Type[GeoMagneticFieldFactory]
    GeoMagneticFields: typing.Type[GeoMagneticFields]
    GeoMagneticModelLoader: typing.Type[GeoMagneticModelLoader]
    Geoid: typing.Type[Geoid]
    LazyLoadedGeoMagneticFields: typing.Type[LazyLoadedGeoMagneticFields]
    PythonEarthShape: typing.Type[PythonEarthShape]
    PythonGeoMagneticFields: typing.Type[PythonGeoMagneticFields]
    ReferenceEllipsoid: typing.Type[ReferenceEllipsoid]
    atmosphere: org.orekit.models.earth.atmosphere.__module_protocol__
    displacement: org.orekit.models.earth.displacement.__module_protocol__
    ionosphere: org.orekit.models.earth.ionosphere.__module_protocol__
    tessellation: org.orekit.models.earth.tessellation.__module_protocol__
    troposphere: org.orekit.models.earth.troposphere.__module_protocol__
    weather: org.orekit.models.earth.weather.__module_protocol__
