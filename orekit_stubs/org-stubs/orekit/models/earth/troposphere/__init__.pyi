import java.io
import java.lang
import java.util
import org.hipparchus
import org.orekit.bodies
import org.orekit.data
import org.orekit.models.earth.weather
import org.orekit.models.earth.weather.water
import org.orekit.time
import org.orekit.utils
import org.orekit.utils.units
import typing



class AzimuthalGradientCoefficients:
    def __init__(self, double: float, double2: float, double3: float, double4: float): ...
    def getGeh(self) -> float: ...
    def getGew(self) -> float: ...
    def getGnh(self) -> float: ...
    def getGnw(self) -> float: ...

class AzimuthalGradientProvider:
    _getGradientCoefficients_1__T = typing.TypeVar('_getGradientCoefficients_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getGradientCoefficients(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> AzimuthalGradientCoefficients: ...
    @typing.overload
    def getGradientCoefficients(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getGradientCoefficients_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getGradientCoefficients_1__T]) -> 'FieldAzimuthalGradientCoefficients'[_getGradientCoefficients_1__T]: ...

class DiscreteTroposphericModel(org.orekit.utils.ParameterDriversProvider):
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...

_FieldAzimuthalGradientCoefficients__T = typing.TypeVar('_FieldAzimuthalGradientCoefficients__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAzimuthalGradientCoefficients(typing.Generic[_FieldAzimuthalGradientCoefficients__T]):
    def __init__(self, t: _FieldAzimuthalGradientCoefficients__T, t2: _FieldAzimuthalGradientCoefficients__T, t3: _FieldAzimuthalGradientCoefficients__T, t4: _FieldAzimuthalGradientCoefficients__T): ...
    def getGeh(self) -> _FieldAzimuthalGradientCoefficients__T: ...
    def getGew(self) -> _FieldAzimuthalGradientCoefficients__T: ...
    def getGnh(self) -> _FieldAzimuthalGradientCoefficients__T: ...
    def getGnw(self) -> _FieldAzimuthalGradientCoefficients__T: ...

_FieldTroposphericDelay__T = typing.TypeVar('_FieldTroposphericDelay__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldTroposphericDelay(typing.Generic[_FieldTroposphericDelay__T]):
    def __init__(self, t: _FieldTroposphericDelay__T, t2: _FieldTroposphericDelay__T, t3: _FieldTroposphericDelay__T, t4: _FieldTroposphericDelay__T): ...
    def getDelay(self) -> _FieldTroposphericDelay__T: ...
    def getSh(self) -> _FieldTroposphericDelay__T: ...
    def getSw(self) -> _FieldTroposphericDelay__T: ...
    def getZh(self) -> _FieldTroposphericDelay__T: ...
    def getZw(self) -> _FieldTroposphericDelay__T: ...

_FieldViennaACoefficients__T = typing.TypeVar('_FieldViennaACoefficients__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldViennaACoefficients(typing.Generic[_FieldViennaACoefficients__T]):
    def __init__(self, t: _FieldViennaACoefficients__T, t2: _FieldViennaACoefficients__T): ...
    def getAh(self) -> _FieldViennaACoefficients__T: ...
    def getAw(self) -> _FieldViennaACoefficients__T: ...

class MappingFunction:
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class TroposphereMappingFunction:
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class TroposphericDelay:
    def __init__(self, double: float, double2: float, double3: float, double4: float): ...
    def getDelay(self) -> float: ...
    def getSh(self) -> float: ...
    def getSw(self) -> float: ...
    def getZh(self) -> float: ...
    def getZw(self) -> float: ...

class TroposphericModel(org.orekit.utils.ParameterDriversProvider):
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class TroposphericModelUtils:
    NANO_M: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    MICRO_M: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    HECTO_PASCAL: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    STANDARD_ATMOSPHERE: typing.ClassVar[org.orekit.models.earth.weather.PressureTemperatureHumidity] = ...
    STANDARD_ATMOSPHERE_PROVIDER: typing.ClassVar[org.orekit.models.earth.weather.PressureTemperatureHumidityProvider] = ...
    _computeHeightCorrection_1__T = typing.TypeVar('_computeHeightCorrection_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def computeHeightCorrection(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def computeHeightCorrection(t: _computeHeightCorrection_1__T, t2: _computeHeightCorrection_1__T, field: org.hipparchus.Field[_computeHeightCorrection_1__T]) -> _computeHeightCorrection_1__T: ...
    _mappingFunction_1__T = typing.TypeVar('_mappingFunction_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def mappingFunction(double: float, double2: float, double3: float, double4: float) -> float: ...
    @typing.overload
    @staticmethod
    def mappingFunction(t: _mappingFunction_1__T, t2: _mappingFunction_1__T, t3: _mappingFunction_1__T, t4: _mappingFunction_1__T) -> _mappingFunction_1__T: ...

class ViennaACoefficients:
    def __init__(self, double: float, double2: float): ...
    def getAh(self) -> float: ...
    def getAw(self) -> float: ...

class ViennaAProvider:
    _getA_0__T = typing.TypeVar('_getA_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getA(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getA_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getA_0__T]) -> FieldViennaACoefficients[_getA_0__T]: ...
    @typing.overload
    def getA(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> ViennaACoefficients: ...

class ViennaModelCoefficientsLoader(org.orekit.data.AbstractSelfFeedingLoader, org.orekit.data.DataLoader):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, viennaModelType: 'ViennaModelType'): ...
    @typing.overload
    def __init__(self, string: str, double: float, double2: float, viennaModelType: 'ViennaModelType'): ...
    @typing.overload
    def __init__(self, string: str, double: float, double2: float, viennaModelType: 'ViennaModelType', dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def getA(self) -> typing.List[float]: ...
    def getSupportedNames(self) -> str: ...
    def getZenithDelay(self) -> typing.List[float]: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    @typing.overload
    def loadViennaCoefficients(self) -> None: ...
    @typing.overload
    def loadViennaCoefficients(self, dateTimeComponents: org.orekit.time.DateTimeComponents) -> None: ...
    def stillAcceptsData(self) -> bool: ...

class ViennaModelType(java.lang.Enum['ViennaModelType']):
    VIENNA_ONE: typing.ClassVar['ViennaModelType'] = ...
    VIENNA_THREE: typing.ClassVar['ViennaModelType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ViennaModelType': ...
    @staticmethod
    def values() -> typing.List['ViennaModelType']: ...

class AbstractChaoMappingFunction(TroposphereMappingFunction):
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class AbstractVienna(TroposphericModel, TroposphereMappingFunction):
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class AskneNordiusModel(TroposphericModel):
    LOW_ELEVATION_THRESHOLD: typing.ClassVar[float] = ...
    def __init__(self, troposphereMappingFunction: TroposphereMappingFunction): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class CanonicalSaastamoinenModel(TroposphericModel):
    DEFAULT_LOW_ELEVATION_THRESHOLD: typing.ClassVar[float] = ...
    def __init__(self): ...
    def getLowElevationThreshold(self) -> float: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...
    def setLowElevationThreshold(self, double: float) -> None: ...

class ConstantAzimuthalGradientProvider(AzimuthalGradientProvider):
    def __init__(self, azimuthalGradientCoefficients: AzimuthalGradientCoefficients): ...
    _getGradientCoefficients_1__T = typing.TypeVar('_getGradientCoefficients_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getGradientCoefficients(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> AzimuthalGradientCoefficients: ...
    @typing.overload
    def getGradientCoefficients(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getGradientCoefficients_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getGradientCoefficients_1__T]) -> FieldAzimuthalGradientCoefficients[_getGradientCoefficients_1__T]: ...

class ConstantTroposphericModel(TroposphericModel):
    def __init__(self, troposphericDelay: TroposphericDelay): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class ConstantViennaAProvider(ViennaAProvider):
    def __init__(self, viennaACoefficients: ViennaACoefficients): ...
    _getA_0__T = typing.TypeVar('_getA_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getA(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getA_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getA_0__T]) -> FieldViennaACoefficients[_getA_0__T]: ...
    @typing.overload
    def getA(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> ViennaACoefficients: ...

class DummyMappingFunction(TroposphereMappingFunction):
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class EstimatedModel(TroposphericModel):
    TOTAL_ZENITH_DELAY: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, troposphereMappingFunction: TroposphereMappingFunction, double4: float): ...
    @typing.overload
    def __init__(self, troposphereMappingFunction: TroposphereMappingFunction, double: float): ...
    @typing.overload
    def __init__(self, troposphericModel: TroposphericModel, troposphereMappingFunction: TroposphereMappingFunction, double: float): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class FixedTroposphericDelay(DiscreteTroposphericModel, TroposphericModel):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[typing.List[float]]): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    @staticmethod
    def getDefaultModel() -> 'FixedTroposphericDelay': ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class GlobalMappingFunctionModel(MappingFunction, TroposphereMappingFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    _mappingFactors_2__T = typing.TypeVar('_mappingFactors_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _mappingFactors_3__T = typing.TypeVar('_mappingFactors_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_2__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_2__T]) -> typing.List[_mappingFactors_2__T]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_3__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_3__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_3__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_3__T]) -> typing.List[_mappingFactors_3__T]: ...

class MariniMurray(TroposphericModel):
    def __init__(self, double: float, unit: org.orekit.utils.units.Unit): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class MendesPavlisModel(DiscreteTroposphericModel, TroposphericModel, MappingFunction, TroposphereMappingFunction):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float): ...
    @typing.overload
    def __init__(self, pressureTemperatureHumidityProvider: org.orekit.models.earth.weather.PressureTemperatureHumidityProvider, double: float, unit: org.orekit.utils.units.Unit): ...
    _computeZenithDelay_1__T = typing.TypeVar('_computeZenithDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeZenithDelay(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def computeZenithDelay(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_computeZenithDelay_1__T], tArray: typing.List[_computeZenithDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_computeZenithDelay_1__T]) -> typing.List[_computeZenithDelay_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    @typing.overload
    @staticmethod
    def getStandardModel(double: float) -> 'MendesPavlisModel': ...
    @typing.overload
    @staticmethod
    def getStandardModel(double: float, unit: org.orekit.utils.units.Unit) -> 'MendesPavlisModel': ...
    _mappingFactors_2__T = typing.TypeVar('_mappingFactors_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _mappingFactors_3__T = typing.TypeVar('_mappingFactors_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_2__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_2__T]) -> typing.List[_mappingFactors_2__T]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_3__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_3__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_3__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_3__T]) -> typing.List[_mappingFactors_3__T]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class ModifiedHopfieldModel(TroposphericModel):
    def __init__(self): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class ModifiedSaastamoinenModel(TroposphericModel, DiscreteTroposphericModel):
    DELTA_R_FILE_NAME: typing.ClassVar[str] = ...
    DEFAULT_LOW_ELEVATION_THRESHOLD: typing.ClassVar[float] = ...
    WATER: typing.ClassVar[org.orekit.models.earth.weather.water.Wang1988] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, string: str): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    @typing.overload
    def __init__(self, pressureTemperatureHumidityProvider: org.orekit.models.earth.weather.PressureTemperatureHumidityProvider): ...
    @typing.overload
    def __init__(self, pressureTemperatureHumidityProvider: org.orekit.models.earth.weather.PressureTemperatureHumidityProvider, string: str): ...
    @typing.overload
    def __init__(self, pressureTemperatureHumidityProvider: org.orekit.models.earth.weather.PressureTemperatureHumidityProvider, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def getLowElevationThreshold(self) -> float: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getPth0Provider(self) -> org.orekit.models.earth.weather.PressureTemperatureHumidityProvider: ...
    @staticmethod
    def getStandardModel() -> 'ModifiedSaastamoinenModel': ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...
    def setLowElevationThreshold(self, double: float) -> None: ...

class NiellMappingFunctionModel(MappingFunction, TroposphereMappingFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    _mappingFactors_2__T = typing.TypeVar('_mappingFactors_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _mappingFactors_3__T = typing.TypeVar('_mappingFactors_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_2__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_2__T]) -> typing.List[_mappingFactors_2__T]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_3__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_3__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_3__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_3__T]) -> typing.List[_mappingFactors_3__T]: ...

class PythonAzimuthalGradientProvider(AzimuthalGradientProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getGradientCoefficients_1__T = typing.TypeVar('_getGradientCoefficients_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getGradientCoefficients(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> AzimuthalGradientCoefficients: ...
    @typing.overload
    def getGradientCoefficients(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getGradientCoefficients_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getGradientCoefficients_1__T]) -> FieldAzimuthalGradientCoefficients[_getGradientCoefficients_1__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonDiscreteTroposphericModel(DiscreteTroposphericModel):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getParameters_1__T = typing.TypeVar('_getParameters_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _getParameters_3__T = typing.TypeVar('_getParameters_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getParameters(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def getParameters(self, field: org.hipparchus.Field[_getParameters_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getParameters_1__T]) -> typing.List[_getParameters_1__T]: ...
    @typing.overload
    def getParameters(self) -> typing.List[float]: ...
    @typing.overload
    def getParameters(self, field: org.hipparchus.Field[_getParameters_3__T]) -> typing.List[_getParameters_3__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonMappingFunction(MappingFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonTroposphericModel(TroposphericModel):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonViennaAProvider(ViennaAProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getA_0__T = typing.TypeVar('_getA_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getA(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getA_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getA_0__T]) -> FieldViennaACoefficients[_getA_0__T]: ...
    @typing.overload
    def getA(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> ViennaACoefficients: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class TimeSpanEstimatedModel(TroposphericModel):
    DATE_BEFORE: typing.ClassVar[str] = ...
    DATE_AFTER: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, estimatedModel: EstimatedModel): ...
    @typing.overload
    def __init__(self, estimatedModel: EstimatedModel, timeScale: org.orekit.time.TimeScale): ...
    def addTroposphericModelValidAfter(self, estimatedModel: EstimatedModel, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addTroposphericModelValidBefore(self, estimatedModel: EstimatedModel, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    _extractParameters_1__T = typing.TypeVar('_extractParameters_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def extractParameters(self, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def extractParameters(self, tArray: typing.List[_extractParameters_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_extractParameters_1__T]) -> typing.List[_extractParameters_1__T]: ...
    def getFirstSpan(self) -> org.orekit.utils.TimeSpanMap.Span[EstimatedModel]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getTroposphericModel(self, absoluteDate: org.orekit.time.AbsoluteDate) -> EstimatedModel: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class TimeSpanEstimatedTroposphericModel(DiscreteTroposphericModel):
    DATE_BEFORE: typing.ClassVar[str] = ...
    DATE_AFTER: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, estimatedTroposphericModel: 'EstimatedTroposphericModel'): ...
    @typing.overload
    def __init__(self, estimatedTroposphericModel: 'EstimatedTroposphericModel', timeScale: org.orekit.time.TimeScale): ...
    def addTroposphericModelValidAfter(self, estimatedTroposphericModel: 'EstimatedTroposphericModel', absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addTroposphericModelValidBefore(self, estimatedTroposphericModel: 'EstimatedTroposphericModel', absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    _extractParameters_1__T = typing.TypeVar('_extractParameters_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def extractParameters(self, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def extractParameters(self, tArray: typing.List[_extractParameters_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_extractParameters_1__T]) -> typing.List[_extractParameters_1__T]: ...
    def getFirstSpan(self) -> org.orekit.utils.TimeSpanMap.Span['EstimatedTroposphericModel']: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getTroposphericModel(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'EstimatedTroposphericModel': ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...

class TroposphereMappingFunctionAdapter(TroposphereMappingFunction):
    def __init__(self, mappingFunction: MappingFunction): ...
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class TroposphericModelAdapter(TroposphericModel):
    def __init__(self, discreteTroposphericModel: DiscreteTroposphericModel): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_0__T = typing.TypeVar('_pathDelay_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_0__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_0__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_0__T], tArray: typing.List[_pathDelay_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_0__T]) -> FieldTroposphericDelay[_pathDelay_0__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class ChaoMappingFunction(AbstractChaoMappingFunction):
    def __init__(self): ...

class EstimatedTroposphericModel(EstimatedModel, DiscreteTroposphericModel):
    TOTAL_ZENITH_DELAY: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, mappingFunction: MappingFunction, double3: float): ...
    @typing.overload
    def __init__(self, discreteTroposphericModel: DiscreteTroposphericModel, mappingFunction: MappingFunction, double: float): ...
    @typing.overload
    def __init__(self, mappingFunction: MappingFunction, double: float): ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class MariniMurrayModel(MariniMurray, DiscreteTroposphericModel):
    def __init__(self, double: float, double2: float, double3: float, double4: float): ...
    @staticmethod
    def getStandardModel(double: float) -> 'MariniMurrayModel': ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class PythonAbstractVienna(AbstractVienna):
    def __init__(self, viennaAProvider: ViennaAProvider, azimuthalGradientProvider: AzimuthalGradientProvider, troposphericModel: TroposphericModel, timeScale: org.orekit.time.TimeScale): ...
    def finalize(self) -> None: ...
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class RevisedChaoMappingFunction(AbstractChaoMappingFunction):
    def __init__(self): ...

class SaastamoinenModel(ModifiedSaastamoinenModel):
    DELTA_R_FILE_NAME: typing.ClassVar[str] = ...
    DEFAULT_LOW_ELEVATION_THRESHOLD: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, string: str): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    @typing.overload
    @staticmethod
    def getStandardModel() -> ModifiedSaastamoinenModel: ...
    @typing.overload
    @staticmethod
    def getStandardModel() -> 'SaastamoinenModel': ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class ViennaOne(AbstractVienna):
    def __init__(self, viennaAProvider: ViennaAProvider, azimuthalGradientProvider: AzimuthalGradientProvider, troposphericModel: TroposphericModel, timeScale: org.orekit.time.TimeScale): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class ViennaThree(AbstractVienna):
    def __init__(self, viennaAProvider: ViennaAProvider, azimuthalGradientProvider: AzimuthalGradientProvider, troposphericModel: TroposphericModel, timeScale: org.orekit.time.TimeScale): ...
    _mappingFactors_1__T = typing.TypeVar('_mappingFactors_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_1__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_1__T]) -> typing.List[_mappingFactors_1__T]: ...

class ViennaOneModel(ViennaOne, DiscreteTroposphericModel, MappingFunction):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], timeScale: org.orekit.time.TimeScale): ...
    _computeZenithDelay_1__T = typing.TypeVar('_computeZenithDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeZenithDelay(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def computeZenithDelay(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_computeZenithDelay_1__T], tArray: typing.List[_computeZenithDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_computeZenithDelay_1__T]) -> typing.List[_computeZenithDelay_1__T]: ...
    _mappingFactors_2__T = typing.TypeVar('_mappingFactors_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _mappingFactors_3__T = typing.TypeVar('_mappingFactors_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_2__T]) -> typing.List[_mappingFactors_2__T]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_3__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_3__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_3__T]) -> typing.List[_mappingFactors_3__T]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...

class ViennaThreeModel(ViennaThree, DiscreteTroposphericModel, MappingFunction):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], timeScale: org.orekit.time.TimeScale): ...
    _computeZenithDelay_1__T = typing.TypeVar('_computeZenithDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def computeZenithDelay(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def computeZenithDelay(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_computeZenithDelay_1__T], tArray: typing.List[_computeZenithDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_computeZenithDelay_1__T]) -> typing.List[_computeZenithDelay_1__T]: ...
    _mappingFactors_2__T = typing.TypeVar('_mappingFactors_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _mappingFactors_3__T = typing.TypeVar('_mappingFactors_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactors(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def mappingFactors(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_mappingFactors_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_mappingFactors_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_2__T]) -> typing.List[_mappingFactors_2__T]: ...
    @typing.overload
    def mappingFactors(self, t: _mappingFactors_3__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_mappingFactors_3__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mappingFactors_3__T]) -> typing.List[_mappingFactors_3__T]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, geodeticPoint: org.orekit.bodies.GeodeticPoint, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_1__T, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_1__T], tArray: typing.List[_pathDelay_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    @typing.overload
    def pathDelay(self, fieldTrackingCoordinates: org.orekit.utils.FieldTrackingCoordinates[_pathDelay_2__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_2__T], fieldPressureTemperatureHumidity: org.orekit.models.earth.weather.FieldPressureTemperatureHumidity[_pathDelay_2__T], tArray: typing.List[_pathDelay_2__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_2__T]) -> FieldTroposphericDelay[_pathDelay_2__T]: ...
    @typing.overload
    def pathDelay(self, trackingCoordinates: org.orekit.utils.TrackingCoordinates, geodeticPoint: org.orekit.bodies.GeodeticPoint, pressureTemperatureHumidity: org.orekit.models.earth.weather.PressureTemperatureHumidity, doubleArray: typing.List[float], absoluteDate: org.orekit.time.AbsoluteDate) -> TroposphericDelay: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.troposphere")``.

    AbstractChaoMappingFunction: typing.Type[AbstractChaoMappingFunction]
    AbstractVienna: typing.Type[AbstractVienna]
    AskneNordiusModel: typing.Type[AskneNordiusModel]
    AzimuthalGradientCoefficients: typing.Type[AzimuthalGradientCoefficients]
    AzimuthalGradientProvider: typing.Type[AzimuthalGradientProvider]
    CanonicalSaastamoinenModel: typing.Type[CanonicalSaastamoinenModel]
    ChaoMappingFunction: typing.Type[ChaoMappingFunction]
    ConstantAzimuthalGradientProvider: typing.Type[ConstantAzimuthalGradientProvider]
    ConstantTroposphericModel: typing.Type[ConstantTroposphericModel]
    ConstantViennaAProvider: typing.Type[ConstantViennaAProvider]
    DiscreteTroposphericModel: typing.Type[DiscreteTroposphericModel]
    DummyMappingFunction: typing.Type[DummyMappingFunction]
    EstimatedModel: typing.Type[EstimatedModel]
    EstimatedTroposphericModel: typing.Type[EstimatedTroposphericModel]
    FieldAzimuthalGradientCoefficients: typing.Type[FieldAzimuthalGradientCoefficients]
    FieldTroposphericDelay: typing.Type[FieldTroposphericDelay]
    FieldViennaACoefficients: typing.Type[FieldViennaACoefficients]
    FixedTroposphericDelay: typing.Type[FixedTroposphericDelay]
    GlobalMappingFunctionModel: typing.Type[GlobalMappingFunctionModel]
    MappingFunction: typing.Type[MappingFunction]
    MariniMurray: typing.Type[MariniMurray]
    MariniMurrayModel: typing.Type[MariniMurrayModel]
    MendesPavlisModel: typing.Type[MendesPavlisModel]
    ModifiedHopfieldModel: typing.Type[ModifiedHopfieldModel]
    ModifiedSaastamoinenModel: typing.Type[ModifiedSaastamoinenModel]
    NiellMappingFunctionModel: typing.Type[NiellMappingFunctionModel]
    PythonAbstractVienna: typing.Type[PythonAbstractVienna]
    PythonAzimuthalGradientProvider: typing.Type[PythonAzimuthalGradientProvider]
    PythonDiscreteTroposphericModel: typing.Type[PythonDiscreteTroposphericModel]
    PythonMappingFunction: typing.Type[PythonMappingFunction]
    PythonTroposphericModel: typing.Type[PythonTroposphericModel]
    PythonViennaAProvider: typing.Type[PythonViennaAProvider]
    RevisedChaoMappingFunction: typing.Type[RevisedChaoMappingFunction]
    SaastamoinenModel: typing.Type[SaastamoinenModel]
    TimeSpanEstimatedModel: typing.Type[TimeSpanEstimatedModel]
    TimeSpanEstimatedTroposphericModel: typing.Type[TimeSpanEstimatedTroposphericModel]
    TroposphereMappingFunction: typing.Type[TroposphereMappingFunction]
    TroposphereMappingFunctionAdapter: typing.Type[TroposphereMappingFunctionAdapter]
    TroposphericDelay: typing.Type[TroposphericDelay]
    TroposphericModel: typing.Type[TroposphericModel]
    TroposphericModelAdapter: typing.Type[TroposphericModelAdapter]
    TroposphericModelUtils: typing.Type[TroposphericModelUtils]
    ViennaACoefficients: typing.Type[ViennaACoefficients]
    ViennaAProvider: typing.Type[ViennaAProvider]
    ViennaModelCoefficientsLoader: typing.Type[ViennaModelCoefficientsLoader]
    ViennaModelType: typing.Type[ViennaModelType]
    ViennaOne: typing.Type[ViennaOne]
    ViennaOneModel: typing.Type[ViennaOneModel]
    ViennaThree: typing.Type[ViennaThree]
    ViennaThreeModel: typing.Type[ViennaThreeModel]
