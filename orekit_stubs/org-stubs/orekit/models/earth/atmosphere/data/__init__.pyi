import java.io
import java.lang
import java.util
import org.orekit.data
import org.orekit.models.earth.atmosphere
import org.orekit.time
import org.orekit.utils
import typing



_AbstractSolarActivityData__L = typing.TypeVar('_AbstractSolarActivityData__L', bound='AbstractSolarActivityDataLoader.LineParameters')  # <L>
_AbstractSolarActivityData__D = typing.TypeVar('_AbstractSolarActivityData__D', bound='AbstractSolarActivityDataLoader')  # <D>
class AbstractSolarActivityData(org.orekit.models.earth.atmosphere.DTM2000InputParameters, org.orekit.models.earth.atmosphere.NRLMSISE00InputParameters, typing.Generic[_AbstractSolarActivityData__L, _AbstractSolarActivityData__D]):
    def __init__(self, dataSource: org.orekit.data.DataSource, d2: _AbstractSolarActivityData__D, timeScale: org.orekit.time.TimeScale, int: int, double: float, double2: float, double3: float): ...
    def getCache(self) -> org.orekit.utils.GenericTimeStampedCache[_AbstractSolarActivityData__L]: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getSupportedNames(self) -> str: ...
    def getUTC(self) -> org.orekit.time.TimeScale: ...

_AbstractSolarActivityDataLoader__L = typing.TypeVar('_AbstractSolarActivityDataLoader__L', bound='AbstractSolarActivityDataLoader.LineParameters')  # <L>
class AbstractSolarActivityDataLoader(org.orekit.data.DataLoader, typing.Generic[_AbstractSolarActivityDataLoader__L]):
    def getDataSet(self) -> java.util.SortedSet[_AbstractSolarActivityDataLoader__L]: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getUTC(self) -> org.orekit.time.TimeScale: ...
    def setMaxDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setMinDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def stillAcceptsData(self) -> bool: ...
    class LineParameters(org.orekit.time.TimeStamped, java.lang.Comparable['AbstractSolarActivityDataLoader.LineParameters'], java.io.Serializable):
        def compareTo(self, lineParameters: 'AbstractSolarActivityDataLoader.LineParameters') -> int: ...
        def equals(self, object: typing.Any) -> bool: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def hashCode(self) -> int: ...

class DtcDataLoader(org.orekit.data.DataLoader):
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    def getDataSet(self) -> java.util.SortedSet['DtcDataLoader.LineParameters']: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...
    class LineParameters(org.orekit.time.TimeStamped, java.io.Serializable):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
        def getDSTDTC(self) -> float: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...

class JB2008SpaceEnvironmentData(org.orekit.models.earth.atmosphere.JB2008InputParameters):
    DEFAULT_SUPPORTED_NAMES_SOLFSMY: typing.ClassVar[str] = ...
    DEFAULT_SUPPORTED_NAMES_DTC: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, dataSource2: org.orekit.data.DataSource): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, dataSource2: org.orekit.data.DataSource, timeScale: org.orekit.time.TimeScale): ...
    def getDSTDTC(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getF10(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getF10B(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getS10(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getS10B(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getXM10(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getXM10B(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getY10(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getY10B(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...

class SOLFSMYDataLoader(org.orekit.data.DataLoader):
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    def getDataSet(self) -> java.util.SortedSet['SOLFSMYDataLoader.LineParameters']: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...
    class LineParameters(org.orekit.time.TimeStamped, java.io.Serializable):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float): ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getF10(self) -> float: ...
        def getF10B(self) -> float: ...
        def getS10(self) -> float: ...
        def getS10B(self) -> float: ...
        def getXM10(self) -> float: ...
        def getXM10B(self) -> float: ...
        def getY10(self) -> float: ...
        def getY10B(self) -> float: ...

class CssiSpaceWeatherData(AbstractSolarActivityData['CssiSpaceWeatherDataLoader.LineParameters', 'CssiSpaceWeatherDataLoader']):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, string: str, cssiSpaceWeatherDataLoader: 'CssiSpaceWeatherDataLoader', dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, string: str, cssiSpaceWeatherDataLoader: 'CssiSpaceWeatherDataLoader', dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale, int: int, double: float, double2: float): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, cssiSpaceWeatherDataLoader: 'CssiSpaceWeatherDataLoader', timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, cssiSpaceWeatherDataLoader: 'CssiSpaceWeatherDataLoader', timeScale: org.orekit.time.TimeScale, int: int, double: float, double2: float): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScale: org.orekit.time.TimeScale): ...
    def get24HoursKp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getAp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    def getAverageFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getDailyFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getInstantFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMeanFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getThreeHourlyKP(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...

class CssiSpaceWeatherDataLoader(AbstractSolarActivityDataLoader['CssiSpaceWeatherDataLoader.LineParameters']):
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    def getDataSet(self) -> java.util.SortedSet['CssiSpaceWeatherDataLoader.LineParameters']: ...
    def getLastDailyPredictedDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getLastObservedDate(self) -> org.orekit.time.AbsoluteDate: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    class LineParameters(AbstractSolarActivityDataLoader.LineParameters):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], double2: float, doubleArray2: typing.List[float], double4: float, double5: float, int: int, double6: float, double7: float, double8: float, double9: float, double10: float): ...
        def compareTo(self, lineParameters: AbstractSolarActivityDataLoader.LineParameters) -> int: ...
        def equals(self, object: typing.Any) -> bool: ...
        def getApAvg(self) -> float: ...
        def getCtr81Adj(self) -> float: ...
        def getCtr81Obs(self) -> float: ...
        def getF107Adj(self) -> float: ...
        def getF107Obs(self) -> float: ...
        def getFluxQualifier(self) -> int: ...
        def getKpSum(self) -> float: ...
        def getLst81Adj(self) -> float: ...
        def getLst81Obs(self) -> float: ...
        @typing.overload
        def getThreeHourlyAp(self, int: int) -> float: ...
        @typing.overload
        def getThreeHourlyAp(self) -> typing.List[float]: ...
        @typing.overload
        def getThreeHourlyKp(self, int: int) -> float: ...
        @typing.overload
        def getThreeHourlyKp(self) -> typing.List[float]: ...
        def hashCode(self) -> int: ...

class MarshallSolarActivityFutureEstimation(AbstractSolarActivityData['MarshallSolarActivityFutureEstimationLoader.LineParameters', 'MarshallSolarActivityFutureEstimationLoader']):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel'): ...
    @typing.overload
    def __init__(self, string: str, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel', dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, string: str, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel', dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale, int: int, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel'): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel', timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel', timeScale: org.orekit.time.TimeScale, int: int, double: float, double2: float, double3: float): ...
    def get24HoursKp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getAp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    def getAverageFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getDailyFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getFileDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.time.DateComponents: ...
    def getInstantFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMeanFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getStrengthLevel(self) -> 'MarshallSolarActivityFutureEstimation.StrengthLevel': ...
    def getThreeHourlyKP(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    class StrengthLevel(java.lang.Enum['MarshallSolarActivityFutureEstimation.StrengthLevel']):
        STRONG: typing.ClassVar['MarshallSolarActivityFutureEstimation.StrengthLevel'] = ...
        AVERAGE: typing.ClassVar['MarshallSolarActivityFutureEstimation.StrengthLevel'] = ...
        WEAK: typing.ClassVar['MarshallSolarActivityFutureEstimation.StrengthLevel'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'MarshallSolarActivityFutureEstimation.StrengthLevel': ...
        @staticmethod
        def values() -> typing.List['MarshallSolarActivityFutureEstimation.StrengthLevel']: ...

class MarshallSolarActivityFutureEstimationLoader(AbstractSolarActivityDataLoader['MarshallSolarActivityFutureEstimationLoader.LineParameters']):
    @typing.overload
    def __init__(self, strengthLevel: MarshallSolarActivityFutureEstimation.StrengthLevel): ...
    @typing.overload
    def __init__(self, strengthLevel: MarshallSolarActivityFutureEstimation.StrengthLevel, timeScale: org.orekit.time.TimeScale): ...
    def getDataSet(self) -> java.util.SortedSet['MarshallSolarActivityFutureEstimationLoader.LineParameters']: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    class LineParameters(AbstractSolarActivityDataLoader.LineParameters):
        def compareTo(self, lineParameters: AbstractSolarActivityDataLoader.LineParameters) -> int: ...
        def equals(self, object: typing.Any) -> bool: ...
        def getAp(self) -> float: ...
        def getF107(self) -> float: ...
        def getFileDate(self) -> org.orekit.time.DateComponents: ...
        def hashCode(self) -> int: ...

_PythonAbstractSolarActivityData__L = typing.TypeVar('_PythonAbstractSolarActivityData__L', bound=AbstractSolarActivityDataLoader.LineParameters)  # <L>
_PythonAbstractSolarActivityData__D = typing.TypeVar('_PythonAbstractSolarActivityData__D', bound=AbstractSolarActivityDataLoader)  # <D>
class PythonAbstractSolarActivityData(AbstractSolarActivityData[_PythonAbstractSolarActivityData__L, _PythonAbstractSolarActivityData__D], typing.Generic[_PythonAbstractSolarActivityData__L, _PythonAbstractSolarActivityData__D]):
    def __init__(self, string: str, d: _PythonAbstractSolarActivityData__D, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale, int: int, double: float, double2: float, double3: float): ...
    def finalize(self) -> None: ...
    def get24HoursKp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getAp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    def getAverageFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getDailyFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getInstantFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMeanFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getThreeHourlyKP(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.atmosphere.data")``.

    AbstractSolarActivityData: typing.Type[AbstractSolarActivityData]
    AbstractSolarActivityDataLoader: typing.Type[AbstractSolarActivityDataLoader]
    CssiSpaceWeatherData: typing.Type[CssiSpaceWeatherData]
    CssiSpaceWeatherDataLoader: typing.Type[CssiSpaceWeatherDataLoader]
    DtcDataLoader: typing.Type[DtcDataLoader]
    JB2008SpaceEnvironmentData: typing.Type[JB2008SpaceEnvironmentData]
    MarshallSolarActivityFutureEstimation: typing.Type[MarshallSolarActivityFutureEstimation]
    MarshallSolarActivityFutureEstimationLoader: typing.Type[MarshallSolarActivityFutureEstimationLoader]
    PythonAbstractSolarActivityData: typing.Type[PythonAbstractSolarActivityData]
    SOLFSMYDataLoader: typing.Type[SOLFSMYDataLoader]
