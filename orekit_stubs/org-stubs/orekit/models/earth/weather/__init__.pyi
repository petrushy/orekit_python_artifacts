import org.hipparchus
import org.orekit.bodies
import org.orekit.data
import org.orekit.frames
import org.orekit.models.earth
import org.orekit.models.earth.troposphere
import org.orekit.models.earth.weather.water
import org.orekit.time
import typing



class CellInterpolator: ...

_FieldCellInterpolator__T = typing.TypeVar('_FieldCellInterpolator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCellInterpolator(typing.Generic[_FieldCellInterpolator__T]): ...

_FieldPressureTemperature__T = typing.TypeVar('_FieldPressureTemperature__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldPressureTemperature(typing.Generic[_FieldPressureTemperature__T]):
    @typing.overload
    def __init__(self, t: _FieldPressureTemperature__T, t2: _FieldPressureTemperature__T, t3: _FieldPressureTemperature__T): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldPressureTemperature__T], pressureTemperatureHumidity: 'PressureTemperatureHumidity'): ...
    def getAltitude(self) -> _FieldPressureTemperature__T: ...
    def getPressure(self) -> _FieldPressureTemperature__T: ...
    def getTemperature(self) -> _FieldPressureTemperature__T: ...

class GlobalPressureTemperature:
    @typing.overload
    def __init__(self, geoid: org.orekit.models.earth.Geoid): ...
    @typing.overload
    def __init__(self, geoid: org.orekit.models.earth.Geoid, timeScale: org.orekit.time.TimeScale): ...
    def getWeatherParameters(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> 'PressureTemperature': ...

class HeightDependentPressureTemperatureHumidityConverter:
    def __init__(self, waterVaporPressureProvider: org.orekit.models.earth.weather.water.WaterVaporPressureProvider): ...
    _convert_0__T = typing.TypeVar('_convert_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def convert(self, fieldPressureTemperatureHumidity: 'FieldPressureTemperatureHumidity'[_convert_0__T], t: _convert_0__T) -> 'FieldPressureTemperatureHumidity'[_convert_0__T]: ...
    @typing.overload
    def convert(self, pressureTemperatureHumidity: 'PressureTemperatureHumidity', double: float) -> 'PressureTemperatureHumidity': ...

class PressureTemperature:
    def __init__(self, double: float, double2: float, double3: float): ...
    def getAltitude(self) -> float: ...
    def getPressure(self) -> float: ...
    def getTemperature(self) -> float: ...

class PressureTemperatureHumidityProvider:
    _getWeatherParamerers_0__T = typing.TypeVar('_getWeatherParamerers_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getWeatherParamerers(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getWeatherParamerers_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getWeatherParamerers_0__T]) -> 'FieldPressureTemperatureHumidity'[_getWeatherParamerers_0__T]: ...
    @typing.overload
    def getWeatherParamerers(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> 'PressureTemperatureHumidity': ...

class WeatherModel:
    def weatherParameters(self, double: float, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class AbstractGlobalPressureTemperature(org.orekit.models.earth.troposphere.ViennaAProvider, org.orekit.models.earth.troposphere.AzimuthalGradientProvider, PressureTemperatureHumidityProvider):
    _getA_0__T = typing.TypeVar('_getA_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getA(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getA_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getA_0__T]) -> org.orekit.models.earth.troposphere.FieldViennaACoefficients[_getA_0__T]: ...
    @typing.overload
    def getA(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.models.earth.troposphere.ViennaACoefficients: ...
    _getGradientCoefficients_1__T = typing.TypeVar('_getGradientCoefficients_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getGradientCoefficients(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.models.earth.troposphere.AzimuthalGradientCoefficients: ...
    @typing.overload
    def getGradientCoefficients(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getGradientCoefficients_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getGradientCoefficients_1__T]) -> org.orekit.models.earth.troposphere.FieldAzimuthalGradientCoefficients[_getGradientCoefficients_1__T]: ...
    _getWeatherParamerers_0__T = typing.TypeVar('_getWeatherParamerers_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getWeatherParamerers(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getWeatherParamerers_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getWeatherParamerers_0__T]) -> 'FieldPressureTemperatureHumidity'[_getWeatherParamerers_0__T]: ...
    @typing.overload
    def getWeatherParamerers(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> 'PressureTemperatureHumidity': ...

class ConstantPressureTemperatureHumidityProvider(PressureTemperatureHumidityProvider):
    def __init__(self, pressureTemperatureHumidity: 'PressureTemperatureHumidity'): ...
    _getWeatherParamerers_0__T = typing.TypeVar('_getWeatherParamerers_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getWeatherParamerers(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getWeatherParamerers_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getWeatherParamerers_0__T]) -> 'FieldPressureTemperatureHumidity'[_getWeatherParamerers_0__T]: ...
    @typing.overload
    def getWeatherParamerers(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> 'PressureTemperatureHumidity': ...

_FieldPressureTemperatureHumidity__T = typing.TypeVar('_FieldPressureTemperatureHumidity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldPressureTemperatureHumidity(FieldPressureTemperature[_FieldPressureTemperatureHumidity__T], typing.Generic[_FieldPressureTemperatureHumidity__T]):
    @typing.overload
    def __init__(self, t: _FieldPressureTemperatureHumidity__T, t2: _FieldPressureTemperatureHumidity__T, t3: _FieldPressureTemperatureHumidity__T, t4: _FieldPressureTemperatureHumidity__T, t5: _FieldPressureTemperatureHumidity__T, t6: _FieldPressureTemperatureHumidity__T): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldPressureTemperatureHumidity__T], pressureTemperatureHumidity: 'PressureTemperatureHumidity'): ...
    def getLambda(self) -> _FieldPressureTemperatureHumidity__T: ...
    def getTm(self) -> _FieldPressureTemperatureHumidity__T: ...
    def getWaterVaporPressure(self) -> _FieldPressureTemperatureHumidity__T: ...

class GlobalPressureTemperatureModel(GlobalPressureTemperature, WeatherModel):
    @typing.overload
    def __init__(self, double: float, double2: float, frame: org.orekit.frames.Frame): ...
    @typing.overload
    def __init__(self, double: float, double2: float, frame: org.orekit.frames.Frame, dataContext: org.orekit.data.DataContext): ...
    def getPressure(self) -> float: ...
    def getTemperature(self) -> float: ...
    def weatherParameters(self, double: float, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class PressureTemperatureHumidity(PressureTemperature):
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
    def getLambda(self) -> float: ...
    def getTm(self) -> float: ...
    def getWaterVaporPressure(self) -> float: ...

class PythonPressureTemperatureHumidityProvider(PressureTemperatureHumidityProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getWeatherParamerers_0__T = typing.TypeVar('_getWeatherParamerers_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getWeatherParamerers(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getWeatherParamerers_0__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getWeatherParamerers_0__T]) -> FieldPressureTemperatureHumidity[_getWeatherParamerers_0__T]: ...
    @typing.overload
    def getWeatherParamerers(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> PressureTemperatureHumidity: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonWeatherModel(WeatherModel):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def weatherParameters(self, double: float, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class GlobalPressureTemperature2(AbstractGlobalPressureTemperature):
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScale: org.orekit.time.TimeScale): ...

class GlobalPressureTemperature2w(AbstractGlobalPressureTemperature):
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScale: org.orekit.time.TimeScale): ...

class GlobalPressureTemperature3(AbstractGlobalPressureTemperature):
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScale: org.orekit.time.TimeScale): ...

class GlobalPressureTemperature2Model(GlobalPressureTemperature2, WeatherModel):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, geoid: org.orekit.models.earth.Geoid): ...
    @typing.overload
    def __init__(self, string: str, double: float, double2: float, geoid: org.orekit.models.earth.Geoid): ...
    @typing.overload
    def __init__(self, string: str, double: float, double2: float, geoid: org.orekit.models.earth.Geoid, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    _getA_1__T = typing.TypeVar('_getA_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getA(self) -> typing.List[float]: ...
    @typing.overload
    def getA(self, fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_getA_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getA_1__T]) -> org.orekit.models.earth.troposphere.FieldViennaACoefficients[_getA_1__T]: ...
    @typing.overload
    def getA(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.models.earth.troposphere.ViennaACoefficients: ...
    def getPressure(self) -> float: ...
    def getTemperature(self) -> float: ...
    def getWaterVaporPressure(self) -> float: ...
    def weatherParameters(self, double: float, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.weather")``.

    AbstractGlobalPressureTemperature: typing.Type[AbstractGlobalPressureTemperature]
    CellInterpolator: typing.Type[CellInterpolator]
    ConstantPressureTemperatureHumidityProvider: typing.Type[ConstantPressureTemperatureHumidityProvider]
    FieldCellInterpolator: typing.Type[FieldCellInterpolator]
    FieldPressureTemperature: typing.Type[FieldPressureTemperature]
    FieldPressureTemperatureHumidity: typing.Type[FieldPressureTemperatureHumidity]
    GlobalPressureTemperature: typing.Type[GlobalPressureTemperature]
    GlobalPressureTemperature2: typing.Type[GlobalPressureTemperature2]
    GlobalPressureTemperature2Model: typing.Type[GlobalPressureTemperature2Model]
    GlobalPressureTemperature2w: typing.Type[GlobalPressureTemperature2w]
    GlobalPressureTemperature3: typing.Type[GlobalPressureTemperature3]
    GlobalPressureTemperatureModel: typing.Type[GlobalPressureTemperatureModel]
    HeightDependentPressureTemperatureHumidityConverter: typing.Type[HeightDependentPressureTemperatureHumidityConverter]
    PressureTemperature: typing.Type[PressureTemperature]
    PressureTemperatureHumidity: typing.Type[PressureTemperatureHumidity]
    PressureTemperatureHumidityProvider: typing.Type[PressureTemperatureHumidityProvider]
    PythonPressureTemperatureHumidityProvider: typing.Type[PythonPressureTemperatureHumidityProvider]
    PythonWeatherModel: typing.Type[PythonWeatherModel]
    WeatherModel: typing.Type[WeatherModel]
    water: org.orekit.models.earth.weather.water.__module_protocol__
