import org.hipparchus
import typing



class WaterVaporPressureProvider:
    _relativeHumidity_1__T = typing.TypeVar('_relativeHumidity_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def relativeHumidity(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def relativeHumidity(self, t: _relativeHumidity_1__T, t2: _relativeHumidity_1__T, t3: _relativeHumidity_1__T) -> _relativeHumidity_1__T: ...
    _waterVaporPressure_1__T = typing.TypeVar('_waterVaporPressure_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def waterVaporPressure(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def waterVaporPressure(self, t: _waterVaporPressure_1__T, t2: _waterVaporPressure_1__T, t3: _waterVaporPressure_1__T) -> _waterVaporPressure_1__T: ...

class CIPM2007(WaterVaporPressureProvider):
    def __init__(self): ...
    _waterVaporPressure_1__T = typing.TypeVar('_waterVaporPressure_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def waterVaporPressure(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def waterVaporPressure(self, t: _waterVaporPressure_1__T, t2: _waterVaporPressure_1__T, t3: _waterVaporPressure_1__T) -> _waterVaporPressure_1__T: ...

class NbsNrcSteamTable(WaterVaporPressureProvider):
    def __init__(self): ...
    _waterVaporPressure_1__T = typing.TypeVar('_waterVaporPressure_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def waterVaporPressure(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def waterVaporPressure(self, t: _waterVaporPressure_1__T, t2: _waterVaporPressure_1__T, t3: _waterVaporPressure_1__T) -> _waterVaporPressure_1__T: ...

class PythonWaterVaporPressureProvider(WaterVaporPressureProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _waterVaporPressure_1__T = typing.TypeVar('_waterVaporPressure_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def waterVaporPressure(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def waterVaporPressure(self, t: _waterVaporPressure_1__T, t2: _waterVaporPressure_1__T, t3: _waterVaporPressure_1__T) -> _waterVaporPressure_1__T: ...

class Wang1988(WaterVaporPressureProvider):
    def __init__(self): ...
    _waterVaporPressure_1__T = typing.TypeVar('_waterVaporPressure_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def waterVaporPressure(self, double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    def waterVaporPressure(self, t: _waterVaporPressure_1__T, t2: _waterVaporPressure_1__T, t3: _waterVaporPressure_1__T) -> _waterVaporPressure_1__T: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.weather.water")``.

    CIPM2007: typing.Type[CIPM2007]
    NbsNrcSteamTable: typing.Type[NbsNrcSteamTable]
    PythonWaterVaporPressureProvider: typing.Type[PythonWaterVaporPressureProvider]
    Wang1988: typing.Type[Wang1988]
    WaterVaporPressureProvider: typing.Type[WaterVaporPressureProvider]
