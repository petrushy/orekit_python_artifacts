import java.io
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.geometry.spherical.twod
import org.orekit.bodies
import org.orekit.orbits
import typing



class EllipsoidTessellator:
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, tileAiming: 'TileAiming', int: int): ...
    @typing.overload
    @staticmethod
    def buildSimpleZone(double: float, *doubleArray: typing.List[float]) -> org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet: ...
    @typing.overload
    @staticmethod
    def buildSimpleZone(double: float, *geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet: ...
    def sample(self, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet, double: float, double2: float) -> java.util.List[java.util.List[org.orekit.bodies.GeodeticPoint]]: ...
    def tessellate(self, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet, double: float, double2: float, double3: float, double4: float, boolean: bool, boolean2: bool) -> java.util.List[java.util.List['Tile']]: ...

class Tile(java.io.Serializable):
    def __init__(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, geodeticPoint2: org.orekit.bodies.GeodeticPoint, geodeticPoint3: org.orekit.bodies.GeodeticPoint, geodeticPoint4: org.orekit.bodies.GeodeticPoint): ...
    def getCenter(self) -> org.orekit.bodies.GeodeticPoint: ...
    def getInterpolatedPoint(self, double: float, double2: float) -> org.orekit.bodies.GeodeticPoint: ...
    def getVertices(self) -> typing.List[org.orekit.bodies.GeodeticPoint]: ...

class TileAiming:
    def alongTileDirection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getSingularPoints(self) -> java.util.List[org.orekit.bodies.GeodeticPoint]: ...

class AlongTrackAiming(TileAiming):
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, orbit: org.orekit.orbits.Orbit, boolean: bool): ...
    def alongTileDirection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getSingularPoints(self) -> java.util.List[org.orekit.bodies.GeodeticPoint]: ...

class ConstantAzimuthAiming(TileAiming):
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float): ...
    def alongTileDirection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getSingularPoints(self) -> java.util.List[org.orekit.bodies.GeodeticPoint]: ...

class DivertedSingularityAiming(TileAiming):
    def __init__(self, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet): ...
    def alongTileDirection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getSingularPoints(self) -> java.util.List[org.orekit.bodies.GeodeticPoint]: ...

class PythonTileAiming(TileAiming):
    def __init__(self): ...
    def alongTileDirection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def finalize(self) -> None: ...
    def getSingularPoints(self) -> java.util.List[org.orekit.bodies.GeodeticPoint]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.tessellation")``.

    AlongTrackAiming: typing.Type[AlongTrackAiming]
    ConstantAzimuthAiming: typing.Type[ConstantAzimuthAiming]
    DivertedSingularityAiming: typing.Type[DivertedSingularityAiming]
    EllipsoidTessellator: typing.Type[EllipsoidTessellator]
    PythonTileAiming: typing.Type[PythonTileAiming]
    Tile: typing.Type[Tile]
    TileAiming: typing.Type[TileAiming]
