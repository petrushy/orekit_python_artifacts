import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.data
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import typing



class OceanLoadingCoefficients:
    def __init__(self, string: str, geodeticPoint: org.orekit.bodies.GeodeticPoint, tideArray: typing.List[typing.List['Tide']], doubleArray: typing.List[typing.List[float]], doubleArray2: typing.List[typing.List[float]], doubleArray3: typing.List[typing.List[float]], doubleArray4: typing.List[typing.List[float]], doubleArray5: typing.List[typing.List[float]], doubleArray6: typing.List[typing.List[float]]): ...
    def getNbSpecies(self) -> int: ...
    def getNbTides(self, int: int) -> int: ...
    def getSiteLocation(self) -> org.orekit.bodies.GeodeticPoint: ...
    def getSiteName(self) -> str: ...
    def getSouthAmplitude(self, int: int, int2: int) -> float: ...
    def getSouthPhase(self, int: int, int2: int) -> float: ...
    def getTide(self, int: int, int2: int) -> 'Tide': ...
    def getWestAmplitude(self, int: int, int2: int) -> float: ...
    def getWestPhase(self, int: int, int2: int) -> float: ...
    def getZenithAmplitude(self, int: int, int2: int) -> float: ...
    def getZenithPhase(self, int: int, int2: int) -> float: ...

class OceanLoadingCoefficientsBLQFactory(org.orekit.data.AbstractSelfFeedingLoader):
    DEFAULT_BLQ_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def getCoefficients(self, string: str) -> OceanLoadingCoefficients: ...
    def getSites(self) -> java.util.List[str]: ...

class OceanLoadingCoefficientsBlqParser:
    def __init__(self): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> java.util.List[OceanLoadingCoefficients]: ...

class PsdCorrection:
    def __init__(self, axis: 'PsdCorrection.Axis', timeEvolution: 'PsdCorrection.TimeEvolution', absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float): ...
    def displacement(self, absoluteDate: org.orekit.time.AbsoluteDate, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAmplitude(self) -> float: ...
    def getAxis(self) -> 'PsdCorrection.Axis': ...
    def getEarthquakeDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getEvolution(self) -> 'PsdCorrection.TimeEvolution': ...
    def getRelaxationTime(self) -> float: ...
    class Axis(java.lang.Enum['PsdCorrection.Axis']):
        EAST: typing.ClassVar['PsdCorrection.Axis'] = ...
        NORTH: typing.ClassVar['PsdCorrection.Axis'] = ...
        UP: typing.ClassVar['PsdCorrection.Axis'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PsdCorrection.Axis': ...
        @staticmethod
        def values() -> typing.List['PsdCorrection.Axis']: ...
        def vector(self, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    class TimeEvolution(java.lang.Enum['PsdCorrection.TimeEvolution']):
        EXP: typing.ClassVar['PsdCorrection.TimeEvolution'] = ...
        LOG: typing.ClassVar['PsdCorrection.TimeEvolution'] = ...
        def timeFactor(self, double: float) -> float: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PsdCorrection.TimeEvolution': ...
        @staticmethod
        def values() -> typing.List['PsdCorrection.TimeEvolution']: ...

class StationDisplacement:
    def displacement(self, bodiesElements: org.orekit.data.BodiesElements, frame: org.orekit.frames.Frame, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class Tide:
    M2: typing.ClassVar['Tide'] = ...
    S2: typing.ClassVar['Tide'] = ...
    N2: typing.ClassVar['Tide'] = ...
    K2: typing.ClassVar['Tide'] = ...
    K1: typing.ClassVar['Tide'] = ...
    O1: typing.ClassVar['Tide'] = ...
    P1: typing.ClassVar['Tide'] = ...
    Q1: typing.ClassVar['Tide'] = ...
    MF: typing.ClassVar['Tide'] = ...
    MM: typing.ClassVar['Tide'] = ...
    SSA: typing.ClassVar['Tide'] = ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDelaunayMultipliers(self) -> typing.List[int]: ...
    def getDoodsonMultipliers(self) -> typing.List[int]: ...
    def getDoodsonNumber(self) -> int: ...
    def getPhase(self, bodiesElements: org.orekit.data.BodiesElements) -> float: ...
    def getRate(self, bodiesElements: org.orekit.data.BodiesElements) -> float: ...
    def getTauMultiplier(self) -> int: ...
    def hashCode(self) -> int: ...

class OceanLoading(StationDisplacement):
    def __init__(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, oceanLoadingCoefficients: OceanLoadingCoefficients): ...
    def displacement(self, bodiesElements: org.orekit.data.BodiesElements, frame: org.orekit.frames.Frame, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class PostSeismicDeformation(StationDisplacement):
    def __init__(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, timeSpanMap: org.orekit.utils.TimeSpanMap[java.util.List[PsdCorrection]]): ...
    def displacement(self, bodiesElements: org.orekit.data.BodiesElements, frame: org.orekit.frames.Frame, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class PythonStationDisplacement(StationDisplacement):
    def __init__(self): ...
    def displacement(self, bodiesElements: org.orekit.data.BodiesElements, frame: org.orekit.frames.Frame, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class TectonicsDisplacement(StationDisplacement):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    def displacement(self, bodiesElements: org.orekit.data.BodiesElements, frame: org.orekit.frames.Frame, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class TidalDisplacement(StationDisplacement):
    def __init__(self, double: float, double2: float, double3: float, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, pVCoordinatesProvider2: org.orekit.utils.PVCoordinatesProvider, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool): ...
    def displacement(self, bodiesElements: org.orekit.data.BodiesElements, frame: org.orekit.frames.Frame, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.displacement")``.

    OceanLoading: typing.Type[OceanLoading]
    OceanLoadingCoefficients: typing.Type[OceanLoadingCoefficients]
    OceanLoadingCoefficientsBLQFactory: typing.Type[OceanLoadingCoefficientsBLQFactory]
    OceanLoadingCoefficientsBlqParser: typing.Type[OceanLoadingCoefficientsBlqParser]
    PostSeismicDeformation: typing.Type[PostSeismicDeformation]
    PsdCorrection: typing.Type[PsdCorrection]
    PythonStationDisplacement: typing.Type[PythonStationDisplacement]
    StationDisplacement: typing.Type[StationDisplacement]
    TectonicsDisplacement: typing.Type[TectonicsDisplacement]
    TidalDisplacement: typing.Type[TidalDisplacement]
    Tide: typing.Type[Tide]
