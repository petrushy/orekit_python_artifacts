import org.hipparchus.geometry.euclidean.threed
import org.orekit.rugged.api
import org.orekit.rugged.intersection
import org.orekit.rugged.raster
import org.orekit.rugged.utils
import typing



class DuvenhageAlgorithm(org.orekit.rugged.intersection.IntersectionAlgorithm):
    def __init__(self, tileUpdater: org.orekit.rugged.raster.TileUpdater, int: int, boolean: bool, boolean2: bool): ...
    def getAlgorithmId(self) -> org.orekit.rugged.api.AlgorithmId: ...
    def getElevation(self, double: float, double2: float) -> float: ...
    def intersection(self, extendedEllipsoid: org.orekit.rugged.utils.ExtendedEllipsoid, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.orekit.rugged.utils.NormalizedGeodeticPoint: ...
    def refineIntersection(self, extendedEllipsoid: org.orekit.rugged.utils.ExtendedEllipsoid, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, normalizedGeodeticPoint: org.orekit.rugged.utils.NormalizedGeodeticPoint) -> org.orekit.rugged.utils.NormalizedGeodeticPoint: ...

class MinMaxTreeTile(org.orekit.rugged.raster.SimpleTile):
    def getCrossedBoundaryColumns(self, int: int, int2: int, int3: int) -> typing.List[int]: ...
    def getCrossedBoundaryRows(self, int: int, int2: int, int3: int) -> typing.List[int]: ...
    def getLevels(self) -> int: ...
    @typing.overload
    def getMaxElevation(self, int: int, int2: int, int3: int) -> float: ...
    @typing.overload
    def getMaxElevation(self) -> float: ...
    def getMergeLevel(self, int: int, int2: int, int3: int, int4: int) -> int: ...
    @typing.overload
    def getMinElevation(self, int: int, int2: int, int3: int) -> float: ...
    @typing.overload
    def getMinElevation(self) -> float: ...
    def isColumnMerging(self, int: int) -> bool: ...
    def locateMax(self, int: int, int2: int, int3: int) -> typing.List[int]: ...
    def locateMin(self, int: int, int2: int, int3: int) -> typing.List[int]: ...

class MinMaxTreeTileFactory(org.orekit.rugged.raster.TileFactory[MinMaxTreeTile]):
    def __init__(self): ...
    def createTile(self) -> MinMaxTreeTile: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.rugged.intersection.duvenhage")``.

    DuvenhageAlgorithm: typing.Type[DuvenhageAlgorithm]
    MinMaxTreeTile: typing.Type[MinMaxTreeTile]
    MinMaxTreeTileFactory: typing.Type[MinMaxTreeTileFactory]
