import java.lang
import org.hipparchus.geometry.euclidean.threed
import org.orekit.rugged.utils
import typing



class EarthHemisphere(java.lang.Enum['EarthHemisphere']):
    SOUTH: typing.ClassVar['EarthHemisphere'] = ...
    NORTH: typing.ClassVar['EarthHemisphere'] = ...
    WESTEXTREME: typing.ClassVar['EarthHemisphere'] = ...
    WEST: typing.ClassVar['EarthHemisphere'] = ...
    EAST: typing.ClassVar['EarthHemisphere'] = ...
    EASTEXTREME: typing.ClassVar['EarthHemisphere'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'EarthHemisphere': ...
    @staticmethod
    def values() -> typing.List['EarthHemisphere']: ...

_TileFactory__T = typing.TypeVar('_TileFactory__T', bound='Tile')  # <T>
class TileFactory(typing.Generic[_TileFactory__T]):
    def createTile(self) -> _TileFactory__T: ...

class TileUpdater:
    def updateTile(self, double: float, double2: float, updatableTile: 'UpdatableTile') -> None: ...

_TilesCache__T = typing.TypeVar('_TilesCache__T', bound='Tile')  # <T>
class TilesCache(typing.Generic[_TilesCache__T]):
    def __init__(self, tileFactory: TileFactory[_TilesCache__T], tileUpdater: TileUpdater, int: int, boolean: bool): ...
    def getTile(self, double: float, double2: float) -> _TilesCache__T: ...

class UpdatableTile:
    def setElevation(self, int: int, int2: int, double: float) -> None: ...
    def setGeometry(self, double: float, double2: float, double3: float, double4: float, int: int, int2: int) -> None: ...

_PythonTileFactory__T = typing.TypeVar('_PythonTileFactory__T', bound='Tile')  # <T>
class PythonTileFactory(TileFactory[_PythonTileFactory__T], typing.Generic[_PythonTileFactory__T]):
    def __init__(self): ...
    def createTile(self) -> _PythonTileFactory__T: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonTileUpdater(TileUpdater):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def updateTile(self, double: float, double2: float, updatableTile: UpdatableTile) -> None: ...

class PythonUpdatableTile(UpdatableTile):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def setElevation(self, int: int, int2: int, double: float) -> None: ...
    def setGeometry(self, double: float, double2: float, double3: float, double4: float, int: int, int2: int) -> None: ...

class SimpleTileFactory(TileFactory['SimpleTile']):
    def __init__(self): ...
    def createTile(self) -> 'SimpleTile': ...

class Tile(UpdatableTile):
    def cellIntersection(self, normalizedGeodeticPoint: org.orekit.rugged.utils.NormalizedGeodeticPoint, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int, int2: int) -> org.orekit.rugged.utils.NormalizedGeodeticPoint: ...
    def getElevationAtIndices(self, int: int, int2: int) -> float: ...
    def getFloorLatitudeIndex(self, double: float) -> int: ...
    def getFloorLongitudeIndex(self, double: float) -> int: ...
    def getLatitudeAtIndex(self, int: int) -> float: ...
    def getLatitudeRows(self) -> int: ...
    def getLatitudeStep(self) -> float: ...
    def getLocation(self, double: float, double2: float) -> 'Tile.Location': ...
    def getLongitudeAtIndex(self, int: int) -> float: ...
    def getLongitudeColumns(self) -> int: ...
    def getLongitudeStep(self) -> float: ...
    def getMaxElevation(self) -> float: ...
    def getMaxElevationLatitudeIndex(self) -> int: ...
    def getMaxElevationLongitudeIndex(self) -> int: ...
    def getMaximumLatitude(self) -> float: ...
    def getMaximumLongitude(self) -> float: ...
    def getMinElevation(self) -> float: ...
    def getMinElevationLatitudeIndex(self) -> int: ...
    def getMinElevationLongitudeIndex(self) -> int: ...
    def getMinimumLatitude(self) -> float: ...
    def getMinimumLongitude(self) -> float: ...
    def interpolateElevation(self, double: float, double2: float) -> float: ...
    def tileUpdateCompleted(self) -> None: ...
    class Location(java.lang.Enum['Tile.Location']):
        SOUTH_WEST: typing.ClassVar['Tile.Location'] = ...
        WEST: typing.ClassVar['Tile.Location'] = ...
        NORTH_WEST: typing.ClassVar['Tile.Location'] = ...
        NORTH: typing.ClassVar['Tile.Location'] = ...
        NORTH_EAST: typing.ClassVar['Tile.Location'] = ...
        EAST: typing.ClassVar['Tile.Location'] = ...
        SOUTH_EAST: typing.ClassVar['Tile.Location'] = ...
        SOUTH: typing.ClassVar['Tile.Location'] = ...
        HAS_INTERPOLATION_NEIGHBORS: typing.ClassVar['Tile.Location'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Tile.Location': ...
        @staticmethod
        def values() -> typing.List['Tile.Location']: ...

class PythonTile(Tile):
    def __init__(self): ...
    def cellIntersection(self, normalizedGeodeticPoint: org.orekit.rugged.utils.NormalizedGeodeticPoint, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int, int2: int) -> org.orekit.rugged.utils.NormalizedGeodeticPoint: ...
    def finalize(self) -> None: ...
    def getElevationAtIndices(self, int: int, int2: int) -> float: ...
    def getFloorLatitudeIndex(self, double: float) -> int: ...
    def getFloorLongitudeIndex(self, double: float) -> int: ...
    def getLatitudeAtIndex(self, int: int) -> float: ...
    def getLatitudeRows(self) -> int: ...
    def getLatitudeStep(self) -> float: ...
    def getLocation(self, double: float, double2: float) -> Tile.Location: ...
    def getLongitudeAtIndex(self, int: int) -> float: ...
    def getLongitudeColumns(self) -> int: ...
    def getLongitudeStep(self) -> float: ...
    def getMaxElevation(self) -> float: ...
    def getMaxElevationLatitudeIndex(self) -> int: ...
    def getMaxElevationLongitudeIndex(self) -> int: ...
    def getMaximumLatitude(self) -> float: ...
    def getMaximumLongitude(self) -> float: ...
    def getMinElevation(self) -> float: ...
    def getMinElevationLatitudeIndex(self) -> int: ...
    def getMinElevationLongitudeIndex(self) -> int: ...
    def getMinimumLatitude(self) -> float: ...
    def getMinimumLongitude(self) -> float: ...
    def interpolateElevation(self, double: float, double2: float) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def setElevation(self, int: int, int2: int, double: float) -> None: ...
    def setGeometry(self, double: float, double2: float, double3: float, double4: float, int: int, int2: int) -> None: ...
    def tileUpdateCompleted(self) -> None: ...

class SimpleTile(Tile):
    def cellIntersection(self, normalizedGeodeticPoint: org.orekit.rugged.utils.NormalizedGeodeticPoint, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int, int2: int) -> org.orekit.rugged.utils.NormalizedGeodeticPoint: ...
    def getElevationAtIndices(self, int: int, int2: int) -> float: ...
    def getFloorLatitudeIndex(self, double: float) -> int: ...
    def getFloorLongitudeIndex(self, double: float) -> int: ...
    def getLatitudeAtIndex(self, int: int) -> float: ...
    def getLatitudeRows(self) -> int: ...
    def getLatitudeStep(self) -> float: ...
    def getLocation(self, double: float, double2: float) -> Tile.Location: ...
    def getLongitudeAtIndex(self, int: int) -> float: ...
    def getLongitudeColumns(self) -> int: ...
    def getLongitudeStep(self) -> float: ...
    def getMaxElevation(self) -> float: ...
    def getMaxElevationLatitudeIndex(self) -> int: ...
    def getMaxElevationLongitudeIndex(self) -> int: ...
    def getMaximumLatitude(self) -> float: ...
    def getMaximumLongitude(self) -> float: ...
    def getMinElevation(self) -> float: ...
    def getMinElevationLatitudeIndex(self) -> int: ...
    def getMinElevationLongitudeIndex(self) -> int: ...
    def getMinimumLatitude(self) -> float: ...
    def getMinimumLongitude(self) -> float: ...
    def interpolateElevation(self, double: float, double2: float) -> float: ...
    def setElevation(self, int: int, int2: int, double: float) -> None: ...
    def setGeometry(self, double: float, double2: float, double3: float, double4: float, int: int, int2: int) -> None: ...
    def tileUpdateCompleted(self) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.rugged.raster")``.

    EarthHemisphere: typing.Type[EarthHemisphere]
    PythonTile: typing.Type[PythonTile]
    PythonTileFactory: typing.Type[PythonTileFactory]
    PythonTileUpdater: typing.Type[PythonTileUpdater]
    PythonUpdatableTile: typing.Type[PythonUpdatableTile]
    SimpleTile: typing.Type[SimpleTile]
    SimpleTileFactory: typing.Type[SimpleTileFactory]
    Tile: typing.Type[Tile]
    TileFactory: typing.Type[TileFactory]
    TileUpdater: typing.Type[TileUpdater]
    TilesCache: typing.Type[TilesCache]
    UpdatableTile: typing.Type[UpdatableTile]
