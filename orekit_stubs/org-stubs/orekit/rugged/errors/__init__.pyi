import java.io
import java.lang
import java.util
import jpype.protocol
import org.hipparchus.exception
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.frames
import org.orekit.rugged.api
import org.orekit.rugged.linesensor
import org.orekit.rugged.raster
import org.orekit.rugged.utils
import org.orekit.time
import typing



class DumpManager:
    @staticmethod
    def activate(file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @staticmethod
    def deactivate() -> None: ...
    @typing.overload
    @staticmethod
    def dumpAlgorithm(algorithmId: org.orekit.rugged.api.AlgorithmId) -> None: ...
    @typing.overload
    @staticmethod
    def dumpAlgorithm(algorithmId: org.orekit.rugged.api.AlgorithmId, double: float) -> None: ...
    @staticmethod
    def dumpDirectLocation(absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, boolean: bool, boolean2: bool, boolean3: bool) -> None: ...
    @staticmethod
    def dumpDirectLocationResult(geodeticPoint: org.orekit.bodies.GeodeticPoint) -> None: ...
    @staticmethod
    def dumpEllipsoid(extendedEllipsoid: org.orekit.rugged.utils.ExtendedEllipsoid) -> None: ...
    @staticmethod
    def dumpInverseLocation(lineSensor: org.orekit.rugged.linesensor.LineSensor, geodeticPoint: org.orekit.bodies.GeodeticPoint, extendedEllipsoid: org.orekit.rugged.utils.ExtendedEllipsoid, int: int, int2: int, boolean: bool, boolean2: bool, boolean3: bool) -> None: ...
    @staticmethod
    def dumpInverseLocationResult(sensorPixel: org.orekit.rugged.linesensor.SensorPixel) -> None: ...
    @staticmethod
    def dumpSensorDatation(lineSensor: org.orekit.rugged.linesensor.LineSensor, double: float, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    @staticmethod
    def dumpSensorLOS(lineSensor: org.orekit.rugged.linesensor.LineSensor, absoluteDate: org.orekit.time.AbsoluteDate, int: int, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    @staticmethod
    def dumpSensorMeanPlane(sensorMeanPlaneCrossing: org.orekit.rugged.linesensor.SensorMeanPlaneCrossing) -> None: ...
    @staticmethod
    def dumpSensorRate(lineSensor: org.orekit.rugged.linesensor.LineSensor, double: float, double2: float) -> None: ...
    @staticmethod
    def dumpTileCell(tile: org.orekit.rugged.raster.Tile, int: int, int2: int, double: float) -> None: ...
    @staticmethod
    def dumpTransform(spacecraftToObservedBody: org.orekit.rugged.utils.SpacecraftToObservedBody, int: int, transform: org.orekit.frames.Transform, transform2: org.orekit.frames.Transform) -> None: ...
    @staticmethod
    def endNicely() -> None: ...
    @staticmethod
    def isActive() -> bool: ...
    @staticmethod
    def resume(boolean: bool) -> None: ...
    @staticmethod
    def suspend() -> bool: ...

class DumpReplayer:
    def __init__(self): ...
    def createRugged(self) -> org.orekit.rugged.api.Rugged: ...
    def execute(self, rugged: org.orekit.rugged.api.Rugged) -> typing.List['DumpReplayer.Result']: ...
    def parse(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    class Result:
        def getExpected(self) -> typing.Any: ...
        def getReplayed(self) -> typing.Any: ...

class RuggedException(java.lang.RuntimeException, org.hipparchus.exception.LocalizedException):
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable, localizable: org.hipparchus.exception.Localizable, objectArray: typing.List[typing.Any]): ...
    @typing.overload
    def __init__(self, localizable: org.hipparchus.exception.Localizable, objectArray: typing.List[typing.Any]): ...
    def getLocalizedMessage(self) -> str: ...
    @typing.overload
    def getMessage(self) -> str: ...
    @typing.overload
    def getMessage(self, locale: java.util.Locale) -> str: ...
    def getParts(self) -> typing.List[typing.Any]: ...
    def getSpecifier(self) -> org.hipparchus.exception.Localizable: ...

class RuggedExceptionWrapper(java.lang.RuntimeException):
    def __init__(self, ruggedException: RuggedException): ...
    def getException(self) -> RuggedException: ...

class RuggedInternalError(java.lang.RuntimeException, org.hipparchus.exception.LocalizedException):
    def __init__(self, throwable: java.lang.Throwable): ...
    def getLocalizedMessage(self) -> str: ...
    @typing.overload
    def getMessage(self) -> str: ...
    @typing.overload
    def getMessage(self, locale: java.util.Locale) -> str: ...
    def getParts(self) -> typing.List[typing.Any]: ...
    def getSpecifier(self) -> org.hipparchus.exception.Localizable: ...

class RuggedMessages(java.lang.Enum['RuggedMessages'], org.hipparchus.exception.Localizable):
    INTERNAL_ERROR: typing.ClassVar['RuggedMessages'] = ...
    OUT_OF_TILE_INDICES: typing.ClassVar['RuggedMessages'] = ...
    OUT_OF_TILE_ANGLES: typing.ClassVar['RuggedMessages'] = ...
    NO_DEM_DATA: typing.ClassVar['RuggedMessages'] = ...
    TILE_WITHOUT_REQUIRED_NEIGHBORS_SELECTED: typing.ClassVar['RuggedMessages'] = ...
    OUT_OF_TIME_RANGE: typing.ClassVar['RuggedMessages'] = ...
    UNINITIALIZED_CONTEXT: typing.ClassVar['RuggedMessages'] = ...
    EMPTY_TILE: typing.ClassVar['RuggedMessages'] = ...
    UNKNOWN_SENSOR: typing.ClassVar['RuggedMessages'] = ...
    LINE_OF_SIGHT_DOES_NOT_REACH_GROUND: typing.ClassVar['RuggedMessages'] = ...
    LINE_OF_SIGHT_NEVER_CROSSES_LATITUDE: typing.ClassVar['RuggedMessages'] = ...
    LINE_OF_SIGHT_NEVER_CROSSES_LONGITUDE: typing.ClassVar['RuggedMessages'] = ...
    LINE_OF_SIGHT_NEVER_CROSSES_ALTITUDE: typing.ClassVar['RuggedMessages'] = ...
    DEM_ENTRY_POINT_IS_BEHIND_SPACECRAFT: typing.ClassVar['RuggedMessages'] = ...
    FRAMES_MISMATCH_WITH_INTERPOLATOR_DUMP: typing.ClassVar['RuggedMessages'] = ...
    NOT_INTERPOLATOR_DUMP_DATA: typing.ClassVar['RuggedMessages'] = ...
    DEBUG_DUMP_ALREADY_ACTIVE: typing.ClassVar['RuggedMessages'] = ...
    DEBUG_DUMP_ACTIVATION_ERROR: typing.ClassVar['RuggedMessages'] = ...
    DEBUG_DUMP_NOT_ACTIVE: typing.ClassVar['RuggedMessages'] = ...
    CANNOT_PARSE_LINE: typing.ClassVar['RuggedMessages'] = ...
    LIGHT_TIME_CORRECTION_REDEFINED: typing.ClassVar['RuggedMessages'] = ...
    ABERRATION_OF_LIGHT_CORRECTION_REDEFINED: typing.ClassVar['RuggedMessages'] = ...
    ATMOSPHERIC_REFRACTION_REDEFINED: typing.ClassVar['RuggedMessages'] = ...
    TILE_ALREADY_DEFINED: typing.ClassVar['RuggedMessages'] = ...
    UNKNOWN_TILE: typing.ClassVar['RuggedMessages'] = ...
    NO_PARAMETERS_SELECTED: typing.ClassVar['RuggedMessages'] = ...
    NO_REFERENCE_MAPPINGS: typing.ClassVar['RuggedMessages'] = ...
    DUPLICATED_PARAMETER_NAME: typing.ClassVar['RuggedMessages'] = ...
    INVALID_RUGGED_NAME: typing.ClassVar['RuggedMessages'] = ...
    UNSUPPORTED_REFINING_CONTEXT: typing.ClassVar['RuggedMessages'] = ...
    NO_LAYER_DATA: typing.ClassVar['RuggedMessages'] = ...
    INVALID_STEP: typing.ClassVar['RuggedMessages'] = ...
    INVALID_RANGE_FOR_LINES: typing.ClassVar['RuggedMessages'] = ...
    SENSOR_PIXEL_NOT_FOUND_IN_RANGE_LINES: typing.ClassVar['RuggedMessages'] = ...
    SENSOR_PIXEL_NOT_FOUND_IN_PIXELS_LINE: typing.ClassVar['RuggedMessages'] = ...
    def getLocalizedString(self, locale: java.util.Locale) -> str: ...
    def getSourceString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RuggedMessages': ...
    @staticmethod
    def values() -> typing.List['RuggedMessages']: ...
    class UTF8Control(java.util.ResourceBundle.Control):
        def __init__(self): ...
        def newBundle(self, string: str, locale: java.util.Locale, string2: str, classLoader: java.lang.ClassLoader, boolean: bool) -> java.util.ResourceBundle: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.rugged.errors")``.

    DumpManager: typing.Type[DumpManager]
    DumpReplayer: typing.Type[DumpReplayer]
    RuggedException: typing.Type[RuggedException]
    RuggedExceptionWrapper: typing.Type[RuggedExceptionWrapper]
    RuggedInternalError: typing.Type[RuggedInternalError]
    RuggedMessages: typing.Type[RuggedMessages]
