import java.io
import java.lang
import org.hipparchus
import org.hipparchus.analysis
import org.hipparchus.analysis.differentiation.class-use
import org.hipparchus.linear
import org.hipparchus.util
import typing



class DSCompiler:
    _acos_1__T = typing.TypeVar('_acos_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def acos(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def acos(self, tArray: typing.List[_acos_1__T], int: int, tArray2: typing.List[_acos_1__T], int2: int) -> None: ...
    _acosh_1__T = typing.TypeVar('_acosh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def acosh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def acosh(self, tArray: typing.List[_acosh_1__T], int: int, tArray2: typing.List[_acosh_1__T], int2: int) -> None: ...
    _add_1__T = typing.TypeVar('_add_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def add(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def add(self, tArray: typing.List[_add_1__T], int: int, tArray2: typing.List[_add_1__T], int2: int, tArray3: typing.List[_add_1__T], int3: int) -> None: ...
    _asin_1__T = typing.TypeVar('_asin_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def asin(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def asin(self, tArray: typing.List[_asin_1__T], int: int, tArray2: typing.List[_asin_1__T], int2: int) -> None: ...
    _asinh_1__T = typing.TypeVar('_asinh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def asinh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def asinh(self, tArray: typing.List[_asinh_1__T], int: int, tArray2: typing.List[_asinh_1__T], int2: int) -> None: ...
    _atan_1__T = typing.TypeVar('_atan_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def atan(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def atan(self, tArray: typing.List[_atan_1__T], int: int, tArray2: typing.List[_atan_1__T], int2: int) -> None: ...
    _atan2_1__T = typing.TypeVar('_atan2_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def atan2(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def atan2(self, tArray: typing.List[_atan2_1__T], int: int, tArray2: typing.List[_atan2_1__T], int2: int, tArray3: typing.List[_atan2_1__T], int3: int) -> None: ...
    _atanh_1__T = typing.TypeVar('_atanh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def atanh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def atanh(self, tArray: typing.List[_atanh_1__T], int: int, tArray2: typing.List[_atanh_1__T], int2: int) -> None: ...
    def checkCompatibility(self, dSCompiler: 'DSCompiler') -> None: ...
    _compose_1__T = typing.TypeVar('_compose_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _compose_2__T = typing.TypeVar('_compose_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def compose(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], doubleArray3: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def compose(self, tArray: typing.List[_compose_1__T], int: int, doubleArray: typing.List[float], tArray2: typing.List[_compose_1__T], int2: int) -> None: ...
    @typing.overload
    def compose(self, tArray: typing.List[_compose_2__T], int: int, tArray2: typing.List[_compose_2__T], tArray3: typing.List[_compose_2__T], int2: int) -> None: ...
    _cos_1__T = typing.TypeVar('_cos_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def cos(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def cos(self, tArray: typing.List[_cos_1__T], int: int, tArray2: typing.List[_cos_1__T], int2: int) -> None: ...
    _cosh_1__T = typing.TypeVar('_cosh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def cosh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def cosh(self, tArray: typing.List[_cosh_1__T], int: int, tArray2: typing.List[_cosh_1__T], int2: int) -> None: ...
    _divide_1__T = typing.TypeVar('_divide_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def divide(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def divide(self, tArray: typing.List[_divide_1__T], int: int, tArray2: typing.List[_divide_1__T], int2: int, tArray3: typing.List[_divide_1__T], int3: int) -> None: ...
    _exp_1__T = typing.TypeVar('_exp_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def exp(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def exp(self, tArray: typing.List[_exp_1__T], int: int, tArray2: typing.List[_exp_1__T], int2: int) -> None: ...
    _expm1_1__T = typing.TypeVar('_expm1_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def expm1(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def expm1(self, tArray: typing.List[_expm1_1__T], int: int, tArray2: typing.List[_expm1_1__T], int2: int) -> None: ...
    @staticmethod
    def getCompiler(int: int, int2: int) -> 'DSCompiler': ...
    def getFreeParameters(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPartialDerivativeIndex(self, intArray: typing.List[int]) -> int: ...
    def getPartialDerivativeOrders(self, int: int) -> typing.List[int]: ...
    def getPartialDerivativeOrdersSum(self, int: int) -> int: ...
    def getSize(self) -> int: ...
    _linearCombination_3__T = typing.TypeVar('_linearCombination_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _linearCombination_4__T = typing.TypeVar('_linearCombination_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _linearCombination_5__T = typing.TypeVar('_linearCombination_5__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _linearCombination_6__T = typing.TypeVar('_linearCombination_6__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _linearCombination_7__T = typing.TypeVar('_linearCombination_7__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _linearCombination_8__T = typing.TypeVar('_linearCombination_8__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def linearCombination(self, double: float, doubleArray: typing.List[float], int: int, double3: float, doubleArray2: typing.List[float], int2: int, double5: float, doubleArray3: typing.List[float], int3: int, double7: float, doubleArray4: typing.List[float], int4: int, doubleArray5: typing.List[float], int5: int) -> None: ...
    @typing.overload
    def linearCombination(self, double: float, doubleArray: typing.List[float], int: int, double3: float, doubleArray2: typing.List[float], int2: int, double5: float, doubleArray3: typing.List[float], int3: int, doubleArray4: typing.List[float], int4: int) -> None: ...
    @typing.overload
    def linearCombination(self, double: float, doubleArray: typing.List[float], int: int, double3: float, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def linearCombination(self, double: float, tArray: typing.List[_linearCombination_3__T], int: int, double2: float, tArray2: typing.List[_linearCombination_3__T], int2: int, double3: float, tArray3: typing.List[_linearCombination_3__T], int3: int, double4: float, tArray4: typing.List[_linearCombination_3__T], int4: int, tArray5: typing.List[_linearCombination_3__T], int5: int) -> None: ...
    @typing.overload
    def linearCombination(self, double: float, tArray: typing.List[_linearCombination_4__T], int: int, double2: float, tArray2: typing.List[_linearCombination_4__T], int2: int, double3: float, tArray3: typing.List[_linearCombination_4__T], int3: int, tArray4: typing.List[_linearCombination_4__T], int4: int) -> None: ...
    @typing.overload
    def linearCombination(self, double: float, tArray: typing.List[_linearCombination_5__T], int: int, double2: float, tArray2: typing.List[_linearCombination_5__T], int2: int, tArray3: typing.List[_linearCombination_5__T], int3: int) -> None: ...
    @typing.overload
    def linearCombination(self, t: _linearCombination_6__T, tArray: typing.List[_linearCombination_6__T], int: int, t3: _linearCombination_6__T, tArray2: typing.List[_linearCombination_6__T], int2: int, t5: _linearCombination_6__T, tArray3: typing.List[_linearCombination_6__T], int3: int, t7: _linearCombination_6__T, tArray4: typing.List[_linearCombination_6__T], int4: int, tArray5: typing.List[_linearCombination_6__T], int5: int) -> None: ...
    @typing.overload
    def linearCombination(self, t: _linearCombination_7__T, tArray: typing.List[_linearCombination_7__T], int: int, t3: _linearCombination_7__T, tArray2: typing.List[_linearCombination_7__T], int2: int, t5: _linearCombination_7__T, tArray3: typing.List[_linearCombination_7__T], int3: int, tArray4: typing.List[_linearCombination_7__T], int4: int) -> None: ...
    @typing.overload
    def linearCombination(self, t: _linearCombination_8__T, tArray: typing.List[_linearCombination_8__T], int: int, t3: _linearCombination_8__T, tArray2: typing.List[_linearCombination_8__T], int2: int, tArray3: typing.List[_linearCombination_8__T], int3: int) -> None: ...
    _log_1__T = typing.TypeVar('_log_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def log(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def log(self, tArray: typing.List[_log_1__T], int: int, tArray2: typing.List[_log_1__T], int2: int) -> None: ...
    _log10_1__T = typing.TypeVar('_log10_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def log10(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def log10(self, tArray: typing.List[_log10_1__T], int: int, tArray2: typing.List[_log10_1__T], int2: int) -> None: ...
    _log1p_1__T = typing.TypeVar('_log1p_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def log1p(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def log1p(self, tArray: typing.List[_log1p_1__T], int: int, tArray2: typing.List[_log1p_1__T], int2: int) -> None: ...
    _multiply_1__T = typing.TypeVar('_multiply_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def multiply(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def multiply(self, tArray: typing.List[_multiply_1__T], int: int, tArray2: typing.List[_multiply_1__T], int2: int, tArray3: typing.List[_multiply_1__T], int3: int) -> None: ...
    _pow_1__T = typing.TypeVar('_pow_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pow_5__T = typing.TypeVar('_pow_5__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pow_6__T = typing.TypeVar('_pow_6__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pow_7__T = typing.TypeVar('_pow_7__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pow(self, double: float, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def pow(self, double: float, tArray: typing.List[_pow_1__T], int: int, tArray2: typing.List[_pow_1__T], int2: int) -> None: ...
    @typing.overload
    def pow(self, doubleArray: typing.List[float], int: int, double2: float, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def pow(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def pow(self, doubleArray: typing.List[float], int: int, int2: int, doubleArray2: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def pow(self, tArray: typing.List[_pow_5__T], int: int, double: float, tArray2: typing.List[_pow_5__T], int2: int) -> None: ...
    @typing.overload
    def pow(self, tArray: typing.List[_pow_6__T], int: int, int2: int, tArray2: typing.List[_pow_6__T], int3: int) -> None: ...
    @typing.overload
    def pow(self, tArray: typing.List[_pow_7__T], int: int, tArray2: typing.List[_pow_7__T], int2: int, tArray3: typing.List[_pow_7__T], int3: int) -> None: ...
    _rebase_1__T = typing.TypeVar('_rebase_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rebase(self, doubleArray: typing.List[float], int: int, dSCompiler: 'DSCompiler', doubleArray2: typing.List[float], doubleArray3: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def rebase(self, tArray: typing.List[_rebase_1__T], int: int, dSCompiler: 'DSCompiler', tArray2: typing.List[_rebase_1__T], tArray3: typing.List[_rebase_1__T], int2: int) -> None: ...
    _reciprocal_1__T = typing.TypeVar('_reciprocal_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def reciprocal(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def reciprocal(self, tArray: typing.List[_reciprocal_1__T], int: int, tArray2: typing.List[_reciprocal_1__T], int2: int) -> None: ...
    _remainder_1__T = typing.TypeVar('_remainder_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def remainder(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def remainder(self, tArray: typing.List[_remainder_1__T], int: int, tArray2: typing.List[_remainder_1__T], int2: int, tArray3: typing.List[_remainder_1__T], int3: int) -> None: ...
    _rootN_1__T = typing.TypeVar('_rootN_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rootN(self, doubleArray: typing.List[float], int: int, int2: int, doubleArray2: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def rootN(self, tArray: typing.List[_rootN_1__T], int: int, int2: int, tArray2: typing.List[_rootN_1__T], int3: int) -> None: ...
    _sin_1__T = typing.TypeVar('_sin_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def sin(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def sin(self, tArray: typing.List[_sin_1__T], int: int, tArray2: typing.List[_sin_1__T], int2: int) -> None: ...
    _sinCos_1__T = typing.TypeVar('_sinCos_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def sinCos(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def sinCos(self, tArray: typing.List[_sinCos_1__T], int: int, tArray2: typing.List[_sinCos_1__T], int2: int, tArray3: typing.List[_sinCos_1__T], int3: int) -> None: ...
    _sinh_1__T = typing.TypeVar('_sinh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def sinh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def sinh(self, tArray: typing.List[_sinh_1__T], int: int, tArray2: typing.List[_sinh_1__T], int2: int) -> None: ...
    _sinhCosh_1__T = typing.TypeVar('_sinhCosh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def sinhCosh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def sinhCosh(self, tArray: typing.List[_sinhCosh_1__T], int: int, tArray2: typing.List[_sinhCosh_1__T], int2: int, tArray3: typing.List[_sinhCosh_1__T], int3: int) -> None: ...
    _sqrt_1__T = typing.TypeVar('_sqrt_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def sqrt(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def sqrt(self, tArray: typing.List[_sqrt_1__T], int: int, tArray2: typing.List[_sqrt_1__T], int2: int) -> None: ...
    _subtract_1__T = typing.TypeVar('_subtract_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def subtract(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int, doubleArray3: typing.List[float], int3: int) -> None: ...
    @typing.overload
    def subtract(self, tArray: typing.List[_subtract_1__T], int: int, tArray2: typing.List[_subtract_1__T], int2: int, tArray3: typing.List[_subtract_1__T], int3: int) -> None: ...
    _tan_1__T = typing.TypeVar('_tan_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def tan(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def tan(self, tArray: typing.List[_tan_1__T], int: int, tArray2: typing.List[_tan_1__T], int2: int) -> None: ...
    _tanh_1__T = typing.TypeVar('_tanh_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def tanh(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float], int2: int) -> None: ...
    @typing.overload
    def tanh(self, tArray: typing.List[_tanh_1__T], int: int, tArray2: typing.List[_tanh_1__T], int2: int) -> None: ...
    _taylor_1__T = typing.TypeVar('_taylor_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _taylor_2__T = typing.TypeVar('_taylor_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def taylor(self, doubleArray: typing.List[float], int: int, doubleArray2: typing.List[float]) -> float: ...
    @typing.overload
    def taylor(self, tArray: typing.List[_taylor_1__T], int: int, tArray2: typing.List[_taylor_1__T]) -> _taylor_1__T: ...
    @typing.overload
    def taylor(self, tArray: typing.List[_taylor_2__T], int: int, doubleArray: typing.List[float]) -> _taylor_2__T: ...

class DSFactory(java.io.Serializable):
    def __init__(self, int: int, int2: int): ...
    def build(self, doubleArray: typing.List[float]) -> 'DerivativeStructure': ...
    def constant(self, double: float) -> 'DerivativeStructure': ...
    def getCompiler(self) -> DSCompiler: ...
    def getDerivativeField(self) -> 'DSFactory.DSField': ...
    def variable(self, int: int, double: float) -> 'DerivativeStructure': ...
    class DSField(org.hipparchus.Field['DerivativeStructure']):
        def equals(self, object: typing.Any) -> bool: ...
        def getOne(self) -> 'DerivativeStructure': ...
        def getPi(self) -> 'DerivativeStructure': ...
        def getRuntimeClass(self) -> typing.Type['DerivativeStructure']: ...
        def getZero(self) -> 'DerivativeStructure': ...
        def hashCode(self) -> int: ...

class DifferentialAlgebra:
    def getFreeParameters(self) -> int: ...
    def getOrder(self) -> int: ...

_FDSFactory__DerivativeField__T = typing.TypeVar('_FDSFactory__DerivativeField__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
_FDSFactory__T = typing.TypeVar('_FDSFactory__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FDSFactory(typing.Generic[_FDSFactory__T]):
    def __init__(self, field: org.hipparchus.Field[_FDSFactory__T], int: int, int2: int): ...
    @typing.overload
    def build(self, tArray: typing.List[_FDSFactory__T]) -> 'FieldDerivativeStructure'[_FDSFactory__T]: ...
    @typing.overload
    def build(self, doubleArray: typing.List[float]) -> 'FieldDerivativeStructure'[_FDSFactory__T]: ...
    @typing.overload
    def constant(self, double: float) -> 'FieldDerivativeStructure'[_FDSFactory__T]: ...
    @typing.overload
    def constant(self, t: _FDSFactory__T) -> 'FieldDerivativeStructure'[_FDSFactory__T]: ...
    def getCompiler(self) -> DSCompiler: ...
    def getDerivativeField(self) -> 'FDSFactory.DerivativeField'[_FDSFactory__T]: ...
    def getValueField(self) -> org.hipparchus.Field[_FDSFactory__T]: ...
    @typing.overload
    def variable(self, int: int, double: float) -> 'FieldDerivativeStructure'[_FDSFactory__T]: ...
    @typing.overload
    def variable(self, int: int, t: _FDSFactory__T) -> 'FieldDerivativeStructure'[_FDSFactory__T]: ...
    class DerivativeField(org.hipparchus.Field['FieldDerivativeStructure'[_FDSFactory__DerivativeField__T]], typing.Generic[_FDSFactory__DerivativeField__T]):
        def equals(self, object: typing.Any) -> bool: ...
        def getOne(self) -> 'FieldDerivativeStructure'[_FDSFactory__DerivativeField__T]: ...
        def getPi(self) -> 'FieldDerivativeStructure'[_FDSFactory__DerivativeField__T]: ...
        def getRuntimeClass(self) -> typing.Type['FieldDerivativeStructure'[_FDSFactory__DerivativeField__T]]: ...
        def getZero(self) -> 'FieldDerivativeStructure'[_FDSFactory__DerivativeField__T]: ...
        def hashCode(self) -> int: ...

_FieldGradientField__T = typing.TypeVar('_FieldGradientField__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGradientField(org.hipparchus.Field['FieldGradient'[_FieldGradientField__T]], typing.Generic[_FieldGradientField__T]):
    def equals(self, object: typing.Any) -> bool: ...
    _getField__T = typing.TypeVar('_getField__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getField(field: org.hipparchus.Field[_getField__T], int: int) -> 'FieldGradientField'[_getField__T]: ...
    def getOne(self) -> 'FieldGradient'[_FieldGradientField__T]: ...
    def getRuntimeClass(self) -> typing.Type['FieldGradient'[_FieldGradientField__T]]: ...
    def getZero(self) -> 'FieldGradient'[_FieldGradientField__T]: ...
    def hashCode(self) -> int: ...

_FieldUnivariateDerivative1Field__T = typing.TypeVar('_FieldUnivariateDerivative1Field__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldUnivariateDerivative1Field(org.hipparchus.Field['FieldUnivariateDerivative1'[_FieldUnivariateDerivative1Field__T]], typing.Generic[_FieldUnivariateDerivative1Field__T]):
    def equals(self, object: typing.Any) -> bool: ...
    def getOne(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1Field__T]: ...
    def getRuntimeClass(self) -> typing.Type['FieldUnivariateDerivative1'[_FieldUnivariateDerivative1Field__T]]: ...
    _getUnivariateDerivative1Field__T = typing.TypeVar('_getUnivariateDerivative1Field__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getUnivariateDerivative1Field(field: org.hipparchus.Field[_getUnivariateDerivative1Field__T]) -> 'FieldUnivariateDerivative1Field'[_getUnivariateDerivative1Field__T]: ...
    def getZero(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1Field__T]: ...
    def hashCode(self) -> int: ...

_FieldUnivariateDerivative2Field__T = typing.TypeVar('_FieldUnivariateDerivative2Field__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldUnivariateDerivative2Field(org.hipparchus.Field['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2Field__T]], typing.Generic[_FieldUnivariateDerivative2Field__T]):
    def equals(self, object: typing.Any) -> bool: ...
    def getOne(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2Field__T]: ...
    def getRuntimeClass(self) -> typing.Type['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2Field__T]]: ...
    _getUnivariateDerivative2Field__T = typing.TypeVar('_getUnivariateDerivative2Field__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getUnivariateDerivative2Field(field: org.hipparchus.Field[_getUnivariateDerivative2Field__T]) -> 'FieldUnivariateDerivative2Field'[_getUnivariateDerivative2Field__T]: ...
    def getZero(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2Field__T]: ...
    def hashCode(self) -> int: ...

class GradientField(org.hipparchus.Field['Gradient']):
    def equals(self, object: typing.Any) -> bool: ...
    @staticmethod
    def getField(int: int) -> 'GradientField': ...
    def getOne(self) -> 'Gradient': ...
    def getRuntimeClass(self) -> typing.Type['Gradient']: ...
    def getZero(self) -> 'Gradient': ...
    def hashCode(self) -> int: ...

class GradientFunction(org.hipparchus.analysis.MultivariateVectorFunction):
    def __init__(self, multivariateDifferentiableFunction: 'MultivariateDifferentiableFunction'): ...
    def value(self, doubleArray: typing.List[float]) -> typing.List[float]: ...

class JacobianFunction(org.hipparchus.analysis.MultivariateMatrixFunction):
    def __init__(self, multivariateDifferentiableVectorFunction: 'MultivariateDifferentiableVectorFunction'): ...
    def value(self, doubleArray: typing.List[float]) -> typing.List[typing.List[float]]: ...

class MultivariateDifferentiableFunction(org.hipparchus.analysis.MultivariateFunction):
    @typing.overload
    def value(self, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def value(self, derivativeStructureArray: typing.List['DerivativeStructure']) -> 'DerivativeStructure': ...

class MultivariateDifferentiableVectorFunction(org.hipparchus.analysis.MultivariateVectorFunction):
    @typing.overload
    def value(self, doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def value(self, derivativeStructureArray: typing.List['DerivativeStructure']) -> typing.List['DerivativeStructure']: ...

class UnivariateDerivative1Field(org.hipparchus.Field['UnivariateDerivative1'], java.io.Serializable):
    def equals(self, object: typing.Any) -> bool: ...
    @staticmethod
    def getInstance() -> 'UnivariateDerivative1Field': ...
    def getOne(self) -> 'UnivariateDerivative1': ...
    def getRuntimeClass(self) -> typing.Type['UnivariateDerivative1']: ...
    def getZero(self) -> 'UnivariateDerivative1': ...
    def hashCode(self) -> int: ...

class UnivariateDerivative2Field(org.hipparchus.Field['UnivariateDerivative2'], java.io.Serializable):
    def equals(self, object: typing.Any) -> bool: ...
    @staticmethod
    def getInstance() -> 'UnivariateDerivative2Field': ...
    def getOne(self) -> 'UnivariateDerivative2': ...
    def getRuntimeClass(self) -> typing.Type['UnivariateDerivative2']: ...
    def getZero(self) -> 'UnivariateDerivative2': ...
    def hashCode(self) -> int: ...

class UnivariateDifferentiableFunction(org.hipparchus.analysis.UnivariateFunction):
    _value_1__T = typing.TypeVar('_value_1__T', bound='Derivative')  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class UnivariateDifferentiableMatrixFunction(org.hipparchus.analysis.UnivariateMatrixFunction):
    _value_1__T = typing.TypeVar('_value_1__T', bound='Derivative')  # <T>
    @typing.overload
    def value(self, double: float) -> typing.List[typing.List[float]]: ...
    @typing.overload
    def value(self, t: _value_1__T) -> typing.List[typing.List[_value_1__T]]: ...

class UnivariateDifferentiableVectorFunction(org.hipparchus.analysis.UnivariateVectorFunction):
    _value_1__T = typing.TypeVar('_value_1__T', bound='Derivative')  # <T>
    @typing.overload
    def value(self, double: float) -> typing.List[float]: ...
    @typing.overload
    def value(self, t: _value_1__T) -> typing.List[_value_1__T]: ...

class UnivariateFunctionDifferentiator:
    def differentiate(self, univariateFunction: org.hipparchus.analysis.UnivariateFunction) -> UnivariateDifferentiableFunction: ...

class UnivariateMatrixFunctionDifferentiator:
    def differentiate(self, univariateMatrixFunction: org.hipparchus.analysis.UnivariateMatrixFunction) -> UnivariateDifferentiableMatrixFunction: ...

class UnivariateVectorFunctionDifferentiator:
    def differentiate(self, univariateVectorFunction: org.hipparchus.analysis.UnivariateVectorFunction) -> UnivariateDifferentiableVectorFunction: ...

_Derivative__T = typing.TypeVar('_Derivative__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class Derivative(org.hipparchus.CalculusFieldElement[_Derivative__T], DifferentialAlgebra, typing.Generic[_Derivative__T]):
    def acos(self) -> _Derivative__T: ...
    @typing.overload
    def add(self, t: _Derivative__T) -> _Derivative__T: ...
    @typing.overload
    def add(self, double: float) -> _Derivative__T: ...
    def compose(self, doubleArray: typing.List[float]) -> _Derivative__T: ...
    def cosh(self) -> _Derivative__T: ...
    def getExponent(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> float: ...
    def getReal(self) -> float: ...
    def getValue(self) -> float: ...
    def log10(self) -> _Derivative__T: ...
    @typing.overload
    def pow(self, t: _Derivative__T) -> _Derivative__T: ...
    @typing.overload
    def pow(self, double: float) -> _Derivative__T: ...
    @typing.overload
    def pow(self, int: int) -> _Derivative__T: ...
    @typing.overload
    def remainder(self, t: _Derivative__T) -> _Derivative__T: ...
    @typing.overload
    def remainder(self, double: float) -> _Derivative__T: ...
    def sinh(self) -> _Derivative__T: ...
    @typing.overload
    def subtract(self, double: float) -> _Derivative__T: ...
    @typing.overload
    def subtract(self, t: _Derivative__T) -> _Derivative__T: ...
    def withValue(self, double: float) -> _Derivative__T: ...

_FieldDerivative__S = typing.TypeVar('_FieldDerivative__S', bound=org.hipparchus.CalculusFieldElement)  # <S>
_FieldDerivative__T = typing.TypeVar('_FieldDerivative__T', bound='FieldDerivative')  # <T>
class FieldDerivative(org.hipparchus.CalculusFieldElement[_FieldDerivative__T], DifferentialAlgebra, typing.Generic[_FieldDerivative__S, _FieldDerivative__T]):
    def acos(self) -> _FieldDerivative__T: ...
    @typing.overload
    def add(self, t: _FieldDerivative__T) -> _FieldDerivative__T: ...
    @typing.overload
    def add(self, double: float) -> _FieldDerivative__T: ...
    @typing.overload
    def add(self, s2: _FieldDerivative__S) -> _FieldDerivative__T: ...
    def ceil(self) -> _FieldDerivative__T: ...
    def cosh(self) -> _FieldDerivative__T: ...
    def floor(self) -> _FieldDerivative__T: ...
    def getExponent(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> _FieldDerivative__S: ...
    def getReal(self) -> float: ...
    def getValue(self) -> _FieldDerivative__S: ...
    def log10(self) -> _FieldDerivative__T: ...
    @typing.overload
    def newInstance(self, double: float) -> _FieldDerivative__T: ...
    @typing.overload
    def newInstance(self, s2: _FieldDerivative__S) -> _FieldDerivative__T: ...
    @typing.overload
    def pow(self, double: float) -> _FieldDerivative__T: ...
    @typing.overload
    def pow(self, int: int) -> _FieldDerivative__T: ...
    @typing.overload
    def pow(self, t: _FieldDerivative__T) -> _FieldDerivative__T: ...
    def rint(self) -> _FieldDerivative__T: ...
    def sign(self) -> _FieldDerivative__T: ...
    def sinh(self) -> _FieldDerivative__T: ...
    @typing.overload
    def subtract(self, double: float) -> _FieldDerivative__T: ...
    @typing.overload
    def subtract(self, t: _FieldDerivative__T) -> _FieldDerivative__T: ...
    @typing.overload
    def subtract(self, s2: _FieldDerivative__S) -> _FieldDerivative__T: ...
    def ulp(self) -> _FieldDerivative__T: ...
    def withValue(self, s2: _FieldDerivative__S) -> _FieldDerivative__T: ...

_FieldTaylorMap__T = typing.TypeVar('_FieldTaylorMap__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldTaylorMap(DifferentialAlgebra, typing.Generic[_FieldTaylorMap__T]):
    @typing.overload
    def __init__(self, tArray: typing.List[_FieldTaylorMap__T], fieldDerivativeStructureArray: typing.List['FieldDerivativeStructure'[_FieldTaylorMap__T]]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldTaylorMap__T], int: int, int2: int, int3: int): ...
    def compose(self, fieldTaylorMap: 'FieldTaylorMap'[_FieldTaylorMap__T]) -> 'FieldTaylorMap'[_FieldTaylorMap__T]: ...
    def getFreeParameters(self) -> int: ...
    def getFunction(self, int: int) -> 'FieldDerivativeStructure'[_FieldTaylorMap__T]: ...
    def getNbFunctions(self) -> int: ...
    def getNbParameters(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPoint(self) -> typing.List[_FieldTaylorMap__T]: ...
    def invert(self, fieldMatrixDecomposer: org.hipparchus.linear.FieldMatrixDecomposer[_FieldTaylorMap__T]) -> 'FieldTaylorMap'[_FieldTaylorMap__T]: ...
    @typing.overload
    def value(self, doubleArray: typing.List[float]) -> typing.List[_FieldTaylorMap__T]: ...
    @typing.overload
    def value(self, tArray: typing.List[_FieldTaylorMap__T]) -> typing.List[_FieldTaylorMap__T]: ...

class FiniteDifferencesDifferentiator(UnivariateFunctionDifferentiator, UnivariateVectorFunctionDifferentiator, UnivariateMatrixFunctionDifferentiator, java.io.Serializable):
    @typing.overload
    def __init__(self, int: int, double: float): ...
    @typing.overload
    def __init__(self, int: int, double: float, double2: float, double3: float): ...
    @typing.overload
    def differentiate(self, univariateFunction: org.hipparchus.analysis.UnivariateFunction) -> UnivariateDifferentiableFunction: ...
    @typing.overload
    def differentiate(self, univariateMatrixFunction: org.hipparchus.analysis.UnivariateMatrixFunction) -> UnivariateDifferentiableMatrixFunction: ...
    @typing.overload
    def differentiate(self, univariateVectorFunction: org.hipparchus.analysis.UnivariateVectorFunction) -> UnivariateDifferentiableVectorFunction: ...
    def getNbPoints(self) -> int: ...
    def getStepSize(self) -> float: ...

class TaylorMap(DifferentialAlgebra):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], derivativeStructureArray: typing.List['DerivativeStructure']): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    def compose(self, taylorMap: 'TaylorMap') -> 'TaylorMap': ...
    def getFreeParameters(self) -> int: ...
    def getFunction(self, int: int) -> 'DerivativeStructure': ...
    def getNbFunctions(self) -> int: ...
    def getNbParameters(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPoint(self) -> typing.List[float]: ...
    def invert(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer) -> 'TaylorMap': ...
    def value(self, doubleArray: typing.List[float]) -> typing.List[float]: ...

_Derivative1__T = typing.TypeVar('_Derivative1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class Derivative1(Derivative[_Derivative1__T], typing.Generic[_Derivative1__T]):
    def acos(self) -> _Derivative1__T: ...
    def acosh(self) -> _Derivative1__T: ...
    def asin(self) -> _Derivative1__T: ...
    def asinh(self) -> _Derivative1__T: ...
    def atan(self) -> _Derivative1__T: ...
    def atanh(self) -> _Derivative1__T: ...
    def cbrt(self) -> _Derivative1__T: ...
    @typing.overload
    def compose(self, doubleArray: typing.List[float]) -> _Derivative1__T: ...
    @typing.overload
    def compose(self, double: float, double2: float) -> _Derivative1__T: ...
    def cos(self) -> _Derivative1__T: ...
    def cosh(self) -> _Derivative1__T: ...
    def exp(self) -> _Derivative1__T: ...
    def expm1(self) -> _Derivative1__T: ...
    def getOrder(self) -> int: ...
    def log(self) -> _Derivative1__T: ...
    def log10(self) -> _Derivative1__T: ...
    def log1p(self) -> _Derivative1__T: ...
    def reciprocal(self) -> _Derivative1__T: ...
    def rootN(self, int: int) -> _Derivative1__T: ...
    def sin(self) -> _Derivative1__T: ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos[_Derivative1__T]: ...
    def sinh(self) -> _Derivative1__T: ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh[_Derivative1__T]: ...
    def sqrt(self) -> _Derivative1__T: ...
    def square(self) -> _Derivative1__T: ...
    def tan(self) -> _Derivative1__T: ...
    def tanh(self) -> _Derivative1__T: ...

class DerivativeStructure(Derivative['DerivativeStructure'], java.io.Serializable):
    def abs(self) -> 'DerivativeStructure': ...
    def acos(self) -> 'DerivativeStructure': ...
    def acosh(self) -> 'DerivativeStructure': ...
    @typing.overload
    def add(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def add(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def asin(self) -> 'DerivativeStructure': ...
    def asinh(self) -> 'DerivativeStructure': ...
    def atan(self) -> 'DerivativeStructure': ...
    @typing.overload
    def atan2(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    @staticmethod
    def atan2(derivativeStructure: 'DerivativeStructure', derivativeStructure2: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def atanh(self) -> 'DerivativeStructure': ...
    def compose(self, doubleArray: typing.List[float]) -> 'DerivativeStructure': ...
    @typing.overload
    def copySign(self, double: float) -> 'DerivativeStructure': ...
    @typing.overload
    def copySign(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def cos(self) -> 'DerivativeStructure': ...
    def cosh(self) -> 'DerivativeStructure': ...
    def differentiate(self, int: int, int2: int) -> 'DerivativeStructure': ...
    @typing.overload
    def divide(self, double: float) -> 'DerivativeStructure': ...
    @typing.overload
    def divide(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def equals(self, object: typing.Any) -> bool: ...
    def exp(self) -> 'DerivativeStructure': ...
    def expm1(self) -> 'DerivativeStructure': ...
    def getAllDerivatives(self) -> typing.List[float]: ...
    def getFactory(self) -> DSFactory: ...
    def getField(self) -> org.hipparchus.Field['DerivativeStructure']: ...
    def getFreeParameters(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> float: ...
    def getPi(self) -> 'DerivativeStructure': ...
    def getValue(self) -> float: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def hypot(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    @staticmethod
    def hypot(derivativeStructure: 'DerivativeStructure', derivativeStructure2: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def integrate(self, int: int, int2: int) -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, double: float, derivativeStructure: 'DerivativeStructure', double2: float, derivativeStructure2: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, double: float, derivativeStructure: 'DerivativeStructure', double2: float, derivativeStructure2: 'DerivativeStructure', double3: float, derivativeStructure3: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, double: float, derivativeStructure: 'DerivativeStructure', double2: float, derivativeStructure2: 'DerivativeStructure', double3: float, derivativeStructure3: 'DerivativeStructure', double4: float, derivativeStructure4: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], derivativeStructureArray: typing.List['DerivativeStructure']) -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, derivativeStructure: 'DerivativeStructure', derivativeStructure2: 'DerivativeStructure', derivativeStructure3: 'DerivativeStructure', derivativeStructure4: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, derivativeStructure: 'DerivativeStructure', derivativeStructure2: 'DerivativeStructure', derivativeStructure3: 'DerivativeStructure', derivativeStructure4: 'DerivativeStructure', derivativeStructure5: 'DerivativeStructure', derivativeStructure6: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, derivativeStructure: 'DerivativeStructure', derivativeStructure2: 'DerivativeStructure', derivativeStructure3: 'DerivativeStructure', derivativeStructure4: 'DerivativeStructure', derivativeStructure5: 'DerivativeStructure', derivativeStructure6: 'DerivativeStructure', derivativeStructure7: 'DerivativeStructure', derivativeStructure8: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    def linearCombination(self, derivativeStructureArray: typing.List['DerivativeStructure'], derivativeStructureArray2: typing.List['DerivativeStructure']) -> 'DerivativeStructure': ...
    def log(self) -> 'DerivativeStructure': ...
    def log10(self) -> 'DerivativeStructure': ...
    def log1p(self) -> 'DerivativeStructure': ...
    @typing.overload
    def multiply(self, int: int) -> org.hipparchus.FieldElement: ...
    @typing.overload
    def multiply(self, double: float) -> 'DerivativeStructure': ...
    @typing.overload
    def multiply(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def negate(self) -> 'DerivativeStructure': ...
    def newInstance(self, double: float) -> 'DerivativeStructure': ...
    @typing.overload
    def pow(self, double: float) -> 'DerivativeStructure': ...
    @typing.overload
    def pow(self, int: int) -> 'DerivativeStructure': ...
    @typing.overload
    def pow(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    @typing.overload
    @staticmethod
    def pow(double: float, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def rebase(self, derivativeStructureArray: typing.List['DerivativeStructure']) -> 'DerivativeStructure': ...
    def reciprocal(self) -> 'DerivativeStructure': ...
    @typing.overload
    def remainder(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def remainder(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def rootN(self, int: int) -> 'DerivativeStructure': ...
    def scalb(self, int: int) -> 'DerivativeStructure': ...
    def sin(self) -> 'DerivativeStructure': ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos['DerivativeStructure']: ...
    def sinh(self) -> 'DerivativeStructure': ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh['DerivativeStructure']: ...
    def sqrt(self) -> 'DerivativeStructure': ...
    def square(self) -> 'DerivativeStructure': ...
    @typing.overload
    def subtract(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def subtract(self, derivativeStructure: 'DerivativeStructure') -> 'DerivativeStructure': ...
    def tan(self) -> 'DerivativeStructure': ...
    def tanh(self) -> 'DerivativeStructure': ...
    def taylor(self, doubleArray: typing.List[float]) -> float: ...
    def toDegrees(self) -> 'DerivativeStructure': ...
    def toRadians(self) -> 'DerivativeStructure': ...
    def withValue(self, double: float) -> 'DerivativeStructure': ...

_FieldDerivative1__S = typing.TypeVar('_FieldDerivative1__S', bound=org.hipparchus.CalculusFieldElement)  # <S>
_FieldDerivative1__T = typing.TypeVar('_FieldDerivative1__T', bound=FieldDerivative)  # <T>
class FieldDerivative1(FieldDerivative[_FieldDerivative1__S, _FieldDerivative1__T], typing.Generic[_FieldDerivative1__S, _FieldDerivative1__T]):
    def acos(self) -> _FieldDerivative1__T: ...
    def acosh(self) -> _FieldDerivative1__T: ...
    def asin(self) -> _FieldDerivative1__T: ...
    def asinh(self) -> _FieldDerivative1__T: ...
    def atan(self) -> _FieldDerivative1__T: ...
    def atanh(self) -> _FieldDerivative1__T: ...
    def cbrt(self) -> _FieldDerivative1__T: ...
    def compose(self, s2: _FieldDerivative1__S, s3: _FieldDerivative1__S) -> _FieldDerivative1__T: ...
    def cos(self) -> _FieldDerivative1__T: ...
    def cosh(self) -> _FieldDerivative1__T: ...
    def exp(self) -> _FieldDerivative1__T: ...
    def expm1(self) -> _FieldDerivative1__T: ...
    def getOrder(self) -> int: ...
    def log(self) -> _FieldDerivative1__T: ...
    def log10(self) -> _FieldDerivative1__T: ...
    def log1p(self) -> _FieldDerivative1__T: ...
    def reciprocal(self) -> _FieldDerivative1__T: ...
    def sin(self) -> _FieldDerivative1__T: ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos[_FieldDerivative1__T]: ...
    def sinh(self) -> _FieldDerivative1__T: ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh[_FieldDerivative1__T]: ...
    def sqrt(self) -> _FieldDerivative1__T: ...
    def square(self) -> _FieldDerivative1__T: ...
    def tan(self) -> _FieldDerivative1__T: ...
    def tanh(self) -> _FieldDerivative1__T: ...

_FieldDerivativeStructure__T = typing.TypeVar('_FieldDerivativeStructure__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDerivativeStructure(FieldDerivative[_FieldDerivativeStructure__T, 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]], typing.Generic[_FieldDerivativeStructure__T]):
    def abs(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def acos(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def acosh(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def add(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldDerivativeStructure__T: ...
    @typing.overload
    def add(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def add(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def asin(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def asinh(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def atan(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    _atan2_1__T = typing.TypeVar('_atan2_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def atan2(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    @staticmethod
    def atan2(fieldDerivativeStructure: 'FieldDerivativeStructure'[_atan2_1__T], fieldDerivativeStructure2: 'FieldDerivativeStructure'[_atan2_1__T]) -> 'FieldDerivativeStructure'[_atan2_1__T]: ...
    def atanh(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def compose(self, tArray: typing.List[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def compose(self, doubleArray: typing.List[float]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def copySign(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def copySign(self, t: _FieldDerivativeStructure__T) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def copySign(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def cos(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def cosh(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def differentiate(self, int: int, int2: int) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def divide(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def divide(self, t: _FieldDerivativeStructure__T) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def divide(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def exp(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def expm1(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def getAllDerivatives(self) -> typing.List[_FieldDerivativeStructure__T]: ...
    def getFactory(self) -> FDSFactory[_FieldDerivativeStructure__T]: ...
    def getField(self) -> org.hipparchus.Field['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]: ...
    def getFreeParameters(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> _FieldDerivativeStructure__T: ...
    def getPi(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def getValue(self) -> _FieldDerivativeStructure__T: ...
    _hypot_1__T = typing.TypeVar('_hypot_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def hypot(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    @staticmethod
    def hypot(fieldDerivativeStructure: 'FieldDerivativeStructure'[_hypot_1__T], fieldDerivativeStructure2: 'FieldDerivativeStructure'[_hypot_1__T]) -> 'FieldDerivativeStructure'[_hypot_1__T]: ...
    def integrate(self, int: int, int2: int) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], double2: float, fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], double2: float, fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], double3: float, fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], double2: float, fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], double3: float, fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], double4: float, fieldDerivativeStructure4: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], fieldDerivativeStructureArray: typing.List['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, t: _FieldDerivativeStructure__T, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], t2: _FieldDerivativeStructure__T, fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, t: _FieldDerivativeStructure__T, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], t2: _FieldDerivativeStructure__T, fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], t3: _FieldDerivativeStructure__T, fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, t: _FieldDerivativeStructure__T, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], t2: _FieldDerivativeStructure__T, fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], t3: _FieldDerivativeStructure__T, fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], t4: _FieldDerivativeStructure__T, fieldDerivativeStructure4: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, tArray: typing.List[_FieldDerivativeStructure__T], fieldDerivativeStructureArray: typing.List['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure4: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure4: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure5: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure6: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure2: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure3: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure4: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure5: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure6: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure7: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T], fieldDerivativeStructure8: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def linearCombination(self, fieldDerivativeStructureArray: typing.List['FieldDerivativeStructure'[_FieldDerivativeStructure__T]], fieldDerivativeStructureArray2: typing.List['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def log(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def log10(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def log1p(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def multiply(self, int: int) -> _FieldDerivativeStructure__T: ...
    @typing.overload
    def multiply(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def multiply(self, t: _FieldDerivativeStructure__T) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def multiply(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def negate(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def newInstance(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def newInstance(self, t: _FieldDerivativeStructure__T) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    _pow_3__T = typing.TypeVar('_pow_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pow(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def pow(self, int: int) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def pow(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    @staticmethod
    def pow(double: float, fieldDerivativeStructure: 'FieldDerivativeStructure'[_pow_3__T]) -> 'FieldDerivativeStructure'[_pow_3__T]: ...
    def rebase(self, fieldDerivativeStructureArray: typing.List['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def reciprocal(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def remainder(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def remainder(self, t: _FieldDerivativeStructure__T) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def remainder(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def rootN(self, int: int) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def scalb(self, int: int) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def sin(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]: ...
    def sinh(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh['FieldDerivativeStructure'[_FieldDerivativeStructure__T]]: ...
    def sqrt(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def square(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def subtract(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldDerivativeStructure__T: ...
    @typing.overload
    def subtract(self, double: float) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def subtract(self, fieldDerivativeStructure: 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def tan(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def tanh(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    @typing.overload
    def taylor(self, tArray: typing.List[_FieldDerivativeStructure__T]) -> _FieldDerivativeStructure__T: ...
    @typing.overload
    def taylor(self, doubleArray: typing.List[float]) -> _FieldDerivativeStructure__T: ...
    def toDegrees(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def toRadians(self) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...
    def withValue(self, t: _FieldDerivativeStructure__T) -> 'FieldDerivativeStructure'[_FieldDerivativeStructure__T]: ...

_FieldUnivariateDerivative__S = typing.TypeVar('_FieldUnivariateDerivative__S', bound=org.hipparchus.CalculusFieldElement)  # <S>
_FieldUnivariateDerivative__T = typing.TypeVar('_FieldUnivariateDerivative__T', bound='FieldUnivariateDerivative')  # <T>
class FieldUnivariateDerivative(FieldDerivative[_FieldUnivariateDerivative__S, _FieldUnivariateDerivative__T], typing.Generic[_FieldUnivariateDerivative__S, _FieldUnivariateDerivative__T]):
    def __init__(self): ...
    def getDerivative(self, int: int) -> _FieldUnivariateDerivative__S: ...
    def getFreeParameters(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> _FieldUnivariateDerivative__S: ...
    def toDerivativeStructure(self) -> FieldDerivativeStructure[_FieldUnivariateDerivative__S]: ...

_UnivariateDerivative__T = typing.TypeVar('_UnivariateDerivative__T', bound='UnivariateDerivative')  # <T>
class UnivariateDerivative(Derivative[_UnivariateDerivative__T], java.io.Serializable, java.lang.Comparable[_UnivariateDerivative__T], typing.Generic[_UnivariateDerivative__T]):
    def __init__(self): ...
    def getDerivative(self, int: int) -> float: ...
    def getFreeParameters(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> float: ...
    def toDerivativeStructure(self) -> DerivativeStructure: ...

_FieldGradient__T = typing.TypeVar('_FieldGradient__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGradient(FieldDerivative1[_FieldGradient__T, 'FieldGradient'[_FieldGradient__T]], typing.Generic[_FieldGradient__T]):
    @typing.overload
    def __init__(self, t: _FieldGradient__T, tArray: typing.List[_FieldGradient__T]): ...
    @typing.overload
    def __init__(self, fieldDerivativeStructure: FieldDerivativeStructure[_FieldGradient__T]): ...
    def abs(self) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def add(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldGradient__T: ...
    @typing.overload
    def add(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def add(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    def atan2(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    def compose(self, t: _FieldGradient__T, t2: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...
    _constant__T = typing.TypeVar('_constant__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def constant(int: int, t: _constant__T) -> 'FieldGradient'[_constant__T]: ...
    @typing.overload
    def copySign(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def copySign(self, t: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def copySign(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def divide(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def divide(self, t: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def divide(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getField(self) -> FieldGradientField[_FieldGradient__T]: ...
    def getFreeParameters(self) -> int: ...
    def getGradient(self) -> typing.List[_FieldGradient__T]: ...
    @typing.overload
    def getPartialDerivative(self, int: int) -> _FieldGradient__T: ...
    @typing.overload
    def getPartialDerivative(self, intArray: typing.List[int]) -> _FieldGradient__T: ...
    def getPi(self) -> 'FieldGradient'[_FieldGradient__T]: ...
    def getValue(self) -> _FieldGradient__T: ...
    def getValueField(self) -> org.hipparchus.Field[_FieldGradient__T]: ...
    def hashCode(self) -> int: ...
    def hypot(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldGradient: 'FieldGradient'[_FieldGradient__T], double2: float, fieldGradient2: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldGradient: 'FieldGradient'[_FieldGradient__T], double2: float, fieldGradient2: 'FieldGradient'[_FieldGradient__T], double3: float, fieldGradient3: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldGradient: 'FieldGradient'[_FieldGradient__T], double2: float, fieldGradient2: 'FieldGradient'[_FieldGradient__T], double3: float, fieldGradient3: 'FieldGradient'[_FieldGradient__T], double4: float, fieldGradient4: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], fieldGradientArray: typing.List['FieldGradient'[_FieldGradient__T]]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, t: _FieldGradient__T, fieldGradient: 'FieldGradient'[_FieldGradient__T], t2: _FieldGradient__T, fieldGradient2: 'FieldGradient'[_FieldGradient__T], t3: _FieldGradient__T, fieldGradient3: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, tArray: typing.List[_FieldGradient__T], fieldGradientArray: typing.List['FieldGradient'[_FieldGradient__T]]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, fieldGradient: 'FieldGradient'[_FieldGradient__T], fieldGradient2: 'FieldGradient'[_FieldGradient__T], fieldGradient3: 'FieldGradient'[_FieldGradient__T], fieldGradient4: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, fieldGradient: 'FieldGradient'[_FieldGradient__T], fieldGradient2: 'FieldGradient'[_FieldGradient__T], fieldGradient3: 'FieldGradient'[_FieldGradient__T], fieldGradient4: 'FieldGradient'[_FieldGradient__T], fieldGradient5: 'FieldGradient'[_FieldGradient__T], fieldGradient6: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, fieldGradient: 'FieldGradient'[_FieldGradient__T], fieldGradient2: 'FieldGradient'[_FieldGradient__T], fieldGradient3: 'FieldGradient'[_FieldGradient__T], fieldGradient4: 'FieldGradient'[_FieldGradient__T], fieldGradient5: 'FieldGradient'[_FieldGradient__T], fieldGradient6: 'FieldGradient'[_FieldGradient__T], fieldGradient7: 'FieldGradient'[_FieldGradient__T], fieldGradient8: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def linearCombination(self, fieldGradientArray: typing.List['FieldGradient'[_FieldGradient__T]], fieldGradientArray2: typing.List['FieldGradient'[_FieldGradient__T]]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def multiply(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def multiply(self, int: int) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def multiply(self, t: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def multiply(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    def negate(self) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def newInstance(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def newInstance(self, t: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...
    _pow_3__T = typing.TypeVar('_pow_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pow(self, t: _FieldGradient__T) -> _FieldGradient__T: ...
    @typing.overload
    def pow(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def pow(self, int: int) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    @staticmethod
    def pow(double: float, fieldGradient: 'FieldGradient'[_pow_3__T]) -> 'FieldGradient'[_pow_3__T]: ...
    @typing.overload
    def remainder(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def remainder(self, t: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def remainder(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    def rootN(self, int: int) -> 'FieldGradient'[_FieldGradient__T]: ...
    def scalb(self, int: int) -> 'FieldGradient'[_FieldGradient__T]: ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos['FieldGradient'[_FieldGradient__T]]: ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh['FieldGradient'[_FieldGradient__T]]: ...
    @typing.overload
    def subtract(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldGradient__T: ...
    @typing.overload
    def subtract(self, double: float) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def subtract(self, fieldGradient: 'FieldGradient'[_FieldGradient__T]) -> 'FieldGradient'[_FieldGradient__T]: ...
    @typing.overload
    def taylor(self, doubleArray: typing.List[float]) -> _FieldGradient__T: ...
    @typing.overload
    def taylor(self, tArray: typing.List[_FieldGradient__T]) -> _FieldGradient__T: ...
    def toDegrees(self) -> 'FieldGradient'[_FieldGradient__T]: ...
    def toDerivativeStructure(self) -> FieldDerivativeStructure[_FieldGradient__T]: ...
    def toRadians(self) -> 'FieldGradient'[_FieldGradient__T]: ...
    _variable__T = typing.TypeVar('_variable__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def variable(int: int, int2: int, t: _variable__T) -> 'FieldGradient'[_variable__T]: ...
    def withValue(self, t: _FieldGradient__T) -> 'FieldGradient'[_FieldGradient__T]: ...

_FieldUnivariateDerivative1__T = typing.TypeVar('_FieldUnivariateDerivative1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldUnivariateDerivative1(FieldUnivariateDerivative[_FieldUnivariateDerivative1__T, 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]], FieldDerivative1[_FieldUnivariateDerivative1__T, 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]], typing.Generic[_FieldUnivariateDerivative1__T]):
    @typing.overload
    def __init__(self, t: _FieldUnivariateDerivative1__T, t2: _FieldUnivariateDerivative1__T): ...
    @typing.overload
    def __init__(self, fieldDerivativeStructure: FieldDerivativeStructure[_FieldUnivariateDerivative1__T]): ...
    def abs(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def add(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldUnivariateDerivative1__T: ...
    @typing.overload
    def add(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def add(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def atan2(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def compose(self, t: _FieldUnivariateDerivative1__T, t2: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def copySign(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def copySign(self, t: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def copySign(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def divide(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def divide(self, t: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def divide(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDerivative(self, int: int) -> _FieldUnivariateDerivative1__T: ...
    def getField(self) -> FieldUnivariateDerivative1Field[_FieldUnivariateDerivative1__T]: ...
    def getFirstDerivative(self) -> _FieldUnivariateDerivative1__T: ...
    def getPi(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def getValue(self) -> _FieldUnivariateDerivative1__T: ...
    def getValueField(self) -> org.hipparchus.Field[_FieldUnivariateDerivative1__T]: ...
    def hashCode(self) -> int: ...
    def hypot(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], double2: float, fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], double2: float, fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], double3: float, fieldUnivariateDerivative13: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], double2: float, fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], double3: float, fieldUnivariateDerivative13: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], double4: float, fieldUnivariateDerivative14: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], fieldUnivariateDerivative1Array: typing.List['FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, t: _FieldUnivariateDerivative1__T, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], t2: _FieldUnivariateDerivative1__T, fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], t3: _FieldUnivariateDerivative1__T, fieldUnivariateDerivative13: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, tArray: typing.List[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative1Array: typing.List['FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative13: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative14: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative13: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative14: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative15: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative16: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative12: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative13: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative14: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative15: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative16: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative17: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T], fieldUnivariateDerivative18: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative1Array: typing.List['FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]], fieldUnivariateDerivative1Array2: typing.List['FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def multiply(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def multiply(self, int: int) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def multiply(self, t: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def multiply(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def negate(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def newInstance(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def newInstance(self, t: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    _pow_3__T = typing.TypeVar('_pow_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pow(self, t: _FieldUnivariateDerivative1__T) -> _FieldUnivariateDerivative1__T: ...
    @typing.overload
    def pow(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def pow(self, int: int) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    @staticmethod
    def pow(double: float, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_pow_3__T]) -> 'FieldUnivariateDerivative1'[_pow_3__T]: ...
    @typing.overload
    def remainder(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def remainder(self, t: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def remainder(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def rootN(self, int: int) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def scalb(self, int: int) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def subtract(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldUnivariateDerivative1__T: ...
    @typing.overload
    def subtract(self, double: float) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def subtract(self, fieldUnivariateDerivative1: 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    @typing.overload
    def taylor(self, double: float) -> _FieldUnivariateDerivative1__T: ...
    @typing.overload
    def taylor(self, t: _FieldUnivariateDerivative1__T) -> _FieldUnivariateDerivative1__T: ...
    def toDegrees(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def toDerivativeStructure(self) -> FieldDerivativeStructure[_FieldUnivariateDerivative1__T]: ...
    def toRadians(self) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...
    def withValue(self, t: _FieldUnivariateDerivative1__T) -> 'FieldUnivariateDerivative1'[_FieldUnivariateDerivative1__T]: ...

_FieldUnivariateDerivative2__T = typing.TypeVar('_FieldUnivariateDerivative2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldUnivariateDerivative2(FieldUnivariateDerivative[_FieldUnivariateDerivative2__T, 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]], typing.Generic[_FieldUnivariateDerivative2__T]):
    @typing.overload
    def __init__(self, t: _FieldUnivariateDerivative2__T, t2: _FieldUnivariateDerivative2__T, t3: _FieldUnivariateDerivative2__T): ...
    @typing.overload
    def __init__(self, fieldDerivativeStructure: FieldDerivativeStructure[_FieldUnivariateDerivative2__T]): ...
    def abs(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def acos(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def acosh(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def add(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldUnivariateDerivative2__T: ...
    @typing.overload
    def add(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def add(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def asin(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def asinh(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def atan(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def atan2(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def atanh(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def cbrt(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def compose(self, t: _FieldUnivariateDerivative2__T, t2: _FieldUnivariateDerivative2__T, t3: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def copySign(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def copySign(self, t: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def copySign(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def cos(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def cosh(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def divide(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def divide(self, t: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def divide(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def exp(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def expm1(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def getDerivative(self, int: int) -> _FieldUnivariateDerivative2__T: ...
    def getField(self) -> FieldUnivariateDerivative2Field[_FieldUnivariateDerivative2__T]: ...
    def getFirstDerivative(self) -> _FieldUnivariateDerivative2__T: ...
    def getOrder(self) -> int: ...
    def getPi(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def getSecondDerivative(self) -> _FieldUnivariateDerivative2__T: ...
    def getValue(self) -> _FieldUnivariateDerivative2__T: ...
    def getValueField(self) -> org.hipparchus.Field[_FieldUnivariateDerivative2__T]: ...
    def hashCode(self) -> int: ...
    def hypot(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], double2: float, fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], double2: float, fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], double3: float, fieldUnivariateDerivative23: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, double: float, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], double2: float, fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], double3: float, fieldUnivariateDerivative23: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], double4: float, fieldUnivariateDerivative24: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], fieldUnivariateDerivative2Array: typing.List['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, t: _FieldUnivariateDerivative2__T, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], t2: _FieldUnivariateDerivative2__T, fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], t3: _FieldUnivariateDerivative2__T, fieldUnivariateDerivative23: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, tArray: typing.List[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative2Array: typing.List['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative23: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative24: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative23: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative24: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative25: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative26: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative22: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative23: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative24: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative25: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative26: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative27: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T], fieldUnivariateDerivative28: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def linearCombination(self, fieldUnivariateDerivative2Array: typing.List['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]], fieldUnivariateDerivative2Array2: typing.List['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def log(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def log10(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def log1p(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def multiply(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def multiply(self, int: int) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def multiply(self, t: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def multiply(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def negate(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def newInstance(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def newInstance(self, t: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    _pow_3__T = typing.TypeVar('_pow_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pow(self, t: _FieldUnivariateDerivative2__T) -> _FieldUnivariateDerivative2__T: ...
    @typing.overload
    def pow(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def pow(self, int: int) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    @staticmethod
    def pow(double: float, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_pow_3__T]) -> 'FieldUnivariateDerivative2'[_pow_3__T]: ...
    def reciprocal(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def remainder(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def remainder(self, t: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def remainder(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def rootN(self, int: int) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def scalb(self, int: int) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def sin(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]]: ...
    def sinh(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh['FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]]: ...
    def sqrt(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def square(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def subtract(self, s2: org.hipparchus.CalculusFieldElement) -> _FieldUnivariateDerivative2__T: ...
    @typing.overload
    def subtract(self, double: float) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def subtract(self, fieldUnivariateDerivative2: 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def tan(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def tanh(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    @typing.overload
    def taylor(self, double: float) -> _FieldUnivariateDerivative2__T: ...
    @typing.overload
    def taylor(self, t: _FieldUnivariateDerivative2__T) -> _FieldUnivariateDerivative2__T: ...
    def toDegrees(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def toDerivativeStructure(self) -> FieldDerivativeStructure[_FieldUnivariateDerivative2__T]: ...
    def toRadians(self) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...
    def withValue(self, t: _FieldUnivariateDerivative2__T) -> 'FieldUnivariateDerivative2'[_FieldUnivariateDerivative2__T]: ...

class Gradient(Derivative1['Gradient'], java.io.Serializable):
    @typing.overload
    def __init__(self, double: float, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, derivativeStructure: DerivativeStructure): ...
    def abs(self) -> 'Gradient': ...
    @typing.overload
    def add(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def add(self, gradient: 'Gradient') -> 'Gradient': ...
    def atan2(self, gradient: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def compose(self, double: float, double2: float) -> 'Gradient': ...
    @typing.overload
    def compose(self, doubleArray: typing.List[float]) -> 'Gradient': ...
    @staticmethod
    def constant(int: int, double: float) -> 'Gradient': ...
    @typing.overload
    def copySign(self, double: float) -> 'Gradient': ...
    @typing.overload
    def copySign(self, gradient: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def divide(self, double: float) -> 'Gradient': ...
    @typing.overload
    def divide(self, gradient: 'Gradient') -> 'Gradient': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getField(self) -> GradientField: ...
    def getFreeParameters(self) -> int: ...
    def getGradient(self) -> typing.List[float]: ...
    @typing.overload
    def getPartialDerivative(self, int: int) -> float: ...
    @typing.overload
    def getPartialDerivative(self, intArray: typing.List[int]) -> float: ...
    def getValue(self) -> float: ...
    def hashCode(self) -> int: ...
    def hypot(self, gradient: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, double: float, gradient: 'Gradient', double2: float, gradient2: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, double: float, gradient: 'Gradient', double2: float, gradient2: 'Gradient', double3: float, gradient3: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, double: float, gradient: 'Gradient', double2: float, gradient2: 'Gradient', double3: float, gradient3: 'Gradient', double4: float, gradient4: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], gradientArray: typing.List['Gradient']) -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, gradient: 'Gradient', gradient2: 'Gradient', gradient3: 'Gradient', gradient4: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, gradient: 'Gradient', gradient2: 'Gradient', gradient3: 'Gradient', gradient4: 'Gradient', gradient5: 'Gradient', gradient6: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, gradient: 'Gradient', gradient2: 'Gradient', gradient3: 'Gradient', gradient4: 'Gradient', gradient5: 'Gradient', gradient6: 'Gradient', gradient7: 'Gradient', gradient8: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def linearCombination(self, gradientArray: typing.List['Gradient'], gradientArray2: typing.List['Gradient']) -> 'Gradient': ...
    @typing.overload
    def multiply(self, double: float) -> 'Gradient': ...
    @typing.overload
    def multiply(self, int: int) -> 'Gradient': ...
    @typing.overload
    def multiply(self, gradient: 'Gradient') -> 'Gradient': ...
    def negate(self) -> 'Gradient': ...
    def newInstance(self, double: float) -> 'Gradient': ...
    @typing.overload
    def pow(self, t: org.hipparchus.CalculusFieldElement) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def pow(self, double: float) -> 'Gradient': ...
    @typing.overload
    def pow(self, int: int) -> 'Gradient': ...
    @typing.overload
    @staticmethod
    def pow(double: float, gradient: 'Gradient') -> 'Gradient': ...
    @typing.overload
    def remainder(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def remainder(self, gradient: 'Gradient') -> 'Gradient': ...
    def scalb(self, int: int) -> 'Gradient': ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos['Gradient']: ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh['Gradient']: ...
    @typing.overload
    def subtract(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def subtract(self, gradient: 'Gradient') -> 'Gradient': ...
    def taylor(self, doubleArray: typing.List[float]) -> float: ...
    def toDegrees(self) -> 'Gradient': ...
    def toDerivativeStructure(self) -> DerivativeStructure: ...
    def toRadians(self) -> 'Gradient': ...
    @staticmethod
    def variable(int: int, int2: int, double: float) -> 'Gradient': ...
    def withValue(self, double: float) -> 'Gradient': ...

class SparseGradient(Derivative1['SparseGradient'], java.io.Serializable):
    def abs(self) -> 'SparseGradient': ...
    @typing.overload
    def add(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def add(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    def addInPlace(self, sparseGradient: 'SparseGradient') -> None: ...
    @typing.overload
    def atan2(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    @staticmethod
    def atan2(sparseGradient: 'SparseGradient', sparseGradient2: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def compose(self, double: float, double2: float) -> 'SparseGradient': ...
    @typing.overload
    def compose(self, doubleArray: typing.List[float]) -> 'SparseGradient': ...
    @typing.overload
    def copySign(self, double: float) -> 'SparseGradient': ...
    @typing.overload
    def copySign(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    @staticmethod
    def createConstant(double: float) -> 'SparseGradient': ...
    @staticmethod
    def createVariable(int: int, double: float) -> 'SparseGradient': ...
    @typing.overload
    def divide(self, double: float) -> 'SparseGradient': ...
    @typing.overload
    def divide(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDerivative(self, int: int) -> float: ...
    def getField(self) -> org.hipparchus.Field['SparseGradient']: ...
    def getFreeParameters(self) -> int: ...
    def getPartialDerivative(self, intArray: typing.List[int]) -> float: ...
    def getPi(self) -> 'SparseGradient': ...
    def getValue(self) -> float: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def hypot(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    @staticmethod
    def hypot(sparseGradient: 'SparseGradient', sparseGradient2: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, double: float, sparseGradient: 'SparseGradient', double2: float, sparseGradient2: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, double: float, sparseGradient: 'SparseGradient', double2: float, sparseGradient2: 'SparseGradient', double3: float, sparseGradient3: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, double: float, sparseGradient: 'SparseGradient', double2: float, sparseGradient2: 'SparseGradient', double3: float, sparseGradient3: 'SparseGradient', double4: float, sparseGradient4: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], sparseGradientArray: typing.List['SparseGradient']) -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, sparseGradient: 'SparseGradient', sparseGradient2: 'SparseGradient', sparseGradient3: 'SparseGradient', sparseGradient4: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, sparseGradient: 'SparseGradient', sparseGradient2: 'SparseGradient', sparseGradient3: 'SparseGradient', sparseGradient4: 'SparseGradient', sparseGradient5: 'SparseGradient', sparseGradient6: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, sparseGradient: 'SparseGradient', sparseGradient2: 'SparseGradient', sparseGradient3: 'SparseGradient', sparseGradient4: 'SparseGradient', sparseGradient5: 'SparseGradient', sparseGradient6: 'SparseGradient', sparseGradient7: 'SparseGradient', sparseGradient8: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def linearCombination(self, sparseGradientArray: typing.List['SparseGradient'], sparseGradientArray2: typing.List['SparseGradient']) -> 'SparseGradient': ...
    @typing.overload
    def multiply(self, double: float) -> 'SparseGradient': ...
    @typing.overload
    def multiply(self, int: int) -> 'SparseGradient': ...
    @typing.overload
    def multiply(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    def multiplyInPlace(self, sparseGradient: 'SparseGradient') -> None: ...
    def negate(self) -> 'SparseGradient': ...
    def newInstance(self, double: float) -> 'SparseGradient': ...
    def numVars(self) -> int: ...
    @typing.overload
    def pow(self, t: org.hipparchus.CalculusFieldElement) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def pow(self, double: float) -> 'SparseGradient': ...
    @typing.overload
    def pow(self, int: int) -> 'SparseGradient': ...
    @typing.overload
    @staticmethod
    def pow(double: float, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    @typing.overload
    def remainder(self, double: float) -> 'SparseGradient': ...
    @typing.overload
    def remainder(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    def scalb(self, int: int) -> 'SparseGradient': ...
    def sqrt(self) -> 'SparseGradient': ...
    @typing.overload
    def subtract(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def subtract(self, sparseGradient: 'SparseGradient') -> 'SparseGradient': ...
    def taylor(self, doubleArray: typing.List[float]) -> float: ...
    def toDegrees(self) -> 'SparseGradient': ...
    def toRadians(self) -> 'SparseGradient': ...
    def withValue(self, double: float) -> 'SparseGradient': ...

class UnivariateDerivative1(UnivariateDerivative['UnivariateDerivative1'], Derivative1['UnivariateDerivative1']):
    PI: typing.ClassVar['UnivariateDerivative1'] = ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, derivativeStructure: DerivativeStructure): ...
    def abs(self) -> 'UnivariateDerivative1': ...
    @typing.overload
    def add(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def add(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    def atan2(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    def compareTo(self, univariateDerivative1: 'UnivariateDerivative1') -> int: ...
    @typing.overload
    def compose(self, double: float, double2: float) -> 'UnivariateDerivative1': ...
    @typing.overload
    def compose(self, doubleArray: typing.List[float]) -> 'UnivariateDerivative1': ...
    @typing.overload
    def copySign(self, double: float) -> 'UnivariateDerivative1': ...
    @typing.overload
    def copySign(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def divide(self, double: float) -> 'UnivariateDerivative1': ...
    @typing.overload
    def divide(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDerivative(self, int: int) -> float: ...
    def getField(self) -> UnivariateDerivative1Field: ...
    def getFirstDerivative(self) -> float: ...
    def getPi(self) -> 'UnivariateDerivative1': ...
    def getValue(self) -> float: ...
    def hashCode(self) -> int: ...
    def hypot(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, double: float, univariateDerivative1: 'UnivariateDerivative1', double2: float, univariateDerivative12: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, double: float, univariateDerivative1: 'UnivariateDerivative1', double2: float, univariateDerivative12: 'UnivariateDerivative1', double3: float, univariateDerivative13: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, double: float, univariateDerivative1: 'UnivariateDerivative1', double2: float, univariateDerivative12: 'UnivariateDerivative1', double3: float, univariateDerivative13: 'UnivariateDerivative1', double4: float, univariateDerivative14: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], univariateDerivative1Array: typing.List['UnivariateDerivative1']) -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, univariateDerivative1: 'UnivariateDerivative1', univariateDerivative12: 'UnivariateDerivative1', univariateDerivative13: 'UnivariateDerivative1', univariateDerivative14: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, univariateDerivative1: 'UnivariateDerivative1', univariateDerivative12: 'UnivariateDerivative1', univariateDerivative13: 'UnivariateDerivative1', univariateDerivative14: 'UnivariateDerivative1', univariateDerivative15: 'UnivariateDerivative1', univariateDerivative16: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, univariateDerivative1: 'UnivariateDerivative1', univariateDerivative12: 'UnivariateDerivative1', univariateDerivative13: 'UnivariateDerivative1', univariateDerivative14: 'UnivariateDerivative1', univariateDerivative15: 'UnivariateDerivative1', univariateDerivative16: 'UnivariateDerivative1', univariateDerivative17: 'UnivariateDerivative1', univariateDerivative18: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def linearCombination(self, univariateDerivative1Array: typing.List['UnivariateDerivative1'], univariateDerivative1Array2: typing.List['UnivariateDerivative1']) -> 'UnivariateDerivative1': ...
    @typing.overload
    def multiply(self, double: float) -> 'UnivariateDerivative1': ...
    @typing.overload
    def multiply(self, int: int) -> 'UnivariateDerivative1': ...
    @typing.overload
    def multiply(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    def negate(self) -> 'UnivariateDerivative1': ...
    def newInstance(self, double: float) -> 'UnivariateDerivative1': ...
    @typing.overload
    def pow(self, t: org.hipparchus.CalculusFieldElement) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def pow(self, double: float) -> 'UnivariateDerivative1': ...
    @typing.overload
    def pow(self, int: int) -> 'UnivariateDerivative1': ...
    @typing.overload
    @staticmethod
    def pow(double: float, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    @typing.overload
    def remainder(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def remainder(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    def scalb(self, int: int) -> 'UnivariateDerivative1': ...
    @typing.overload
    def subtract(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def subtract(self, univariateDerivative1: 'UnivariateDerivative1') -> 'UnivariateDerivative1': ...
    def taylor(self, double: float) -> float: ...
    def toDegrees(self) -> 'UnivariateDerivative1': ...
    def toDerivativeStructure(self) -> DerivativeStructure: ...
    def toRadians(self) -> 'UnivariateDerivative1': ...
    def withValue(self, double: float) -> 'UnivariateDerivative1': ...

class UnivariateDerivative2(UnivariateDerivative['UnivariateDerivative2']):
    PI: typing.ClassVar['UnivariateDerivative2'] = ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, derivativeStructure: DerivativeStructure): ...
    def abs(self) -> 'UnivariateDerivative2': ...
    def acos(self) -> 'UnivariateDerivative2': ...
    def acosh(self) -> 'UnivariateDerivative2': ...
    @typing.overload
    def add(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def add(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def asin(self) -> 'UnivariateDerivative2': ...
    def asinh(self) -> 'UnivariateDerivative2': ...
    def atan(self) -> 'UnivariateDerivative2': ...
    def atan2(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def atanh(self) -> 'UnivariateDerivative2': ...
    def cbrt(self) -> 'UnivariateDerivative2': ...
    def compareTo(self, univariateDerivative2: 'UnivariateDerivative2') -> int: ...
    def compose(self, doubleArray: typing.List[float]) -> 'UnivariateDerivative2': ...
    @typing.overload
    def copySign(self, double: float) -> 'UnivariateDerivative2': ...
    @typing.overload
    def copySign(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def cos(self) -> 'UnivariateDerivative2': ...
    def cosh(self) -> 'UnivariateDerivative2': ...
    @typing.overload
    def divide(self, double: float) -> 'UnivariateDerivative2': ...
    @typing.overload
    def divide(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def equals(self, object: typing.Any) -> bool: ...
    def exp(self) -> 'UnivariateDerivative2': ...
    def expm1(self) -> 'UnivariateDerivative2': ...
    def getDerivative(self, int: int) -> float: ...
    def getField(self) -> UnivariateDerivative2Field: ...
    def getFirstDerivative(self) -> float: ...
    def getOrder(self) -> int: ...
    def getPi(self) -> 'UnivariateDerivative2': ...
    def getSecondDerivative(self) -> float: ...
    def getValue(self) -> float: ...
    def hashCode(self) -> int: ...
    def hypot(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, double: float, univariateDerivative2: 'UnivariateDerivative2', double2: float, univariateDerivative22: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, double: float, univariateDerivative2: 'UnivariateDerivative2', double2: float, univariateDerivative22: 'UnivariateDerivative2', double3: float, univariateDerivative23: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, double: float, univariateDerivative2: 'UnivariateDerivative2', double2: float, univariateDerivative22: 'UnivariateDerivative2', double3: float, univariateDerivative23: 'UnivariateDerivative2', double4: float, univariateDerivative24: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, doubleArray: typing.List[float], univariateDerivative2Array: typing.List['UnivariateDerivative2']) -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, univariateDerivative2: 'UnivariateDerivative2', univariateDerivative22: 'UnivariateDerivative2', univariateDerivative23: 'UnivariateDerivative2', univariateDerivative24: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, univariateDerivative2: 'UnivariateDerivative2', univariateDerivative22: 'UnivariateDerivative2', univariateDerivative23: 'UnivariateDerivative2', univariateDerivative24: 'UnivariateDerivative2', univariateDerivative25: 'UnivariateDerivative2', univariateDerivative26: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, univariateDerivative2: 'UnivariateDerivative2', univariateDerivative22: 'UnivariateDerivative2', univariateDerivative23: 'UnivariateDerivative2', univariateDerivative24: 'UnivariateDerivative2', univariateDerivative25: 'UnivariateDerivative2', univariateDerivative26: 'UnivariateDerivative2', univariateDerivative27: 'UnivariateDerivative2', univariateDerivative28: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    @typing.overload
    def linearCombination(self, univariateDerivative2Array: typing.List['UnivariateDerivative2'], univariateDerivative2Array2: typing.List['UnivariateDerivative2']) -> 'UnivariateDerivative2': ...
    def log(self) -> 'UnivariateDerivative2': ...
    def log10(self) -> 'UnivariateDerivative2': ...
    def log1p(self) -> 'UnivariateDerivative2': ...
    @typing.overload
    def multiply(self, double: float) -> 'UnivariateDerivative2': ...
    @typing.overload
    def multiply(self, int: int) -> 'UnivariateDerivative2': ...
    @typing.overload
    def multiply(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def negate(self) -> 'UnivariateDerivative2': ...
    def newInstance(self, double: float) -> 'UnivariateDerivative2': ...
    @typing.overload
    def pow(self, t: org.hipparchus.CalculusFieldElement) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def pow(self, double: float) -> 'UnivariateDerivative2': ...
    @typing.overload
    def pow(self, int: int) -> 'UnivariateDerivative2': ...
    @typing.overload
    @staticmethod
    def pow(double: float, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def reciprocal(self) -> 'UnivariateDerivative2': ...
    @typing.overload
    def remainder(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def remainder(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def rootN(self, int: int) -> 'UnivariateDerivative2': ...
    def scalb(self, int: int) -> 'UnivariateDerivative2': ...
    def sin(self) -> 'UnivariateDerivative2': ...
    def sinCos(self) -> org.hipparchus.util.FieldSinCos['UnivariateDerivative2']: ...
    def sinh(self) -> 'UnivariateDerivative2': ...
    def sinhCosh(self) -> org.hipparchus.util.FieldSinhCosh['UnivariateDerivative2']: ...
    def sqrt(self) -> 'UnivariateDerivative2': ...
    def square(self) -> 'UnivariateDerivative2': ...
    @typing.overload
    def subtract(self, double: float) -> org.hipparchus.CalculusFieldElement: ...
    @typing.overload
    def subtract(self, univariateDerivative2: 'UnivariateDerivative2') -> 'UnivariateDerivative2': ...
    def tan(self) -> 'UnivariateDerivative2': ...
    def tanh(self) -> 'UnivariateDerivative2': ...
    def taylor(self, double: float) -> float: ...
    def toDegrees(self) -> 'UnivariateDerivative2': ...
    def toDerivativeStructure(self) -> DerivativeStructure: ...
    def toRadians(self) -> 'UnivariateDerivative2': ...
    def withValue(self, double: float) -> 'UnivariateDerivative2': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.analysis.differentiation")``.

    DSCompiler: typing.Type[DSCompiler]
    DSFactory: typing.Type[DSFactory]
    Derivative: typing.Type[Derivative]
    Derivative1: typing.Type[Derivative1]
    DerivativeStructure: typing.Type[DerivativeStructure]
    DifferentialAlgebra: typing.Type[DifferentialAlgebra]
    FDSFactory: typing.Type[FDSFactory]
    FieldDerivative: typing.Type[FieldDerivative]
    FieldDerivative1: typing.Type[FieldDerivative1]
    FieldDerivativeStructure: typing.Type[FieldDerivativeStructure]
    FieldGradient: typing.Type[FieldGradient]
    FieldGradientField: typing.Type[FieldGradientField]
    FieldTaylorMap: typing.Type[FieldTaylorMap]
    FieldUnivariateDerivative: typing.Type[FieldUnivariateDerivative]
    FieldUnivariateDerivative1: typing.Type[FieldUnivariateDerivative1]
    FieldUnivariateDerivative1Field: typing.Type[FieldUnivariateDerivative1Field]
    FieldUnivariateDerivative2: typing.Type[FieldUnivariateDerivative2]
    FieldUnivariateDerivative2Field: typing.Type[FieldUnivariateDerivative2Field]
    FiniteDifferencesDifferentiator: typing.Type[FiniteDifferencesDifferentiator]
    Gradient: typing.Type[Gradient]
    GradientField: typing.Type[GradientField]
    GradientFunction: typing.Type[GradientFunction]
    JacobianFunction: typing.Type[JacobianFunction]
    MultivariateDifferentiableFunction: typing.Type[MultivariateDifferentiableFunction]
    MultivariateDifferentiableVectorFunction: typing.Type[MultivariateDifferentiableVectorFunction]
    SparseGradient: typing.Type[SparseGradient]
    TaylorMap: typing.Type[TaylorMap]
    UnivariateDerivative: typing.Type[UnivariateDerivative]
    UnivariateDerivative1: typing.Type[UnivariateDerivative1]
    UnivariateDerivative1Field: typing.Type[UnivariateDerivative1Field]
    UnivariateDerivative2: typing.Type[UnivariateDerivative2]
    UnivariateDerivative2Field: typing.Type[UnivariateDerivative2Field]
    UnivariateDifferentiableFunction: typing.Type[UnivariateDifferentiableFunction]
    UnivariateDifferentiableMatrixFunction: typing.Type[UnivariateDifferentiableMatrixFunction]
    UnivariateDifferentiableVectorFunction: typing.Type[UnivariateDifferentiableVectorFunction]
    UnivariateFunctionDifferentiator: typing.Type[UnivariateFunctionDifferentiator]
    UnivariateMatrixFunctionDifferentiator: typing.Type[UnivariateMatrixFunctionDifferentiator]
    UnivariateVectorFunctionDifferentiator: typing.Type[UnivariateVectorFunctionDifferentiator]
    class-use: org.hipparchus.analysis.differentiation.class-use.__module_protocol__
