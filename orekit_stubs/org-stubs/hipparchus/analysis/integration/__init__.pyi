import org.hipparchus
import org.hipparchus.analysis
import org.hipparchus.analysis.integration.class-use
import org.hipparchus.analysis.integration.gauss
import typing



_FieldUnivariateIntegrator__T = typing.TypeVar('_FieldUnivariateIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldUnivariateIntegrator(typing.Generic[_FieldUnivariateIntegrator__T]):
    def getAbsoluteAccuracy(self) -> float: ...
    def getEvaluations(self) -> int: ...
    def getIterations(self) -> int: ...
    def getMaximalIterationCount(self) -> int: ...
    def getMinimalIterationCount(self) -> int: ...
    def getRelativeAccuracy(self) -> float: ...
    def integrate(self, int: int, calculusFieldUnivariateFunction: org.hipparchus.analysis.CalculusFieldUnivariateFunction[_FieldUnivariateIntegrator__T], t: _FieldUnivariateIntegrator__T, t2: _FieldUnivariateIntegrator__T) -> _FieldUnivariateIntegrator__T: ...

class UnivariateIntegrator:
    def getAbsoluteAccuracy(self) -> float: ...
    def getEvaluations(self) -> int: ...
    def getIterations(self) -> int: ...
    def getMaximalIterationCount(self) -> int: ...
    def getMinimalIterationCount(self) -> int: ...
    def getRelativeAccuracy(self) -> float: ...
    def integrate(self, int: int, univariateFunction: org.hipparchus.analysis.UnivariateFunction, double: float, double2: float) -> float: ...

_BaseAbstractFieldUnivariateIntegrator__T = typing.TypeVar('_BaseAbstractFieldUnivariateIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class BaseAbstractFieldUnivariateIntegrator(FieldUnivariateIntegrator[_BaseAbstractFieldUnivariateIntegrator__T], typing.Generic[_BaseAbstractFieldUnivariateIntegrator__T]):
    DEFAULT_ABSOLUTE_ACCURACY: typing.ClassVar[float] = ...
    DEFAULT_RELATIVE_ACCURACY: typing.ClassVar[float] = ...
    DEFAULT_MIN_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    DEFAULT_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    def getAbsoluteAccuracy(self) -> float: ...
    def getEvaluations(self) -> int: ...
    def getField(self) -> org.hipparchus.Field[_BaseAbstractFieldUnivariateIntegrator__T]: ...
    def getIterations(self) -> int: ...
    def getMaximalIterationCount(self) -> int: ...
    def getMinimalIterationCount(self) -> int: ...
    def getRelativeAccuracy(self) -> float: ...
    def integrate(self, int: int, calculusFieldUnivariateFunction: org.hipparchus.analysis.CalculusFieldUnivariateFunction[_BaseAbstractFieldUnivariateIntegrator__T], t: _BaseAbstractFieldUnivariateIntegrator__T, t2: _BaseAbstractFieldUnivariateIntegrator__T) -> _BaseAbstractFieldUnivariateIntegrator__T: ...

class BaseAbstractUnivariateIntegrator(UnivariateIntegrator):
    DEFAULT_ABSOLUTE_ACCURACY: typing.ClassVar[float] = ...
    DEFAULT_RELATIVE_ACCURACY: typing.ClassVar[float] = ...
    DEFAULT_MIN_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    DEFAULT_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    def getAbsoluteAccuracy(self) -> float: ...
    def getEvaluations(self) -> int: ...
    def getIterations(self) -> int: ...
    def getMaximalIterationCount(self) -> int: ...
    def getMinimalIterationCount(self) -> int: ...
    def getRelativeAccuracy(self) -> float: ...
    def integrate(self, int: int, univariateFunction: org.hipparchus.analysis.UnivariateFunction, double: float, double2: float) -> float: ...

_FieldMidPointIntegrator__T = typing.TypeVar('_FieldMidPointIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldMidPointIntegrator(BaseAbstractFieldUnivariateIntegrator[_FieldMidPointIntegrator__T], typing.Generic[_FieldMidPointIntegrator__T]):
    MIDPOINT_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldMidPointIntegrator__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldMidPointIntegrator__T], double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldMidPointIntegrator__T], int: int, int2: int): ...

_FieldRombergIntegrator__T = typing.TypeVar('_FieldRombergIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldRombergIntegrator(BaseAbstractFieldUnivariateIntegrator[_FieldRombergIntegrator__T], typing.Generic[_FieldRombergIntegrator__T]):
    ROMBERG_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldRombergIntegrator__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldRombergIntegrator__T], double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldRombergIntegrator__T], int: int, int2: int): ...

_FieldSimpsonIntegrator__T = typing.TypeVar('_FieldSimpsonIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldSimpsonIntegrator(BaseAbstractFieldUnivariateIntegrator[_FieldSimpsonIntegrator__T], typing.Generic[_FieldSimpsonIntegrator__T]):
    SIMPSON_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldSimpsonIntegrator__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldSimpsonIntegrator__T], double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldSimpsonIntegrator__T], int: int, int2: int): ...

_FieldTrapezoidIntegrator__T = typing.TypeVar('_FieldTrapezoidIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldTrapezoidIntegrator(BaseAbstractFieldUnivariateIntegrator[_FieldTrapezoidIntegrator__T], typing.Generic[_FieldTrapezoidIntegrator__T]):
    TRAPEZOID_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldTrapezoidIntegrator__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldTrapezoidIntegrator__T], double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldTrapezoidIntegrator__T], int: int, int2: int): ...

_IterativeLegendreFieldGaussIntegrator__T = typing.TypeVar('_IterativeLegendreFieldGaussIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class IterativeLegendreFieldGaussIntegrator(BaseAbstractFieldUnivariateIntegrator[_IterativeLegendreFieldGaussIntegrator__T], typing.Generic[_IterativeLegendreFieldGaussIntegrator__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_IterativeLegendreFieldGaussIntegrator__T], int: int, double: float, double2: float): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_IterativeLegendreFieldGaussIntegrator__T], int: int, double: float, double2: float, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_IterativeLegendreFieldGaussIntegrator__T], int: int, int2: int, int3: int): ...

class IterativeLegendreGaussIntegrator(BaseAbstractUnivariateIntegrator):
    @typing.overload
    def __init__(self, int: int, double: float, double2: float): ...
    @typing.overload
    def __init__(self, int: int, double: float, double2: float, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...

class MidPointIntegrator(BaseAbstractUnivariateIntegrator):
    MIDPOINT_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...

class RombergIntegrator(BaseAbstractUnivariateIntegrator):
    ROMBERG_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...

class SimpsonIntegrator(BaseAbstractUnivariateIntegrator):
    SIMPSON_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...

class TrapezoidIntegrator(BaseAbstractUnivariateIntegrator):
    TRAPEZOID_MAX_ITERATIONS_COUNT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.analysis.integration")``.

    BaseAbstractFieldUnivariateIntegrator: typing.Type[BaseAbstractFieldUnivariateIntegrator]
    BaseAbstractUnivariateIntegrator: typing.Type[BaseAbstractUnivariateIntegrator]
    FieldMidPointIntegrator: typing.Type[FieldMidPointIntegrator]
    FieldRombergIntegrator: typing.Type[FieldRombergIntegrator]
    FieldSimpsonIntegrator: typing.Type[FieldSimpsonIntegrator]
    FieldTrapezoidIntegrator: typing.Type[FieldTrapezoidIntegrator]
    FieldUnivariateIntegrator: typing.Type[FieldUnivariateIntegrator]
    IterativeLegendreFieldGaussIntegrator: typing.Type[IterativeLegendreFieldGaussIntegrator]
    IterativeLegendreGaussIntegrator: typing.Type[IterativeLegendreGaussIntegrator]
    MidPointIntegrator: typing.Type[MidPointIntegrator]
    RombergIntegrator: typing.Type[RombergIntegrator]
    SimpsonIntegrator: typing.Type[SimpsonIntegrator]
    TrapezoidIntegrator: typing.Type[TrapezoidIntegrator]
    UnivariateIntegrator: typing.Type[UnivariateIntegrator]
    class-use: org.hipparchus.analysis.integration.class-use.__module_protocol__
    gauss: org.hipparchus.analysis.integration.gauss.__module_protocol__
