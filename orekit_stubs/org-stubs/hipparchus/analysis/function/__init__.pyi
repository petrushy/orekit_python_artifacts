import org.hipparchus.analysis
import org.hipparchus.analysis.differentiation
import org.hipparchus.analysis.function.class-use
import typing



class Abs(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Acos(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Acosh(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Add(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Asin(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Asinh(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Atan(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Atan2(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Atanh(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Cbrt(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Ceil(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Constant(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self, double: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Cos(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Cosh(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Divide(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Exp(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Expm1(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Floor(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Gaussian(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...
    class Parametric(org.hipparchus.analysis.ParametricUnivariateFunction):
        def __init__(self): ...
        def gradient(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
        def value(self, double: float, doubleArray: typing.List[float]) -> float: ...

class HarmonicOscillator(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self, double: float, double2: float, double3: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...
    class Parametric(org.hipparchus.analysis.ParametricUnivariateFunction):
        def __init__(self): ...
        def gradient(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
        def value(self, double: float, doubleArray: typing.List[float]) -> float: ...

class Identity(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Inverse(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Log(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Log10(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Log1p(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Logistic(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...
    class Parametric(org.hipparchus.analysis.ParametricUnivariateFunction):
        def __init__(self): ...
        def gradient(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
        def value(self, double: float, doubleArray: typing.List[float]) -> float: ...

class Logit(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...
    class Parametric(org.hipparchus.analysis.ParametricUnivariateFunction):
        def __init__(self): ...
        def gradient(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
        def value(self, double: float, doubleArray: typing.List[float]) -> float: ...

class Max(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Min(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Minus(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Multiply(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Pow(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Power(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self, double: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Rint(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Sigmoid(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...
    class Parametric(org.hipparchus.analysis.ParametricUnivariateFunction):
        def __init__(self): ...
        def gradient(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
        def value(self, double: float, doubleArray: typing.List[float]) -> float: ...

class Sin(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Sinc(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Sinh(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Sqrt(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class StepFunction(org.hipparchus.analysis.UnivariateFunction):
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    def value(self, double: float) -> float: ...

class Subtract(org.hipparchus.analysis.BivariateFunction):
    def __init__(self): ...
    def value(self, double: float, double2: float) -> float: ...

class Tan(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Tanh(org.hipparchus.analysis.differentiation.UnivariateDifferentiableFunction):
    def __init__(self): ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.analysis.differentiation.Derivative)  # <T>
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    def value(self, t: _value_1__T) -> _value_1__T: ...

class Ulp(org.hipparchus.analysis.UnivariateFunction):
    def __init__(self): ...
    def value(self, double: float) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.analysis.function")``.

    Abs: typing.Type[Abs]
    Acos: typing.Type[Acos]
    Acosh: typing.Type[Acosh]
    Add: typing.Type[Add]
    Asin: typing.Type[Asin]
    Asinh: typing.Type[Asinh]
    Atan: typing.Type[Atan]
    Atan2: typing.Type[Atan2]
    Atanh: typing.Type[Atanh]
    Cbrt: typing.Type[Cbrt]
    Ceil: typing.Type[Ceil]
    Constant: typing.Type[Constant]
    Cos: typing.Type[Cos]
    Cosh: typing.Type[Cosh]
    Divide: typing.Type[Divide]
    Exp: typing.Type[Exp]
    Expm1: typing.Type[Expm1]
    Floor: typing.Type[Floor]
    Gaussian: typing.Type[Gaussian]
    HarmonicOscillator: typing.Type[HarmonicOscillator]
    Identity: typing.Type[Identity]
    Inverse: typing.Type[Inverse]
    Log: typing.Type[Log]
    Log10: typing.Type[Log10]
    Log1p: typing.Type[Log1p]
    Logistic: typing.Type[Logistic]
    Logit: typing.Type[Logit]
    Max: typing.Type[Max]
    Min: typing.Type[Min]
    Minus: typing.Type[Minus]
    Multiply: typing.Type[Multiply]
    Pow: typing.Type[Pow]
    Power: typing.Type[Power]
    Rint: typing.Type[Rint]
    Sigmoid: typing.Type[Sigmoid]
    Sin: typing.Type[Sin]
    Sinc: typing.Type[Sinc]
    Sinh: typing.Type[Sinh]
    Sqrt: typing.Type[Sqrt]
    StepFunction: typing.Type[StepFunction]
    Subtract: typing.Type[Subtract]
    Tan: typing.Type[Tan]
    Tanh: typing.Type[Tanh]
    Ulp: typing.Type[Ulp]
    class-use: org.hipparchus.analysis.function.class-use.__module_protocol__
