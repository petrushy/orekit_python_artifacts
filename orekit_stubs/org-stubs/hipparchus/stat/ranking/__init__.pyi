import java.lang
import org.hipparchus.random
import org.hipparchus.stat.ranking.class-use
import typing



class NaNStrategy(java.lang.Enum['NaNStrategy']):
    MINIMAL: typing.ClassVar['NaNStrategy'] = ...
    MAXIMAL: typing.ClassVar['NaNStrategy'] = ...
    REMOVED: typing.ClassVar['NaNStrategy'] = ...
    FIXED: typing.ClassVar['NaNStrategy'] = ...
    FAILED: typing.ClassVar['NaNStrategy'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'NaNStrategy': ...
    @staticmethod
    def values() -> typing.List['NaNStrategy']: ...

class RankingAlgorithm:
    def rank(self, doubleArray: typing.List[float]) -> typing.List[float]: ...

class TiesStrategy(java.lang.Enum['TiesStrategy']):
    SEQUENTIAL: typing.ClassVar['TiesStrategy'] = ...
    MINIMUM: typing.ClassVar['TiesStrategy'] = ...
    MAXIMUM: typing.ClassVar['TiesStrategy'] = ...
    AVERAGE: typing.ClassVar['TiesStrategy'] = ...
    RANDOM: typing.ClassVar['TiesStrategy'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TiesStrategy': ...
    @staticmethod
    def values() -> typing.List['TiesStrategy']: ...

class NaturalRanking(RankingAlgorithm):
    DEFAULT_NAN_STRATEGY: typing.ClassVar[NaNStrategy] = ...
    DEFAULT_TIES_STRATEGY: typing.ClassVar[TiesStrategy] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, randomGenerator: org.hipparchus.random.RandomGenerator): ...
    @typing.overload
    def __init__(self, naNStrategy: NaNStrategy): ...
    @typing.overload
    def __init__(self, naNStrategy: NaNStrategy, randomGenerator: org.hipparchus.random.RandomGenerator): ...
    @typing.overload
    def __init__(self, naNStrategy: NaNStrategy, tiesStrategy: TiesStrategy): ...
    @typing.overload
    def __init__(self, tiesStrategy: TiesStrategy): ...
    def getNanStrategy(self) -> NaNStrategy: ...
    def getTiesStrategy(self) -> TiesStrategy: ...
    def rank(self, doubleArray: typing.List[float]) -> typing.List[float]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.stat.ranking")``.

    NaNStrategy: typing.Type[NaNStrategy]
    NaturalRanking: typing.Type[NaturalRanking]
    RankingAlgorithm: typing.Type[RankingAlgorithm]
    TiesStrategy: typing.Type[TiesStrategy]
    class-use: org.hipparchus.stat.ranking.class-use.__module_protocol__
