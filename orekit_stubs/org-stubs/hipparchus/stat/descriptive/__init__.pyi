import java.io
import java.lang
import java.util.function
import org.hipparchus.linear
import org.hipparchus.random
import org.hipparchus.stat.descriptive.class-use
import org.hipparchus.stat.descriptive.moment
import org.hipparchus.stat.descriptive.rank
import org.hipparchus.stat.descriptive.summary
import org.hipparchus.stat.descriptive.vector
import org.hipparchus.util
import typing



_AggregatableStatistic__T = typing.TypeVar('_AggregatableStatistic__T')  # <T>
class AggregatableStatistic(typing.Generic[_AggregatableStatistic__T]):
    @typing.overload
    def aggregate(self, t: _AggregatableStatistic__T) -> None: ...
    @typing.overload
    def aggregate(self, iterable: java.lang.Iterable[_AggregatableStatistic__T]) -> None: ...
    @typing.overload
    def aggregate(self, tArray: typing.List[_AggregatableStatistic__T]) -> None: ...

class StatisticalMultivariateSummary:
    def getCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getDimension(self) -> int: ...
    def getGeometricMean(self) -> typing.List[float]: ...
    def getMax(self) -> typing.List[float]: ...
    def getMean(self) -> typing.List[float]: ...
    def getMin(self) -> typing.List[float]: ...
    def getN(self) -> int: ...
    def getStandardDeviation(self) -> typing.List[float]: ...
    def getSum(self) -> typing.List[float]: ...
    def getSumLog(self) -> typing.List[float]: ...
    def getSumSq(self) -> typing.List[float]: ...

class StatisticalSummary:
    @typing.overload
    @staticmethod
    def aggregate(iterable: java.lang.Iterable['StatisticalSummary']) -> 'StatisticalSummary': ...
    @typing.overload
    @staticmethod
    def aggregate(statisticalSummaryArray: typing.List['StatisticalSummary']) -> 'StatisticalSummary': ...
    def getMax(self) -> float: ...
    def getMean(self) -> float: ...
    def getMin(self) -> float: ...
    def getN(self) -> int: ...
    def getStandardDeviation(self) -> float: ...
    def getSum(self) -> float: ...
    def getVariance(self) -> float: ...

class StorelessMultivariateStatistic:
    def clear(self) -> None: ...
    def getDimension(self) -> int: ...
    def getN(self) -> int: ...
    def getResult(self) -> typing.List[float]: ...
    def increment(self, doubleArray: typing.List[float]) -> None: ...

class UnivariateStatistic(org.hipparchus.util.MathArrays.Function):
    def copy(self) -> 'UnivariateStatistic': ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float], int: int, int2: int) -> float: ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float]) -> float: ...

class WeightedEvaluation:
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], int: int, int2: int) -> float: ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> float: ...

class AbstractUnivariateStatistic(UnivariateStatistic):
    def copy(self) -> UnivariateStatistic: ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float], int: int, int2: int) -> float: ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def evaluate(self) -> float: ...
    def getData(self) -> typing.List[float]: ...
    @typing.overload
    def setData(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setData(self, doubleArray: typing.List[float], int: int, int2: int) -> None: ...

class DescriptiveStatistics(StatisticalSummary, java.util.function.DoubleConsumer, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, int: int): ...
    def accept(self, double: float) -> None: ...
    def addValue(self, double: float) -> None: ...
    def apply(self, univariateStatistic: UnivariateStatistic) -> float: ...
    def clear(self) -> None: ...
    def copy(self) -> 'DescriptiveStatistics': ...
    def getElement(self, int: int) -> float: ...
    def getGeometricMean(self) -> float: ...
    def getKurtosis(self) -> float: ...
    def getMax(self) -> float: ...
    def getMean(self) -> float: ...
    def getMin(self) -> float: ...
    def getN(self) -> int: ...
    def getPercentile(self, double: float) -> float: ...
    def getPopulationVariance(self) -> float: ...
    def getQuadraticMean(self) -> float: ...
    def getSkewness(self) -> float: ...
    def getSortedValues(self) -> typing.List[float]: ...
    def getStandardDeviation(self) -> float: ...
    def getSum(self) -> float: ...
    def getSumOfSquares(self) -> float: ...
    def getValues(self) -> typing.List[float]: ...
    def getVariance(self) -> float: ...
    def getWindowSize(self) -> int: ...
    def removeMostRecentValue(self) -> None: ...
    def replaceMostRecentValue(self, double: float) -> float: ...
    def setWindowSize(self, int: int) -> None: ...
    def toString(self) -> str: ...

class MultivariateSummaryStatistics(StatisticalMultivariateSummary, java.io.Serializable):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool): ...
    def addValue(self, doubleArray: typing.List[float]) -> None: ...
    def clear(self) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getDimension(self) -> int: ...
    def getGeometricMean(self) -> typing.List[float]: ...
    def getMax(self) -> typing.List[float]: ...
    def getMean(self) -> typing.List[float]: ...
    def getMin(self) -> typing.List[float]: ...
    def getN(self) -> int: ...
    def getStandardDeviation(self) -> typing.List[float]: ...
    def getSum(self) -> typing.List[float]: ...
    def getSumLog(self) -> typing.List[float]: ...
    def getSumSq(self) -> typing.List[float]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class StatisticalSummaryValues(java.io.Serializable, StatisticalSummary):
    def __init__(self, double: float, double2: float, long: int, double3: float, double4: float, double5: float): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMax(self) -> float: ...
    def getMean(self) -> float: ...
    def getMin(self) -> float: ...
    def getN(self) -> int: ...
    def getStandardDeviation(self) -> float: ...
    def getSum(self) -> float: ...
    def getVariance(self) -> float: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class StorelessUnivariateStatistic(UnivariateStatistic, java.util.function.DoubleConsumer):
    def accept(self, double: float) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> 'StorelessUnivariateStatistic': ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float], int: int, int2: int) -> float: ...
    @typing.overload
    def evaluate(self, doubleArray: typing.List[float]) -> float: ...
    def getN(self) -> int: ...
    def getResult(self) -> float: ...
    def increment(self, double: float) -> None: ...
    @typing.overload
    def incrementAll(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def incrementAll(self, doubleArray: typing.List[float], int: int, int2: int) -> None: ...

class StreamingStatistics(StatisticalSummary, AggregatableStatistic['StreamingStatistics'], java.util.function.DoubleConsumer, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, randomGenerator: org.hipparchus.random.RandomGenerator): ...
    def accept(self, double: float) -> None: ...
    def addValue(self, double: float) -> None: ...
    @typing.overload
    def aggregate(self, iterable: java.lang.Iterable[typing.Any]) -> None: ...
    @typing.overload
    def aggregate(self, tArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def aggregate(self, streamingStatistics: 'StreamingStatistics') -> None: ...
    @staticmethod
    def builder() -> 'StreamingStatistics.StreamingStatisticsBuilder': ...
    def clear(self) -> None: ...
    def copy(self) -> 'StreamingStatistics': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getGeometricMean(self) -> float: ...
    def getMax(self) -> float: ...
    def getMean(self) -> float: ...
    def getMedian(self) -> float: ...
    def getMin(self) -> float: ...
    def getN(self) -> int: ...
    def getPercentile(self, double: float) -> float: ...
    def getPopulationVariance(self) -> float: ...
    def getQuadraticMean(self) -> float: ...
    def getSecondMoment(self) -> float: ...
    def getStandardDeviation(self) -> float: ...
    def getSum(self) -> float: ...
    def getSumOfLogs(self) -> float: ...
    def getSumOfSquares(self) -> float: ...
    def getSummary(self) -> StatisticalSummary: ...
    def getVariance(self) -> float: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    class StreamingStatisticsBuilder:
        def __init__(self): ...
        def build(self) -> 'StreamingStatistics': ...
        def extrema(self, boolean: bool) -> 'StreamingStatistics.StreamingStatisticsBuilder': ...
        def moments(self, boolean: bool) -> 'StreamingStatistics.StreamingStatisticsBuilder': ...
        def percentiles(self, double: float, randomGenerator: org.hipparchus.random.RandomGenerator) -> 'StreamingStatistics.StreamingStatisticsBuilder': ...
        def sumOfLogs(self, boolean: bool) -> 'StreamingStatistics.StreamingStatisticsBuilder': ...
        def sumOfSquares(self, boolean: bool) -> 'StreamingStatistics.StreamingStatisticsBuilder': ...

class AbstractStorelessUnivariateStatistic(StorelessUnivariateStatistic):
    def __init__(self): ...
    def clear(self) -> None: ...
    def copy(self) -> StorelessUnivariateStatistic: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getResult(self) -> float: ...
    def hashCode(self) -> int: ...
    def increment(self, double: float) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.stat.descriptive")``.

    AbstractStorelessUnivariateStatistic: typing.Type[AbstractStorelessUnivariateStatistic]
    AbstractUnivariateStatistic: typing.Type[AbstractUnivariateStatistic]
    AggregatableStatistic: typing.Type[AggregatableStatistic]
    DescriptiveStatistics: typing.Type[DescriptiveStatistics]
    MultivariateSummaryStatistics: typing.Type[MultivariateSummaryStatistics]
    StatisticalMultivariateSummary: typing.Type[StatisticalMultivariateSummary]
    StatisticalSummary: typing.Type[StatisticalSummary]
    StatisticalSummaryValues: typing.Type[StatisticalSummaryValues]
    StorelessMultivariateStatistic: typing.Type[StorelessMultivariateStatistic]
    StorelessUnivariateStatistic: typing.Type[StorelessUnivariateStatistic]
    StreamingStatistics: typing.Type[StreamingStatistics]
    UnivariateStatistic: typing.Type[UnivariateStatistic]
    WeightedEvaluation: typing.Type[WeightedEvaluation]
    class-use: org.hipparchus.stat.descriptive.class-use.__module_protocol__
    moment: org.hipparchus.stat.descriptive.moment.__module_protocol__
    rank: org.hipparchus.stat.descriptive.rank.__module_protocol__
    summary: org.hipparchus.stat.descriptive.summary.__module_protocol__
    vector: org.hipparchus.stat.descriptive.vector.__module_protocol__
