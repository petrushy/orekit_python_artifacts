import java.io
import org.hipparchus.linear
import org.hipparchus.stat.descriptive
import typing



class VectorialCovariance(java.io.Serializable):
    def __init__(self, int: int, boolean: bool): ...
    def clear(self) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getN(self) -> int: ...
    def getResult(self) -> org.hipparchus.linear.RealMatrix: ...
    def hashCode(self) -> int: ...
    def increment(self, doubleArray: typing.List[float]) -> None: ...

class VectorialStorelessStatistic(org.hipparchus.stat.descriptive.StorelessMultivariateStatistic, java.io.Serializable):
    def __init__(self, int: int, storelessUnivariateStatistic: org.hipparchus.stat.descriptive.StorelessUnivariateStatistic): ...
    def clear(self) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDimension(self) -> int: ...
    def getN(self) -> int: ...
    def getResult(self) -> typing.List[float]: ...
    def hashCode(self) -> int: ...
    def increment(self, doubleArray: typing.List[float]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.stat.descriptive.vector")``.

    VectorialCovariance: typing.Type[VectorialCovariance]
    VectorialStorelessStatistic: typing.Type[VectorialStorelessStatistic]
