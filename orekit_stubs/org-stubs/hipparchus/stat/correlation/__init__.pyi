import org.hipparchus.linear
import org.hipparchus.stat.correlation.class-use
import org.hipparchus.stat.ranking
import typing



class Covariance:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[typing.List[float]]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[typing.List[float]], boolean: bool): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, boolean: bool): ...
    @typing.overload
    def covariance(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> float: ...
    @typing.overload
    def covariance(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], boolean: bool) -> float: ...
    def getCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getN(self) -> int: ...

class KendallsCorrelation:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[typing.List[float]]): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def computeCorrelationMatrix(self, doubleArray: typing.List[typing.List[float]]) -> org.hipparchus.linear.RealMatrix: ...
    @typing.overload
    def computeCorrelationMatrix(self, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealMatrix: ...
    def correlation(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> float: ...
    def getCorrelationMatrix(self) -> org.hipparchus.linear.RealMatrix: ...

class PearsonsCorrelation:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[typing.List[float]]): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, int: int): ...
    @typing.overload
    def __init__(self, covariance: Covariance): ...
    @typing.overload
    def computeCorrelationMatrix(self, doubleArray: typing.List[typing.List[float]]) -> org.hipparchus.linear.RealMatrix: ...
    @typing.overload
    def computeCorrelationMatrix(self, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealMatrix: ...
    def correlation(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> float: ...
    def covarianceToCorrelation(self, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealMatrix: ...
    def getCorrelationMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getCorrelationPValues(self) -> org.hipparchus.linear.RealMatrix: ...
    def getCorrelationStandardErrors(self) -> org.hipparchus.linear.RealMatrix: ...

class SpearmansCorrelation:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, rankingAlgorithm: org.hipparchus.stat.ranking.RankingAlgorithm): ...
    @typing.overload
    def __init__(self, rankingAlgorithm: org.hipparchus.stat.ranking.RankingAlgorithm): ...
    @typing.overload
    def computeCorrelationMatrix(self, doubleArray: typing.List[typing.List[float]]) -> org.hipparchus.linear.RealMatrix: ...
    @typing.overload
    def computeCorrelationMatrix(self, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealMatrix: ...
    def correlation(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> float: ...
    def getCorrelationMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getRankCorrelation(self) -> PearsonsCorrelation: ...

class StorelessCovariance(Covariance):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool): ...
    def append(self, storelessCovariance: 'StorelessCovariance') -> None: ...
    def getCovariance(self, int: int, int2: int) -> float: ...
    def getCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getData(self) -> typing.List[typing.List[float]]: ...
    def getN(self) -> int: ...
    def increment(self, doubleArray: typing.List[float]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.stat.correlation")``.

    Covariance: typing.Type[Covariance]
    KendallsCorrelation: typing.Type[KendallsCorrelation]
    PearsonsCorrelation: typing.Type[PearsonsCorrelation]
    SpearmansCorrelation: typing.Type[SpearmansCorrelation]
    StorelessCovariance: typing.Type[StorelessCovariance]
    class-use: org.hipparchus.stat.correlation.class-use.__module_protocol__
