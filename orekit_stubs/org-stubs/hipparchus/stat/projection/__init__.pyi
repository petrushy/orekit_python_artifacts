import typing



class PCA:
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool, boolean2: bool): ...
    def fit(self, doubleArray: typing.List[typing.List[float]]) -> 'PCA': ...
    def fitAndTransform(self, doubleArray: typing.List[typing.List[float]]) -> typing.List[typing.List[float]]: ...
    def getCenter(self) -> typing.List[float]: ...
    def getComponents(self) -> typing.List[typing.List[float]]: ...
    def getNumComponents(self) -> int: ...
    def getVariance(self) -> typing.List[float]: ...
    def isBiasCorrection(self) -> bool: ...
    def isScale(self) -> bool: ...
    def transform(self, doubleArray: typing.List[typing.List[float]]) -> typing.List[typing.List[float]]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.stat.projection")``.

    PCA: typing.Type[PCA]
