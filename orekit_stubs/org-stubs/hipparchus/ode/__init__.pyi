import java.io
import java.lang
import java.util
import org.hipparchus
import org.hipparchus.complex
import org.hipparchus.exception
import org.hipparchus.ode.events
import org.hipparchus.ode.nonstiff
import org.hipparchus.ode.sampling
import typing



class ComplexODEConverter:
    def __init__(self): ...
    def convertEquations(self, complexOrdinaryDifferentialEquation: 'ComplexOrdinaryDifferentialEquation') -> 'OrdinaryDifferentialEquation': ...
    def convertSecondaryEquations(self, complexSecondaryODE: 'ComplexSecondaryODE') -> 'SecondaryODE': ...
    @typing.overload
    def convertState(self, oDEStateAndDerivative: 'ODEStateAndDerivative') -> 'ComplexODEStateAndDerivative': ...
    @typing.overload
    def convertState(self, complexODEState: 'ComplexODEState') -> 'ODEState': ...

class ComplexODEState(java.io.Serializable):
    @typing.overload
    def __init__(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex]): ...
    @typing.overload
    def __init__(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex], complexArray2: typing.List[typing.List[org.hipparchus.complex.Complex]]): ...
    def getCompleteState(self) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getCompleteStateDimension(self) -> int: ...
    def getNumberOfSecondaryStates(self) -> int: ...
    def getPrimaryState(self) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getPrimaryStateDimension(self) -> int: ...
    def getSecondaryState(self, int: int) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getSecondaryStateDimension(self, int: int) -> int: ...
    def getTime(self) -> float: ...

class ComplexOrdinaryDifferentialEquation:
    def computeDerivatives(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex]) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getDimension(self) -> int: ...
    def init(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex], double2: float) -> None: ...

class ComplexSecondaryODE:
    def computeDerivatives(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex], complexArray2: typing.List[org.hipparchus.complex.Complex], complexArray3: typing.List[org.hipparchus.complex.Complex]) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getDimension(self) -> int: ...
    def init(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex], complexArray2: typing.List[org.hipparchus.complex.Complex], double2: float) -> None: ...

class DenseOutputModel(org.hipparchus.ode.sampling.ODEStepHandler, java.io.Serializable):
    def __init__(self): ...
    def append(self, denseOutputModel: 'DenseOutputModel') -> None: ...
    def finish(self, oDEStateAndDerivative: 'ODEStateAndDerivative') -> None: ...
    def getFinalTime(self) -> float: ...
    def getInitialTime(self) -> float: ...
    def getInterpolatedState(self, double: float) -> 'ODEStateAndDerivative': ...
    def handleStep(self, oDEStateInterpolator: org.hipparchus.ode.sampling.ODEStateInterpolator) -> None: ...
    def init(self, oDEStateAndDerivative: 'ODEStateAndDerivative', double: float) -> None: ...

class EquationsMapper(java.io.Serializable):
    def extractEquationData(self, int: int, doubleArray: typing.List[float]) -> typing.List[float]: ...
    def getNumberOfEquations(self) -> int: ...
    def getTotalDimension(self) -> int: ...
    def insertEquationData(self, int: int, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> None: ...
    def mapStateAndDerivative(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> 'ODEStateAndDerivative': ...

class ExpandableODE:
    def __init__(self, ordinaryDifferentialEquation: 'OrdinaryDifferentialEquation'): ...
    def addSecondaryEquations(self, secondaryODE: 'SecondaryODE') -> int: ...
    def computeDerivatives(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
    def getMapper(self) -> EquationsMapper: ...
    def getPrimary(self) -> 'OrdinaryDifferentialEquation': ...
    def init(self, oDEState: 'ODEState', double: float) -> None: ...

_FieldDenseOutputModel__T = typing.TypeVar('_FieldDenseOutputModel__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldDenseOutputModel(org.hipparchus.ode.sampling.FieldODEStepHandler[_FieldDenseOutputModel__T], typing.Generic[_FieldDenseOutputModel__T]):
    def __init__(self): ...
    def append(self, fieldDenseOutputModel: 'FieldDenseOutputModel'[_FieldDenseOutputModel__T]) -> None: ...
    def finish(self, fieldODEStateAndDerivative: 'FieldODEStateAndDerivative'[_FieldDenseOutputModel__T]) -> None: ...
    def getFinalTime(self) -> _FieldDenseOutputModel__T: ...
    def getInitialTime(self) -> _FieldDenseOutputModel__T: ...
    def getInterpolatedState(self, t: _FieldDenseOutputModel__T) -> 'FieldODEStateAndDerivative'[_FieldDenseOutputModel__T]: ...
    def handleStep(self, fieldODEStateInterpolator: org.hipparchus.ode.sampling.FieldODEStateInterpolator[_FieldDenseOutputModel__T]) -> None: ...
    def init(self, fieldODEStateAndDerivative: 'FieldODEStateAndDerivative'[_FieldDenseOutputModel__T], t: _FieldDenseOutputModel__T) -> None: ...

_FieldEquationsMapper__T = typing.TypeVar('_FieldEquationsMapper__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEquationsMapper(java.io.Serializable, typing.Generic[_FieldEquationsMapper__T]):
    def extractEquationData(self, int: int, tArray: typing.List[_FieldEquationsMapper__T]) -> typing.List[_FieldEquationsMapper__T]: ...
    def getNumberOfEquations(self) -> int: ...
    def getTotalDimension(self) -> int: ...
    def insertEquationData(self, int: int, tArray: typing.List[_FieldEquationsMapper__T], tArray2: typing.List[_FieldEquationsMapper__T]) -> None: ...
    def mapStateAndDerivative(self, t: _FieldEquationsMapper__T, tArray: typing.List[_FieldEquationsMapper__T], tArray2: typing.List[_FieldEquationsMapper__T]) -> 'FieldODEStateAndDerivative'[_FieldEquationsMapper__T]: ...

_FieldExpandableODE__T = typing.TypeVar('_FieldExpandableODE__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldExpandableODE(typing.Generic[_FieldExpandableODE__T]):
    def __init__(self, fieldOrdinaryDifferentialEquation: 'FieldOrdinaryDifferentialEquation'[_FieldExpandableODE__T]): ...
    def addSecondaryEquations(self, fieldSecondaryODE: 'FieldSecondaryODE'[_FieldExpandableODE__T]) -> int: ...
    def computeDerivatives(self, t: _FieldExpandableODE__T, tArray: typing.List[_FieldExpandableODE__T]) -> typing.List[_FieldExpandableODE__T]: ...
    def getMapper(self) -> FieldEquationsMapper[_FieldExpandableODE__T]: ...
    def getPrimary(self) -> 'FieldOrdinaryDifferentialEquation'[_FieldExpandableODE__T]: ...
    def init(self, fieldODEState: 'FieldODEState'[_FieldExpandableODE__T], t: _FieldExpandableODE__T) -> None: ...

_FieldODEIntegrator__T = typing.TypeVar('_FieldODEIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldODEIntegrator(typing.Generic[_FieldODEIntegrator__T]):
    def addEventDetector(self, fieldODEEventDetector: org.hipparchus.ode.events.FieldODEEventDetector[_FieldODEIntegrator__T]) -> None: ...
    def addStepEndHandler(self, fieldODEStepEndHandler: org.hipparchus.ode.events.FieldODEStepEndHandler[_FieldODEIntegrator__T]) -> None: ...
    def addStepHandler(self, fieldODEStepHandler: org.hipparchus.ode.sampling.FieldODEStepHandler[_FieldODEIntegrator__T]) -> None: ...
    def clearEventDetectors(self) -> None: ...
    def clearStepEndHandlers(self) -> None: ...
    def clearStepHandlers(self) -> None: ...
    def getCurrentSignedStepsize(self) -> _FieldODEIntegrator__T: ...
    def getEvaluations(self) -> int: ...
    def getEventDetectors(self) -> java.util.List[org.hipparchus.ode.events.FieldODEEventDetector[_FieldODEIntegrator__T]]: ...
    def getMaxEvaluations(self) -> int: ...
    def getName(self) -> str: ...
    def getStepEndHandlers(self) -> java.util.List[org.hipparchus.ode.events.FieldODEStepEndHandler[_FieldODEIntegrator__T]]: ...
    def getStepHandlers(self) -> java.util.List[org.hipparchus.ode.sampling.FieldODEStepHandler[_FieldODEIntegrator__T]]: ...
    def getStepStart(self) -> 'FieldODEStateAndDerivative'[_FieldODEIntegrator__T]: ...
    def integrate(self, fieldExpandableODE: FieldExpandableODE[_FieldODEIntegrator__T], fieldODEState: 'FieldODEState'[_FieldODEIntegrator__T], t: _FieldODEIntegrator__T) -> 'FieldODEStateAndDerivative'[_FieldODEIntegrator__T]: ...
    def setMaxEvaluations(self, int: int) -> None: ...

_FieldODEState__T = typing.TypeVar('_FieldODEState__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldODEState(typing.Generic[_FieldODEState__T]):
    @typing.overload
    def __init__(self, t: _FieldODEState__T, tArray: typing.List[_FieldODEState__T]): ...
    @typing.overload
    def __init__(self, t: _FieldODEState__T, tArray: typing.List[_FieldODEState__T], tArray2: typing.List[typing.List[_FieldODEState__T]]): ...
    def getCompleteState(self) -> typing.List[_FieldODEState__T]: ...
    def getCompleteStateDimension(self) -> int: ...
    def getNumberOfSecondaryStates(self) -> int: ...
    def getPrimaryState(self) -> typing.List[_FieldODEState__T]: ...
    def getPrimaryStateDimension(self) -> int: ...
    def getSecondaryState(self, int: int) -> typing.List[_FieldODEState__T]: ...
    def getSecondaryStateDimension(self, int: int) -> int: ...
    def getTime(self) -> _FieldODEState__T: ...

_FieldOrdinaryDifferentialEquation__T = typing.TypeVar('_FieldOrdinaryDifferentialEquation__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldOrdinaryDifferentialEquation(typing.Generic[_FieldOrdinaryDifferentialEquation__T]):
    def computeDerivatives(self, t: _FieldOrdinaryDifferentialEquation__T, tArray: typing.List[_FieldOrdinaryDifferentialEquation__T]) -> typing.List[_FieldOrdinaryDifferentialEquation__T]: ...
    def getDimension(self) -> int: ...
    def init(self, t: _FieldOrdinaryDifferentialEquation__T, tArray: typing.List[_FieldOrdinaryDifferentialEquation__T], t3: _FieldOrdinaryDifferentialEquation__T) -> None: ...

_FieldSecondaryODE__T = typing.TypeVar('_FieldSecondaryODE__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldSecondaryODE(typing.Generic[_FieldSecondaryODE__T]):
    def computeDerivatives(self, t: _FieldSecondaryODE__T, tArray: typing.List[_FieldSecondaryODE__T], tArray2: typing.List[_FieldSecondaryODE__T], tArray3: typing.List[_FieldSecondaryODE__T]) -> typing.List[_FieldSecondaryODE__T]: ...
    def getDimension(self) -> int: ...
    def init(self, t: _FieldSecondaryODE__T, tArray: typing.List[_FieldSecondaryODE__T], tArray2: typing.List[_FieldSecondaryODE__T], t4: _FieldSecondaryODE__T) -> None: ...

class LocalizedODEFormats(java.lang.Enum['LocalizedODEFormats'], org.hipparchus.exception.Localizable):
    HOLE_BETWEEN_MODELS_TIME_RANGES: typing.ClassVar['LocalizedODEFormats'] = ...
    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS: typing.ClassVar['LocalizedODEFormats'] = ...
    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION: typing.ClassVar['LocalizedODEFormats'] = ...
    MULTISTEP_STARTER_STOPPED_EARLY: typing.ClassVar['LocalizedODEFormats'] = ...
    PROPAGATION_DIRECTION_MISMATCH: typing.ClassVar['LocalizedODEFormats'] = ...
    TOO_SMALL_INTEGRATION_INTERVAL: typing.ClassVar['LocalizedODEFormats'] = ...
    UNKNOWN_PARAMETER: typing.ClassVar['LocalizedODEFormats'] = ...
    UNMATCHED_ODE_IN_EXPANDED_SET: typing.ClassVar['LocalizedODEFormats'] = ...
    NAN_APPEARING_DURING_INTEGRATION: typing.ClassVar['LocalizedODEFormats'] = ...
    FIND_ROOT: typing.ClassVar['LocalizedODEFormats'] = ...
    def getLocalizedString(self, locale: java.util.Locale) -> str: ...
    def getSourceString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LocalizedODEFormats': ...
    @staticmethod
    def values() -> typing.List['LocalizedODEFormats']: ...

_MultistepFieldIntegrator__T = typing.TypeVar('_MultistepFieldIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class MultistepFieldIntegrator(org.hipparchus.ode.nonstiff.AdaptiveStepsizeFieldIntegrator[_MultistepFieldIntegrator__T], typing.Generic[_MultistepFieldIntegrator__T]):
    def getMaxGrowth(self) -> float: ...
    def getMinReduction(self) -> float: ...
    def getNSteps(self) -> int: ...
    def getSafety(self) -> float: ...
    def getStarterIntegrator(self) -> FieldODEIntegrator[_MultistepFieldIntegrator__T]: ...
    def setMaxGrowth(self, double: float) -> None: ...
    def setMinReduction(self, double: float) -> None: ...
    def setSafety(self, double: float) -> None: ...
    def setStarterIntegrator(self, fieldODEIntegrator: FieldODEIntegrator[_MultistepFieldIntegrator__T]) -> None: ...

class MultistepIntegrator(org.hipparchus.ode.nonstiff.AdaptiveStepsizeIntegrator):
    def getMaxGrowth(self) -> float: ...
    def getMinReduction(self) -> float: ...
    def getNSteps(self) -> int: ...
    def getSafety(self) -> float: ...
    def getStarterIntegrator(self) -> 'ODEIntegrator': ...
    def setMaxGrowth(self, double: float) -> None: ...
    def setMinReduction(self, double: float) -> None: ...
    def setSafety(self, double: float) -> None: ...
    def setStarterIntegrator(self, oDEIntegrator: 'ODEIntegrator') -> None: ...

class ODEIntegrator:
    def addEventDetector(self, oDEEventDetector: org.hipparchus.ode.events.ODEEventDetector) -> None: ...
    def addStepEndHandler(self, oDEStepEndHandler: org.hipparchus.ode.events.ODEStepEndHandler) -> None: ...
    def addStepHandler(self, oDEStepHandler: org.hipparchus.ode.sampling.ODEStepHandler) -> None: ...
    def clearEventDetectors(self) -> None: ...
    def clearStepEndHandlers(self) -> None: ...
    def clearStepHandlers(self) -> None: ...
    def getCurrentSignedStepsize(self) -> float: ...
    def getEvaluations(self) -> int: ...
    def getEventDetectors(self) -> java.util.List[org.hipparchus.ode.events.ODEEventDetector]: ...
    def getMaxEvaluations(self) -> int: ...
    def getName(self) -> str: ...
    def getStepEndHandlers(self) -> java.util.List[org.hipparchus.ode.events.ODEStepEndHandler]: ...
    def getStepHandlers(self) -> java.util.List[org.hipparchus.ode.sampling.ODEStepHandler]: ...
    def getStepStart(self) -> 'ODEStateAndDerivative': ...
    @typing.overload
    def integrate(self, expandableODE: ExpandableODE, oDEState: 'ODEState', double: float) -> 'ODEStateAndDerivative': ...
    @typing.overload
    def integrate(self, ordinaryDifferentialEquation: 'OrdinaryDifferentialEquation', oDEState: 'ODEState', double: float) -> 'ODEStateAndDerivative': ...
    def setMaxEvaluations(self, int: int) -> None: ...

class ODEState(java.io.Serializable):
    @typing.overload
    def __init__(self, double: float, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[typing.List[float]]): ...
    def getCompleteState(self) -> typing.List[float]: ...
    def getCompleteStateDimension(self) -> int: ...
    def getNumberOfSecondaryStates(self) -> int: ...
    def getPrimaryState(self) -> typing.List[float]: ...
    def getPrimaryStateDimension(self) -> int: ...
    def getSecondaryState(self, int: int) -> typing.List[float]: ...
    def getSecondaryStateDimension(self, int: int) -> int: ...
    def getTime(self) -> float: ...

class OrdinaryDifferentialEquation:
    def computeDerivatives(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
    def getDimension(self) -> int: ...
    def init(self, double: float, doubleArray: typing.List[float], double3: float) -> None: ...

class ParameterConfiguration:
    def getHP(self) -> float: ...
    def getParameterName(self) -> str: ...

class Parameterizable:
    def getParametersNames(self) -> java.util.List[str]: ...
    def isSupported(self, string: str) -> bool: ...

class SecondOrderODE:
    def computeSecondDerivatives(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> typing.List[float]: ...
    def getDimension(self) -> int: ...

class SecondaryODE:
    def computeDerivatives(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float]) -> typing.List[float]: ...
    def getDimension(self) -> int: ...
    def init(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float], double4: float) -> None: ...

class VariationalEquation:
    @typing.overload
    def __init__(self, expandableODE: ExpandableODE, oDEJacobiansProvider: 'ODEJacobiansProvider'): ...
    @typing.overload
    def __init__(self, expandableODE: ExpandableODE, ordinaryDifferentialEquation: OrdinaryDifferentialEquation, doubleArray: typing.List[float], parametersController: 'ParametersController', *parameterConfiguration: ParameterConfiguration): ...
    def extractMainSetJacobian(self, oDEState: ODEState) -> typing.List[typing.List[float]]: ...
    def extractParameterJacobian(self, oDEState: ODEState, string: str) -> typing.List[float]: ...
    def setInitialMainStateJacobian(self, doubleArray: typing.List[typing.List[float]]) -> None: ...
    def setInitialParameterJacobian(self, string: str, doubleArray: typing.List[float]) -> None: ...
    def setUpInitialState(self, oDEState: ODEState) -> ODEState: ...
    class MismatchedEquations(org.hipparchus.exception.MathIllegalArgumentException):
        def __init__(self): ...

_AbstractFieldIntegrator__T = typing.TypeVar('_AbstractFieldIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class AbstractFieldIntegrator(FieldODEIntegrator[_AbstractFieldIntegrator__T], typing.Generic[_AbstractFieldIntegrator__T]):
    def addEventDetector(self, fieldODEEventDetector: org.hipparchus.ode.events.FieldODEEventDetector[_AbstractFieldIntegrator__T]) -> None: ...
    def addStepEndHandler(self, fieldODEStepEndHandler: org.hipparchus.ode.events.FieldODEStepEndHandler[_AbstractFieldIntegrator__T]) -> None: ...
    def addStepHandler(self, fieldODEStepHandler: org.hipparchus.ode.sampling.FieldODEStepHandler[_AbstractFieldIntegrator__T]) -> None: ...
    def clearEventDetectors(self) -> None: ...
    def clearStepEndHandlers(self) -> None: ...
    def clearStepHandlers(self) -> None: ...
    def computeDerivatives(self, t: _AbstractFieldIntegrator__T, tArray: typing.List[_AbstractFieldIntegrator__T]) -> typing.List[_AbstractFieldIntegrator__T]: ...
    def getCurrentSignedStepsize(self) -> _AbstractFieldIntegrator__T: ...
    def getEvaluations(self) -> int: ...
    def getEventDetectors(self) -> java.util.List[org.hipparchus.ode.events.FieldODEEventDetector[_AbstractFieldIntegrator__T]]: ...
    def getField(self) -> org.hipparchus.Field[_AbstractFieldIntegrator__T]: ...
    def getMaxEvaluations(self) -> int: ...
    def getName(self) -> str: ...
    def getStepEndHandlers(self) -> java.util.List[org.hipparchus.ode.events.FieldODEStepEndHandler[_AbstractFieldIntegrator__T]]: ...
    def getStepHandlers(self) -> java.util.List[org.hipparchus.ode.sampling.FieldODEStepHandler[_AbstractFieldIntegrator__T]]: ...
    def getStepStart(self) -> 'FieldODEStateAndDerivative'[_AbstractFieldIntegrator__T]: ...
    def setMaxEvaluations(self, int: int) -> None: ...

class AbstractIntegrator(ODEIntegrator):
    def addEventDetector(self, oDEEventDetector: org.hipparchus.ode.events.ODEEventDetector) -> None: ...
    def addStepEndHandler(self, oDEStepEndHandler: org.hipparchus.ode.events.ODEStepEndHandler) -> None: ...
    def addStepHandler(self, oDEStepHandler: org.hipparchus.ode.sampling.ODEStepHandler) -> None: ...
    def clearEventDetectors(self) -> None: ...
    def clearStepEndHandlers(self) -> None: ...
    def clearStepHandlers(self) -> None: ...
    def computeDerivatives(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
    def getCurrentSignedStepsize(self) -> float: ...
    def getEvaluations(self) -> int: ...
    def getEventDetectors(self) -> java.util.List[org.hipparchus.ode.events.ODEEventDetector]: ...
    def getMaxEvaluations(self) -> int: ...
    def getName(self) -> str: ...
    def getStepEndHandlers(self) -> java.util.List[org.hipparchus.ode.events.ODEStepEndHandler]: ...
    def getStepHandlers(self) -> java.util.List[org.hipparchus.ode.sampling.ODEStepHandler]: ...
    def getStepStart(self) -> 'ODEStateAndDerivative': ...
    def setMaxEvaluations(self, int: int) -> None: ...

class AbstractParameterizable(Parameterizable):
    def complainIfNotSupported(self, string: str) -> None: ...
    def getParametersNames(self) -> java.util.List[str]: ...
    def isSupported(self, string: str) -> bool: ...

class ComplexODEStateAndDerivative(ComplexODEState):
    @typing.overload
    def __init__(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex], complexArray2: typing.List[org.hipparchus.complex.Complex]): ...
    @typing.overload
    def __init__(self, double: float, complexArray: typing.List[org.hipparchus.complex.Complex], complexArray2: typing.List[org.hipparchus.complex.Complex], complexArray3: typing.List[typing.List[org.hipparchus.complex.Complex]], complexArray4: typing.List[typing.List[org.hipparchus.complex.Complex]]): ...
    def getCompleteDerivative(self) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getPrimaryDerivative(self) -> typing.List[org.hipparchus.complex.Complex]: ...
    def getSecondaryDerivative(self, int: int) -> typing.List[org.hipparchus.complex.Complex]: ...

_FieldODEStateAndDerivative__T = typing.TypeVar('_FieldODEStateAndDerivative__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldODEStateAndDerivative(FieldODEState[_FieldODEStateAndDerivative__T], typing.Generic[_FieldODEStateAndDerivative__T]):
    @typing.overload
    def __init__(self, t: _FieldODEStateAndDerivative__T, tArray: typing.List[_FieldODEStateAndDerivative__T], tArray2: typing.List[_FieldODEStateAndDerivative__T]): ...
    @typing.overload
    def __init__(self, t: _FieldODEStateAndDerivative__T, tArray: typing.List[_FieldODEStateAndDerivative__T], tArray2: typing.List[_FieldODEStateAndDerivative__T], tArray3: typing.List[typing.List[_FieldODEStateAndDerivative__T]], tArray4: typing.List[typing.List[_FieldODEStateAndDerivative__T]]): ...
    def getCompleteDerivative(self) -> typing.List[_FieldODEStateAndDerivative__T]: ...
    def getPrimaryDerivative(self) -> typing.List[_FieldODEStateAndDerivative__T]: ...
    def getSecondaryDerivative(self, int: int) -> typing.List[_FieldODEStateAndDerivative__T]: ...

class FirstOrderConverter(OrdinaryDifferentialEquation):
    def __init__(self, secondOrderODE: SecondOrderODE): ...
    def computeDerivatives(self, double: float, doubleArray: typing.List[float]) -> typing.List[float]: ...
    def getDimension(self) -> int: ...

class NamedParameterJacobianProvider(Parameterizable):
    def computeParameterJacobian(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float], string: str) -> typing.List[float]: ...

class ODEStateAndDerivative(ODEState):
    @typing.overload
    def __init__(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    @typing.overload
    def __init__(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[typing.List[float]], doubleArray4: typing.List[typing.List[float]]): ...
    def getCompleteDerivative(self) -> typing.List[float]: ...
    def getPrimaryDerivative(self) -> typing.List[float]: ...
    def getSecondaryDerivative(self, int: int) -> typing.List[float]: ...

class ParametersController(Parameterizable):
    def getParameter(self, string: str) -> float: ...
    def setParameter(self, string: str, double: float) -> None: ...

class ODEJacobiansProvider(OrdinaryDifferentialEquation, NamedParameterJacobianProvider):
    def computeMainStateJacobian(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> typing.List[typing.List[float]]: ...
    def computeParameterJacobian(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float], string: str) -> typing.List[float]: ...
    def getParametersNames(self) -> java.util.List[str]: ...
    def isSupported(self, string: str) -> bool: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.ode")``.

    AbstractFieldIntegrator: typing.Type[AbstractFieldIntegrator]
    AbstractIntegrator: typing.Type[AbstractIntegrator]
    AbstractParameterizable: typing.Type[AbstractParameterizable]
    ComplexODEConverter: typing.Type[ComplexODEConverter]
    ComplexODEState: typing.Type[ComplexODEState]
    ComplexODEStateAndDerivative: typing.Type[ComplexODEStateAndDerivative]
    ComplexOrdinaryDifferentialEquation: typing.Type[ComplexOrdinaryDifferentialEquation]
    ComplexSecondaryODE: typing.Type[ComplexSecondaryODE]
    DenseOutputModel: typing.Type[DenseOutputModel]
    EquationsMapper: typing.Type[EquationsMapper]
    ExpandableODE: typing.Type[ExpandableODE]
    FieldDenseOutputModel: typing.Type[FieldDenseOutputModel]
    FieldEquationsMapper: typing.Type[FieldEquationsMapper]
    FieldExpandableODE: typing.Type[FieldExpandableODE]
    FieldODEIntegrator: typing.Type[FieldODEIntegrator]
    FieldODEState: typing.Type[FieldODEState]
    FieldODEStateAndDerivative: typing.Type[FieldODEStateAndDerivative]
    FieldOrdinaryDifferentialEquation: typing.Type[FieldOrdinaryDifferentialEquation]
    FieldSecondaryODE: typing.Type[FieldSecondaryODE]
    FirstOrderConverter: typing.Type[FirstOrderConverter]
    LocalizedODEFormats: typing.Type[LocalizedODEFormats]
    MultistepFieldIntegrator: typing.Type[MultistepFieldIntegrator]
    MultistepIntegrator: typing.Type[MultistepIntegrator]
    NamedParameterJacobianProvider: typing.Type[NamedParameterJacobianProvider]
    ODEIntegrator: typing.Type[ODEIntegrator]
    ODEJacobiansProvider: typing.Type[ODEJacobiansProvider]
    ODEState: typing.Type[ODEState]
    ODEStateAndDerivative: typing.Type[ODEStateAndDerivative]
    OrdinaryDifferentialEquation: typing.Type[OrdinaryDifferentialEquation]
    ParameterConfiguration: typing.Type[ParameterConfiguration]
    Parameterizable: typing.Type[Parameterizable]
    ParametersController: typing.Type[ParametersController]
    SecondOrderODE: typing.Type[SecondOrderODE]
    SecondaryODE: typing.Type[SecondaryODE]
    VariationalEquation: typing.Type[VariationalEquation]
    events: org.hipparchus.ode.events.__module_protocol__
    nonstiff: org.hipparchus.ode.nonstiff.__module_protocol__
    sampling: org.hipparchus.ode.sampling.__module_protocol__
