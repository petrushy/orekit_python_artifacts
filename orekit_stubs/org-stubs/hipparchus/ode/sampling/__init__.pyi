import java.io
import java.lang
import org.hipparchus
import org.hipparchus.ode
import typing



_FieldODEFixedStepHandler__T = typing.TypeVar('_FieldODEFixedStepHandler__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldODEFixedStepHandler(typing.Generic[_FieldODEFixedStepHandler__T]):
    def handleStep(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEFixedStepHandler__T], boolean: bool) -> None: ...
    def init(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEFixedStepHandler__T], t: _FieldODEFixedStepHandler__T) -> None: ...

_FieldODEStateInterpolator__T = typing.TypeVar('_FieldODEStateInterpolator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldODEStateInterpolator(typing.Generic[_FieldODEStateInterpolator__T]):
    def getCurrentState(self) -> org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEStateInterpolator__T]: ...
    def getInterpolatedState(self, t: _FieldODEStateInterpolator__T) -> org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEStateInterpolator__T]: ...
    def getPreviousState(self) -> org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEStateInterpolator__T]: ...
    def isCurrentStateInterpolated(self) -> bool: ...
    def isForward(self) -> bool: ...
    def isPreviousStateInterpolated(self) -> bool: ...

_FieldODEStepHandler__T = typing.TypeVar('_FieldODEStepHandler__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldODEStepHandler(typing.Generic[_FieldODEStepHandler__T]):
    def finish(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEStepHandler__T]) -> None: ...
    def handleStep(self, fieldODEStateInterpolator: FieldODEStateInterpolator[_FieldODEStepHandler__T]) -> None: ...
    def init(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_FieldODEStepHandler__T], t: _FieldODEStepHandler__T) -> None: ...

class ODEFixedStepHandler:
    def handleStep(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative, boolean: bool) -> None: ...
    def init(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative, double: float) -> None: ...

class ODEStateInterpolator(java.io.Serializable):
    def getCurrentState(self) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def getInterpolatedState(self, double: float) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def getPreviousState(self) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def isCurrentStateInterpolated(self) -> bool: ...
    def isForward(self) -> bool: ...
    def isPreviousStateInterpolated(self) -> bool: ...

class ODEStepHandler:
    def finish(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative) -> None: ...
    def handleStep(self, oDEStateInterpolator: ODEStateInterpolator) -> None: ...
    def init(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative, double: float) -> None: ...

class StepNormalizerBounds(java.lang.Enum['StepNormalizerBounds']):
    NEITHER: typing.ClassVar['StepNormalizerBounds'] = ...
    FIRST: typing.ClassVar['StepNormalizerBounds'] = ...
    LAST: typing.ClassVar['StepNormalizerBounds'] = ...
    BOTH: typing.ClassVar['StepNormalizerBounds'] = ...
    def firstIncluded(self) -> bool: ...
    def lastIncluded(self) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'StepNormalizerBounds': ...
    @staticmethod
    def values() -> typing.List['StepNormalizerBounds']: ...

class StepNormalizerMode(java.lang.Enum['StepNormalizerMode']):
    INCREMENT: typing.ClassVar['StepNormalizerMode'] = ...
    MULTIPLES: typing.ClassVar['StepNormalizerMode'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'StepNormalizerMode': ...
    @staticmethod
    def values() -> typing.List['StepNormalizerMode']: ...

_AbstractFieldODEStateInterpolator__T = typing.TypeVar('_AbstractFieldODEStateInterpolator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class AbstractFieldODEStateInterpolator(FieldODEStateInterpolator[_AbstractFieldODEStateInterpolator__T], typing.Generic[_AbstractFieldODEStateInterpolator__T]):
    def getCurrentState(self) -> org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T]: ...
    def getGlobalCurrentState(self) -> org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T]: ...
    def getGlobalPreviousState(self) -> org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T]: ...
    def getInterpolatedState(self, t: _AbstractFieldODEStateInterpolator__T) -> org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T]: ...
    def getPreviousState(self) -> org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T]: ...
    def isCurrentStateInterpolated(self) -> bool: ...
    def isForward(self) -> bool: ...
    def isPreviousStateInterpolated(self) -> bool: ...
    def restrictStep(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T], fieldODEStateAndDerivative2: org.hipparchus.ode.FieldODEStateAndDerivative[_AbstractFieldODEStateInterpolator__T]) -> 'AbstractFieldODEStateInterpolator'[_AbstractFieldODEStateInterpolator__T]: ...

class AbstractODEStateInterpolator(ODEStateInterpolator):
    def getCurrentState(self) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def getGlobalCurrentState(self) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def getGlobalPreviousState(self) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def getInterpolatedState(self, double: float) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def getPreviousState(self) -> org.hipparchus.ode.ODEStateAndDerivative: ...
    def isCurrentStateInterpolated(self) -> bool: ...
    def isForward(self) -> bool: ...
    def isPreviousStateInterpolated(self) -> bool: ...
    def restrictStep(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative, oDEStateAndDerivative2: org.hipparchus.ode.ODEStateAndDerivative) -> 'AbstractODEStateInterpolator': ...

_FieldStepNormalizer__T = typing.TypeVar('_FieldStepNormalizer__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldStepNormalizer(FieldODEStepHandler[_FieldStepNormalizer__T], typing.Generic[_FieldStepNormalizer__T]):
    @typing.overload
    def __init__(self, double: float, fieldODEFixedStepHandler: FieldODEFixedStepHandler[_FieldStepNormalizer__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldODEFixedStepHandler: FieldODEFixedStepHandler[_FieldStepNormalizer__T], stepNormalizerBounds: StepNormalizerBounds): ...
    @typing.overload
    def __init__(self, double: float, fieldODEFixedStepHandler: FieldODEFixedStepHandler[_FieldStepNormalizer__T], stepNormalizerMode: StepNormalizerMode): ...
    @typing.overload
    def __init__(self, double: float, fieldODEFixedStepHandler: FieldODEFixedStepHandler[_FieldStepNormalizer__T], stepNormalizerMode: StepNormalizerMode, stepNormalizerBounds: StepNormalizerBounds): ...
    def finish(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_FieldStepNormalizer__T]) -> None: ...
    def handleStep(self, fieldODEStateInterpolator: FieldODEStateInterpolator[_FieldStepNormalizer__T]) -> None: ...
    def init(self, fieldODEStateAndDerivative: org.hipparchus.ode.FieldODEStateAndDerivative[_FieldStepNormalizer__T], t: _FieldStepNormalizer__T) -> None: ...

class StepNormalizer(ODEStepHandler):
    @typing.overload
    def __init__(self, double: float, oDEFixedStepHandler: ODEFixedStepHandler): ...
    @typing.overload
    def __init__(self, double: float, oDEFixedStepHandler: ODEFixedStepHandler, stepNormalizerBounds: StepNormalizerBounds): ...
    @typing.overload
    def __init__(self, double: float, oDEFixedStepHandler: ODEFixedStepHandler, stepNormalizerMode: StepNormalizerMode): ...
    @typing.overload
    def __init__(self, double: float, oDEFixedStepHandler: ODEFixedStepHandler, stepNormalizerMode: StepNormalizerMode, stepNormalizerBounds: StepNormalizerBounds): ...
    def finish(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative) -> None: ...
    def handleStep(self, oDEStateInterpolator: ODEStateInterpolator) -> None: ...
    def init(self, oDEStateAndDerivative: org.hipparchus.ode.ODEStateAndDerivative, double: float) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.ode.sampling")``.

    AbstractFieldODEStateInterpolator: typing.Type[AbstractFieldODEStateInterpolator]
    AbstractODEStateInterpolator: typing.Type[AbstractODEStateInterpolator]
    FieldODEFixedStepHandler: typing.Type[FieldODEFixedStepHandler]
    FieldODEStateInterpolator: typing.Type[FieldODEStateInterpolator]
    FieldODEStepHandler: typing.Type[FieldODEStepHandler]
    FieldStepNormalizer: typing.Type[FieldStepNormalizer]
    ODEFixedStepHandler: typing.Type[ODEFixedStepHandler]
    ODEStateInterpolator: typing.Type[ODEStateInterpolator]
    ODEStepHandler: typing.Type[ODEStepHandler]
    StepNormalizer: typing.Type[StepNormalizer]
    StepNormalizerBounds: typing.Type[StepNormalizerBounds]
    StepNormalizerMode: typing.Type[StepNormalizerMode]
