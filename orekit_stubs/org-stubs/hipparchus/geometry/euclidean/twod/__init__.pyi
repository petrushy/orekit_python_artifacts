import java.io
import java.lang
import java.text
import java.util
import org.hipparchus
import org.hipparchus.geometry
import org.hipparchus.geometry.enclosing
import org.hipparchus.geometry.euclidean.oned
import org.hipparchus.geometry.euclidean.twod.hull
import org.hipparchus.geometry.partitioning
import typing



class DiskGenerator(org.hipparchus.geometry.enclosing.SupportBallGenerator['Euclidean2D', 'Vector2D']):
    def __init__(self): ...
    def ballOnSupport(self, list: java.util.List['Vector2D']) -> org.hipparchus.geometry.enclosing.EnclosingBall['Euclidean2D', 'Vector2D']: ...

class Euclidean2D(java.io.Serializable, org.hipparchus.geometry.Space):
    def getDimension(self) -> int: ...
    @staticmethod
    def getInstance() -> 'Euclidean2D': ...
    def getSubSpace(self) -> org.hipparchus.geometry.euclidean.oned.Euclidean1D: ...

_FieldVector2D__T = typing.TypeVar('_FieldVector2D__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldVector2D(typing.Generic[_FieldVector2D__T]):
    @typing.overload
    def __init__(self, double: float, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], double2: float, fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], double2: float, fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T], double3: float, fieldVector2D3: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], double2: float, fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T], double3: float, fieldVector2D3: 'FieldVector2D'[_FieldVector2D__T], double4: float, fieldVector2D4: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, t2: _FieldVector2D__T): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], t2: _FieldVector2D__T, fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], t2: _FieldVector2D__T, fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T], t3: _FieldVector2D__T, fieldVector2D3: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], t2: _FieldVector2D__T, fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T], t3: _FieldVector2D__T, fieldVector2D3: 'FieldVector2D'[_FieldVector2D__T], t4: _FieldVector2D__T, fieldVector2D4: 'FieldVector2D'[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, vector2D: 'Vector2D'): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, vector2D: 'Vector2D', t2: _FieldVector2D__T, vector2D2: 'Vector2D'): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, vector2D: 'Vector2D', t2: _FieldVector2D__T, vector2D2: 'Vector2D', t3: _FieldVector2D__T, vector2D3: 'Vector2D'): ...
    @typing.overload
    def __init__(self, t: _FieldVector2D__T, vector2D: 'Vector2D', t2: _FieldVector2D__T, vector2D2: 'Vector2D', t3: _FieldVector2D__T, vector2D3: 'Vector2D', t4: _FieldVector2D__T, vector2D4: 'Vector2D'): ...
    @typing.overload
    def __init__(self, tArray: typing.List[_FieldVector2D__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldVector2D__T], vector2D: 'Vector2D'): ...
    @typing.overload
    def add(self, double: float, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def add(self, double: float, vector2D: 'Vector2D') -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def add(self, t: _FieldVector2D__T, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def add(self, t: _FieldVector2D__T, vector2D: 'Vector2D') -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def add(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def add(self, vector2D: 'Vector2D') -> 'FieldVector2D'[_FieldVector2D__T]: ...
    _angle_0__T = typing.TypeVar('_angle_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _angle_1__T = typing.TypeVar('_angle_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _angle_2__T = typing.TypeVar('_angle_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def angle(fieldVector2D: 'FieldVector2D'[_angle_0__T], fieldVector2D2: 'FieldVector2D'[_angle_0__T]) -> _angle_0__T: ...
    @typing.overload
    @staticmethod
    def angle(fieldVector2D: 'FieldVector2D'[_angle_1__T], vector2D: 'Vector2D') -> _angle_1__T: ...
    @typing.overload
    @staticmethod
    def angle(vector2D: 'Vector2D', fieldVector2D: 'FieldVector2D'[_angle_2__T]) -> _angle_2__T: ...
    @typing.overload
    def crossProduct(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T], fieldVector2D2: 'FieldVector2D'[_FieldVector2D__T]) -> _FieldVector2D__T: ...
    @typing.overload
    def crossProduct(self, vector2D: 'Vector2D', vector2D2: 'Vector2D') -> _FieldVector2D__T: ...
    _distance_2__T = typing.TypeVar('_distance_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distance_3__T = typing.TypeVar('_distance_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distance_4__T = typing.TypeVar('_distance_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def distance(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> _FieldVector2D__T: ...
    @typing.overload
    def distance(self, vector2D: 'Vector2D') -> _FieldVector2D__T: ...
    @typing.overload
    @staticmethod
    def distance(fieldVector2D: 'FieldVector2D'[_distance_2__T], fieldVector2D2: 'FieldVector2D'[_distance_2__T]) -> _distance_2__T: ...
    @typing.overload
    @staticmethod
    def distance(fieldVector2D: 'FieldVector2D'[_distance_3__T], vector2D: 'Vector2D') -> _distance_3__T: ...
    @typing.overload
    @staticmethod
    def distance(vector2D: 'Vector2D', fieldVector2D: 'FieldVector2D'[_distance_4__T]) -> _distance_4__T: ...
    _distance1_2__T = typing.TypeVar('_distance1_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distance1_3__T = typing.TypeVar('_distance1_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distance1_4__T = typing.TypeVar('_distance1_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def distance1(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> _FieldVector2D__T: ...
    @typing.overload
    def distance1(self, vector2D: 'Vector2D') -> _FieldVector2D__T: ...
    @typing.overload
    @staticmethod
    def distance1(fieldVector2D: 'FieldVector2D'[_distance1_2__T], fieldVector2D2: 'FieldVector2D'[_distance1_2__T]) -> _distance1_2__T: ...
    @typing.overload
    @staticmethod
    def distance1(fieldVector2D: 'FieldVector2D'[_distance1_3__T], vector2D: 'Vector2D') -> _distance1_3__T: ...
    @typing.overload
    @staticmethod
    def distance1(vector2D: 'Vector2D', fieldVector2D: 'FieldVector2D'[_distance1_4__T]) -> _distance1_4__T: ...
    _distanceInf_2__T = typing.TypeVar('_distanceInf_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distanceInf_3__T = typing.TypeVar('_distanceInf_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distanceInf_4__T = typing.TypeVar('_distanceInf_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def distanceInf(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> _FieldVector2D__T: ...
    @typing.overload
    def distanceInf(self, vector2D: 'Vector2D') -> _FieldVector2D__T: ...
    @typing.overload
    @staticmethod
    def distanceInf(fieldVector2D: 'FieldVector2D'[_distanceInf_2__T], fieldVector2D2: 'FieldVector2D'[_distanceInf_2__T]) -> _distanceInf_2__T: ...
    @typing.overload
    @staticmethod
    def distanceInf(fieldVector2D: 'FieldVector2D'[_distanceInf_3__T], vector2D: 'Vector2D') -> _distanceInf_3__T: ...
    @typing.overload
    @staticmethod
    def distanceInf(vector2D: 'Vector2D', fieldVector2D: 'FieldVector2D'[_distanceInf_4__T]) -> _distanceInf_4__T: ...
    _distanceSq_2__T = typing.TypeVar('_distanceSq_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distanceSq_3__T = typing.TypeVar('_distanceSq_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _distanceSq_4__T = typing.TypeVar('_distanceSq_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def distanceSq(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> _FieldVector2D__T: ...
    @typing.overload
    def distanceSq(self, vector2D: 'Vector2D') -> _FieldVector2D__T: ...
    @typing.overload
    @staticmethod
    def distanceSq(fieldVector2D: 'FieldVector2D'[_distanceSq_2__T], fieldVector2D2: 'FieldVector2D'[_distanceSq_2__T]) -> _distanceSq_2__T: ...
    @typing.overload
    @staticmethod
    def distanceSq(fieldVector2D: 'FieldVector2D'[_distanceSq_3__T], vector2D: 'Vector2D') -> _distanceSq_3__T: ...
    @typing.overload
    @staticmethod
    def distanceSq(vector2D: 'Vector2D', fieldVector2D: 'FieldVector2D'[_distanceSq_4__T]) -> _distanceSq_4__T: ...
    @typing.overload
    def dotProduct(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> _FieldVector2D__T: ...
    @typing.overload
    def dotProduct(self, vector2D: 'Vector2D') -> _FieldVector2D__T: ...
    def equals(self, object: typing.Any) -> bool: ...
    _getMinusI__T = typing.TypeVar('_getMinusI__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getMinusI(field: org.hipparchus.Field[_getMinusI__T]) -> 'FieldVector2D'[_getMinusI__T]: ...
    _getMinusJ__T = typing.TypeVar('_getMinusJ__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getMinusJ(field: org.hipparchus.Field[_getMinusJ__T]) -> 'FieldVector2D'[_getMinusJ__T]: ...
    _getNaN__T = typing.TypeVar('_getNaN__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getNaN(field: org.hipparchus.Field[_getNaN__T]) -> 'FieldVector2D'[_getNaN__T]: ...
    _getNegativeInfinity__T = typing.TypeVar('_getNegativeInfinity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getNegativeInfinity(field: org.hipparchus.Field[_getNegativeInfinity__T]) -> 'FieldVector2D'[_getNegativeInfinity__T]: ...
    def getNorm(self) -> _FieldVector2D__T: ...
    def getNorm1(self) -> _FieldVector2D__T: ...
    def getNormInf(self) -> _FieldVector2D__T: ...
    def getNormSq(self) -> _FieldVector2D__T: ...
    _getPlusI__T = typing.TypeVar('_getPlusI__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getPlusI(field: org.hipparchus.Field[_getPlusI__T]) -> 'FieldVector2D'[_getPlusI__T]: ...
    _getPlusJ__T = typing.TypeVar('_getPlusJ__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getPlusJ(field: org.hipparchus.Field[_getPlusJ__T]) -> 'FieldVector2D'[_getPlusJ__T]: ...
    _getPositiveInfinity__T = typing.TypeVar('_getPositiveInfinity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getPositiveInfinity(field: org.hipparchus.Field[_getPositiveInfinity__T]) -> 'FieldVector2D'[_getPositiveInfinity__T]: ...
    def getX(self) -> _FieldVector2D__T: ...
    def getY(self) -> _FieldVector2D__T: ...
    _getZero__T = typing.TypeVar('_getZero__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getZero(field: org.hipparchus.Field[_getZero__T]) -> 'FieldVector2D'[_getZero__T]: ...
    def hashCode(self) -> int: ...
    def isInfinite(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def negate(self) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    def normalize(self) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    _orientation__T = typing.TypeVar('_orientation__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def orientation(fieldVector2D: 'FieldVector2D'[_orientation__T], fieldVector2D2: 'FieldVector2D'[_orientation__T], fieldVector2D3: 'FieldVector2D'[_orientation__T]) -> _orientation__T: ...
    @typing.overload
    def scalarMultiply(self, double: float) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def scalarMultiply(self, t: _FieldVector2D__T) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def subtract(self, double: float, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def subtract(self, double: float, vector2D: 'Vector2D') -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def subtract(self, t: _FieldVector2D__T, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def subtract(self, t: _FieldVector2D__T, vector2D: 'Vector2D') -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def subtract(self, fieldVector2D: 'FieldVector2D'[_FieldVector2D__T]) -> 'FieldVector2D'[_FieldVector2D__T]: ...
    @typing.overload
    def subtract(self, vector2D: 'Vector2D') -> 'FieldVector2D'[_FieldVector2D__T]: ...
    def toArray(self) -> typing.List[_FieldVector2D__T]: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, numberFormat: java.text.NumberFormat) -> str: ...
    def toVector2D(self) -> 'Vector2D': ...

class Line(org.hipparchus.geometry.partitioning.Hyperplane[Euclidean2D], org.hipparchus.geometry.partitioning.Embedding[Euclidean2D, org.hipparchus.geometry.euclidean.oned.Euclidean1D]):
    @typing.overload
    def __init__(self, line: 'Line'): ...
    @typing.overload
    def __init__(self, vector2D: 'Vector2D', double: float, double2: float): ...
    @typing.overload
    def __init__(self, vector2D: 'Vector2D', vector2D2: 'Vector2D', double: float): ...
    def contains(self, vector2D: 'Vector2D') -> bool: ...
    def copySelf(self) -> 'Line': ...
    def distance(self, vector2D: 'Vector2D') -> float: ...
    def emptyHyperplane(self) -> 'SubLine': ...
    def getAngle(self) -> float: ...
    @typing.overload
    def getOffset(self, point: org.hipparchus.geometry.Point[Euclidean2D]) -> float: ...
    @typing.overload
    def getOffset(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> float: ...
    @typing.overload
    def getOffset(self, line: 'Line') -> float: ...
    def getOriginOffset(self) -> float: ...
    def getPointAt(self, vector1D: org.hipparchus.geometry.euclidean.oned.Vector1D, double: float) -> 'Vector2D': ...
    def getReverse(self) -> 'Line': ...
    def getTolerance(self) -> float: ...
    @staticmethod
    def getTransform(double: float, double2: float, double3: float, double4: float, double5: float, double6: float) -> org.hipparchus.geometry.partitioning.Transform[Euclidean2D, org.hipparchus.geometry.euclidean.oned.Euclidean1D]: ...
    def intersection(self, line: 'Line') -> 'Vector2D': ...
    def isParallelTo(self, line: 'Line') -> bool: ...
    def project(self, point: org.hipparchus.geometry.Point[Euclidean2D]) -> org.hipparchus.geometry.Point[Euclidean2D]: ...
    @typing.overload
    def reset(self, vector2D: 'Vector2D', double: float) -> None: ...
    @typing.overload
    def reset(self, vector2D: 'Vector2D', vector2D2: 'Vector2D') -> None: ...
    def revertSelf(self) -> None: ...
    def sameOrientationAs(self, hyperplane: org.hipparchus.geometry.partitioning.Hyperplane[Euclidean2D]) -> bool: ...
    def setAngle(self, double: float) -> None: ...
    def setOriginOffset(self, double: float) -> None: ...
    @typing.overload
    def toSpace(self, point: org.hipparchus.geometry.Point[org.hipparchus.geometry.euclidean.oned.Euclidean1D]) -> 'Vector2D': ...
    @typing.overload
    def toSpace(self, vector: org.hipparchus.geometry.Vector[org.hipparchus.geometry.euclidean.oned.Euclidean1D, org.hipparchus.geometry.euclidean.oned.Vector1D]) -> 'Vector2D': ...
    @typing.overload
    def toSubSpace(self, point: org.hipparchus.geometry.Point[Euclidean2D]) -> org.hipparchus.geometry.euclidean.oned.Vector1D: ...
    @typing.overload
    def toSubSpace(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> org.hipparchus.geometry.euclidean.oned.Vector1D: ...
    def translateToPoint(self, vector2D: 'Vector2D') -> None: ...
    def wholeHyperplane(self) -> 'SubLine': ...
    def wholeSpace(self) -> 'PolygonsSet': ...

class PolygonsSet(org.hipparchus.geometry.partitioning.AbstractRegion[Euclidean2D, org.hipparchus.geometry.euclidean.oned.Euclidean1D]):
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float): ...
    @typing.overload
    def __init__(self, double: float, *vector2D: 'Vector2D'): ...
    @typing.overload
    def __init__(self, collection: typing.Union[java.util.Collection[org.hipparchus.geometry.partitioning.SubHyperplane[Euclidean2D]], typing.Sequence[org.hipparchus.geometry.partitioning.SubHyperplane[Euclidean2D]], typing.Set[org.hipparchus.geometry.partitioning.SubHyperplane[Euclidean2D]]], double: float): ...
    @typing.overload
    def __init__(self, bSPTree: org.hipparchus.geometry.partitioning.BSPTree[Euclidean2D], double: float): ...
    def buildNew(self, bSPTree: org.hipparchus.geometry.partitioning.BSPTree[Euclidean2D]) -> 'PolygonsSet': ...
    def getVertices(self) -> typing.List[typing.List['Vector2D']]: ...

class Segment:
    @typing.overload
    def __init__(self, vector2D: 'Vector2D', vector2D2: 'Vector2D', double: float): ...
    @typing.overload
    def __init__(self, vector2D: 'Vector2D', vector2D2: 'Vector2D', line: Line): ...
    def distance(self, vector2D: 'Vector2D') -> float: ...
    def getEnd(self) -> 'Vector2D': ...
    def getLength(self) -> float: ...
    def getLine(self) -> Line: ...
    def getStart(self) -> 'Vector2D': ...

class SubLine(org.hipparchus.geometry.partitioning.AbstractSubHyperplane[Euclidean2D, org.hipparchus.geometry.euclidean.oned.Euclidean1D]):
    @typing.overload
    def __init__(self, segment: Segment): ...
    @typing.overload
    def __init__(self, vector2D: 'Vector2D', vector2D2: 'Vector2D', double: float): ...
    @typing.overload
    def __init__(self, hyperplane: org.hipparchus.geometry.partitioning.Hyperplane[Euclidean2D], region: org.hipparchus.geometry.partitioning.Region[org.hipparchus.geometry.euclidean.oned.Euclidean1D]): ...
    def getSegments(self) -> java.util.List[Segment]: ...
    def intersection(self, subLine: 'SubLine', boolean: bool) -> 'Vector2D': ...
    def split(self, hyperplane: org.hipparchus.geometry.partitioning.Hyperplane[Euclidean2D]) -> org.hipparchus.geometry.partitioning.SubHyperplane.SplitSubHyperplane[Euclidean2D]: ...

class Vector2D(org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']):
    ZERO: typing.ClassVar['Vector2D'] = ...
    PLUS_I: typing.ClassVar['Vector2D'] = ...
    MINUS_I: typing.ClassVar['Vector2D'] = ...
    PLUS_J: typing.ClassVar['Vector2D'] = ...
    MINUS_J: typing.ClassVar['Vector2D'] = ...
    NaN: typing.ClassVar['Vector2D'] = ...
    POSITIVE_INFINITY: typing.ClassVar['Vector2D'] = ...
    NEGATIVE_INFINITY: typing.ClassVar['Vector2D'] = ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, vector2D: 'Vector2D'): ...
    @typing.overload
    def __init__(self, double: float, vector2D: 'Vector2D', double2: float, vector2D2: 'Vector2D'): ...
    @typing.overload
    def __init__(self, double: float, vector2D: 'Vector2D', double2: float, vector2D2: 'Vector2D', double3: float, vector2D3: 'Vector2D'): ...
    @typing.overload
    def __init__(self, double: float, vector2D: 'Vector2D', double2: float, vector2D2: 'Vector2D', double3: float, vector2D3: 'Vector2D', double4: float, vector2D4: 'Vector2D'): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float]): ...
    @typing.overload
    def add(self, double: float, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> 'Vector2D': ...
    @typing.overload
    def add(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> 'Vector2D': ...
    @staticmethod
    def angle(vector2D: 'Vector2D', vector2D2: 'Vector2D') -> float: ...
    def crossProduct(self, vector2D: 'Vector2D', vector2D2: 'Vector2D') -> float: ...
    @typing.overload
    def distance(self, point: org.hipparchus.geometry.Point[Euclidean2D]) -> float: ...
    @typing.overload
    @staticmethod
    def distance(vector2D: 'Vector2D', vector2D2: 'Vector2D') -> float: ...
    @typing.overload
    def distance1(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> float: ...
    @typing.overload
    @staticmethod
    def distance1(vector2D: 'Vector2D', vector2D2: 'Vector2D') -> float: ...
    @typing.overload
    def distanceInf(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> float: ...
    @typing.overload
    @staticmethod
    def distanceInf(vector2D: 'Vector2D', vector2D2: 'Vector2D') -> float: ...
    @typing.overload
    def distanceSq(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> float: ...
    @typing.overload
    @staticmethod
    def distanceSq(vector2D: 'Vector2D', vector2D2: 'Vector2D') -> float: ...
    def dotProduct(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> float: ...
    def equals(self, object: typing.Any) -> bool: ...
    def equalsIeee754(self, object: typing.Any) -> bool: ...
    def getNorm(self) -> float: ...
    def getNorm1(self) -> float: ...
    def getNormInf(self) -> float: ...
    def getNormSq(self) -> float: ...
    def getSpace(self) -> org.hipparchus.geometry.Space: ...
    def getX(self) -> float: ...
    def getY(self) -> float: ...
    def getZero(self) -> 'Vector2D': ...
    def hashCode(self) -> int: ...
    def isInfinite(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def negate(self) -> 'Vector2D': ...
    @staticmethod
    def orientation(vector2D: 'Vector2D', vector2D2: 'Vector2D', vector2D3: 'Vector2D') -> float: ...
    def scalarMultiply(self, double: float) -> 'Vector2D': ...
    @typing.overload
    def subtract(self, double: float, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> 'Vector2D': ...
    @typing.overload
    def subtract(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, 'Vector2D']) -> 'Vector2D': ...
    def toArray(self) -> typing.List[float]: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, numberFormat: java.text.NumberFormat) -> str: ...

class Vector2DFormat(org.hipparchus.geometry.VectorFormat[Euclidean2D, Vector2D]):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, numberFormat: java.text.NumberFormat): ...
    @typing.overload
    def __init__(self, numberFormat: java.text.NumberFormat): ...
    @typing.overload
    def format(self, vector: org.hipparchus.geometry.Vector[org.hipparchus.geometry.Space, org.hipparchus.geometry.Vector]) -> str: ...
    @typing.overload
    def format(self, vector: org.hipparchus.geometry.Vector[Euclidean2D, Vector2D], stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    @staticmethod
    def getVector2DFormat() -> 'Vector2DFormat': ...
    @typing.overload
    @staticmethod
    def getVector2DFormat(locale: java.util.Locale) -> 'Vector2DFormat': ...
    @typing.overload
    def parse(self, string: str) -> Vector2D: ...
    @typing.overload
    def parse(self, string: str, parsePosition: java.text.ParsePosition) -> Vector2D: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.geometry.euclidean.twod")``.

    DiskGenerator: typing.Type[DiskGenerator]
    Euclidean2D: typing.Type[Euclidean2D]
    FieldVector2D: typing.Type[FieldVector2D]
    Line: typing.Type[Line]
    PolygonsSet: typing.Type[PolygonsSet]
    Segment: typing.Type[Segment]
    SubLine: typing.Type[SubLine]
    Vector2D: typing.Type[Vector2D]
    Vector2DFormat: typing.Type[Vector2DFormat]
    hull: org.hipparchus.geometry.euclidean.twod.hull.__module_protocol__
