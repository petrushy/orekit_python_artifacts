import java.io
import java.lang
import java.util
import org.hipparchus.exception
import org.hipparchus.geometry
import org.hipparchus.geometry.euclidean.twod
import org.hipparchus.geometry.partitioning
import org.hipparchus.geometry.spherical.oned.class-use
import typing



class Arc:
    def __init__(self, double: float, double2: float, double3: float): ...
    def checkPoint(self, double: float) -> org.hipparchus.geometry.partitioning.Region.Location: ...
    def getBarycenter(self) -> float: ...
    def getInf(self) -> float: ...
    @typing.overload
    def getOffset(self, double: float) -> float: ...
    @typing.overload
    def getOffset(self, s1Point: 'S1Point') -> float: ...
    def getSize(self) -> float: ...
    def getSup(self) -> float: ...
    def getTolerance(self) -> float: ...

class ArcsSet(org.hipparchus.geometry.partitioning.AbstractRegion['Sphere1D', 'Sphere1D'], java.lang.Iterable[typing.List[float]]):
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    @typing.overload
    def __init__(self, collection: typing.Union[java.util.Collection[org.hipparchus.geometry.partitioning.SubHyperplane['Sphere1D']], typing.Sequence[org.hipparchus.geometry.partitioning.SubHyperplane['Sphere1D']]], double: float): ...
    @typing.overload
    def __init__(self, bSPTree: org.hipparchus.geometry.partitioning.BSPTree['Sphere1D'], double: float): ...
    def asList(self) -> java.util.List[Arc]: ...
    def buildNew(self, bSPTree: org.hipparchus.geometry.partitioning.BSPTree['Sphere1D']) -> 'ArcsSet': ...
    def iterator(self) -> java.util.Iterator[typing.List[float]]: ...
    def projectToBoundary(self, point: org.hipparchus.geometry.Point['Sphere1D']) -> org.hipparchus.geometry.partitioning.BoundaryProjection['Sphere1D']: ...
    def split(self, arc: Arc) -> 'ArcsSet.Split': ...
    class InconsistentStateAt2PiWrapping(org.hipparchus.exception.MathIllegalArgumentException):
        def __init__(self): ...
    class Split:
        def getMinus(self) -> 'ArcsSet': ...
        def getPlus(self) -> 'ArcsSet': ...
        def getSide(self) -> org.hipparchus.geometry.partitioning.Side: ...

class LimitAngle(org.hipparchus.geometry.partitioning.Hyperplane['Sphere1D']):
    def __init__(self, s1Point: 'S1Point', boolean: bool, double: float): ...
    def copySelf(self) -> 'LimitAngle': ...
    def emptyHyperplane(self) -> 'SubLimitAngle': ...
    def getLocation(self) -> 'S1Point': ...
    def getOffset(self, point: org.hipparchus.geometry.Point['Sphere1D']) -> float: ...
    def getReverse(self) -> 'LimitAngle': ...
    def getTolerance(self) -> float: ...
    def isDirect(self) -> bool: ...
    def project(self, point: org.hipparchus.geometry.Point['Sphere1D']) -> org.hipparchus.geometry.Point['Sphere1D']: ...
    def sameOrientationAs(self, hyperplane: org.hipparchus.geometry.partitioning.Hyperplane['Sphere1D']) -> bool: ...
    def wholeHyperplane(self) -> 'SubLimitAngle': ...
    def wholeSpace(self) -> ArcsSet: ...

class S1Point(org.hipparchus.geometry.Point['Sphere1D']):
    NaN: typing.ClassVar['S1Point'] = ...
    def __init__(self, double: float): ...
    @typing.overload
    def distance(self, point: org.hipparchus.geometry.Point['Sphere1D']) -> float: ...
    @typing.overload
    @staticmethod
    def distance(s1Point: 'S1Point', s1Point2: 'S1Point') -> float: ...
    def equals(self, object: typing.Any) -> bool: ...
    def equalsIeee754(self, object: typing.Any) -> bool: ...
    def getAlpha(self) -> float: ...
    def getSpace(self) -> org.hipparchus.geometry.Space: ...
    def getVector(self) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    def hashCode(self) -> int: ...
    def isNaN(self) -> bool: ...

class Sphere1D(java.io.Serializable, org.hipparchus.geometry.Space):
    SMALLEST_TOLERANCE: typing.ClassVar[float] = ...
    @staticmethod
    def checkTolerance(double: float) -> None: ...
    def getDimension(self) -> int: ...
    @staticmethod
    def getInstance() -> 'Sphere1D': ...
    def getSubSpace(self) -> org.hipparchus.geometry.Space: ...
    class NoSubSpaceException(org.hipparchus.exception.MathRuntimeException):
        def __init__(self): ...

class SubLimitAngle(org.hipparchus.geometry.partitioning.AbstractSubHyperplane[Sphere1D, Sphere1D]):
    def __init__(self, hyperplane: org.hipparchus.geometry.partitioning.Hyperplane[Sphere1D], region: org.hipparchus.geometry.partitioning.Region[Sphere1D]): ...
    def getSize(self) -> float: ...
    def isEmpty(self) -> bool: ...
    def split(self, hyperplane: org.hipparchus.geometry.partitioning.Hyperplane[Sphere1D]) -> org.hipparchus.geometry.partitioning.SubHyperplane.SplitSubHyperplane[Sphere1D]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.geometry.spherical.oned")``.

    Arc: typing.Type[Arc]
    ArcsSet: typing.Type[ArcsSet]
    LimitAngle: typing.Type[LimitAngle]
    S1Point: typing.Type[S1Point]
    Sphere1D: typing.Type[Sphere1D]
    SubLimitAngle: typing.Type[SubLimitAngle]
    class-use: org.hipparchus.geometry.spherical.oned.class-use.__module_protocol__
