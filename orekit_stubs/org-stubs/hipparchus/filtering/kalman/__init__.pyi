import org.hipparchus.filtering.kalman.class-use
import org.hipparchus.filtering.kalman.extended
import org.hipparchus.filtering.kalman.linear
import org.hipparchus.filtering.kalman.unscented
import org.hipparchus.linear
import typing



_KalmanFilter__T = typing.TypeVar('_KalmanFilter__T', bound='Measurement')  # <T>
class KalmanFilter(typing.Generic[_KalmanFilter__T]):
    def estimationStep(self, t: _KalmanFilter__T) -> 'ProcessEstimate': ...
    def getCorrected(self) -> 'ProcessEstimate': ...
    def getPredicted(self) -> 'ProcessEstimate': ...

class Measurement:
    def getCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getTime(self) -> float: ...
    def getValue(self) -> org.hipparchus.linear.RealVector: ...

class ProcessEstimate:
    @typing.overload
    def __init__(self, double: float, realVector: org.hipparchus.linear.RealVector, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def __init__(self, double: float, realVector: org.hipparchus.linear.RealVector, realMatrix: org.hipparchus.linear.RealMatrix, realMatrix2: org.hipparchus.linear.RealMatrix, realMatrix3: org.hipparchus.linear.RealMatrix, realMatrix4: org.hipparchus.linear.RealMatrix, realMatrix5: org.hipparchus.linear.RealMatrix): ...
    def getCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getInnovationCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getState(self) -> org.hipparchus.linear.RealVector: ...
    def getStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getTime(self) -> float: ...

_AbstractKalmanFilter__T = typing.TypeVar('_AbstractKalmanFilter__T', bound=Measurement)  # <T>
class AbstractKalmanFilter(KalmanFilter[_AbstractKalmanFilter__T], typing.Generic[_AbstractKalmanFilter__T]):
    def getCorrected(self) -> ProcessEstimate: ...
    def getPredicted(self) -> ProcessEstimate: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.filtering.kalman")``.

    AbstractKalmanFilter: typing.Type[AbstractKalmanFilter]
    KalmanFilter: typing.Type[KalmanFilter]
    Measurement: typing.Type[Measurement]
    ProcessEstimate: typing.Type[ProcessEstimate]
    class-use: org.hipparchus.filtering.kalman.class-use.__module_protocol__
    extended: org.hipparchus.filtering.kalman.extended.__module_protocol__
    linear: org.hipparchus.filtering.kalman.linear.__module_protocol__
    unscented: org.hipparchus.filtering.kalman.unscented.__module_protocol__
