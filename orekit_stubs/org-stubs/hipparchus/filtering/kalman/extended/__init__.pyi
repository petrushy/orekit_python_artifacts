import org.hipparchus.filtering.kalman
import org.hipparchus.filtering.kalman.extended.class-use
import org.hipparchus.linear
import typing



_ExtendedKalmanFilter__T = typing.TypeVar('_ExtendedKalmanFilter__T', bound=org.hipparchus.filtering.kalman.Measurement)  # <T>
class ExtendedKalmanFilter(org.hipparchus.filtering.kalman.AbstractKalmanFilter[_ExtendedKalmanFilter__T], typing.Generic[_ExtendedKalmanFilter__T]):
    def __init__(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer, nonLinearProcess: 'NonLinearProcess'[_ExtendedKalmanFilter__T], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate): ...
    def estimationStep(self, t: _ExtendedKalmanFilter__T) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...

class NonLinearEvolution:
    def __init__(self, double: float, realVector: org.hipparchus.linear.RealVector, realMatrix: org.hipparchus.linear.RealMatrix, realMatrix2: org.hipparchus.linear.RealMatrix, realMatrix3: org.hipparchus.linear.RealMatrix): ...
    def getCurrentState(self) -> org.hipparchus.linear.RealVector: ...
    def getCurrentTime(self) -> float: ...
    def getMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getProcessNoiseMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...

_NonLinearProcess__T = typing.TypeVar('_NonLinearProcess__T', bound=org.hipparchus.filtering.kalman.Measurement)  # <T>
class NonLinearProcess(typing.Generic[_NonLinearProcess__T]):
    def getEvolution(self, double: float, realVector: org.hipparchus.linear.RealVector, t: _NonLinearProcess__T) -> NonLinearEvolution: ...
    def getInnovation(self, t: _NonLinearProcess__T, nonLinearEvolution: NonLinearEvolution, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.filtering.kalman.extended")``.

    ExtendedKalmanFilter: typing.Type[ExtendedKalmanFilter]
    NonLinearEvolution: typing.Type[NonLinearEvolution]
    NonLinearProcess: typing.Type[NonLinearProcess]
    class-use: org.hipparchus.filtering.kalman.extended.class-use.__module_protocol__
