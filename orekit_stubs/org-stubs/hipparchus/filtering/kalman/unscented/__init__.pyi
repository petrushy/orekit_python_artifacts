import org.hipparchus.filtering.kalman
import org.hipparchus.linear
import org.hipparchus.util
import typing



class UnscentedEvolution:
    def __init__(self, double: float, realVectorArray: typing.List[org.hipparchus.linear.RealVector], realMatrix: org.hipparchus.linear.RealMatrix): ...
    def getCurrentStates(self) -> typing.List[org.hipparchus.linear.RealVector]: ...
    def getCurrentTime(self) -> float: ...
    def getProcessNoiseMatrix(self) -> org.hipparchus.linear.RealMatrix: ...

_UnscentedKalmanFilter__T = typing.TypeVar('_UnscentedKalmanFilter__T', bound=org.hipparchus.filtering.kalman.Measurement)  # <T>
class UnscentedKalmanFilter(org.hipparchus.filtering.kalman.KalmanFilter[_UnscentedKalmanFilter__T], typing.Generic[_UnscentedKalmanFilter__T]):
    def __init__(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer, unscentedProcess: 'UnscentedProcess'[_UnscentedKalmanFilter__T], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate, unscentedTransformProvider: org.hipparchus.util.UnscentedTransformProvider): ...
    def estimationStep(self, t: _UnscentedKalmanFilter__T) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...
    def getCorrected(self) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...
    def getPredicted(self) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...
    def getUnscentedTransformProvider(self) -> org.hipparchus.util.UnscentedTransformProvider: ...
    def predictionAndCorrectionSteps(self, t: _UnscentedKalmanFilter__T, realVectorArray: typing.List[org.hipparchus.linear.RealVector]) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...

_UnscentedProcess__T = typing.TypeVar('_UnscentedProcess__T', bound=org.hipparchus.filtering.kalman.Measurement)  # <T>
class UnscentedProcess(typing.Generic[_UnscentedProcess__T]):
    def getEvolution(self, double: float, realVectorArray: typing.List[org.hipparchus.linear.RealVector], t: _UnscentedProcess__T) -> UnscentedEvolution: ...
    def getInnovation(self, t: _UnscentedProcess__T, realVector: org.hipparchus.linear.RealVector, realVector2: org.hipparchus.linear.RealVector, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...
    def getPredictedMeasurements(self, realVectorArray: typing.List[org.hipparchus.linear.RealVector], t: _UnscentedProcess__T) -> typing.List[org.hipparchus.linear.RealVector]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.filtering.kalman.unscented")``.

    UnscentedEvolution: typing.Type[UnscentedEvolution]
    UnscentedKalmanFilter: typing.Type[UnscentedKalmanFilter]
    UnscentedProcess: typing.Type[UnscentedProcess]
