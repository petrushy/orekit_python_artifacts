import java.io
import java.util
import org.hipparchus.distribution
import org.hipparchus.util
import typing



class AbstractRealDistribution(org.hipparchus.distribution.RealDistribution, java.io.Serializable):
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def logDensity(self, double: float) -> float: ...
    def probability(self, double: float, double2: float) -> float: ...

class BetaDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getAlpha(self) -> float: ...
    def getBeta(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class CauchyDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getMedian(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class ChiSquaredDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getDegreesOfFreedom(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class ConstantRealDistribution(AbstractRealDistribution):
    def __init__(self, double: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class EnumeratedRealDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getPmf(self) -> java.util.List[org.hipparchus.util.Pair[float, float]]: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...
    @typing.overload
    def probability(self, double: float, double2: float) -> float: ...
    @typing.overload
    def probability(self, double: float) -> float: ...

class ExponentialDistribution(AbstractRealDistribution):
    def __init__(self, double: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getMean(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class FDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getDenominatorDegreesOfFreedom(self) -> float: ...
    def getNumeratorDegreesOfFreedom(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class GammaDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getShape(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class GumbelDistribution(AbstractRealDistribution):
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getLocation(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class LaplaceDistribution(AbstractRealDistribution):
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getLocation(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class LevyDistribution(AbstractRealDistribution):
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getLocation(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class LogNormalDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getLocation(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getShape(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...
    def probability(self, double: float, double2: float) -> float: ...

class LogisticDistribution(AbstractRealDistribution):
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getLocation(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class NakagamiDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getShape(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...

class NormalDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getMean(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getStandardDeviation(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...
    def probability(self, double: float, double2: float) -> float: ...

class ParetoDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getShape(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class TDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getDegreesOfFreedom(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...

class TriangularDistribution(AbstractRealDistribution):
    def __init__(self, double: float, double2: float, double3: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getMode(self) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class UniformRealDistribution(AbstractRealDistribution):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...

class WeibullDistribution(AbstractRealDistribution):
    def __init__(self, double: float, double2: float): ...
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getScale(self) -> float: ...
    def getShape(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.distribution.continuous")``.

    AbstractRealDistribution: typing.Type[AbstractRealDistribution]
    BetaDistribution: typing.Type[BetaDistribution]
    CauchyDistribution: typing.Type[CauchyDistribution]
    ChiSquaredDistribution: typing.Type[ChiSquaredDistribution]
    ConstantRealDistribution: typing.Type[ConstantRealDistribution]
    EnumeratedRealDistribution: typing.Type[EnumeratedRealDistribution]
    ExponentialDistribution: typing.Type[ExponentialDistribution]
    FDistribution: typing.Type[FDistribution]
    GammaDistribution: typing.Type[GammaDistribution]
    GumbelDistribution: typing.Type[GumbelDistribution]
    LaplaceDistribution: typing.Type[LaplaceDistribution]
    LevyDistribution: typing.Type[LevyDistribution]
    LogNormalDistribution: typing.Type[LogNormalDistribution]
    LogisticDistribution: typing.Type[LogisticDistribution]
    NakagamiDistribution: typing.Type[NakagamiDistribution]
    NormalDistribution: typing.Type[NormalDistribution]
    ParetoDistribution: typing.Type[ParetoDistribution]
    TDistribution: typing.Type[TDistribution]
    TriangularDistribution: typing.Type[TriangularDistribution]
    UniformRealDistribution: typing.Type[UniformRealDistribution]
    WeibullDistribution: typing.Type[WeibullDistribution]
