import java.io
import java.util
import org
import org.hipparchus.distribution
import org.hipparchus.linear
import org.hipparchus.random.class-use
import typing



class GaussMarkovGenerator:
    def __init__(self, double: float, double2: float, randomGenerator: 'RandomGenerator'): ...
    def getStationarySigma(self) -> float: ...
    def getTau(self) -> float: ...
    def next(self, double: float) -> float: ...

class NormalizedRandomGenerator:
    def nextNormalizedDouble(self) -> float: ...

class RandomGenerator:
    def nextBoolean(self) -> bool: ...
    @typing.overload
    def nextBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def nextBytes(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def nextDouble(self) -> float: ...
    def nextFloat(self) -> float: ...
    def nextGaussian(self) -> float: ...
    @typing.overload
    def nextInt(self) -> int: ...
    @typing.overload
    def nextInt(self, int: int) -> int: ...
    @typing.overload
    def nextLong(self) -> int: ...
    @typing.overload
    def nextLong(self, long: int) -> int: ...
    @typing.overload
    def setSeed(self, int: int) -> None: ...
    @typing.overload
    def setSeed(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSeed(self, long: int) -> None: ...

class RandomVectorGenerator:
    def nextVector(self) -> typing.List[float]: ...

class CorrelatedRandomVectorGenerator(RandomVectorGenerator):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], realMatrix: org.hipparchus.linear.RealMatrix, double2: float, normalizedRandomGenerator: NormalizedRandomGenerator): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, double: float, normalizedRandomGenerator: NormalizedRandomGenerator): ...
    def getGenerator(self) -> NormalizedRandomGenerator: ...
    def getRank(self) -> int: ...
    def getRootMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def nextVector(self) -> typing.List[float]: ...

class GaussianRandomGenerator(NormalizedRandomGenerator):
    def __init__(self, randomGenerator: RandomGenerator): ...
    def nextNormalizedDouble(self) -> float: ...

class HaltonSequenceGenerator(RandomVectorGenerator):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, intArray: typing.List[int], intArray2: typing.List[int]): ...
    def getNextIndex(self) -> int: ...
    def nextVector(self) -> typing.List[float]: ...
    def skipTo(self, int: int) -> typing.List[float]: ...

class RandomAdaptor(java.util.Random, RandomGenerator):
    def __init__(self, randomGenerator: RandomGenerator): ...
    def nextBoolean(self) -> bool: ...
    @typing.overload
    def nextBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def nextBytes(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def nextDouble(self, double: float) -> float: ...
    @typing.overload
    def nextDouble(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextDouble(self) -> float: ...
    @typing.overload
    def nextFloat(self, float: float) -> float: ...
    @typing.overload
    def nextFloat(self, float: float, float2: float) -> float: ...
    @typing.overload
    def nextFloat(self) -> float: ...
    @typing.overload
    def nextGaussian(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextGaussian(self) -> float: ...
    @typing.overload
    def nextInt(self, int: int, int2: int) -> int: ...
    @typing.overload
    def nextInt(self) -> int: ...
    @typing.overload
    def nextInt(self, int: int) -> int: ...
    @typing.overload
    def nextLong(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextLong(self) -> int: ...
    @typing.overload
    def nextLong(self, long: int) -> int: ...
    @staticmethod
    def of(randomGenerator: RandomGenerator) -> java.util.Random: ...
    @typing.overload
    def setSeed(self, int: int) -> None: ...
    @typing.overload
    def setSeed(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSeed(self, long: int) -> None: ...

class SobolSequenceGenerator(RandomVectorGenerator):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, inputStream: java.io.InputStream): ...
    def getNextIndex(self) -> int: ...
    def nextVector(self) -> typing.List[float]: ...
    def skipTo(self, int: int) -> typing.List[float]: ...

class StableRandomGenerator(NormalizedRandomGenerator):
    def __init__(self, randomGenerator: RandomGenerator, double: float, double2: float): ...
    def nextNormalizedDouble(self) -> float: ...

class SynchronizedRandomGenerator(RandomGenerator):
    def __init__(self, randomGenerator: RandomGenerator): ...
    def nextBoolean(self) -> bool: ...
    @typing.overload
    def nextBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def nextBytes(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def nextDouble(self) -> float: ...
    def nextFloat(self) -> float: ...
    def nextGaussian(self) -> float: ...
    @typing.overload
    def nextInt(self) -> int: ...
    @typing.overload
    def nextInt(self, int: int) -> int: ...
    @typing.overload
    def nextLong(self) -> int: ...
    @typing.overload
    def nextLong(self, long: int) -> int: ...
    @typing.overload
    def setSeed(self, int: int) -> None: ...
    @typing.overload
    def setSeed(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSeed(self, long: int) -> None: ...

class UncorrelatedRandomVectorGenerator(RandomVectorGenerator):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], normalizedRandomGenerator: NormalizedRandomGenerator): ...
    @typing.overload
    def __init__(self, int: int, normalizedRandomGenerator: NormalizedRandomGenerator): ...
    def nextVector(self) -> typing.List[float]: ...

class UniformRandomGenerator(NormalizedRandomGenerator):
    def __init__(self, randomGenerator: RandomGenerator): ...
    def nextNormalizedDouble(self) -> float: ...

class UnitSphereRandomVectorGenerator(RandomVectorGenerator):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, randomGenerator: RandomGenerator): ...
    def nextVector(self) -> typing.List[float]: ...

class AbstractWell(org.hipparchus.random.IntRandomGenerator, java.io.Serializable):
    def nextInt(self) -> int: ...
    def setSeed(self, intArray: typing.List[int]) -> None: ...

class ISAACRandom(org.hipparchus.random.IntRandomGenerator, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...
    def setSeed(self, intArray: typing.List[int]) -> None: ...

class JDKRandomGenerator(org.hipparchus.random.IntRandomGenerator, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, random: java.util.Random): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextBoolean(self) -> bool: ...
    def nextBytes(self, byteArray: typing.List[int]) -> None: ...
    def nextDouble(self) -> float: ...
    def nextFloat(self) -> float: ...
    def nextGaussian(self) -> float: ...
    @typing.overload
    def nextInt(self) -> int: ...
    @typing.overload
    def nextInt(self, int: int) -> int: ...
    def nextLong(self) -> int: ...
    @typing.overload
    def setSeed(self, int: int) -> None: ...
    @typing.overload
    def setSeed(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSeed(self, long: int) -> None: ...

class MersenneTwister(org.hipparchus.random.IntRandomGenerator, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...
    @typing.overload
    def setSeed(self, int: int) -> None: ...
    @typing.overload
    def setSeed(self, intArray: typing.List[int]) -> None: ...

class RandomDataGenerator(org.hipparchus.random.ForwardingRandomGenerator, RandomGenerator, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextBeta(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextDeviate(self, realDistribution: org.hipparchus.distribution.RealDistribution) -> float: ...
    @typing.overload
    def nextDeviate(self, integerDistribution: org.hipparchus.distribution.IntegerDistribution) -> int: ...
    @typing.overload
    def nextDeviates(self, realDistribution: org.hipparchus.distribution.RealDistribution, int: int) -> typing.List[float]: ...
    @typing.overload
    def nextDeviates(self, integerDistribution: org.hipparchus.distribution.IntegerDistribution, int2: int) -> typing.List[int]: ...
    def nextExponential(self, double: float) -> float: ...
    def nextGamma(self, double: float, double2: float) -> float: ...
    def nextHexString(self, int: int) -> str: ...
    def nextInt(self, int: int, int2: int) -> int: ...
    def nextLogNormal(self, double: float, double2: float) -> float: ...
    def nextLong(self, long: int, long2: int) -> int: ...
    def nextNormal(self, double: float, double2: float) -> float: ...
    def nextPermutation(self, int: int, int2: int) -> typing.List[int]: ...
    def nextPoisson(self, double: float) -> int: ...
    @typing.overload
    def nextSample(self, doubleArray: typing.List[float], int: int) -> typing.List[float]: ...
    @typing.overload
    def nextSample(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]], int: int) -> typing.List[typing.Any]: ...
    def nextSampleWithReplacement(self, int: int, doubleArray: typing.List[float]) -> typing.List[int]: ...
    def nextUniform(self, double: float, double2: float) -> float: ...
    def nextZipf(self, int: int, double: float) -> int: ...
    @staticmethod
    def of(randomGenerator: RandomGenerator) -> 'RandomDataGenerator': ...

class Well1024a(AbstractWell):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...

class Well19937a(AbstractWell):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...

class Well19937c(AbstractWell):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...

class Well44497a(AbstractWell):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...

class Well44497b(AbstractWell):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...

class Well512a(AbstractWell):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, long: int): ...
    def nextInt(self) -> int: ...

class ForwardingRandomGenerator: ...

class IntRandomGenerator: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.random")``.

    AbstractWell: typing.Type[AbstractWell]
    CorrelatedRandomVectorGenerator: typing.Type[CorrelatedRandomVectorGenerator]
    ForwardingRandomGenerator: typing.Type[ForwardingRandomGenerator]
    GaussMarkovGenerator: typing.Type[GaussMarkovGenerator]
    GaussianRandomGenerator: typing.Type[GaussianRandomGenerator]
    HaltonSequenceGenerator: typing.Type[HaltonSequenceGenerator]
    ISAACRandom: typing.Type[ISAACRandom]
    IntRandomGenerator: typing.Type[IntRandomGenerator]
    JDKRandomGenerator: typing.Type[JDKRandomGenerator]
    MersenneTwister: typing.Type[MersenneTwister]
    NormalizedRandomGenerator: typing.Type[NormalizedRandomGenerator]
    RandomAdaptor: typing.Type[RandomAdaptor]
    RandomDataGenerator: typing.Type[RandomDataGenerator]
    RandomGenerator: typing.Type[RandomGenerator]
    RandomVectorGenerator: typing.Type[RandomVectorGenerator]
    SobolSequenceGenerator: typing.Type[SobolSequenceGenerator]
    StableRandomGenerator: typing.Type[StableRandomGenerator]
    SynchronizedRandomGenerator: typing.Type[SynchronizedRandomGenerator]
    UncorrelatedRandomVectorGenerator: typing.Type[UncorrelatedRandomVectorGenerator]
    UniformRandomGenerator: typing.Type[UniformRandomGenerator]
    UnitSphereRandomVectorGenerator: typing.Type[UnitSphereRandomVectorGenerator]
    Well1024a: typing.Type[Well1024a]
    Well19937a: typing.Type[Well19937a]
    Well19937c: typing.Type[Well19937c]
    Well44497a: typing.Type[Well44497a]
    Well44497b: typing.Type[Well44497b]
    Well512a: typing.Type[Well512a]
    class-use: org.hipparchus.random.class-use.__module_protocol__
