import java.io
import java.lang
import org.hipparchus
import org.hipparchus.analysis.differentiation
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.geometry.euclidean.twod
import org.orekit.data
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import typing



class BodyShape(java.io.Serializable):
    def getBodyFrame(self) -> org.orekit.frames.Frame: ...
    _getIntersectionPoint_0__T = typing.TypeVar('_getIntersectionPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getIntersectionPoint(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_getIntersectionPoint_0__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getIntersectionPoint_0__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getIntersectionPoint_0__T]) -> 'FieldGeodeticPoint'[_getIntersectionPoint_0__T]: ...
    @typing.overload
    def getIntersectionPoint(self, line: org.hipparchus.geometry.euclidean.threed.Line, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> 'GeodeticPoint': ...
    @typing.overload
    def projectToGround(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def projectToGround(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    _transform_0__T = typing.TypeVar('_transform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _transform_2__T = typing.TypeVar('_transform_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transform(self, fieldGeodeticPoint: 'FieldGeodeticPoint'[_transform_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_0__T]: ...
    @typing.overload
    def transform(self, geodeticPoint: 'GeodeticPoint') -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def transform(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_2__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transform_2__T]) -> 'FieldGeodeticPoint'[_transform_2__T]: ...
    @typing.overload
    def transform(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> 'GeodeticPoint': ...

class CR3BPFactory:
    @staticmethod
    def getEarthMoonCR3BP() -> 'CR3BPSystem': ...
    @staticmethod
    def getSunEarthCR3BP(absoluteDate: org.orekit.time.AbsoluteDate, timeScale: org.orekit.time.TimeScale) -> 'CR3BPSystem': ...
    @staticmethod
    def getSunJupiterCR3BP(absoluteDate: org.orekit.time.AbsoluteDate, timeScale: org.orekit.time.TimeScale) -> 'CR3BPSystem': ...
    @staticmethod
    def getSystem(celestialBody: 'CelestialBody', celestialBody2: 'CelestialBody', double: float) -> 'CR3BPSystem': ...

class CR3BPSystem:
    @typing.overload
    def __init__(self, celestialBody: 'CelestialBody', celestialBody2: 'CelestialBody', double: float): ...
    @typing.overload
    def __init__(self, celestialBody: 'CelestialBody', celestialBody2: 'CelestialBody', double: float, double2: float): ...
    def getDdim(self) -> float: ...
    def getGamma(self, lagrangianPoints: org.orekit.utils.LagrangianPoints) -> float: ...
    def getLPosition(self, lagrangianPoints: org.orekit.utils.LagrangianPoints) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getMassRatio(self) -> float: ...
    def getName(self) -> str: ...
    def getPrimary(self) -> 'CelestialBody': ...
    def getRealAPV(self, absolutePVCoordinates: org.orekit.utils.AbsolutePVCoordinates, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.AbsolutePVCoordinates: ...
    def getRotatingFrame(self) -> org.orekit.frames.Frame: ...
    def getSecondary(self) -> 'CelestialBody': ...
    def getTdim(self) -> float: ...
    def getVdim(self) -> float: ...

class CelestialBodies:
    def getBody(self, string: str) -> 'CelestialBody': ...
    def getEarth(self) -> 'CelestialBody': ...
    def getEarthMoonBarycenter(self) -> 'CelestialBody': ...
    def getJupiter(self) -> 'CelestialBody': ...
    def getMars(self) -> 'CelestialBody': ...
    def getMercury(self) -> 'CelestialBody': ...
    def getMoon(self) -> 'CelestialBody': ...
    def getNeptune(self) -> 'CelestialBody': ...
    def getPluto(self) -> 'CelestialBody': ...
    def getSaturn(self) -> 'CelestialBody': ...
    def getSolarSystemBarycenter(self) -> 'CelestialBody': ...
    def getSun(self) -> 'CelestialBody': ...
    def getUranus(self) -> 'CelestialBody': ...
    def getVenus(self) -> 'CelestialBody': ...

class CelestialBody(java.io.Serializable, org.orekit.utils.ExtendedPVCoordinatesProvider):
    def getBodyOrientedFrame(self) -> org.orekit.frames.Frame: ...
    def getGM(self) -> float: ...
    def getInertiallyOrientedFrame(self) -> org.orekit.frames.Frame: ...
    def getName(self) -> str: ...

class CelestialBodyFactory:
    SOLAR_SYSTEM_BARYCENTER: typing.ClassVar[str] = ...
    SUN: typing.ClassVar[str] = ...
    MERCURY: typing.ClassVar[str] = ...
    VENUS: typing.ClassVar[str] = ...
    EARTH_MOON: typing.ClassVar[str] = ...
    EARTH: typing.ClassVar[str] = ...
    MOON: typing.ClassVar[str] = ...
    MARS: typing.ClassVar[str] = ...
    JUPITER: typing.ClassVar[str] = ...
    SATURN: typing.ClassVar[str] = ...
    URANUS: typing.ClassVar[str] = ...
    NEPTUNE: typing.ClassVar[str] = ...
    PLUTO: typing.ClassVar[str] = ...
    @staticmethod
    def addCelestialBodyLoader(string: str, celestialBodyLoader: 'CelestialBodyLoader') -> None: ...
    @typing.overload
    @staticmethod
    def addDefaultCelestialBodyLoader(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def addDefaultCelestialBodyLoader(string: str, string2: str) -> None: ...
    @typing.overload
    @staticmethod
    def clearCelestialBodyCache() -> None: ...
    @typing.overload
    @staticmethod
    def clearCelestialBodyCache(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def clearCelestialBodyLoaders() -> None: ...
    @typing.overload
    @staticmethod
    def clearCelestialBodyLoaders(string: str) -> None: ...
    @staticmethod
    def getBody(string: str) -> CelestialBody: ...
    @staticmethod
    def getCelestialBodies() -> 'LazyLoadedCelestialBodies': ...
    @staticmethod
    def getEarth() -> CelestialBody: ...
    @staticmethod
    def getEarthMoonBarycenter() -> CelestialBody: ...
    @staticmethod
    def getJupiter() -> CelestialBody: ...
    @staticmethod
    def getMars() -> CelestialBody: ...
    @staticmethod
    def getMercury() -> CelestialBody: ...
    @staticmethod
    def getMoon() -> CelestialBody: ...
    @staticmethod
    def getNeptune() -> CelestialBody: ...
    @staticmethod
    def getPluto() -> CelestialBody: ...
    @staticmethod
    def getSaturn() -> CelestialBody: ...
    @staticmethod
    def getSolarSystemBarycenter() -> CelestialBody: ...
    @staticmethod
    def getSun() -> CelestialBody: ...
    @staticmethod
    def getUranus() -> CelestialBody: ...
    @staticmethod
    def getVenus() -> CelestialBody: ...

class CelestialBodyLoader:
    def loadCelestialBody(self, string: str) -> CelestialBody: ...

class Ellipse(java.io.Serializable):
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, frame: org.orekit.frames.Frame): ...
    def getA(self) -> float: ...
    def getB(self) -> float: ...
    def getCenter(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getCenterOfCurvature(self, vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getU(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getV(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def pointAt(self, double: float) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def projectToEllipse(self, vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    @typing.overload
    def projectToEllipse(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def toPlane(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    def toSpace(self, vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class Ellipsoid(java.io.Serializable):
    def __init__(self, frame: org.orekit.frames.Frame, double: float, double2: float, double3: float): ...
    def getA(self) -> float: ...
    def getB(self) -> float: ...
    def getC(self) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getPlaneSection(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D) -> Ellipse: ...
    def isInside(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> bool: ...
    def pointOnLimb(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

_FieldGeodeticPoint__T = typing.TypeVar('_FieldGeodeticPoint__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGeodeticPoint(typing.Generic[_FieldGeodeticPoint__T]):
    def __init__(self, t: _FieldGeodeticPoint__T, t2: _FieldGeodeticPoint__T, t3: _FieldGeodeticPoint__T): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAltitude(self) -> _FieldGeodeticPoint__T: ...
    def getEast(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldGeodeticPoint__T]: ...
    def getLatitude(self) -> _FieldGeodeticPoint__T: ...
    def getLongitude(self) -> _FieldGeodeticPoint__T: ...
    def getNadir(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldGeodeticPoint__T]: ...
    def getNorth(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldGeodeticPoint__T]: ...
    def getSouth(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldGeodeticPoint__T]: ...
    def getWest(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldGeodeticPoint__T]: ...
    def getZenith(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldGeodeticPoint__T]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class GeodeticPoint(java.io.Serializable):
    NORTH_POLE: typing.ClassVar['GeodeticPoint'] = ...
    SOUTH_POLE: typing.ClassVar['GeodeticPoint'] = ...
    def __init__(self, double: float, double2: float, double3: float): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAltitude(self) -> float: ...
    def getEast(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getLatitude(self) -> float: ...
    def getLongitude(self) -> float: ...
    def getNadir(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getNorth(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getSouth(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getWest(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getZenith(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class IAUPole(java.io.Serializable):
    _getNode_0__T = typing.TypeVar('_getNode_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getNode(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getNode_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getNode_0__T]: ...
    @typing.overload
    def getNode(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    _getPole_0__T = typing.TypeVar('_getPole_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPole(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPole_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getPole_0__T]: ...
    @typing.overload
    def getPole(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    _getPrimeMeridianAngle_1__T = typing.TypeVar('_getPrimeMeridianAngle_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPrimeMeridianAngle(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getPrimeMeridianAngle(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPrimeMeridianAngle_1__T]) -> _getPrimeMeridianAngle_1__T: ...

class JPLEphemeridesLoader(org.orekit.data.AbstractSelfFeedingLoader, CelestialBodyLoader):
    DEFAULT_DE_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    DEFAULT_INPOP_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str, ephemerisType: 'JPLEphemeridesLoader.EphemerisType'): ...
    @typing.overload
    def __init__(self, string: str, ephemerisType: 'JPLEphemeridesLoader.EphemerisType', dataProvidersManager: org.orekit.data.DataProvidersManager, timeScales: org.orekit.time.TimeScales, frame: org.orekit.frames.Frame): ...
    def getLoadedAstronomicalUnit(self) -> float: ...
    def getLoadedConstant(self, stringArray: typing.List[str]) -> float: ...
    def getLoadedEarthMoonMassRatio(self) -> float: ...
    def getLoadedGravitationalCoefficient(self, ephemerisType: 'JPLEphemeridesLoader.EphemerisType') -> float: ...
    def getMaxChunksDuration(self) -> float: ...
    def loadCelestialBody(self, string: str) -> CelestialBody: ...
    class EphemerisType(java.lang.Enum['JPLEphemeridesLoader.EphemerisType']):
        SOLAR_SYSTEM_BARYCENTER: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        SUN: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        MERCURY: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        VENUS: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        EARTH_MOON: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        EARTH: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        MOON: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        MARS: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        JUPITER: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        SATURN: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        URANUS: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        NEPTUNE: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        PLUTO: typing.ClassVar['JPLEphemeridesLoader.EphemerisType'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'JPLEphemeridesLoader.EphemerisType': ...
        @staticmethod
        def values() -> typing.List['JPLEphemeridesLoader.EphemerisType']: ...
    class RawPVProvider:
        _getRawPV_0__T = typing.TypeVar('_getRawPV_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
        @typing.overload
        def getRawPV(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getRawPV_0__T]) -> org.orekit.utils.FieldPVCoordinates[_getRawPV_0__T]: ...
        @typing.overload
        def getRawPV(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.utils.PVCoordinates: ...

class LazyLoadedCelestialBodies(CelestialBodies):
    def __init__(self, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScales: org.orekit.time.TimeScales, frame: org.orekit.frames.Frame): ...
    def addCelestialBodyLoader(self, string: str, celestialBodyLoader: CelestialBodyLoader) -> None: ...
    @typing.overload
    def addDefaultCelestialBodyLoader(self, string: str) -> None: ...
    @typing.overload
    def addDefaultCelestialBodyLoader(self, string: str, string2: str) -> None: ...
    @typing.overload
    def clearCelestialBodyCache(self) -> None: ...
    @typing.overload
    def clearCelestialBodyCache(self, string: str) -> None: ...
    @typing.overload
    def clearCelestialBodyLoaders(self) -> None: ...
    @typing.overload
    def clearCelestialBodyLoaders(self, string: str) -> None: ...
    def getBody(self, string: str) -> CelestialBody: ...
    def getEarth(self) -> CelestialBody: ...
    def getEarthMoonBarycenter(self) -> CelestialBody: ...
    def getJupiter(self) -> CelestialBody: ...
    def getMars(self) -> CelestialBody: ...
    def getMercury(self) -> CelestialBody: ...
    def getMoon(self) -> CelestialBody: ...
    def getNeptune(self) -> CelestialBody: ...
    def getPluto(self) -> CelestialBody: ...
    def getSaturn(self) -> CelestialBody: ...
    def getSolarSystemBarycenter(self) -> CelestialBody: ...
    def getSun(self) -> CelestialBody: ...
    def getUranus(self) -> CelestialBody: ...
    def getVenus(self) -> CelestialBody: ...

class OneAxisEllipsoid(Ellipsoid, BodyShape):
    def __init__(self, double: float, double2: float, frame: org.orekit.frames.Frame): ...
    def getBodyFrame(self) -> org.orekit.frames.Frame: ...
    _getCartesianIntersectionPoint_0__T = typing.TypeVar('_getCartesianIntersectionPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getCartesianIntersectionPoint(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_getCartesianIntersectionPoint_0__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getCartesianIntersectionPoint_0__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getCartesianIntersectionPoint_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getCartesianIntersectionPoint_0__T]: ...
    @typing.overload
    def getCartesianIntersectionPoint(self, line: org.hipparchus.geometry.euclidean.threed.Line, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getEquatorialRadius(self) -> float: ...
    def getFlattening(self) -> float: ...
    _getIntersectionPoint_0__T = typing.TypeVar('_getIntersectionPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getIntersectionPoint(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_getIntersectionPoint_0__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getIntersectionPoint_0__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getIntersectionPoint_0__T]) -> FieldGeodeticPoint[_getIntersectionPoint_0__T]: ...
    @typing.overload
    def getIntersectionPoint(self, line: org.hipparchus.geometry.euclidean.threed.Line, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> GeodeticPoint: ...
    @typing.overload
    def projectToGround(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def projectToGround(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def setAngularThreshold(self, double: float) -> None: ...
    _transform_0__T = typing.TypeVar('_transform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _transform_2__T = typing.TypeVar('_transform_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transform(self, fieldGeodeticPoint: FieldGeodeticPoint[_transform_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_0__T]: ...
    @typing.overload
    def transform(self, geodeticPoint: GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def transform(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_2__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transform_2__T]) -> FieldGeodeticPoint[_transform_2__T]: ...
    @typing.overload
    def transform(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> FieldGeodeticPoint[org.hipparchus.analysis.differentiation.DerivativeStructure]: ...
    @typing.overload
    def transform(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> GeodeticPoint: ...

class PythonBodyShape(BodyShape):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getBodyFrame(self) -> org.orekit.frames.Frame: ...
    _getIntersectionPoint_0__T = typing.TypeVar('_getIntersectionPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getIntersectionPoint(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_getIntersectionPoint_0__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getIntersectionPoint_0__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getIntersectionPoint_0__T]) -> FieldGeodeticPoint[_getIntersectionPoint_0__T]: ...
    @typing.overload
    def getIntersectionPoint(self, line: org.hipparchus.geometry.euclidean.threed.Line, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> GeodeticPoint: ...
    @typing.overload
    def projectToGround(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def projectToGround(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _transform_2__T = typing.TypeVar('_transform_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _transform_3__T = typing.TypeVar('_transform_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transform(self, geodeticPoint: GeodeticPoint) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def transform(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> GeodeticPoint: ...
    @typing.overload
    def transform(self, fieldGeodeticPoint: FieldGeodeticPoint[_transform_2__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_2__T]: ...
    @typing.overload
    def transform(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_3__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transform_3__T]) -> FieldGeodeticPoint[_transform_3__T]: ...
    _transform_F__T = typing.TypeVar('_transform_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def transform_F(self, fieldGeodeticPoint: FieldGeodeticPoint[_transform_F__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_F__T]: ...
    _transform_FFF__T = typing.TypeVar('_transform_FFF__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def transform_FFF(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transform_FFF__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transform_FFF__T]) -> FieldGeodeticPoint[_transform_FFF__T]: ...

class PythonCelestialBodies(CelestialBodies):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getBody(self, string: str) -> CelestialBody: ...
    def getEarth(self) -> CelestialBody: ...
    def getEarthMoonBarycenter(self) -> CelestialBody: ...
    def getJupiter(self) -> CelestialBody: ...
    def getMars(self) -> CelestialBody: ...
    def getMercury(self) -> CelestialBody: ...
    def getMoon(self) -> CelestialBody: ...
    def getNeptune(self) -> CelestialBody: ...
    def getPluto(self) -> CelestialBody: ...
    def getSaturn(self) -> CelestialBody: ...
    def getSolarSystemBarycenter(self) -> CelestialBody: ...
    def getSun(self) -> CelestialBody: ...
    def getUranus(self) -> CelestialBody: ...
    def getVenus(self) -> CelestialBody: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonCelestialBody(CelestialBody):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getBodyOrientedFrame(self) -> org.orekit.frames.Frame: ...
    def getGM(self) -> float: ...
    def getInertiallyOrientedFrame(self) -> org.orekit.frames.Frame: ...
    def getName(self) -> str: ...
    _getPVCoordinates_1__T = typing.TypeVar('_getPVCoordinates_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPVCoordinates_1__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_getPVCoordinates_1__T]: ...
    _getPVCoordinates_FF__T = typing.TypeVar('_getPVCoordinates_FF__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getPVCoordinates_FF(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPVCoordinates_FF__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_getPVCoordinates_FF__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _toFieldPVCoordinatesProvider__T = typing.TypeVar('_toFieldPVCoordinatesProvider__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def toFieldPVCoordinatesProvider(self, field: org.hipparchus.Field[_toFieldPVCoordinatesProvider__T]) -> org.orekit.utils.FieldPVCoordinatesProvider[_toFieldPVCoordinatesProvider__T]: ...

class PythonCelestialBodyLoader(CelestialBodyLoader):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def loadCelestialBody(self, string: str) -> CelestialBody: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonIAUPole(IAUPole):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getNode_1__T = typing.TypeVar('_getNode_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getNode(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def getNode(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getNode_1__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getNode_1__T]: ...
    _getNode_F__T = typing.TypeVar('_getNode_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getNode_F(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getNode_F__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getNode_F__T]: ...
    _getPole_1__T = typing.TypeVar('_getPole_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPole(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def getPole(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPole_1__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getPole_1__T]: ...
    _getPole_F__T = typing.TypeVar('_getPole_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getPole_F(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPole_F__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getPole_F__T]: ...
    _getPrimeMeridianAngle_1__T = typing.TypeVar('_getPrimeMeridianAngle_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPrimeMeridianAngle(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getPrimeMeridianAngle(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPrimeMeridianAngle_1__T]) -> _getPrimeMeridianAngle_1__T: ...
    _getPrimeMeridianAngle_F__T = typing.TypeVar('_getPrimeMeridianAngle_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getPrimeMeridianAngle_F(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPrimeMeridianAngle_F__T]) -> _getPrimeMeridianAngle_F__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.bodies")``.

    BodyShape: typing.Type[BodyShape]
    CR3BPFactory: typing.Type[CR3BPFactory]
    CR3BPSystem: typing.Type[CR3BPSystem]
    CelestialBodies: typing.Type[CelestialBodies]
    CelestialBody: typing.Type[CelestialBody]
    CelestialBodyFactory: typing.Type[CelestialBodyFactory]
    CelestialBodyLoader: typing.Type[CelestialBodyLoader]
    Ellipse: typing.Type[Ellipse]
    Ellipsoid: typing.Type[Ellipsoid]
    FieldGeodeticPoint: typing.Type[FieldGeodeticPoint]
    GeodeticPoint: typing.Type[GeodeticPoint]
    IAUPole: typing.Type[IAUPole]
    JPLEphemeridesLoader: typing.Type[JPLEphemeridesLoader]
    LazyLoadedCelestialBodies: typing.Type[LazyLoadedCelestialBodies]
    OneAxisEllipsoid: typing.Type[OneAxisEllipsoid]
    PythonBodyShape: typing.Type[PythonBodyShape]
    PythonCelestialBodies: typing.Type[PythonCelestialBodies]
    PythonCelestialBody: typing.Type[PythonCelestialBody]
    PythonCelestialBodyLoader: typing.Type[PythonCelestialBodyLoader]
    PythonIAUPole: typing.Type[PythonIAUPole]
