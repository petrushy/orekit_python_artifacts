import java.io
import java.lang
import java.util
import java.util.function
import java.util.stream
import org.hipparchus
import org.hipparchus.analysis.differentiation
import org.hipparchus.geometry.euclidean.threed
import org.orekit.attitudes
import org.orekit.data
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.propagation.integration
import org.orekit.propagation.numerical
import org.orekit.time
import org.orekit.utils.units
import typing



class AccurateFormatter:
    STANDARDIZED_LOCALE: typing.ClassVar[java.util.Locale] = ...
    @typing.overload
    @staticmethod
    def format(double: float) -> str: ...
    @typing.overload
    @staticmethod
    def format(int: int, int2: int, int3: int, int4: int, int5: int, double: float) -> str: ...

class AngularCoordinates(org.orekit.time.TimeShiftable['AngularCoordinates'], java.io.Serializable):
    IDENTITY: typing.ClassVar['AngularCoordinates'] = ...
    ___init___1__U = typing.TypeVar('___init___1__U', bound=org.hipparchus.analysis.differentiation.Derivative)  # <U>
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[___init___1__U]): ...
    @typing.overload
    def __init__(self, rotation: org.hipparchus.geometry.euclidean.threed.Rotation, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, rotation: org.hipparchus.geometry.euclidean.threed.Rotation, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, pVCoordinates: 'PVCoordinates', pVCoordinates2: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, pVCoordinates: 'PVCoordinates', pVCoordinates2: 'PVCoordinates', pVCoordinates3: 'PVCoordinates', pVCoordinates4: 'PVCoordinates', double: float): ...
    def addOffset(self, angularCoordinates: 'AngularCoordinates') -> 'AngularCoordinates': ...
    _applyTo_0__T = typing.TypeVar('_applyTo_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _applyTo_2__T = typing.TypeVar('_applyTo_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def applyTo(self, fieldPVCoordinates: 'FieldPVCoordinates'[_applyTo_0__T]) -> 'FieldPVCoordinates'[_applyTo_0__T]: ...
    @typing.overload
    def applyTo(self, pVCoordinates: 'PVCoordinates') -> 'PVCoordinates': ...
    @typing.overload
    def applyTo(self, timeStampedFieldPVCoordinates: 'TimeStampedFieldPVCoordinates'[_applyTo_2__T]) -> 'TimeStampedFieldPVCoordinates'[_applyTo_2__T]: ...
    @typing.overload
    def applyTo(self, timeStampedPVCoordinates: 'TimeStampedPVCoordinates') -> 'TimeStampedPVCoordinates': ...
    @staticmethod
    def createFromModifiedRodrigues(doubleArray: typing.List[typing.List[float]]) -> 'AngularCoordinates': ...
    @staticmethod
    def estimateRate(rotation: org.hipparchus.geometry.euclidean.threed.Rotation, rotation2: org.hipparchus.geometry.euclidean.threed.Rotation, double: float) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getModifiedRodrigues(self, double: float) -> typing.List[typing.List[float]]: ...
    def getRotation(self) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    def getRotationAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getRotationRate(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def revert(self) -> 'AngularCoordinates': ...
    def shiftedBy(self, double: float) -> 'AngularCoordinates': ...
    def subtractOffset(self, angularCoordinates: 'AngularCoordinates') -> 'AngularCoordinates': ...
    def toDerivativeStructureRotation(self, int: int) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[org.hipparchus.analysis.differentiation.DerivativeStructure]: ...
    def toUnivariateDerivative1Rotation(self) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[org.hipparchus.analysis.differentiation.UnivariateDerivative1]: ...
    def toUnivariateDerivative2Rotation(self) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[org.hipparchus.analysis.differentiation.UnivariateDerivative2]: ...

class AngularDerivativesFilter(java.lang.Enum['AngularDerivativesFilter']):
    USE_R: typing.ClassVar['AngularDerivativesFilter'] = ...
    USE_RR: typing.ClassVar['AngularDerivativesFilter'] = ...
    USE_RRA: typing.ClassVar['AngularDerivativesFilter'] = ...
    @staticmethod
    def getFilter(int: int) -> 'AngularDerivativesFilter': ...
    def getMaxOrder(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AngularDerivativesFilter': ...
    @staticmethod
    def values() -> typing.List['AngularDerivativesFilter']: ...

class CartesianDerivativesFilter(java.lang.Enum['CartesianDerivativesFilter']):
    USE_P: typing.ClassVar['CartesianDerivativesFilter'] = ...
    USE_PV: typing.ClassVar['CartesianDerivativesFilter'] = ...
    USE_PVA: typing.ClassVar['CartesianDerivativesFilter'] = ...
    @staticmethod
    def getFilter(int: int) -> 'CartesianDerivativesFilter': ...
    def getMaxOrder(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CartesianDerivativesFilter': ...
    @staticmethod
    def values() -> typing.List['CartesianDerivativesFilter']: ...

class Constants:
    SPEED_OF_LIGHT: typing.ClassVar[float] = ...
    IAU_2012_ASTRONOMICAL_UNIT: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_SOLAR_RADIUS: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_SUN_GM: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_EARTH_POLAR_RADIUS: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_EARTH_GM: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_JUPITER_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_JUPITER_POLAR_RADIUS: typing.ClassVar[float] = ...
    IAU_2015_NOMINAL_JUPITER_GM: typing.ClassVar[float] = ...
    JULIAN_DAY: typing.ClassVar[float] = ...
    JULIAN_YEAR: typing.ClassVar[float] = ...
    JULIAN_CENTURY: typing.ClassVar[float] = ...
    BESSELIAN_YEAR: typing.ClassVar[float] = ...
    ARC_SECONDS_TO_RADIANS: typing.ClassVar[float] = ...
    G0_STANDARD_GRAVITY: typing.ClassVar[float] = ...
    SUN_RADIUS: typing.ClassVar[float] = ...
    MOON_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    WGS84_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    WGS84_EARTH_FLATTENING: typing.ClassVar[float] = ...
    WGS84_EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    WGS84_EARTH_MU: typing.ClassVar[float] = ...
    WGS84_EARTH_C20: typing.ClassVar[float] = ...
    GRS80_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    GRS80_EARTH_FLATTENING: typing.ClassVar[float] = ...
    GRS80_EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    GRS80_EARTH_MU: typing.ClassVar[float] = ...
    GRS80_EARTH_C20: typing.ClassVar[float] = ...
    EGM96_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    EGM96_EARTH_MU: typing.ClassVar[float] = ...
    EGM96_EARTH_C20: typing.ClassVar[float] = ...
    EGM96_EARTH_C30: typing.ClassVar[float] = ...
    EGM96_EARTH_C40: typing.ClassVar[float] = ...
    EGM96_EARTH_C50: typing.ClassVar[float] = ...
    EGM96_EARTH_C60: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_FLATTENING: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_MU: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_C20: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_C30: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_C40: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_C50: typing.ClassVar[float] = ...
    GRIM5C1_EARTH_C60: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_MU: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_C20: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_C30: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_C40: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_C50: typing.ClassVar[float] = ...
    EIGEN5C_EARTH_C60: typing.ClassVar[float] = ...
    IERS96_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    IERS96_EARTH_FLATTENING: typing.ClassVar[float] = ...
    IERS96_EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    IERS96_EARTH_MU: typing.ClassVar[float] = ...
    IERS96_EARTH_C20: typing.ClassVar[float] = ...
    IERS2003_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    IERS2003_EARTH_FLATTENING: typing.ClassVar[float] = ...
    IERS2003_EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    IERS2003_EARTH_MU: typing.ClassVar[float] = ...
    IERS2003_EARTH_C20: typing.ClassVar[float] = ...
    IERS2010_EARTH_EQUATORIAL_RADIUS: typing.ClassVar[float] = ...
    IERS2010_EARTH_FLATTENING: typing.ClassVar[float] = ...
    IERS2010_EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    IERS2010_EARTH_MU: typing.ClassVar[float] = ...
    IERS2010_EARTH_C20: typing.ClassVar[float] = ...
    JPL_SSD_GAUSSIAN_GRAVITATIONAL_CONSTANT: typing.ClassVar[float] = ...
    JPL_SSD_ASTRONOMICAL_UNIT: typing.ClassVar[float] = ...
    JPL_SSD_SUN_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_MERCURY_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_MERCURY_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_VENUS_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_VENUS_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_EARTH_PLUS_MOON_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_EARTH_PLUS_MOON_GM: typing.ClassVar[float] = ...
    JPL_SSD_EARTH_MOON_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_MOON_GM: typing.ClassVar[float] = ...
    JPL_SSD_EARTH_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_MARS_SYSTEM_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_MARS_SYSTEM_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_JUPITER_SYSTEM_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_JUPITER_SYSTEM_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_SATURN_SYSTEM_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_SATURN_SYSTEM_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_URANUS_SYSTEM_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_URANUS_SYSTEM_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_NEPTUNE_SYSTEM_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_NEPTUNE_SYSTEM_GM: typing.ClassVar[float] = ...
    JPL_SSD_SUN_PLUTO_SYSTEM_MASS_RATIO: typing.ClassVar[float] = ...
    JPL_SSD_PLUTO_SYSTEM_GM: typing.ClassVar[float] = ...

class Differentiation:
    @typing.overload
    @staticmethod
    def differentiate(parameterFunction: 'ParameterFunction', int: int, double: float) -> 'ParameterFunction': ...
    @typing.overload
    @staticmethod
    def differentiate(stateFunction: 'StateFunction', int: int, attitudeProvider: org.orekit.attitudes.AttitudeProvider, orbitType: org.orekit.orbits.OrbitType, positionAngle: org.orekit.orbits.PositionAngle, double: float, int2: int) -> 'StateJacobian': ...

class ElevationMask(java.io.Serializable):
    def __init__(self, doubleArray: typing.List[typing.List[float]]): ...
    def getElevation(self, double: float) -> float: ...

_FieldAngularCoordinates__T = typing.TypeVar('_FieldAngularCoordinates__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAngularCoordinates(typing.Generic[_FieldAngularCoordinates__T]):
    ___init___1__U = typing.TypeVar('___init___1__U', bound=org.hipparchus.analysis.differentiation.FieldDerivative)  # <U>
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAngularCoordinates__T], angularCoordinates: AngularCoordinates): ...
    @typing.overload
    def __init__(self, fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[___init___1__U]): ...
    @typing.overload
    def __init__(self, fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldAngularCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAngularCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldAngularCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAngularCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAngularCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldAngularCoordinates__T], fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldAngularCoordinates__T], fieldPVCoordinates3: 'FieldPVCoordinates'[_FieldAngularCoordinates__T], fieldPVCoordinates4: 'FieldPVCoordinates'[_FieldAngularCoordinates__T], double: float): ...
    def addOffset(self, fieldAngularCoordinates: 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]) -> 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]: ...
    @typing.overload
    def applyTo(self, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldAngularCoordinates__T]) -> 'FieldPVCoordinates'[_FieldAngularCoordinates__T]: ...
    @typing.overload
    def applyTo(self, pVCoordinates: 'PVCoordinates') -> 'FieldPVCoordinates'[_FieldAngularCoordinates__T]: ...
    @typing.overload
    def applyTo(self, timeStampedFieldPVCoordinates: 'TimeStampedFieldPVCoordinates'[_FieldAngularCoordinates__T]) -> 'TimeStampedFieldPVCoordinates'[_FieldAngularCoordinates__T]: ...
    @typing.overload
    def applyTo(self, timeStampedPVCoordinates: 'TimeStampedPVCoordinates') -> 'TimeStampedFieldPVCoordinates'[_FieldAngularCoordinates__T]: ...
    _createFromModifiedRodrigues__T = typing.TypeVar('_createFromModifiedRodrigues__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def createFromModifiedRodrigues(tArray: typing.List[typing.List[_createFromModifiedRodrigues__T]]) -> 'FieldAngularCoordinates'[_createFromModifiedRodrigues__T]: ...
    _estimateRate_0__T = typing.TypeVar('_estimateRate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _estimateRate_1__T = typing.TypeVar('_estimateRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def estimateRate(fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_estimateRate_0__T], fieldRotation2: org.hipparchus.geometry.euclidean.threed.FieldRotation[_estimateRate_0__T], double: float) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_estimateRate_0__T]: ...
    @typing.overload
    @staticmethod
    def estimateRate(fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_estimateRate_1__T], fieldRotation2: org.hipparchus.geometry.euclidean.threed.FieldRotation[_estimateRate_1__T], t: _estimateRate_1__T) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_estimateRate_1__T]: ...
    _getIdentity__T = typing.TypeVar('_getIdentity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getIdentity(field: org.hipparchus.Field[_getIdentity__T]) -> 'FieldAngularCoordinates'[_getIdentity__T]: ...
    def getModifiedRodrigues(self, double: float) -> typing.List[typing.List[_FieldAngularCoordinates__T]]: ...
    def getRotation(self) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldAngularCoordinates__T]: ...
    def getRotationAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAngularCoordinates__T]: ...
    def getRotationRate(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAngularCoordinates__T]: ...
    def revert(self) -> 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldAngularCoordinates__T) -> 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]: ...
    def subtractOffset(self, fieldAngularCoordinates: 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]) -> 'FieldAngularCoordinates'[_FieldAngularCoordinates__T]: ...
    def toAngularCoordinates(self) -> AngularCoordinates: ...
    def toDerivativeStructureRotation(self, int: int) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[org.hipparchus.analysis.differentiation.FieldDerivativeStructure[_FieldAngularCoordinates__T]]: ...
    def toUnivariateDerivative1Rotation(self) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[org.hipparchus.analysis.differentiation.FieldUnivariateDerivative1[_FieldAngularCoordinates__T]]: ...
    def toUnivariateDerivative2Rotation(self) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[org.hipparchus.analysis.differentiation.FieldUnivariateDerivative2[_FieldAngularCoordinates__T]]: ...

_FieldLegendrePolynomials__T = typing.TypeVar('_FieldLegendrePolynomials__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLegendrePolynomials(typing.Generic[_FieldLegendrePolynomials__T]):
    def __init__(self, int: int, int2: int, t: _FieldLegendrePolynomials__T): ...
    def getPnm(self, int: int, int2: int) -> _FieldLegendrePolynomials__T: ...

_FieldPVCoordinates__T = typing.TypeVar('_FieldPVCoordinates__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldPVCoordinates(org.orekit.time.TimeShiftable['FieldPVCoordinates'[_FieldPVCoordinates__T]], typing.Generic[_FieldPVCoordinates__T]):
    ___init___13__U = typing.TypeVar('___init___13__U', bound=org.hipparchus.analysis.differentiation.FieldDerivative)  # <U>
    @typing.overload
    def __init__(self, double: float, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], double2: float, fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], double2: float, fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T], double3: float, fieldPVCoordinates3: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, double: float, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], double2: float, fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T], double3: float, fieldPVCoordinates3: 'FieldPVCoordinates'[_FieldPVCoordinates__T], double4: float, fieldPVCoordinates4: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], t2: _FieldPVCoordinates__T, fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], t2: _FieldPVCoordinates__T, fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T], t3: _FieldPVCoordinates__T, fieldPVCoordinates3: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], t2: _FieldPVCoordinates__T, fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T], t3: _FieldPVCoordinates__T, fieldPVCoordinates3: 'FieldPVCoordinates'[_FieldPVCoordinates__T], t4: _FieldPVCoordinates__T, fieldPVCoordinates4: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, pVCoordinates: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, pVCoordinates: 'PVCoordinates', t2: _FieldPVCoordinates__T, pVCoordinates2: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, pVCoordinates: 'PVCoordinates', t2: _FieldPVCoordinates__T, pVCoordinates2: 'PVCoordinates', t3: _FieldPVCoordinates__T, pVCoordinates3: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, t: _FieldPVCoordinates__T, pVCoordinates: 'PVCoordinates', t2: _FieldPVCoordinates__T, pVCoordinates2: 'PVCoordinates', t3: _FieldPVCoordinates__T, pVCoordinates3: 'PVCoordinates', t4: _FieldPVCoordinates__T, pVCoordinates4: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldPVCoordinates__T], pVCoordinates: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[___init___13__U]): ...
    @typing.overload
    def __init__(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T], fieldVector3D3: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T], fieldPVCoordinates2: 'FieldPVCoordinates'[_FieldPVCoordinates__T]): ...
    def crossProduct(self, fieldPVCoordinates: 'FieldPVCoordinates'[_FieldPVCoordinates__T]) -> 'FieldPVCoordinates'[_FieldPVCoordinates__T]: ...
    _estimateVelocity__T = typing.TypeVar('_estimateVelocity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def estimateVelocity(fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_estimateVelocity__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_estimateVelocity__T], double: float) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_estimateVelocity__T]: ...
    def getAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]: ...
    def getAngularVelocity(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]: ...
    def getMomentum(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldPVCoordinates__T]: ...
    _getZero__T = typing.TypeVar('_getZero__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getZero(field: org.hipparchus.Field[_getZero__T]) -> 'FieldPVCoordinates'[_getZero__T]: ...
    def negate(self) -> 'FieldPVCoordinates'[_FieldPVCoordinates__T]: ...
    def normalize(self) -> 'FieldPVCoordinates'[_FieldPVCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldPVCoordinates'[_FieldPVCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldPVCoordinates__T) -> 'FieldPVCoordinates'[_FieldPVCoordinates__T]: ...
    def toDerivativeStructurePV(self, int: int) -> 'FieldPVCoordinates'[org.hipparchus.analysis.differentiation.FieldDerivativeStructure[_FieldPVCoordinates__T]]: ...
    def toDerivativeStructureVector(self, int: int) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[org.hipparchus.analysis.differentiation.FieldDerivativeStructure[_FieldPVCoordinates__T]]: ...
    def toPVCoordinates(self) -> 'PVCoordinates': ...
    def toString(self) -> str: ...
    def toUnivariateDerivative1PV(self) -> 'FieldPVCoordinates'[org.hipparchus.analysis.differentiation.FieldUnivariateDerivative1[_FieldPVCoordinates__T]]: ...
    def toUnivariateDerivative1Vector(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[org.hipparchus.analysis.differentiation.FieldUnivariateDerivative1[_FieldPVCoordinates__T]]: ...
    def toUnivariateDerivative2PV(self) -> 'FieldPVCoordinates'[org.hipparchus.analysis.differentiation.FieldUnivariateDerivative2[_FieldPVCoordinates__T]]: ...
    def toUnivariateDerivative2Vector(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[org.hipparchus.analysis.differentiation.FieldUnivariateDerivative2[_FieldPVCoordinates__T]]: ...

_FieldPVCoordinatesProvider__T = typing.TypeVar('_FieldPVCoordinatesProvider__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldPVCoordinatesProvider(typing.Generic[_FieldPVCoordinatesProvider__T]):
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldPVCoordinatesProvider__T], frame: org.orekit.frames.Frame) -> 'TimeStampedFieldPVCoordinates'[_FieldPVCoordinatesProvider__T]: ...

_FieldTimeSpanMap__Transition__S = typing.TypeVar('_FieldTimeSpanMap__Transition__S')  # <S>
_FieldTimeSpanMap__Transition__D = typing.TypeVar('_FieldTimeSpanMap__Transition__D', bound=org.hipparchus.CalculusFieldElement)  # <D>
_FieldTimeSpanMap__T = typing.TypeVar('_FieldTimeSpanMap__T')  # <T>
_FieldTimeSpanMap__D = typing.TypeVar('_FieldTimeSpanMap__D', bound=org.hipparchus.CalculusFieldElement)  # <D>
class FieldTimeSpanMap(typing.Generic[_FieldTimeSpanMap__T, _FieldTimeSpanMap__D]):
    def __init__(self, t: _FieldTimeSpanMap__T, field: org.hipparchus.Field[_FieldTimeSpanMap__D]): ...
    def addValidAfter(self, t: _FieldTimeSpanMap__T, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTimeSpanMap__D]) -> None: ...
    def addValidBefore(self, t: _FieldTimeSpanMap__T, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTimeSpanMap__D]) -> None: ...
    def get(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTimeSpanMap__D]) -> _FieldTimeSpanMap__T: ...
    def getTransitions(self) -> java.util.SortedSet['FieldTimeSpanMap.Transition'[_FieldTimeSpanMap__T, _FieldTimeSpanMap__D]]: ...
    class Transition(org.orekit.time.TimeStamped, typing.Generic[_FieldTimeSpanMap__Transition__S, _FieldTimeSpanMap__Transition__D]):
        def getAbsoluteDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldTimeSpanMap__Transition__D]: ...
        def getAfter(self) -> _FieldTimeSpanMap__Transition__S: ...
        def getBefore(self) -> _FieldTimeSpanMap__Transition__S: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...

class IERSConventions(java.lang.Enum['IERSConventions']):
    IERS_1996: typing.ClassVar['IERSConventions'] = ...
    IERS_2003: typing.ClassVar['IERSConventions'] = ...
    IERS_2010: typing.ClassVar['IERSConventions'] = ...
    _evaluateTC_2__T = typing.TypeVar('_evaluateTC_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _evaluateTC_3__T = typing.TypeVar('_evaluateTC_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def evaluateTC(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def evaluateTC(self, absoluteDate: org.orekit.time.AbsoluteDate, timeScales: org.orekit.time.TimeScales) -> float: ...
    @typing.overload
    def evaluateTC(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_evaluateTC_2__T]) -> _evaluateTC_2__T: ...
    @typing.overload
    def evaluateTC(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_evaluateTC_3__T], timeScales: org.orekit.time.TimeScales) -> _evaluateTC_3__T: ...
    @typing.overload
    def getEOPTidalCorrection(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getEOPTidalCorrection(self) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getEarthOrientationAngleFunction(self, timeScale: org.orekit.time.TimeScale) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getEarthOrientationAngleFunction(self, timeScale: org.orekit.time.TimeScale, timeScale2: org.orekit.time.TimeScale) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getGASTFunction(self, timeScale: org.orekit.time.TimeScale, eOPHistory: org.orekit.frames.EOPHistory, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getGASTFunction(self, timeScale: org.orekit.time.TimeScale, eOPHistory: org.orekit.frames.EOPHistory) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getGMSTFunction(self, timeScale: org.orekit.time.TimeScale, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getGMSTFunction(self, timeScale: org.orekit.time.TimeScale) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getGMSTRateFunction(self, timeScale: org.orekit.time.TimeScale, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getGMSTRateFunction(self, timeScale: org.orekit.time.TimeScale) -> org.orekit.time.TimeScalarFunction: ...
    def getLoveNumbers(self) -> 'LoveNumbers': ...
    @typing.overload
    def getMeanObliquityFunction(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeScalarFunction: ...
    @typing.overload
    def getMeanObliquityFunction(self) -> org.orekit.time.TimeScalarFunction: ...
    def getNominalTidalDisplacement(self) -> typing.List[float]: ...
    @typing.overload
    def getNutationArguments(self, timeScale: org.orekit.time.TimeScale, timeScales: org.orekit.time.TimeScales) -> org.orekit.data.FundamentalNutationArguments: ...
    @typing.overload
    def getNutationArguments(self, timeScale: org.orekit.time.TimeScale) -> org.orekit.data.FundamentalNutationArguments: ...
    @typing.overload
    def getNutationCorrectionConverter(self) -> 'IERSConventions.NutationCorrectionConverter': ...
    @typing.overload
    def getNutationCorrectionConverter(self, timeScales: org.orekit.time.TimeScales) -> 'IERSConventions.NutationCorrectionConverter': ...
    @typing.overload
    def getNutationFunction(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getNutationFunction(self) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getNutationReferenceEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    @typing.overload
    def getNutationReferenceEpoch(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.AbsoluteDate: ...
    def getOceanPoleTide(self, eOPHistory: org.orekit.frames.EOPHistory) -> org.orekit.time.TimeVectorFunction: ...
    def getPermanentTide(self) -> float: ...
    @typing.overload
    def getPrecessionFunction(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getPrecessionFunction(self) -> org.orekit.time.TimeVectorFunction: ...
    def getSolidPoleTide(self, eOPHistory: org.orekit.frames.EOPHistory) -> org.orekit.time.TimeVectorFunction: ...
    def getTidalDisplacementFrequencyCorrectionDiurnal(self) -> org.orekit.data.PoissonSeries.CompiledSeries: ...
    def getTidalDisplacementFrequencyCorrectionZonal(self) -> org.orekit.data.PoissonSeries.CompiledSeries: ...
    @typing.overload
    def getTideFrequencyDependenceFunction(self, timeScale: org.orekit.time.TimeScale, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getTideFrequencyDependenceFunction(self, timeScale: org.orekit.time.TimeScale) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getXYSpXY2Function(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeVectorFunction: ...
    @typing.overload
    def getXYSpXY2Function(self) -> org.orekit.time.TimeVectorFunction: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'IERSConventions': ...
    @staticmethod
    def values() -> typing.List['IERSConventions']: ...
    class NutationCorrectionConverter:
        def toEquinox(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float) -> typing.List[float]: ...
        def toNonRotating(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float) -> typing.List[float]: ...

class InterpolationTableLoader(org.orekit.data.DataLoader):
    def __init__(self): ...
    def getAbscissaGrid(self) -> typing.List[float]: ...
    def getOrdinateGrid(self) -> typing.List[float]: ...
    def getValuesSamples(self) -> typing.List[typing.List[float]]: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...

class LagrangianPoints(java.lang.Enum['LagrangianPoints']):
    L1: typing.ClassVar['LagrangianPoints'] = ...
    L2: typing.ClassVar['LagrangianPoints'] = ...
    L3: typing.ClassVar['LagrangianPoints'] = ...
    L4: typing.ClassVar['LagrangianPoints'] = ...
    L5: typing.ClassVar['LagrangianPoints'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LagrangianPoints': ...
    @staticmethod
    def values() -> typing.List['LagrangianPoints']: ...

class LegendrePolynomials:
    def __init__(self, int: int, int2: int, double: float): ...
    def getPnm(self, int: int, int2: int) -> float: ...

class LoveNumbers(java.io.Serializable):
    def __init__(self, doubleArray: typing.List[typing.List[float]], doubleArray2: typing.List[typing.List[float]], doubleArray3: typing.List[typing.List[float]]): ...
    def getImaginary(self, int: int, int2: int) -> float: ...
    def getPlus(self, int: int, int2: int) -> float: ...
    def getReal(self, int: int, int2: int) -> float: ...
    def getSize(self) -> int: ...

class MultipleShooting:
    def compute(self) -> java.util.List[org.orekit.propagation.SpacecraftState]: ...

class OrekitConfiguration:
    @staticmethod
    def getCacheSlotsNumber() -> int: ...
    @staticmethod
    def setCacheSlotsNumber(int: int) -> None: ...

class PVCoordinates(org.orekit.time.TimeShiftable['PVCoordinates'], java.io.Serializable):
    ZERO: typing.ClassVar['PVCoordinates'] = ...
    ___init___5__U = typing.TypeVar('___init___5__U', bound=org.hipparchus.analysis.differentiation.Derivative)  # <U>
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, pVCoordinates: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, double: float, pVCoordinates: 'PVCoordinates', double2: float, pVCoordinates2: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, double: float, pVCoordinates: 'PVCoordinates', double2: float, pVCoordinates2: 'PVCoordinates', double3: float, pVCoordinates3: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, double: float, pVCoordinates: 'PVCoordinates', double2: float, pVCoordinates2: 'PVCoordinates', double3: float, pVCoordinates3: 'PVCoordinates', double4: float, pVCoordinates4: 'PVCoordinates'): ...
    @typing.overload
    def __init__(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[___init___5__U]): ...
    @typing.overload
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, pVCoordinates: 'PVCoordinates', pVCoordinates2: 'PVCoordinates'): ...
    @staticmethod
    def crossProduct(pVCoordinates: 'PVCoordinates', pVCoordinates2: 'PVCoordinates') -> 'PVCoordinates': ...
    @staticmethod
    def estimateVelocity(vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAngularVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getMomentum(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def negate(self) -> 'PVCoordinates': ...
    def normalize(self) -> 'PVCoordinates': ...
    def shiftedBy(self, double: float) -> 'PVCoordinates': ...
    def toDerivativeStructurePV(self, int: int) -> FieldPVCoordinates[org.hipparchus.analysis.differentiation.DerivativeStructure]: ...
    def toDerivativeStructureVector(self, int: int) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[org.hipparchus.analysis.differentiation.DerivativeStructure]: ...
    def toString(self) -> str: ...
    def toUnivariateDerivative1PV(self) -> FieldPVCoordinates[org.hipparchus.analysis.differentiation.UnivariateDerivative1]: ...
    def toUnivariateDerivative1Vector(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[org.hipparchus.analysis.differentiation.UnivariateDerivative1]: ...
    def toUnivariateDerivative2PV(self) -> FieldPVCoordinates[org.hipparchus.analysis.differentiation.UnivariateDerivative2]: ...
    def toUnivariateDerivative2Vector(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[org.hipparchus.analysis.differentiation.UnivariateDerivative2]: ...

class PVCoordinatesProvider:
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> 'TimeStampedPVCoordinates': ...

class ParameterDriver:
    def __init__(self, string: str, double: float, double2: float, double3: float, double4: float): ...
    def addObserver(self, parameterObserver: 'ParameterObserver') -> None: ...
    def getMaxValue(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedValue(self) -> float: ...
    def getObservers(self) -> java.util.List['ParameterObserver']: ...
    def getReferenceDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getReferenceValue(self) -> float: ...
    def getScale(self) -> float: ...
    @typing.overload
    def getValue(self) -> float: ...
    @typing.overload
    def getValue(self, int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.hipparchus.analysis.differentiation.Gradient: ...
    def isSelected(self) -> bool: ...
    def removeObserver(self, parameterObserver: 'ParameterObserver') -> None: ...
    def replaceObserver(self, parameterObserver: 'ParameterObserver', parameterObserver2: 'ParameterObserver') -> None: ...
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    def setName(self, string: str) -> None: ...
    def setNormalizedValue(self, double: float) -> None: ...
    def setReferenceDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setReferenceValue(self, double: float) -> None: ...
    def setScale(self, double: float) -> None: ...
    def setSelected(self, boolean: bool) -> None: ...
    def setValue(self, double: float) -> None: ...
    def toString(self) -> str: ...

class ParameterFunction:
    def value(self, parameterDriver: ParameterDriver) -> float: ...

class ParameterObserver:
    def maxValueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def minValueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def nameChanged(self, string: str, parameterDriver: ParameterDriver) -> None: ...
    def referenceDateChanged(self, absoluteDate: org.orekit.time.AbsoluteDate, parameterDriver: ParameterDriver) -> None: ...
    def referenceValueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def scaleChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def selectionChanged(self, boolean: bool, parameterDriver: ParameterDriver) -> None: ...
    def valueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...

class SecularAndHarmonic:
    def __init__(self, int: int, doubleArray: typing.List[float]): ...
    def addPoint(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> None: ...
    def approximateAsPolynomialOnly(self, int: int, absoluteDate: org.orekit.time.AbsoluteDate, int2: int, int3: int, absoluteDate2: org.orekit.time.AbsoluteDate, absoluteDate3: org.orekit.time.AbsoluteDate, double: float) -> typing.List[float]: ...
    def fit(self) -> None: ...
    def getFittedParameters(self) -> typing.List[float]: ...
    def getHarmonicAmplitude(self) -> float: ...
    def getReferenceDate(self) -> org.orekit.time.AbsoluteDate: ...
    def meanDerivative(self, absoluteDate: org.orekit.time.AbsoluteDate, int: int, int2: int) -> float: ...
    def meanSecondDerivative(self, absoluteDate: org.orekit.time.AbsoluteDate, int: int, int2: int) -> float: ...
    def meanValue(self, absoluteDate: org.orekit.time.AbsoluteDate, int: int, int2: int) -> float: ...
    def osculatingDerivative(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def osculatingSecondDerivative(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def osculatingValue(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def resetFitting(self, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float]) -> None: ...
    def setConvergenceRMS(self, double: float) -> None: ...
    def setMaxIter(self, int: int) -> None: ...

class StateFunction:
    def value(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> typing.List[float]: ...

class StateJacobian:
    def value(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> typing.List[typing.List[float]]: ...

_TimeSpanMap__Span__S = typing.TypeVar('_TimeSpanMap__Span__S')  # <S>
_TimeSpanMap__Transition__S = typing.TypeVar('_TimeSpanMap__Transition__S')  # <S>
_TimeSpanMap__T = typing.TypeVar('_TimeSpanMap__T')  # <T>
class TimeSpanMap(typing.Generic[_TimeSpanMap__T]):
    def __init__(self, t: _TimeSpanMap__T): ...
    def addValidAfter(self, t: _TimeSpanMap__T, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addValidBefore(self, t: _TimeSpanMap__T, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def extractRange(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> 'TimeSpanMap'[_TimeSpanMap__T]: ...
    def forEach(self, consumer: typing.Union[java.util.function.Consumer[_TimeSpanMap__T], typing.Callable[[_TimeSpanMap__T], None]]) -> None: ...
    def get(self, absoluteDate: org.orekit.time.AbsoluteDate) -> _TimeSpanMap__T: ...
    def getSpan(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'TimeSpanMap.Span'[_TimeSpanMap__T]: ...
    def getTransitions(self) -> java.util.NavigableSet['TimeSpanMap.Transition'[_TimeSpanMap__T]]: ...
    class Span(typing.Generic[_TimeSpanMap__Span__S]):
        def getData(self) -> _TimeSpanMap__Span__S: ...
        def getEnd(self) -> org.orekit.time.AbsoluteDate: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    class Transition(org.orekit.time.TimeStamped, typing.Generic[_TimeSpanMap__Transition__S]):
        def getAfter(self) -> _TimeSpanMap__Transition__S: ...
        def getBefore(self) -> _TimeSpanMap__Transition__S: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...

_TimeStampedCache__T = typing.TypeVar('_TimeStampedCache__T', bound=org.orekit.time.TimeStamped)  # <T>
class TimeStampedCache(typing.Generic[_TimeStampedCache__T]):
    def getEarliest(self) -> _TimeStampedCache__T: ...
    def getLatest(self) -> _TimeStampedCache__T: ...
    def getNeighbors(self, absoluteDate: org.orekit.time.AbsoluteDate) -> java.util.stream.Stream[_TimeStampedCache__T]: ...
    def getNeighborsSize(self) -> int: ...

_TimeStampedGenerator__T = typing.TypeVar('_TimeStampedGenerator__T', bound=org.orekit.time.TimeStamped)  # <T>
class TimeStampedGenerator(typing.Generic[_TimeStampedGenerator__T]):
    def generate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> java.util.List[_TimeStampedGenerator__T]: ...

class AbstractMultipleShooting(MultipleShooting):
    def addConstraint(self, int: int, int2: int, double: float) -> None: ...
    def compute(self) -> java.util.List[org.orekit.propagation.SpacecraftState]: ...
    def setClosedOrbitConstraint(self, boolean: bool) -> None: ...
    def setEpochFreedom(self, int: int, boolean: bool) -> None: ...
    def setPatchPointComponentFreedom(self, int: int, int2: int, boolean: bool) -> None: ...

class ExtendedPVCoordinatesProvider(PVCoordinatesProvider):
    _getPVCoordinates_0__T = typing.TypeVar('_getPVCoordinates_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPVCoordinates_0__T], frame: org.orekit.frames.Frame) -> 'TimeStampedFieldPVCoordinates'[_getPVCoordinates_0__T]: ...
    @typing.overload
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> 'TimeStampedPVCoordinates': ...
    _toFieldPVCoordinatesProvider__T = typing.TypeVar('_toFieldPVCoordinatesProvider__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def toFieldPVCoordinatesProvider(self, field: org.hipparchus.Field[_toFieldPVCoordinatesProvider__T]) -> FieldPVCoordinatesProvider[_toFieldPVCoordinatesProvider__T]: ...

_GenericTimeStampedCache__T = typing.TypeVar('_GenericTimeStampedCache__T', bound=org.orekit.time.TimeStamped)  # <T>
class GenericTimeStampedCache(TimeStampedCache[_GenericTimeStampedCache__T], typing.Generic[_GenericTimeStampedCache__T]):
    DEFAULT_CACHED_SLOTS_NUMBER: typing.ClassVar[int] = ...
    def __init__(self, int: int, int2: int, double: float, double2: float, timeStampedGenerator: TimeStampedGenerator[_GenericTimeStampedCache__T]): ...
    def getEarliest(self) -> _GenericTimeStampedCache__T: ...
    def getEntries(self) -> int: ...
    def getGenerateCalls(self) -> int: ...
    def getGenerator(self) -> TimeStampedGenerator[_GenericTimeStampedCache__T]: ...
    def getGetNeighborsCalls(self) -> int: ...
    def getLatest(self) -> _GenericTimeStampedCache__T: ...
    def getMaxSlots(self) -> int: ...
    def getMaxSpan(self) -> float: ...
    def getNeighbors(self, absoluteDate: org.orekit.time.AbsoluteDate) -> java.util.stream.Stream[_GenericTimeStampedCache__T]: ...
    def getNeighborsSize(self) -> int: ...
    def getNewSlotQuantumGap(self) -> float: ...
    def getSlots(self) -> int: ...
    def getSlotsEvictions(self) -> int: ...

_ImmutableTimeStampedCache__T = typing.TypeVar('_ImmutableTimeStampedCache__T', bound=org.orekit.time.TimeStamped)  # <T>
class ImmutableTimeStampedCache(TimeStampedCache[_ImmutableTimeStampedCache__T], typing.Generic[_ImmutableTimeStampedCache__T]):
    def __init__(self, int: int, collection: typing.Union[java.util.Collection[_ImmutableTimeStampedCache__T], typing.Sequence[_ImmutableTimeStampedCache__T], typing.Set[_ImmutableTimeStampedCache__T]]): ...
    _emptyCache__TS = typing.TypeVar('_emptyCache__TS', bound=org.orekit.time.TimeStamped)  # <TS>
    @staticmethod
    def emptyCache() -> 'ImmutableTimeStampedCache'[_emptyCache__TS]: ...
    def getAll(self) -> java.util.List[_ImmutableTimeStampedCache__T]: ...
    def getEarliest(self) -> _ImmutableTimeStampedCache__T: ...
    def getLatest(self) -> _ImmutableTimeStampedCache__T: ...
    def getNeighbors(self, absoluteDate: org.orekit.time.AbsoluteDate) -> java.util.stream.Stream[_ImmutableTimeStampedCache__T]: ...
    def getNeighborsSize(self) -> int: ...
    def toString(self) -> str: ...

class ParameterDriversList:
    def __init__(self): ...
    def add(self, parameterDriver: ParameterDriver) -> None: ...
    def filter(self, boolean: bool) -> None: ...
    def findByName(self, string: str) -> 'ParameterDriversList.DelegatingDriver': ...
    def getDrivers(self) -> java.util.List['ParameterDriversList.DelegatingDriver']: ...
    def getNbParams(self) -> int: ...
    def sort(self) -> None: ...
    class DelegatingDriver(ParameterDriver):
        def getRawDrivers(self) -> java.util.List[ParameterDriver]: ...

_PythonFieldPVCoordinatesProvider__T = typing.TypeVar('_PythonFieldPVCoordinatesProvider__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldPVCoordinatesProvider(FieldPVCoordinatesProvider[_PythonFieldPVCoordinatesProvider__T], typing.Generic[_PythonFieldPVCoordinatesProvider__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldPVCoordinatesProvider__T], frame: org.orekit.frames.Frame) -> 'TimeStampedFieldPVCoordinates'[_PythonFieldPVCoordinatesProvider__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonMultipleShooting(MultipleShooting):
    def __init__(self): ...
    def compute(self) -> java.util.List[org.orekit.propagation.SpacecraftState]: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonPVCoordinatesProvider(PVCoordinatesProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> 'TimeStampedPVCoordinates': ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonParameterFunction(ParameterFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, parameterDriver: ParameterDriver) -> float: ...

class PythonParameterObserver(ParameterObserver):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def maxValueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def minValueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def nameChanged(self, string: str, parameterDriver: ParameterDriver) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def referenceDateChanged(self, absoluteDate: org.orekit.time.AbsoluteDate, parameterDriver: ParameterDriver) -> None: ...
    def referenceValueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def scaleChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...
    def selectionChanged(self, boolean: bool, parameterDriver: ParameterDriver) -> None: ...
    def valueChanged(self, double: float, parameterDriver: ParameterDriver) -> None: ...

class PythonStateFunction(StateFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> typing.List[float]: ...

class PythonStateJacobian(StateJacobian):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> typing.List[typing.List[float]]: ...

_PythonTimeStampedCache__T = typing.TypeVar('_PythonTimeStampedCache__T', bound=org.orekit.time.TimeStamped)  # <T>
class PythonTimeStampedCache(TimeStampedCache[_PythonTimeStampedCache__T], typing.Generic[_PythonTimeStampedCache__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getEarliest(self) -> _PythonTimeStampedCache__T: ...
    def getLatest(self) -> _PythonTimeStampedCache__T: ...
    def getNeighbors(self, absoluteDate: org.orekit.time.AbsoluteDate) -> java.util.stream.Stream[_PythonTimeStampedCache__T]: ...
    def getNeighborsSize(self) -> int: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonTimeStampedGenerator__T = typing.TypeVar('_PythonTimeStampedGenerator__T', bound=org.orekit.time.TimeStamped)  # <T>
class PythonTimeStampedGenerator(TimeStampedGenerator[_PythonTimeStampedGenerator__T], typing.Generic[_PythonTimeStampedGenerator__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def generate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> java.util.List[_PythonTimeStampedGenerator__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class TimeStampedAngularCoordinates(AngularCoordinates, org.orekit.time.TimeStamped):
    ___init___0__U = typing.TypeVar('___init___0__U', bound=org.hipparchus.analysis.differentiation.Derivative)  # <U>
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[___init___0__U]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, rotation: org.hipparchus.geometry.euclidean.threed.Rotation, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: PVCoordinates, pVCoordinates2: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: PVCoordinates, pVCoordinates2: PVCoordinates, pVCoordinates3: PVCoordinates, pVCoordinates4: PVCoordinates, double: float): ...
    def addOffset(self, angularCoordinates: AngularCoordinates) -> 'TimeStampedAngularCoordinates': ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, angularDerivativesFilter: AngularDerivativesFilter, collection: typing.Union[java.util.Collection['TimeStampedAngularCoordinates'], typing.Sequence['TimeStampedAngularCoordinates'], typing.Set['TimeStampedAngularCoordinates']]) -> 'TimeStampedAngularCoordinates': ...
    def revert(self) -> 'TimeStampedAngularCoordinates': ...
    def shiftedBy(self, double: float) -> 'TimeStampedAngularCoordinates': ...
    def subtractOffset(self, angularCoordinates: AngularCoordinates) -> 'TimeStampedAngularCoordinates': ...

_TimeStampedFieldAngularCoordinates__T = typing.TypeVar('_TimeStampedFieldAngularCoordinates__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class TimeStampedFieldAngularCoordinates(FieldAngularCoordinates[_TimeStampedFieldAngularCoordinates__T], org.orekit.time.FieldTimeStamped[_TimeStampedFieldAngularCoordinates__T], typing.Generic[_TimeStampedFieldAngularCoordinates__T]):
    ___init___3__U = typing.TypeVar('___init___3__U', bound=org.hipparchus.analysis.differentiation.FieldDerivative)  # <U>
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_TimeStampedFieldAngularCoordinates__T], timeStampedAngularCoordinates: TimeStampedAngularCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_TimeStampedFieldAngularCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldAngularCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldAngularCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates4: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], double: float): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldAngularCoordinates__T], fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[___init___3__U]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldAngularCoordinates__T], fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_TimeStampedFieldAngularCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldAngularCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldAngularCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], fieldPVCoordinates4: FieldPVCoordinates[_TimeStampedFieldAngularCoordinates__T], double: float): ...
    def addOffset(self, fieldAngularCoordinates: FieldAngularCoordinates[_TimeStampedFieldAngularCoordinates__T]) -> 'TimeStampedFieldAngularCoordinates'[_TimeStampedFieldAngularCoordinates__T]: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldAngularCoordinates__T]: ...
    _interpolate_0__T = typing.TypeVar('_interpolate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _interpolate_1__T = typing.TypeVar('_interpolate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, angularDerivativesFilter: AngularDerivativesFilter, collection: typing.Union[java.util.Collection['TimeStampedFieldAngularCoordinates'[_interpolate_0__T]], typing.Sequence['TimeStampedFieldAngularCoordinates'[_interpolate_0__T]], typing.Set['TimeStampedFieldAngularCoordinates'[_interpolate_0__T]]]) -> 'TimeStampedFieldAngularCoordinates'[_interpolate_0__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_1__T], angularDerivativesFilter: AngularDerivativesFilter, collection: typing.Union[java.util.Collection['TimeStampedFieldAngularCoordinates'[_interpolate_1__T]], typing.Sequence['TimeStampedFieldAngularCoordinates'[_interpolate_1__T]], typing.Set['TimeStampedFieldAngularCoordinates'[_interpolate_1__T]]]) -> 'TimeStampedFieldAngularCoordinates'[_interpolate_1__T]: ...
    def revert(self) -> 'TimeStampedFieldAngularCoordinates'[_TimeStampedFieldAngularCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'TimeStampedFieldAngularCoordinates'[_TimeStampedFieldAngularCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, t: _TimeStampedFieldAngularCoordinates__T) -> 'TimeStampedFieldAngularCoordinates'[_TimeStampedFieldAngularCoordinates__T]: ...
    def subtractOffset(self, fieldAngularCoordinates: FieldAngularCoordinates[_TimeStampedFieldAngularCoordinates__T]) -> 'TimeStampedFieldAngularCoordinates'[_TimeStampedFieldAngularCoordinates__T]: ...

_TimeStampedFieldPVCoordinates__T = typing.TypeVar('_TimeStampedFieldPVCoordinates__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class TimeStampedFieldPVCoordinates(FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], org.orekit.time.FieldTimeStamped[_TimeStampedFieldPVCoordinates__T], typing.Generic[_TimeStampedFieldPVCoordinates__T]):
    ___init___27__U = typing.TypeVar('___init___27__U', bound=org.hipparchus.analysis.differentiation.FieldDerivative)  # <U>
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double2: float, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double2: float, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double3: float, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double2: float, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double3: float, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double4: float, fieldPVCoordinates4: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t2: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t2: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t3: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t2: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t3: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t4: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates4: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates, t2: _TimeStampedFieldPVCoordinates__T, pVCoordinates2: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates, t2: _TimeStampedFieldPVCoordinates__T, pVCoordinates2: PVCoordinates, t3: _TimeStampedFieldPVCoordinates__T, pVCoordinates3: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates, t2: _TimeStampedFieldPVCoordinates__T, pVCoordinates2: PVCoordinates, t3: _TimeStampedFieldPVCoordinates__T, pVCoordinates3: PVCoordinates, t4: _TimeStampedFieldPVCoordinates__T, pVCoordinates4: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldPVCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldPVCoordinates__T], fieldVector3D3: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double2: float, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double2: float, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double3: float, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], double: float, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double2: float, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double3: float, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], double4: float, fieldPVCoordinates4: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t2: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t2: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t3: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t2: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t3: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates3: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], t4: _TimeStampedFieldPVCoordinates__T, fieldPVCoordinates4: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates, t2: _TimeStampedFieldPVCoordinates__T, pVCoordinates2: PVCoordinates): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates, t2: _TimeStampedFieldPVCoordinates__T, pVCoordinates2: PVCoordinates, t3: _TimeStampedFieldPVCoordinates__T, pVCoordinates3: PVCoordinates): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], t: _TimeStampedFieldPVCoordinates__T, pVCoordinates: PVCoordinates, t2: _TimeStampedFieldPVCoordinates__T, pVCoordinates2: PVCoordinates, t3: _TimeStampedFieldPVCoordinates__T, pVCoordinates3: PVCoordinates, t4: _TimeStampedFieldPVCoordinates__T, pVCoordinates4: PVCoordinates): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[___init___27__U]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldPVCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldPVCoordinates__T], fieldVector3D3: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T], fieldPVCoordinates: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T], fieldPVCoordinates2: FieldPVCoordinates[_TimeStampedFieldPVCoordinates__T]): ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_TimeStampedFieldPVCoordinates__T]: ...
    _interpolate_0__T = typing.TypeVar('_interpolate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _interpolate_1__T = typing.TypeVar('_interpolate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_0__T], cartesianDerivativesFilter: CartesianDerivativesFilter, collection: typing.Union[java.util.Collection['TimeStampedFieldPVCoordinates'[_interpolate_0__T]], typing.Sequence['TimeStampedFieldPVCoordinates'[_interpolate_0__T]], typing.Set['TimeStampedFieldPVCoordinates'[_interpolate_0__T]]]) -> 'TimeStampedFieldPVCoordinates'[_interpolate_0__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_1__T], cartesianDerivativesFilter: CartesianDerivativesFilter, stream: java.util.stream.Stream['TimeStampedFieldPVCoordinates'[_interpolate_1__T]]) -> 'TimeStampedFieldPVCoordinates'[_interpolate_1__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'TimeStampedFieldPVCoordinates'[_TimeStampedFieldPVCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, t: _TimeStampedFieldPVCoordinates__T) -> 'TimeStampedFieldPVCoordinates'[_TimeStampedFieldPVCoordinates__T]: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, timeScale: org.orekit.time.TimeScale) -> str: ...
    def toTimeStampedPVCoordinates(self) -> 'TimeStampedPVCoordinates': ...

class TimeStampedPVCoordinates(PVCoordinates, org.orekit.time.TimeStamped):
    ___init___4__U = typing.TypeVar('___init___4__U', bound=org.hipparchus.analysis.differentiation.Derivative)  # <U>
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, pVCoordinates: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, pVCoordinates: PVCoordinates, double2: float, pVCoordinates2: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, pVCoordinates: PVCoordinates, double2: float, pVCoordinates2: PVCoordinates, double3: float, pVCoordinates3: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, pVCoordinates: PVCoordinates, double2: float, pVCoordinates2: PVCoordinates, double3: float, pVCoordinates3: PVCoordinates, double4: float, pVCoordinates4: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[___init___4__U]): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: PVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: PVCoordinates, pVCoordinates2: PVCoordinates): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    @typing.overload
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, cartesianDerivativesFilter: CartesianDerivativesFilter, collection: typing.Union[java.util.Collection['TimeStampedPVCoordinates'], typing.Sequence['TimeStampedPVCoordinates'], typing.Set['TimeStampedPVCoordinates']]) -> 'TimeStampedPVCoordinates': ...
    @typing.overload
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, cartesianDerivativesFilter: CartesianDerivativesFilter, stream: java.util.stream.Stream['TimeStampedPVCoordinates']) -> 'TimeStampedPVCoordinates': ...
    def shiftedBy(self, double: float) -> 'TimeStampedPVCoordinates': ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, timeScale: org.orekit.time.TimeScale) -> str: ...
    def toTaylorProvider(self, frame: org.orekit.frames.Frame) -> PVCoordinatesProvider: ...

class AbsolutePVCoordinates(TimeStampedPVCoordinates, org.orekit.time.TimeStamped, org.orekit.time.TimeInterpolable['AbsolutePVCoordinates'], java.io.Serializable, PVCoordinatesProvider):
    ___init___0__U = typing.TypeVar('___init___0__U', bound=org.hipparchus.analysis.differentiation.Derivative)  # <U>
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[___init___0__U]): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: PVCoordinates): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, timeStampedPVCoordinates: TimeStampedPVCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, absolutePVCoordinates: 'AbsolutePVCoordinates'): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, absolutePVCoordinates: 'AbsolutePVCoordinates', double2: float, absolutePVCoordinates2: 'AbsolutePVCoordinates'): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, absolutePVCoordinates: 'AbsolutePVCoordinates', double2: float, absolutePVCoordinates2: 'AbsolutePVCoordinates', double3: float, absolutePVCoordinates3: 'AbsolutePVCoordinates'): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, absolutePVCoordinates: 'AbsolutePVCoordinates', double2: float, absolutePVCoordinates2: 'AbsolutePVCoordinates', double3: float, absolutePVCoordinates3: 'AbsolutePVCoordinates', double4: float, absolutePVCoordinates4: 'AbsolutePVCoordinates'): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, absolutePVCoordinates: 'AbsolutePVCoordinates', absolutePVCoordinates2: 'AbsolutePVCoordinates'): ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    @typing.overload
    def getPVCoordinates(self) -> TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> TimeStampedPVCoordinates: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream['AbsolutePVCoordinates']) -> 'AbsolutePVCoordinates': ...
    @typing.overload
    @staticmethod
    def interpolate(frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, cartesianDerivativesFilter: CartesianDerivativesFilter, stream: java.util.stream.Stream['AbsolutePVCoordinates']) -> 'AbsolutePVCoordinates': ...
    @typing.overload
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, cartesianDerivativesFilter: CartesianDerivativesFilter, collection: typing.Union[java.util.Collection[TimeStampedPVCoordinates], typing.Sequence[TimeStampedPVCoordinates], typing.Set[TimeStampedPVCoordinates]]) -> TimeStampedPVCoordinates: ...
    @typing.overload
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, cartesianDerivativesFilter: CartesianDerivativesFilter, stream: java.util.stream.Stream[TimeStampedPVCoordinates]) -> TimeStampedPVCoordinates: ...
    def shiftedBy(self, double: float) -> 'AbsolutePVCoordinates': ...
    @typing.overload
    def toTaylorProvider(self) -> PVCoordinatesProvider: ...
    @typing.overload
    def toTaylorProvider(self, frame: org.orekit.frames.Frame) -> PVCoordinatesProvider: ...

_FieldAbsolutePVCoordinates__T = typing.TypeVar('_FieldAbsolutePVCoordinates__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbsolutePVCoordinates(TimeStampedFieldPVCoordinates[_FieldAbsolutePVCoordinates__T], org.orekit.time.FieldTimeStamped[_FieldAbsolutePVCoordinates__T], org.orekit.time.FieldTimeInterpolable['FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], _FieldAbsolutePVCoordinates__T], FieldPVCoordinatesProvider[_FieldAbsolutePVCoordinates__T], typing.Generic[_FieldAbsolutePVCoordinates__T]):
    ___init___0__U = typing.TypeVar('___init___0__U', bound=org.hipparchus.analysis.differentiation.FieldDerivative)  # <U>
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[___init___0__U]): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAbsolutePVCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAbsolutePVCoordinates__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAbsolutePVCoordinates__T], fieldVector3D3: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], fieldPVCoordinates: FieldPVCoordinates[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, timeStampedFieldPVCoordinates: TimeStampedFieldPVCoordinates[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], t: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], t: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], t2: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates2: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], t: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], t2: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates2: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], t3: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates3: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], t: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], t2: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates2: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], t3: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates3: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], t4: _FieldAbsolutePVCoordinates__T, fieldAbsolutePVCoordinates4: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], fieldAbsolutePVCoordinates: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T], fieldAbsolutePVCoordinates2: 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]): ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    @typing.overload
    def getPVCoordinates(self) -> TimeStampedFieldPVCoordinates[_FieldAbsolutePVCoordinates__T]: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> TimeStampedFieldPVCoordinates[_FieldAbsolutePVCoordinates__T]: ...
    @typing.overload
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], frame: org.orekit.frames.Frame) -> TimeStampedFieldPVCoordinates[_FieldAbsolutePVCoordinates__T]: ...
    _interpolate_2__T = typing.TypeVar('_interpolate_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _interpolate_3__T = typing.TypeVar('_interpolate_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _interpolate_4__T = typing.TypeVar('_interpolate_4__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.CalculusFieldElement], collection: typing.Union[java.util.Collection[_FieldAbsolutePVCoordinates__T], typing.Sequence[_FieldAbsolutePVCoordinates__T], typing.Set[_FieldAbsolutePVCoordinates__T]]) -> _FieldAbsolutePVCoordinates__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldAbsolutePVCoordinates__T], stream: java.util.stream.Stream['FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]]) -> 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_2__T], cartesianDerivativesFilter: CartesianDerivativesFilter, stream: java.util.stream.Stream['FieldAbsolutePVCoordinates'[_interpolate_2__T]]) -> 'FieldAbsolutePVCoordinates'[_interpolate_2__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_3__T], cartesianDerivativesFilter: CartesianDerivativesFilter, collection: typing.Union[java.util.Collection[TimeStampedFieldPVCoordinates[_interpolate_3__T]], typing.Sequence[TimeStampedFieldPVCoordinates[_interpolate_3__T]], typing.Set[TimeStampedFieldPVCoordinates[_interpolate_3__T]]]) -> TimeStampedFieldPVCoordinates[_interpolate_3__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_4__T], cartesianDerivativesFilter: CartesianDerivativesFilter, stream: java.util.stream.Stream[TimeStampedFieldPVCoordinates[_interpolate_4__T]]) -> TimeStampedFieldPVCoordinates[_interpolate_4__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldAbsolutePVCoordinates__T) -> 'FieldAbsolutePVCoordinates'[_FieldAbsolutePVCoordinates__T]: ...
    def toAbsolutePVCoordinates(self) -> AbsolutePVCoordinates: ...
    def toTaylorProvider(self) -> FieldPVCoordinatesProvider[_FieldAbsolutePVCoordinates__T]: ...

class MultipleShooter(AbstractMultipleShooting):
    def __init__(self, list: java.util.List[org.orekit.propagation.SpacecraftState], list2: java.util.List[org.orekit.propagation.numerical.NumericalPropagator], list3: java.util.List[org.orekit.propagation.integration.AdditionalEquations], double: float, double2: float): ...

class PythonAbstractMultipleShooting(AbstractMultipleShooting):
    def computeAdditionalConstraints(self, list: java.util.List[org.orekit.propagation.SpacecraftState]) -> typing.List[float]: ...
    def computeAdditionalJacobianMatrix(self, list: java.util.List[org.orekit.propagation.SpacecraftState]) -> typing.List[typing.List[float]]: ...
    def finalize(self) -> None: ...
    def getAugmentedInitialState(self, spacecraftState: org.orekit.propagation.SpacecraftState, additionalEquations: org.orekit.propagation.integration.AdditionalEquations) -> org.orekit.propagation.SpacecraftState: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonExtendedPVCoordinatesProvider(ExtendedPVCoordinatesProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getPVCoordinates_1__T = typing.TypeVar('_getPVCoordinates_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPVCoordinates_1__T], frame: org.orekit.frames.Frame) -> TimeStampedFieldPVCoordinates[_getPVCoordinates_1__T]: ...
    _getPVCoordinates_FF__T = typing.TypeVar('_getPVCoordinates_FF__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getPVCoordinates_FF(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPVCoordinates_FF__T], frame: org.orekit.frames.Frame) -> TimeStampedFieldPVCoordinates[_getPVCoordinates_FF__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.utils")``.

    AbsolutePVCoordinates: typing.Type[AbsolutePVCoordinates]
    AbstractMultipleShooting: typing.Type[AbstractMultipleShooting]
    AccurateFormatter: typing.Type[AccurateFormatter]
    AngularCoordinates: typing.Type[AngularCoordinates]
    AngularDerivativesFilter: typing.Type[AngularDerivativesFilter]
    CartesianDerivativesFilter: typing.Type[CartesianDerivativesFilter]
    Constants: typing.Type[Constants]
    Differentiation: typing.Type[Differentiation]
    ElevationMask: typing.Type[ElevationMask]
    ExtendedPVCoordinatesProvider: typing.Type[ExtendedPVCoordinatesProvider]
    FieldAbsolutePVCoordinates: typing.Type[FieldAbsolutePVCoordinates]
    FieldAngularCoordinates: typing.Type[FieldAngularCoordinates]
    FieldLegendrePolynomials: typing.Type[FieldLegendrePolynomials]
    FieldPVCoordinates: typing.Type[FieldPVCoordinates]
    FieldPVCoordinatesProvider: typing.Type[FieldPVCoordinatesProvider]
    FieldTimeSpanMap: typing.Type[FieldTimeSpanMap]
    GenericTimeStampedCache: typing.Type[GenericTimeStampedCache]
    IERSConventions: typing.Type[IERSConventions]
    ImmutableTimeStampedCache: typing.Type[ImmutableTimeStampedCache]
    InterpolationTableLoader: typing.Type[InterpolationTableLoader]
    LagrangianPoints: typing.Type[LagrangianPoints]
    LegendrePolynomials: typing.Type[LegendrePolynomials]
    LoveNumbers: typing.Type[LoveNumbers]
    MultipleShooter: typing.Type[MultipleShooter]
    MultipleShooting: typing.Type[MultipleShooting]
    OrekitConfiguration: typing.Type[OrekitConfiguration]
    PVCoordinates: typing.Type[PVCoordinates]
    PVCoordinatesProvider: typing.Type[PVCoordinatesProvider]
    ParameterDriver: typing.Type[ParameterDriver]
    ParameterDriversList: typing.Type[ParameterDriversList]
    ParameterFunction: typing.Type[ParameterFunction]
    ParameterObserver: typing.Type[ParameterObserver]
    PythonAbstractMultipleShooting: typing.Type[PythonAbstractMultipleShooting]
    PythonExtendedPVCoordinatesProvider: typing.Type[PythonExtendedPVCoordinatesProvider]
    PythonFieldPVCoordinatesProvider: typing.Type[PythonFieldPVCoordinatesProvider]
    PythonMultipleShooting: typing.Type[PythonMultipleShooting]
    PythonPVCoordinatesProvider: typing.Type[PythonPVCoordinatesProvider]
    PythonParameterFunction: typing.Type[PythonParameterFunction]
    PythonParameterObserver: typing.Type[PythonParameterObserver]
    PythonStateFunction: typing.Type[PythonStateFunction]
    PythonStateJacobian: typing.Type[PythonStateJacobian]
    PythonTimeStampedCache: typing.Type[PythonTimeStampedCache]
    PythonTimeStampedGenerator: typing.Type[PythonTimeStampedGenerator]
    SecularAndHarmonic: typing.Type[SecularAndHarmonic]
    StateFunction: typing.Type[StateFunction]
    StateJacobian: typing.Type[StateJacobian]
    TimeSpanMap: typing.Type[TimeSpanMap]
    TimeStampedAngularCoordinates: typing.Type[TimeStampedAngularCoordinates]
    TimeStampedCache: typing.Type[TimeStampedCache]
    TimeStampedFieldAngularCoordinates: typing.Type[TimeStampedFieldAngularCoordinates]
    TimeStampedFieldPVCoordinates: typing.Type[TimeStampedFieldPVCoordinates]
    TimeStampedGenerator: typing.Type[TimeStampedGenerator]
    TimeStampedPVCoordinates: typing.Type[TimeStampedPVCoordinates]
    units: org.orekit.utils.units.__module_protocol__
