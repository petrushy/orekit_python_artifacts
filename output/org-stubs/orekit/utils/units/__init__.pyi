import java.io
import java.lang
import java.util
import org.hipparchus.fraction
import typing



class Parser:
    @staticmethod
    def buildTermsList(string: str) -> java.util.List['PowerTerm']: ...

class PowerTerm:
    def getBase(self) -> java.lang.CharSequence: ...
    def getExponent(self) -> org.hipparchus.fraction.Fraction: ...
    def getScale(self) -> float: ...

class Unit(java.io.Serializable):
    NONE: typing.ClassVar['Unit'] = ...
    ONE: typing.ClassVar['Unit'] = ...
    PERCENT: typing.ClassVar['Unit'] = ...
    SECOND: typing.ClassVar['Unit'] = ...
    MINUTE: typing.ClassVar['Unit'] = ...
    HOUR: typing.ClassVar['Unit'] = ...
    DAY: typing.ClassVar['Unit'] = ...
    YEAR: typing.ClassVar['Unit'] = ...
    HERTZ: typing.ClassVar['Unit'] = ...
    METRE: typing.ClassVar['Unit'] = ...
    KILOMETRE: typing.ClassVar['Unit'] = ...
    KILOGRAM: typing.ClassVar['Unit'] = ...
    GRAM: typing.ClassVar['Unit'] = ...
    AMPERE: typing.ClassVar['Unit'] = ...
    RADIAN: typing.ClassVar['Unit'] = ...
    DEGREE: typing.ClassVar['Unit'] = ...
    ARC_MINUTE: typing.ClassVar['Unit'] = ...
    ARC_SECOND: typing.ClassVar['Unit'] = ...
    REVOLUTION: typing.ClassVar['Unit'] = ...
    NEWTON: typing.ClassVar['Unit'] = ...
    PASCAL: typing.ClassVar['Unit'] = ...
    BAR: typing.ClassVar['Unit'] = ...
    JOULE: typing.ClassVar['Unit'] = ...
    WATT: typing.ClassVar['Unit'] = ...
    COULOMB: typing.ClassVar['Unit'] = ...
    VOLT: typing.ClassVar['Unit'] = ...
    OHM: typing.ClassVar['Unit'] = ...
    TESLA: typing.ClassVar['Unit'] = ...
    SOLAR_FLUX_UNIT: typing.ClassVar['Unit'] = ...
    TOTAL_ELECTRON_CONTENT_UNIT: typing.ClassVar['Unit'] = ...
    def __init__(self, string: str, double: float, fraction: org.hipparchus.fraction.Fraction, fraction2: org.hipparchus.fraction.Fraction, fraction3: org.hipparchus.fraction.Fraction, fraction4: org.hipparchus.fraction.Fraction, fraction5: org.hipparchus.fraction.Fraction): ...
    def alias(self, string: str) -> 'Unit': ...
    def divide(self, string: str, unit: 'Unit') -> 'Unit': ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def fromSI(self, double: float) -> float: ...
    @typing.overload
    def fromSI(self, double: float) -> float: ...
    def getAngle(self) -> org.hipparchus.fraction.Fraction: ...
    def getCurrent(self) -> org.hipparchus.fraction.Fraction: ...
    def getLength(self) -> org.hipparchus.fraction.Fraction: ...
    def getMass(self) -> org.hipparchus.fraction.Fraction: ...
    def getName(self) -> str: ...
    def getScale(self) -> float: ...
    def getTime(self) -> org.hipparchus.fraction.Fraction: ...
    def hashCode(self) -> int: ...
    def multiply(self, string: str, unit: 'Unit') -> 'Unit': ...
    @staticmethod
    def parse(string: str) -> 'Unit': ...
    def power(self, string: str, fraction: org.hipparchus.fraction.Fraction) -> 'Unit': ...
    def sameDimension(self, unit: 'Unit') -> bool: ...
    def sameDimensionSI(self) -> 'Unit': ...
    def scale(self, string: str, double: float) -> 'Unit': ...
    def sqrt(self, string: str) -> 'Unit': ...
    @typing.overload
    def toSI(self, double: float) -> float: ...
    @typing.overload
    def toSI(self, double: float) -> float: ...
    def toString(self) -> str: ...

class UnitsCache:
    def __init__(self): ...
    def getUnits(self, string: str) -> Unit: ...

class UnitsConverter:
    IDENTITY: typing.ClassVar['UnitsConverter'] = ...
    PERCENTS_TO_UNIT: typing.ClassVar['UnitsConverter'] = ...
    ARC_SECONDS_TO_RADIANS: typing.ClassVar['UnitsConverter'] = ...
    MILLI_ARC_SECONDS_TO_RADIANS: typing.ClassVar['UnitsConverter'] = ...
    MILLI_SECONDS_TO_SECONDS: typing.ClassVar['UnitsConverter'] = ...
    DAYS_TO_SECONDS: typing.ClassVar['UnitsConverter'] = ...
    KILOMETRES_TO_METRES: typing.ClassVar['UnitsConverter'] = ...
    KILOMETRES_2_TO_METRES_2: typing.ClassVar['UnitsConverter'] = ...
    KM3_P_S2_TO_M3_P_S2: typing.ClassVar['UnitsConverter'] = ...
    def __init__(self, unit: Unit, unit2: Unit): ...
    def convert(self, double: float) -> float: ...
    def getFrom(self) -> Unit: ...
    def getTo(self) -> Unit: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.utils.units")``.

    Parser: typing.Type[Parser]
    PowerTerm: typing.Type[PowerTerm]
    Unit: typing.Type[Unit]
    UnitsCache: typing.Type[UnitsCache]
    UnitsConverter: typing.Type[UnitsConverter]
