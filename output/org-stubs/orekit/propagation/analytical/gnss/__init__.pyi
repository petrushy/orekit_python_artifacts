import org.orekit.attitudes
import org.orekit.data
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.analytical
import org.orekit.propagation.analytical.gnss.data
import org.orekit.time
import org.orekit.utils
import typing



class ClockCorrectionsProvider(org.orekit.propagation.AdditionalStateProvider):
    CLOCK_CORRECTIONS: typing.ClassVar[str] = ...
    def __init__(self, gNSSClockElements: org.orekit.propagation.analytical.gnss.data.GNSSClockElements): ...
    def getAdditionalState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> typing.List[float]: ...
    def getName(self) -> str: ...

class GLONASSAnalyticalPropagator(org.orekit.propagation.analytical.AbstractAnalyticalPropagator):
    def getECEF(self) -> org.orekit.frames.Frame: ...
    def getECI(self) -> org.orekit.frames.Frame: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getGLONASSOrbitalElements(self) -> org.orekit.propagation.analytical.gnss.data.GLONASSOrbitalElements: ...
    @staticmethod
    def getMU() -> float: ...
    def propagateInEcef(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.utils.PVCoordinates: ...
    def resetInitialState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class GLONASSAnalyticalPropagatorBuilder:
    @typing.overload
    def __init__(self, gLONASSOrbitalElements: org.orekit.propagation.analytical.gnss.data.GLONASSOrbitalElements): ...
    @typing.overload
    def __init__(self, gLONASSOrbitalElements: org.orekit.propagation.analytical.gnss.data.GLONASSOrbitalElements, dataContext: org.orekit.data.DataContext): ...
    def attitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> 'GLONASSAnalyticalPropagatorBuilder': ...
    def build(self) -> GLONASSAnalyticalPropagator: ...
    def dataContext(self, dataContext: org.orekit.data.DataContext) -> 'GLONASSAnalyticalPropagatorBuilder': ...
    def ecef(self, frame: org.orekit.frames.Frame) -> 'GLONASSAnalyticalPropagatorBuilder': ...
    def eci(self, frame: org.orekit.frames.Frame) -> 'GLONASSAnalyticalPropagatorBuilder': ...
    def mass(self, double: float) -> 'GLONASSAnalyticalPropagatorBuilder': ...

class GNSSPropagator(org.orekit.propagation.analytical.AbstractAnalyticalPropagator):
    def getECEF(self) -> org.orekit.frames.Frame: ...
    def getECI(self) -> org.orekit.frames.Frame: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getMU(self) -> float: ...
    def getOrbitalElements(self) -> org.orekit.propagation.analytical.gnss.data.GNSSOrbitalElements: ...
    def propagateInEcef(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.utils.PVCoordinates: ...
    def resetInitialState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class GNSSPropagatorBuilder:
    @typing.overload
    def __init__(self, gNSSOrbitalElements: org.orekit.propagation.analytical.gnss.data.GNSSOrbitalElements): ...
    @typing.overload
    def __init__(self, gNSSOrbitalElements: org.orekit.propagation.analytical.gnss.data.GNSSOrbitalElements, frames: org.orekit.frames.Frames): ...
    def attitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> 'GNSSPropagatorBuilder': ...
    def build(self) -> GNSSPropagator: ...
    def ecef(self, frame: org.orekit.frames.Frame) -> 'GNSSPropagatorBuilder': ...
    def eci(self, frame: org.orekit.frames.Frame) -> 'GNSSPropagatorBuilder': ...
    def mass(self, double: float) -> 'GNSSPropagatorBuilder': ...

class SBASPropagator(org.orekit.propagation.analytical.AbstractAnalyticalPropagator):
    def getECEF(self) -> org.orekit.frames.Frame: ...
    def getECI(self) -> org.orekit.frames.Frame: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getMU(self) -> float: ...
    def getSBASOrbitalElements(self) -> org.orekit.propagation.analytical.gnss.data.SBASOrbitalElements: ...
    def propagateInEcef(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.utils.PVCoordinates: ...
    def resetInitialState(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...

class SBASPropagatorBuilder:
    def __init__(self, sBASOrbitalElements: org.orekit.propagation.analytical.gnss.data.SBASOrbitalElements, frames: org.orekit.frames.Frames): ...
    def attitudeProvider(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider) -> 'SBASPropagatorBuilder': ...
    def build(self) -> SBASPropagator: ...
    def ecef(self, frame: org.orekit.frames.Frame) -> 'SBASPropagatorBuilder': ...
    def eci(self, frame: org.orekit.frames.Frame) -> 'SBASPropagatorBuilder': ...
    def mass(self, double: float) -> 'SBASPropagatorBuilder': ...
    def mu(self, double: float) -> 'SBASPropagatorBuilder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.analytical.gnss")``.

    ClockCorrectionsProvider: typing.Type[ClockCorrectionsProvider]
    GLONASSAnalyticalPropagator: typing.Type[GLONASSAnalyticalPropagator]
    GLONASSAnalyticalPropagatorBuilder: typing.Type[GLONASSAnalyticalPropagatorBuilder]
    GNSSPropagator: typing.Type[GNSSPropagator]
    GNSSPropagatorBuilder: typing.Type[GNSSPropagatorBuilder]
    SBASPropagator: typing.Type[SBASPropagator]
    SBASPropagatorBuilder: typing.Type[SBASPropagatorBuilder]
    data: org.orekit.propagation.analytical.gnss.data.__module_protocol__
