import java.util
import org.hipparchus
import org.hipparchus.ode.events
import org.orekit.propagation
import org.orekit.propagation.events
import org.orekit.time
import typing



_EventHandler__T = typing.TypeVar('_EventHandler__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class EventHandler(typing.Generic[_EventHandler__T]):
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _EventHandler__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate, t: _EventHandler__T) -> None: ...
    def resetState(self, t: _EventHandler__T, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.orekit.propagation.SpacecraftState: ...

_FieldEventHandler__KK = typing.TypeVar('_FieldEventHandler__KK', bound=org.orekit.propagation.events.FieldEventDetector)  # <KK>
_FieldEventHandler__T = typing.TypeVar('_FieldEventHandler__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEventHandler(typing.Generic[_FieldEventHandler__KK, _FieldEventHandler__T]):
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventHandler__T], kK: _FieldEventHandler__KK, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventHandler__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEventHandler__T]) -> None: ...
    def resetState(self, kK: _FieldEventHandler__KK, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldEventHandler__T]) -> org.orekit.propagation.FieldSpacecraftState[_FieldEventHandler__T]: ...

_ContinueOnEvent__T = typing.TypeVar('_ContinueOnEvent__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class ContinueOnEvent(EventHandler[_ContinueOnEvent__T], typing.Generic[_ContinueOnEvent__T]):
    def __init__(self): ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _ContinueOnEvent__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_EventMultipleHandler__D = typing.TypeVar('_EventMultipleHandler__D', bound=org.orekit.propagation.events.EventDetector)  # <D>
class EventMultipleHandler(EventHandler[_EventMultipleHandler__D], typing.Generic[_EventMultipleHandler__D]):
    def __init__(self): ...
    def addHandler(self, eventHandler: EventHandler[_EventMultipleHandler__D]) -> 'EventMultipleHandler'[_EventMultipleHandler__D]: ...
    def addHandlers(self, eventHandlerArray: typing.List[EventHandler[_EventMultipleHandler__D]]) -> 'EventMultipleHandler'[_EventMultipleHandler__D]: ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, d: _EventMultipleHandler__D, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def getHandlers(self) -> java.util.List[EventHandler[_EventMultipleHandler__D]]: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate, d: _EventMultipleHandler__D) -> None: ...
    def resetState(self, d: _EventMultipleHandler__D, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.orekit.propagation.SpacecraftState: ...
    def setHandlers(self, list: java.util.List[EventHandler[_EventMultipleHandler__D]]) -> None: ...

_FieldContinueOnEvent__KK = typing.TypeVar('_FieldContinueOnEvent__KK', bound=org.orekit.propagation.events.FieldEventDetector)  # <KK>
_FieldContinueOnEvent__T = typing.TypeVar('_FieldContinueOnEvent__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldContinueOnEvent(FieldEventHandler[_FieldContinueOnEvent__KK, _FieldContinueOnEvent__T], typing.Generic[_FieldContinueOnEvent__KK, _FieldContinueOnEvent__T]):
    def __init__(self): ...
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldContinueOnEvent__T], kK: _FieldContinueOnEvent__KK, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_FieldRecordAndContinue__Event__T = typing.TypeVar('_FieldRecordAndContinue__Event__T')  # <T>
_FieldRecordAndContinue__Event__F = typing.TypeVar('_FieldRecordAndContinue__Event__F', bound=org.hipparchus.CalculusFieldElement)  # <F>
_FieldRecordAndContinue__T = typing.TypeVar('_FieldRecordAndContinue__T', bound=org.orekit.propagation.events.FieldEventDetector)  # <T>
_FieldRecordAndContinue__E = typing.TypeVar('_FieldRecordAndContinue__E', bound=org.hipparchus.CalculusFieldElement)  # <E>
class FieldRecordAndContinue(FieldEventHandler[_FieldRecordAndContinue__T, _FieldRecordAndContinue__E], typing.Generic[_FieldRecordAndContinue__T, _FieldRecordAndContinue__E]):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List['FieldRecordAndContinue.Event'[_FieldRecordAndContinue__T, _FieldRecordAndContinue__E]]): ...
    def clear(self) -> None: ...
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldRecordAndContinue__E], t: _FieldRecordAndContinue__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def getEvents(self) -> java.util.List['FieldRecordAndContinue.Event'[_FieldRecordAndContinue__T, _FieldRecordAndContinue__E]]: ...
    class Event(typing.Generic[_FieldRecordAndContinue__Event__T, _FieldRecordAndContinue__Event__F]):
        def getDetector(self) -> _FieldRecordAndContinue__Event__T: ...
        def getState(self) -> org.orekit.propagation.FieldSpacecraftState[_FieldRecordAndContinue__Event__F]: ...
        def isIncreasing(self) -> bool: ...
        def toString(self) -> str: ...

_FieldStopOnDecreasing__KK = typing.TypeVar('_FieldStopOnDecreasing__KK', bound=org.orekit.propagation.events.FieldEventDetector)  # <KK>
_FieldStopOnDecreasing__T = typing.TypeVar('_FieldStopOnDecreasing__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldStopOnDecreasing(FieldEventHandler[_FieldStopOnDecreasing__KK, _FieldStopOnDecreasing__T], typing.Generic[_FieldStopOnDecreasing__KK, _FieldStopOnDecreasing__T]):
    def __init__(self): ...
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldStopOnDecreasing__T], kK: _FieldStopOnDecreasing__KK, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_FieldStopOnEvent__KK = typing.TypeVar('_FieldStopOnEvent__KK', bound=org.orekit.propagation.events.FieldEventDetector)  # <KK>
_FieldStopOnEvent__T = typing.TypeVar('_FieldStopOnEvent__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldStopOnEvent(FieldEventHandler[_FieldStopOnEvent__KK, _FieldStopOnEvent__T], typing.Generic[_FieldStopOnEvent__KK, _FieldStopOnEvent__T]):
    def __init__(self): ...
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldStopOnEvent__T], kK: _FieldStopOnEvent__KK, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_FieldStopOnIncreasing__KK = typing.TypeVar('_FieldStopOnIncreasing__KK', bound=org.orekit.propagation.events.FieldEventDetector)  # <KK>
_FieldStopOnIncreasing__T = typing.TypeVar('_FieldStopOnIncreasing__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldStopOnIncreasing(FieldEventHandler[_FieldStopOnIncreasing__KK, _FieldStopOnIncreasing__T], typing.Generic[_FieldStopOnIncreasing__KK, _FieldStopOnIncreasing__T]):
    def __init__(self): ...
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_FieldStopOnIncreasing__T], kK: _FieldStopOnIncreasing__KK, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_PythonEventHandler__T = typing.TypeVar('_PythonEventHandler__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class PythonEventHandler(EventHandler[_PythonEventHandler__T], typing.Generic[_PythonEventHandler__T]):
    def __init__(self): ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _PythonEventHandler__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def finalize(self) -> None: ...
    def getPythonObject(self) -> int: ...
    def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate, t: _PythonEventHandler__T) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def resetState(self, t: _PythonEventHandler__T, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.orekit.propagation.SpacecraftState: ...

_PythonFieldEventHandler__KK = typing.TypeVar('_PythonFieldEventHandler__KK', bound=org.orekit.propagation.events.FieldEventDetector)  # <KK>
_PythonFieldEventHandler__T = typing.TypeVar('_PythonFieldEventHandler__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldEventHandler(FieldEventHandler[_PythonFieldEventHandler__KK, _PythonFieldEventHandler__T], typing.Generic[_PythonFieldEventHandler__KK, _PythonFieldEventHandler__T]):
    def __init__(self): ...
    def eventOccurred(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldEventHandler__T], kK: _PythonFieldEventHandler__KK, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def finalize(self) -> None: ...
    def init(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldEventHandler__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_PythonFieldEventHandler__T]) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def resetState(self, kK: _PythonFieldEventHandler__KK, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_PythonFieldEventHandler__T]) -> org.orekit.propagation.FieldSpacecraftState[_PythonFieldEventHandler__T]: ...

_RecordAndContinue__Event__T = typing.TypeVar('_RecordAndContinue__Event__T')  # <T>
_RecordAndContinue__T = typing.TypeVar('_RecordAndContinue__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class RecordAndContinue(EventHandler[_RecordAndContinue__T], typing.Generic[_RecordAndContinue__T]):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List['RecordAndContinue.Event'[_RecordAndContinue__T]]): ...
    def clear(self) -> None: ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _RecordAndContinue__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...
    def getEvents(self) -> java.util.List['RecordAndContinue.Event'[_RecordAndContinue__T]]: ...
    class Event(typing.Generic[_RecordAndContinue__Event__T]):
        def getDetector(self) -> _RecordAndContinue__Event__T: ...
        def getState(self) -> org.orekit.propagation.SpacecraftState: ...
        def isIncreasing(self) -> bool: ...
        def toString(self) -> str: ...

_StopOnDecreasing__T = typing.TypeVar('_StopOnDecreasing__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class StopOnDecreasing(EventHandler[_StopOnDecreasing__T], typing.Generic[_StopOnDecreasing__T]):
    def __init__(self): ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _StopOnDecreasing__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_StopOnEvent__T = typing.TypeVar('_StopOnEvent__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class StopOnEvent(EventHandler[_StopOnEvent__T], typing.Generic[_StopOnEvent__T]):
    def __init__(self): ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _StopOnEvent__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...

_StopOnIncreasing__T = typing.TypeVar('_StopOnIncreasing__T', bound=org.orekit.propagation.events.EventDetector)  # <T>
class StopOnIncreasing(EventHandler[_StopOnIncreasing__T], typing.Generic[_StopOnIncreasing__T]):
    def __init__(self): ...
    def eventOccurred(self, spacecraftState: org.orekit.propagation.SpacecraftState, t: _StopOnIncreasing__T, boolean: bool) -> org.hipparchus.ode.events.Action: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.propagation.events.handlers")``.

    ContinueOnEvent: typing.Type[ContinueOnEvent]
    EventHandler: typing.Type[EventHandler]
    EventMultipleHandler: typing.Type[EventMultipleHandler]
    FieldContinueOnEvent: typing.Type[FieldContinueOnEvent]
    FieldEventHandler: typing.Type[FieldEventHandler]
    FieldRecordAndContinue: typing.Type[FieldRecordAndContinue]
    FieldStopOnDecreasing: typing.Type[FieldStopOnDecreasing]
    FieldStopOnEvent: typing.Type[FieldStopOnEvent]
    FieldStopOnIncreasing: typing.Type[FieldStopOnIncreasing]
    PythonEventHandler: typing.Type[PythonEventHandler]
    PythonFieldEventHandler: typing.Type[PythonFieldEventHandler]
    RecordAndContinue: typing.Type[RecordAndContinue]
    StopOnDecreasing: typing.Type[StopOnDecreasing]
    StopOnEvent: typing.Type[StopOnEvent]
    StopOnIncreasing: typing.Type[StopOnIncreasing]
