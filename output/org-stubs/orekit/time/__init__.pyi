import java.io
import java.lang
import java.util
import java.util.function
import java.util.stream
import org.hipparchus
import org.orekit.data
import org.orekit.frames
import org.orekit.gnss
import org.orekit.utils
import typing



class ChronologicalComparator(java.util.Comparator['TimeStamped'], java.io.Serializable):
    def __init__(self): ...
    def compare(self, timeStamped: 'TimeStamped', timeStamped2: 'TimeStamped') -> int: ...

class DateComponents(java.io.Serializable, java.lang.Comparable['DateComponents']):
    JULIAN_EPOCH: typing.ClassVar['DateComponents'] = ...
    MODIFIED_JULIAN_EPOCH: typing.ClassVar['DateComponents'] = ...
    FIFTIES_EPOCH: typing.ClassVar['DateComponents'] = ...
    CCSDS_EPOCH: typing.ClassVar['DateComponents'] = ...
    GALILEO_EPOCH: typing.ClassVar['DateComponents'] = ...
    GPS_EPOCH: typing.ClassVar['DateComponents'] = ...
    QZSS_EPOCH: typing.ClassVar['DateComponents'] = ...
    IRNSS_EPOCH: typing.ClassVar['DateComponents'] = ...
    BEIDOU_EPOCH: typing.ClassVar['DateComponents'] = ...
    GLONASS_EPOCH: typing.ClassVar['DateComponents'] = ...
    J2000_EPOCH: typing.ClassVar['DateComponents'] = ...
    JAVA_EPOCH: typing.ClassVar['DateComponents'] = ...
    MAX_EPOCH: typing.ClassVar['DateComponents'] = ...
    MIN_EPOCH: typing.ClassVar['DateComponents'] = ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, month: 'Month', int2: int): ...
    @typing.overload
    def __init__(self, dateComponents: 'DateComponents', int: int): ...
    def compareTo(self, dateComponents: 'DateComponents') -> int: ...
    @staticmethod
    def createFromWeekComponents(int: int, int2: int, int3: int) -> 'DateComponents': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCalendarWeek(self) -> int: ...
    def getDay(self) -> int: ...
    def getDayOfWeek(self) -> int: ...
    def getDayOfYear(self) -> int: ...
    def getJ2000Day(self) -> int: ...
    def getMJD(self) -> int: ...
    def getMonth(self) -> int: ...
    def getMonthEnum(self) -> 'Month': ...
    def getYear(self) -> int: ...
    def hashCode(self) -> int: ...
    @staticmethod
    def parseDate(string: str) -> 'DateComponents': ...
    def toString(self) -> str: ...

class DateTimeComponents(java.io.Serializable, java.lang.Comparable['DateTimeComponents']):
    JULIAN_EPOCH: typing.ClassVar['DateTimeComponents'] = ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, int5: int, double: float): ...
    @typing.overload
    def __init__(self, int: int, month: 'Month', int2: int): ...
    @typing.overload
    def __init__(self, int: int, month: 'Month', int2: int, int3: int, int4: int, double: float): ...
    @typing.overload
    def __init__(self, dateComponents: DateComponents, timeComponents: 'TimeComponents'): ...
    @typing.overload
    def __init__(self, dateTimeComponents: 'DateTimeComponents', double: float): ...
    def compareTo(self, dateTimeComponents: 'DateTimeComponents') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDate(self) -> DateComponents: ...
    def getTime(self) -> 'TimeComponents': ...
    def hashCode(self) -> int: ...
    def offsetFrom(self, dateTimeComponents: 'DateTimeComponents') -> float: ...
    @staticmethod
    def parseDateTime(string: str) -> 'DateTimeComponents': ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, int: int) -> str: ...
    @typing.overload
    def toString(self, int: int, int2: int) -> str: ...
    def toStringRfc3339(self) -> str: ...
    def toStringWithoutUtcOffset(self) -> str: ...

class DatesSelector:
    def selectDates(self, absoluteDate: 'AbsoluteDate', absoluteDate2: 'AbsoluteDate') -> java.util.List['AbsoluteDate']: ...

_FieldTimeInterpolable__T = typing.TypeVar('_FieldTimeInterpolable__T', bound='FieldTimeInterpolable')  # <T>
_FieldTimeInterpolable__KK = typing.TypeVar('_FieldTimeInterpolable__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class FieldTimeInterpolable(typing.Generic[_FieldTimeInterpolable__T, _FieldTimeInterpolable__KK]):
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldTimeInterpolable__KK], stream: java.util.stream.Stream[_FieldTimeInterpolable__T]) -> _FieldTimeInterpolable__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldTimeInterpolable__KK], collection: typing.Union[java.util.Collection[_FieldTimeInterpolable__T], typing.Sequence[_FieldTimeInterpolable__T], typing.Set[_FieldTimeInterpolable__T]]) -> _FieldTimeInterpolable__T: ...

_FieldTimeShiftable__T = typing.TypeVar('_FieldTimeShiftable__T', bound=FieldTimeInterpolable)  # <T>
_FieldTimeShiftable__KK = typing.TypeVar('_FieldTimeShiftable__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class FieldTimeShiftable(typing.Generic[_FieldTimeShiftable__T, _FieldTimeShiftable__KK]):
    @typing.overload
    def shiftedBy(self, double: float) -> _FieldTimeShiftable__T: ...
    @typing.overload
    def shiftedBy(self, kK: _FieldTimeShiftable__KK) -> _FieldTimeShiftable__T: ...

_FieldTimeStamped__T = typing.TypeVar('_FieldTimeStamped__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldTimeStamped(typing.Generic[_FieldTimeStamped__T]):
    def getDate(self) -> 'FieldAbsoluteDate'[_FieldTimeStamped__T]: ...

class Month(java.lang.Enum['Month']):
    JANUARY: typing.ClassVar['Month'] = ...
    FEBRUARY: typing.ClassVar['Month'] = ...
    MARCH: typing.ClassVar['Month'] = ...
    APRIL: typing.ClassVar['Month'] = ...
    MAY: typing.ClassVar['Month'] = ...
    JUNE: typing.ClassVar['Month'] = ...
    JULY: typing.ClassVar['Month'] = ...
    AUGUST: typing.ClassVar['Month'] = ...
    SEPTEMBER: typing.ClassVar['Month'] = ...
    OCTOBER: typing.ClassVar['Month'] = ...
    NOVEMBER: typing.ClassVar['Month'] = ...
    DECEMBER: typing.ClassVar['Month'] = ...
    def getCapitalizedAbbreviation(self) -> str: ...
    def getCapitalizedName(self) -> str: ...
    def getLowerCaseAbbreviation(self) -> str: ...
    def getLowerCaseName(self) -> str: ...
    @staticmethod
    def getMonth(int: int) -> 'Month': ...
    def getNumber(self) -> int: ...
    def getUpperCaseAbbreviation(self) -> str: ...
    def getUpperCaseName(self) -> str: ...
    @staticmethod
    def parseMonth(string: str) -> 'Month': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Month': ...
    @staticmethod
    def values() -> typing.List['Month']: ...

class OffsetModel:
    @typing.overload
    def __init__(self, dateComponents: DateComponents, int: int): ...
    @typing.overload
    def __init__(self, dateComponents: DateComponents, int: int, double: float, double2: float): ...
    def getMJDRef(self) -> int: ...
    def getOffset(self) -> float: ...
    def getSlope(self) -> float: ...
    def getStart(self) -> DateComponents: ...

class TimeComponents(java.io.Serializable, java.lang.Comparable['TimeComponents']):
    H00: typing.ClassVar['TimeComponents'] = ...
    H12: typing.ClassVar['TimeComponents'] = ...
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, int: int, double: float): ...
    @typing.overload
    def __init__(self, int: int, int2: int, double: float): ...
    @typing.overload
    def __init__(self, int: int, int2: int, double: float, int3: int): ...
    def compareTo(self, timeComponents: 'TimeComponents') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def formatUtcOffset(self) -> str: ...
    @staticmethod
    def fromSeconds(int: int, double: float, double2: float, int2: int) -> 'TimeComponents': ...
    def getHour(self) -> int: ...
    def getMinute(self) -> int: ...
    def getMinutesFromUTC(self) -> int: ...
    def getSecond(self) -> float: ...
    def getSecondsInLocalDay(self) -> float: ...
    def getSecondsInUTCDay(self) -> float: ...
    def hashCode(self) -> int: ...
    @staticmethod
    def parseTime(string: str) -> 'TimeComponents': ...
    def toString(self) -> str: ...
    def toStringWithoutUtcOffset(self) -> str: ...

_TimeInterpolable__T = typing.TypeVar('_TimeInterpolable__T', bound='TimeInterpolable')  # <T>
class TimeInterpolable(typing.Generic[_TimeInterpolable__T]):
    @typing.overload
    def interpolate(self, absoluteDate: 'AbsoluteDate', stream: java.util.stream.Stream[_TimeInterpolable__T]) -> _TimeInterpolable__T: ...
    @typing.overload
    def interpolate(self, absoluteDate: 'AbsoluteDate', collection: typing.Union[java.util.Collection[_TimeInterpolable__T], typing.Sequence[_TimeInterpolable__T], typing.Set[_TimeInterpolable__T]]) -> _TimeInterpolable__T: ...

class TimeScalarFunction:
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def value(self, absoluteDate: 'AbsoluteDate') -> float: ...
    @typing.overload
    def value(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_value_1__T]) -> _value_1__T: ...

class TimeScale(java.io.Serializable):
    _getLeap_1__T = typing.TypeVar('_getLeap_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getLeap(self, absoluteDate: 'AbsoluteDate') -> float: ...
    @typing.overload
    def getLeap(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_getLeap_1__T]) -> _getLeap_1__T: ...
    def getName(self) -> str: ...
    _insideLeap_1__T = typing.TypeVar('_insideLeap_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def insideLeap(self, absoluteDate: 'AbsoluteDate') -> bool: ...
    @typing.overload
    def insideLeap(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_insideLeap_1__T]) -> bool: ...
    _minuteDuration_1__T = typing.TypeVar('_minuteDuration_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def minuteDuration(self, absoluteDate: 'AbsoluteDate') -> int: ...
    @typing.overload
    def minuteDuration(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_minuteDuration_1__T]) -> int: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: 'AbsoluteDate') -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...

class TimeScales:
    def createBesselianEpoch(self, double: float) -> 'AbsoluteDate': ...
    def createJulianEpoch(self, double: float) -> 'AbsoluteDate': ...
    def getBDT(self) -> 'BDTScale': ...
    def getBeidouEpoch(self) -> 'AbsoluteDate': ...
    def getCcsdsEpoch(self) -> 'AbsoluteDate': ...
    def getFiftiesEpoch(self) -> 'AbsoluteDate': ...
    def getFutureInfinity(self) -> 'AbsoluteDate': ...
    def getGLONASS(self) -> 'GLONASSScale': ...
    def getGMST(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'GMSTScale': ...
    def getGPS(self) -> 'GPSScale': ...
    def getGST(self) -> 'GalileoScale': ...
    def getGalileoEpoch(self) -> 'AbsoluteDate': ...
    def getGlonassEpoch(self) -> 'AbsoluteDate': ...
    def getGpsEpoch(self) -> 'AbsoluteDate': ...
    def getIRNSS(self) -> 'IRNSSScale': ...
    def getIrnssEpoch(self) -> 'AbsoluteDate': ...
    def getJ2000Epoch(self) -> 'AbsoluteDate': ...
    def getJavaEpoch(self) -> 'AbsoluteDate': ...
    def getJulianEpoch(self) -> 'AbsoluteDate': ...
    def getModifiedJulianEpoch(self) -> 'AbsoluteDate': ...
    def getPastInfinity(self) -> 'AbsoluteDate': ...
    def getQZSS(self) -> 'QZSSScale': ...
    def getQzssEpoch(self) -> 'AbsoluteDate': ...
    def getTAI(self) -> 'TAIScale': ...
    def getTCB(self) -> 'TCBScale': ...
    def getTCG(self) -> 'TCGScale': ...
    def getTDB(self) -> 'TDBScale': ...
    def getTT(self) -> 'TTScale': ...
    def getUT1(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'UT1Scale': ...
    def getUTC(self) -> 'UTCScale': ...
    @staticmethod
    def of(collection: typing.Union[java.util.Collection[OffsetModel], typing.Sequence[OffsetModel], typing.Set[OffsetModel]], biFunction: typing.Union[java.util.function.BiFunction[org.orekit.utils.IERSConventions, 'TimeScales', java.util.Collection[org.orekit.frames.EOPEntry]], typing.Callable[[org.orekit.utils.IERSConventions, 'TimeScales'], java.util.Collection[org.orekit.frames.EOPEntry]]]) -> 'TimeScales': ...

class TimeScalesFactory(java.io.Serializable):
    @staticmethod
    def addDefaultUTCTAIOffsetsLoaders() -> None: ...
    @staticmethod
    def addUTCTAIOffsetsLoader(uTCTAIOffsetsLoader: 'UTCTAIOffsetsLoader') -> None: ...
    @staticmethod
    def clearUTCTAIOffsetsLoaders() -> None: ...
    @staticmethod
    def getBDT() -> 'BDTScale': ...
    @staticmethod
    def getGLONASS() -> 'GLONASSScale': ...
    @staticmethod
    def getGMST(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'GMSTScale': ...
    @staticmethod
    def getGPS() -> 'GPSScale': ...
    @staticmethod
    def getGST() -> 'GalileoScale': ...
    @staticmethod
    def getIRNSS() -> 'IRNSSScale': ...
    @staticmethod
    def getQZSS() -> 'QZSSScale': ...
    @staticmethod
    def getTAI() -> 'TAIScale': ...
    @staticmethod
    def getTCB() -> 'TCBScale': ...
    @staticmethod
    def getTCG() -> 'TCGScale': ...
    @staticmethod
    def getTDB() -> 'TDBScale': ...
    @staticmethod
    def getTT() -> 'TTScale': ...
    @staticmethod
    def getTimeScales() -> 'LazyLoadedTimeScales': ...
    @typing.overload
    @staticmethod
    def getUT1(eOPHistory: org.orekit.frames.EOPHistory) -> 'UT1Scale': ...
    @typing.overload
    @staticmethod
    def getUT1(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'UT1Scale': ...
    @staticmethod
    def getUTC() -> 'UTCScale': ...

_TimeShiftable__T = typing.TypeVar('_TimeShiftable__T', bound='TimeShiftable')  # <T>
class TimeShiftable(typing.Generic[_TimeShiftable__T]):
    def shiftedBy(self, double: float) -> _TimeShiftable__T: ...

class TimeStamped:
    def getDate(self) -> 'AbsoluteDate': ...

class TimeVectorFunction:
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def value(self, absoluteDate: 'AbsoluteDate') -> typing.List[float]: ...
    @typing.overload
    def value(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_value_1__T]) -> typing.List[_value_1__T]: ...

class UTCTAIOffsetsLoader:
    def loadOffsets(self) -> java.util.List[OffsetModel]: ...
    class Parser:
        def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.List[OffsetModel]: ...

class AGILeapSecondFilesLoader(org.orekit.data.AbstractSelfFeedingLoader, UTCTAIOffsetsLoader):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def loadOffsets(self) -> java.util.List[OffsetModel]: ...
    class Parser(UTCTAIOffsetsLoader.Parser):
        def __init__(self): ...
        def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.List[OffsetModel]: ...

class AbsoluteDate(TimeStamped, TimeShiftable['AbsoluteDate'], java.lang.Comparable['AbsoluteDate'], java.io.Serializable):
    JULIAN_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    MODIFIED_JULIAN_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    FIFTIES_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    CCSDS_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    GALILEO_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    GPS_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    QZSS_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    IRNSS_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    BEIDOU_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    GLONASS_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    J2000_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    JAVA_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    ARBITRARY_EPOCH: typing.ClassVar['AbsoluteDate'] = ...
    PAST_INFINITY: typing.ClassVar['AbsoluteDate'] = ...
    FUTURE_INFINITY: typing.ClassVar['AbsoluteDate'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, int5: int, double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, int: int, month: Month, int2: int, int3: int, int4: int, double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, int: int, month: Month, int2: int, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, string: str, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, date: java.util.Date, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, absoluteDate: 'AbsoluteDate', double: float): ...
    @typing.overload
    def __init__(self, absoluteDate: 'AbsoluteDate', double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, dateComponents: DateComponents, timeComponents: TimeComponents, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, dateComponents: DateComponents, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, dateTimeComponents: DateTimeComponents, timeScale: TimeScale): ...
    def compareTo(self, absoluteDate: 'AbsoluteDate') -> int: ...
    @staticmethod
    def createBesselianEpoch(double: float) -> 'AbsoluteDate': ...
    @staticmethod
    def createJDDate(int: int, double: float, timeScale: TimeScale) -> 'AbsoluteDate': ...
    @staticmethod
    def createJulianEpoch(double: float) -> 'AbsoluteDate': ...
    @staticmethod
    def createMJDDate(int: int, double: float, timeScale: TimeScale) -> 'AbsoluteDate': ...
    def durationFrom(self, absoluteDate: 'AbsoluteDate') -> float: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getComponents(self, int: int) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, int: int, timeScale: TimeScale) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, timeZone: java.util.TimeZone) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, timeZone: java.util.TimeZone, timeScale: TimeScale) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, timeScale: TimeScale) -> DateTimeComponents: ...
    def getDate(self) -> 'AbsoluteDate': ...
    def hashCode(self) -> int: ...
    def isAfter(self, timeStamped: TimeStamped) -> bool: ...
    def isAfterOrEqualTo(self, timeStamped: TimeStamped) -> bool: ...
    def isBefore(self, timeStamped: TimeStamped) -> bool: ...
    def isBeforeOrEqualTo(self, timeStamped: TimeStamped) -> bool: ...
    def isBetween(self, timeStamped: TimeStamped, timeStamped2: TimeStamped) -> bool: ...
    def isBetweenOrEqualTo(self, timeStamped: TimeStamped, timeStamped2: TimeStamped) -> bool: ...
    def isCloseTo(self, timeStamped: TimeStamped, double: float) -> bool: ...
    def isEqualTo(self, timeStamped: TimeStamped) -> bool: ...
    def offsetFrom(self, absoluteDate: 'AbsoluteDate', timeScale: TimeScale) -> float: ...
    @typing.overload
    @staticmethod
    def parseCCSDSCalendarSegmentedTimeCode(byte: int, byteArray: typing.List[int]) -> 'AbsoluteDate': ...
    @typing.overload
    @staticmethod
    def parseCCSDSCalendarSegmentedTimeCode(byte: int, byteArray: typing.List[int], timeScale: TimeScale) -> 'AbsoluteDate': ...
    @typing.overload
    @staticmethod
    def parseCCSDSDaySegmentedTimeCode(byte: int, byteArray: typing.List[int], dateComponents: DateComponents) -> 'AbsoluteDate': ...
    @typing.overload
    @staticmethod
    def parseCCSDSDaySegmentedTimeCode(byte: int, byteArray: typing.List[int], dateComponents: DateComponents, timeScale: TimeScale) -> 'AbsoluteDate': ...
    @typing.overload
    @staticmethod
    def parseCCSDSUnsegmentedTimeCode(byte: int, byte2: int, byteArray: typing.List[int], absoluteDate: 'AbsoluteDate') -> 'AbsoluteDate': ...
    @typing.overload
    @staticmethod
    def parseCCSDSUnsegmentedTimeCode(byte: int, byte2: int, byteArray: typing.List[int], absoluteDate: 'AbsoluteDate', absoluteDate2: 'AbsoluteDate') -> 'AbsoluteDate': ...
    def shiftedBy(self, double: float) -> 'AbsoluteDate': ...
    def timeScalesOffset(self, timeScale: TimeScale, timeScale2: TimeScale) -> float: ...
    def toDate(self, timeScale: TimeScale) -> java.util.Date: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, int: int) -> str: ...
    @typing.overload
    def toString(self, int: int, timeScale: TimeScale) -> str: ...
    @typing.overload
    def toString(self, timeZone: java.util.TimeZone) -> str: ...
    @typing.overload
    def toString(self, timeZone: java.util.TimeZone, timeScale: TimeScale) -> str: ...
    @typing.overload
    def toString(self, timeScale: TimeScale) -> str: ...
    def toStringRfc3339(self, timeScale: TimeScale) -> str: ...

class AbstractTimeScales(TimeScales):
    def __init__(self): ...
    def createBesselianEpoch(self, double: float) -> AbsoluteDate: ...
    def createJulianEpoch(self, double: float) -> AbsoluteDate: ...
    def getBeidouEpoch(self) -> AbsoluteDate: ...
    def getCcsdsEpoch(self) -> AbsoluteDate: ...
    def getFiftiesEpoch(self) -> AbsoluteDate: ...
    def getFutureInfinity(self) -> AbsoluteDate: ...
    def getGMST(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'GMSTScale': ...
    def getGalileoEpoch(self) -> AbsoluteDate: ...
    def getGlonassEpoch(self) -> AbsoluteDate: ...
    def getGpsEpoch(self) -> AbsoluteDate: ...
    def getIrnssEpoch(self) -> AbsoluteDate: ...
    def getJ2000Epoch(self) -> AbsoluteDate: ...
    def getJavaEpoch(self) -> AbsoluteDate: ...
    def getJulianEpoch(self) -> AbsoluteDate: ...
    def getModifiedJulianEpoch(self) -> AbsoluteDate: ...
    def getPastInfinity(self) -> AbsoluteDate: ...
    def getQzssEpoch(self) -> AbsoluteDate: ...
    def getUT1(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'UT1Scale': ...

class BDTScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class BurstSelector(DatesSelector):
    def __init__(self, int: int, double: float, double2: float, timeScale: TimeScale): ...
    def selectDates(self, absoluteDate: AbsoluteDate, absoluteDate2: AbsoluteDate) -> java.util.List[AbsoluteDate]: ...

_FieldAbsoluteDate__T = typing.TypeVar('_FieldAbsoluteDate__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbsoluteDate(FieldTimeStamped[_FieldAbsoluteDate__T], TimeShiftable['FieldAbsoluteDate'[_FieldAbsoluteDate__T]], java.lang.Comparable['FieldAbsoluteDate'[_FieldAbsoluteDate__T]], typing.Generic[_FieldAbsoluteDate__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T]): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], int: int, int2: int, int3: int, int4: int, int5: int, double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], int: int, int2: int, int3: int, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], int: int, month: Month, int2: int, int3: int, int4: int, double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], int: int, month: Month, int2: int, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], string: str, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], date: java.util.Date, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], absoluteDate: AbsoluteDate): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], dateComponents: DateComponents, timeComponents: TimeComponents, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], dateComponents: DateComponents, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldAbsoluteDate__T], dateTimeComponents: DateTimeComponents, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, absoluteDate: AbsoluteDate, t: _FieldAbsoluteDate__T): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldAbsoluteDate__T], double: float): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldAbsoluteDate__T], double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldAbsoluteDate__T], t: _FieldAbsoluteDate__T): ...
    def compareTo(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]) -> int: ...
    _createBesselianEpoch_0__T = typing.TypeVar('_createBesselianEpoch_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _createBesselianEpoch_1__T = typing.TypeVar('_createBesselianEpoch_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def createBesselianEpoch(t: _createBesselianEpoch_0__T) -> 'FieldAbsoluteDate'[_createBesselianEpoch_0__T]: ...
    @typing.overload
    @staticmethod
    def createBesselianEpoch(t: _createBesselianEpoch_1__T, timeScales: TimeScales) -> 'FieldAbsoluteDate'[_createBesselianEpoch_1__T]: ...
    _createGPSDate_0__T = typing.TypeVar('_createGPSDate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _createGPSDate_1__T = typing.TypeVar('_createGPSDate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def createGPSDate(int: int, t: _createGPSDate_0__T) -> 'FieldAbsoluteDate'[_createGPSDate_0__T]: ...
    @typing.overload
    @staticmethod
    def createGPSDate(int: int, t: _createGPSDate_1__T, timeScale: TimeScale) -> 'FieldAbsoluteDate'[_createGPSDate_1__T]: ...
    _createJDDate__T = typing.TypeVar('_createJDDate__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def createJDDate(int: int, t: _createJDDate__T, timeScale: TimeScale) -> 'FieldAbsoluteDate'[_createJDDate__T]: ...
    _createJulianEpoch_0__T = typing.TypeVar('_createJulianEpoch_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _createJulianEpoch_1__T = typing.TypeVar('_createJulianEpoch_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def createJulianEpoch(t: _createJulianEpoch_0__T) -> 'FieldAbsoluteDate'[_createJulianEpoch_0__T]: ...
    @typing.overload
    @staticmethod
    def createJulianEpoch(t: _createJulianEpoch_1__T, timeScales: TimeScales) -> 'FieldAbsoluteDate'[_createJulianEpoch_1__T]: ...
    _createMJDDate__T = typing.TypeVar('_createMJDDate__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def createMJDDate(int: int, t: _createMJDDate__T, timeScale: TimeScale) -> 'FieldAbsoluteDate'[_createMJDDate__T]: ...
    @typing.overload
    def durationFrom(self, absoluteDate: AbsoluteDate) -> _FieldAbsoluteDate__T: ...
    @typing.overload
    def durationFrom(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]) -> _FieldAbsoluteDate__T: ...
    def equals(self, object: typing.Any) -> bool: ...
    _getArbitraryEpoch__T = typing.TypeVar('_getArbitraryEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getArbitraryEpoch(field: org.hipparchus.Field[_getArbitraryEpoch__T]) -> 'FieldAbsoluteDate'[_getArbitraryEpoch__T]: ...
    _getCCSDSEpoch__T = typing.TypeVar('_getCCSDSEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getCCSDSEpoch(field: org.hipparchus.Field[_getCCSDSEpoch__T]) -> 'FieldAbsoluteDate'[_getCCSDSEpoch__T]: ...
    @typing.overload
    def getComponents(self, int: int) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, int: int, timeScale: TimeScale) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, timeZone: java.util.TimeZone) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, timeZone: java.util.TimeZone, timeScale: TimeScale) -> DateTimeComponents: ...
    @typing.overload
    def getComponents(self, timeScale: TimeScale) -> DateTimeComponents: ...
    def getDate(self) -> 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]: ...
    def getField(self) -> org.hipparchus.Field[_FieldAbsoluteDate__T]: ...
    _getFiftiesEpoch__T = typing.TypeVar('_getFiftiesEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getFiftiesEpoch(field: org.hipparchus.Field[_getFiftiesEpoch__T]) -> 'FieldAbsoluteDate'[_getFiftiesEpoch__T]: ...
    _getFutureInfinity__T = typing.TypeVar('_getFutureInfinity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getFutureInfinity(field: org.hipparchus.Field[_getFutureInfinity__T]) -> 'FieldAbsoluteDate'[_getFutureInfinity__T]: ...
    _getGPSEpoch__T = typing.TypeVar('_getGPSEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getGPSEpoch(field: org.hipparchus.Field[_getGPSEpoch__T]) -> 'FieldAbsoluteDate'[_getGPSEpoch__T]: ...
    _getGalileoEpoch__T = typing.TypeVar('_getGalileoEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getGalileoEpoch(field: org.hipparchus.Field[_getGalileoEpoch__T]) -> 'FieldAbsoluteDate'[_getGalileoEpoch__T]: ...
    _getJ2000Epoch__T = typing.TypeVar('_getJ2000Epoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getJ2000Epoch(field: org.hipparchus.Field[_getJ2000Epoch__T]) -> 'FieldAbsoluteDate'[_getJ2000Epoch__T]: ...
    _getJavaEpoch__T = typing.TypeVar('_getJavaEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getJavaEpoch(field: org.hipparchus.Field[_getJavaEpoch__T]) -> 'FieldAbsoluteDate'[_getJavaEpoch__T]: ...
    _getJulianEpoch__T = typing.TypeVar('_getJulianEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getJulianEpoch(field: org.hipparchus.Field[_getJulianEpoch__T]) -> 'FieldAbsoluteDate'[_getJulianEpoch__T]: ...
    _getModifiedJulianEpoch__T = typing.TypeVar('_getModifiedJulianEpoch__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getModifiedJulianEpoch(field: org.hipparchus.Field[_getModifiedJulianEpoch__T]) -> 'FieldAbsoluteDate'[_getModifiedJulianEpoch__T]: ...
    _getPastInfinity__T = typing.TypeVar('_getPastInfinity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getPastInfinity(field: org.hipparchus.Field[_getPastInfinity__T]) -> 'FieldAbsoluteDate'[_getPastInfinity__T]: ...
    def hashCode(self) -> int: ...
    def isAfter(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def isAfterOrEqualTo(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def isBefore(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def isBeforeOrEqualTo(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def isBetween(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T], fieldTimeStamped2: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def isBetweenOrEqualTo(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T], fieldTimeStamped2: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def isCloseTo(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T], double: float) -> bool: ...
    def isEqualTo(self, fieldTimeStamped: FieldTimeStamped[_FieldAbsoluteDate__T]) -> bool: ...
    def offsetFrom(self, fieldAbsoluteDate: 'FieldAbsoluteDate'[_FieldAbsoluteDate__T], timeScale: TimeScale) -> _FieldAbsoluteDate__T: ...
    @typing.overload
    def parseCCSDSCalendarSegmentedTimeCode(self, byte: int, byteArray: typing.List[int]) -> 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]: ...
    @typing.overload
    def parseCCSDSCalendarSegmentedTimeCode(self, byte: int, byteArray: typing.List[int], timeScale: TimeScale) -> 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]: ...
    _parseCCSDSDaySegmentedTimeCode_0__T = typing.TypeVar('_parseCCSDSDaySegmentedTimeCode_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _parseCCSDSDaySegmentedTimeCode_1__T = typing.TypeVar('_parseCCSDSDaySegmentedTimeCode_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def parseCCSDSDaySegmentedTimeCode(field: org.hipparchus.Field[_parseCCSDSDaySegmentedTimeCode_0__T], byte: int, byteArray: typing.List[int], dateComponents: DateComponents) -> 'FieldAbsoluteDate'[_parseCCSDSDaySegmentedTimeCode_0__T]: ...
    @typing.overload
    @staticmethod
    def parseCCSDSDaySegmentedTimeCode(field: org.hipparchus.Field[_parseCCSDSDaySegmentedTimeCode_1__T], byte: int, byteArray: typing.List[int], dateComponents: DateComponents, timeScale: TimeScale) -> 'FieldAbsoluteDate'[_parseCCSDSDaySegmentedTimeCode_1__T]: ...
    _parseCCSDSUnsegmentedTimeCode_0__T = typing.TypeVar('_parseCCSDSUnsegmentedTimeCode_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _parseCCSDSUnsegmentedTimeCode_1__T = typing.TypeVar('_parseCCSDSUnsegmentedTimeCode_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def parseCCSDSUnsegmentedTimeCode(field: org.hipparchus.Field[_parseCCSDSUnsegmentedTimeCode_0__T], byte: int, byte2: int, byteArray: typing.List[int], fieldAbsoluteDate: 'FieldAbsoluteDate'[_parseCCSDSUnsegmentedTimeCode_0__T]) -> 'FieldAbsoluteDate'[_parseCCSDSUnsegmentedTimeCode_0__T]: ...
    @typing.overload
    @staticmethod
    def parseCCSDSUnsegmentedTimeCode(field: org.hipparchus.Field[_parseCCSDSUnsegmentedTimeCode_1__T], byte: int, byte2: int, byteArray: typing.List[int], fieldAbsoluteDate: 'FieldAbsoluteDate'[_parseCCSDSUnsegmentedTimeCode_1__T], fieldAbsoluteDate2: 'FieldAbsoluteDate'[_parseCCSDSUnsegmentedTimeCode_1__T]) -> 'FieldAbsoluteDate'[_parseCCSDSUnsegmentedTimeCode_1__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldAbsoluteDate__T) -> 'FieldAbsoluteDate'[_FieldAbsoluteDate__T]: ...
    def timeScalesOffset(self, timeScale: TimeScale, timeScale2: TimeScale) -> _FieldAbsoluteDate__T: ...
    def toAbsoluteDate(self) -> AbsoluteDate: ...
    def toDate(self, timeScale: TimeScale) -> java.util.Date: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, int: int) -> str: ...
    @typing.overload
    def toString(self, int: int, timeScale: TimeScale) -> str: ...
    @typing.overload
    def toString(self, timeZone: java.util.TimeZone) -> str: ...
    @typing.overload
    def toString(self, timeZone: java.util.TimeZone, timeScale: TimeScale) -> str: ...
    @typing.overload
    def toString(self, timeScale: TimeScale) -> str: ...

class FixedStepSelector(DatesSelector):
    def __init__(self, double: float, timeScale: TimeScale): ...
    def selectDates(self, absoluteDate: AbsoluteDate, absoluteDate2: AbsoluteDate) -> java.util.List[AbsoluteDate]: ...

class GLONASSDate(java.io.Serializable, TimeStamped):
    @typing.overload
    def __init__(self, int: int, int2: int, double: float): ...
    @typing.overload
    def __init__(self, int: int, int2: int, double: float, timeScale: TimeScale): ...
    @typing.overload
    def __init__(self, absoluteDate: AbsoluteDate): ...
    @typing.overload
    def __init__(self, absoluteDate: AbsoluteDate, timeScale: TimeScale): ...
    def getDate(self) -> AbsoluteDate: ...
    def getDayNumber(self) -> int: ...
    def getGMST(self) -> float: ...
    def getIntervalNumber(self) -> int: ...
    def getJD0(self) -> float: ...
    def getSecInDay(self) -> float: ...

class GLONASSScale(TimeScale):
    _getLeap_1__T = typing.TypeVar('_getLeap_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getLeap(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def getLeap(self, fieldAbsoluteDate: FieldAbsoluteDate[_getLeap_1__T]) -> _getLeap_1__T: ...
    def getName(self) -> str: ...
    _insideLeap_1__T = typing.TypeVar('_insideLeap_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def insideLeap(self, absoluteDate: AbsoluteDate) -> bool: ...
    @typing.overload
    def insideLeap(self, fieldAbsoluteDate: FieldAbsoluteDate[_insideLeap_1__T]) -> bool: ...
    _minuteDuration_1__T = typing.TypeVar('_minuteDuration_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def minuteDuration(self, absoluteDate: AbsoluteDate) -> int: ...
    @typing.overload
    def minuteDuration(self, fieldAbsoluteDate: FieldAbsoluteDate[_minuteDuration_1__T]) -> int: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class GMSTScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def toString(self) -> str: ...

class GNSSDate(java.io.Serializable, TimeStamped):
    @typing.overload
    def __init__(self, int: int, double: float, satelliteSystem: org.orekit.gnss.SatelliteSystem): ...
    @typing.overload
    def __init__(self, int: int, double: float, satelliteSystem: org.orekit.gnss.SatelliteSystem, timeScales: TimeScales): ...
    @typing.overload
    def __init__(self, absoluteDate: AbsoluteDate, satelliteSystem: org.orekit.gnss.SatelliteSystem): ...
    @typing.overload
    def __init__(self, absoluteDate: AbsoluteDate, satelliteSystem: org.orekit.gnss.SatelliteSystem, timeScales: TimeScales): ...
    def getDate(self) -> AbsoluteDate: ...
    def getMilliInWeek(self) -> float: ...
    @staticmethod
    def getRolloverReference() -> DateComponents: ...
    def getWeekNumber(self) -> int: ...
    @staticmethod
    def setRolloverReference(dateComponents: DateComponents) -> None: ...

class GPSScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class GalileoScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class IRNSSScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class PythonDatesSelector(DatesSelector):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def selectDates(self, absoluteDate: AbsoluteDate, absoluteDate2: AbsoluteDate) -> java.util.List[AbsoluteDate]: ...

_PythonFieldTimeInterpolable__T = typing.TypeVar('_PythonFieldTimeInterpolable__T', bound=FieldTimeInterpolable)  # <T>
_PythonFieldTimeInterpolable__KK = typing.TypeVar('_PythonFieldTimeInterpolable__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class PythonFieldTimeInterpolable(FieldTimeInterpolable[_PythonFieldTimeInterpolable__T, _PythonFieldTimeInterpolable__KK], typing.Generic[_PythonFieldTimeInterpolable__T, _PythonFieldTimeInterpolable__KK]):
    def __init__(self): ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: FieldAbsoluteDate[_PythonFieldTimeInterpolable__KK], collection: typing.Union[java.util.Collection[_PythonFieldTimeInterpolable__T], typing.Sequence[_PythonFieldTimeInterpolable__T], typing.Set[_PythonFieldTimeInterpolable__T]]) -> _PythonFieldTimeInterpolable__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: FieldAbsoluteDate[_PythonFieldTimeInterpolable__KK], stream: java.util.stream.Stream[_PythonFieldTimeInterpolable__T]) -> _PythonFieldTimeInterpolable__T: ...

_PythonFieldTimeShiftable__T = typing.TypeVar('_PythonFieldTimeShiftable__T', bound=FieldTimeInterpolable)  # <T>
_PythonFieldTimeShiftable__KK = typing.TypeVar('_PythonFieldTimeShiftable__KK', bound=org.hipparchus.CalculusFieldElement)  # <KK>
class PythonFieldTimeShiftable(FieldTimeShiftable[_PythonFieldTimeShiftable__T, _PythonFieldTimeShiftable__KK], typing.Generic[_PythonFieldTimeShiftable__T, _PythonFieldTimeShiftable__KK]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    @typing.overload
    def shiftedBy(self, double: float) -> _PythonFieldTimeShiftable__T: ...
    @typing.overload
    def shiftedBy(self, kK: _PythonFieldTimeShiftable__KK) -> _PythonFieldTimeShiftable__T: ...
    def shiftedBy_KK(self, kK: _PythonFieldTimeShiftable__KK) -> _PythonFieldTimeShiftable__T: ...

_PythonFieldTimeStamped__T = typing.TypeVar('_PythonFieldTimeStamped__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class PythonFieldTimeStamped(FieldTimeStamped[_PythonFieldTimeStamped__T], typing.Generic[_PythonFieldTimeStamped__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getDate(self) -> FieldAbsoluteDate[_PythonFieldTimeStamped__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonParser(UTCTAIOffsetsLoader.Parser):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.List[OffsetModel]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonTimeInterpolable__T = typing.TypeVar('_PythonTimeInterpolable__T', bound=TimeInterpolable)  # <T>
class PythonTimeInterpolable(TimeInterpolable[_PythonTimeInterpolable__T], typing.Generic[_PythonTimeInterpolable__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    @typing.overload
    def interpolate(self, absoluteDate: AbsoluteDate, collection: typing.Union[java.util.Collection[_PythonTimeInterpolable__T], typing.Sequence[_PythonTimeInterpolable__T], typing.Set[_PythonTimeInterpolable__T]]) -> _PythonTimeInterpolable__T: ...
    @typing.overload
    def interpolate(self, absoluteDate: AbsoluteDate, stream: java.util.stream.Stream[_PythonTimeInterpolable__T]) -> _PythonTimeInterpolable__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonTimeScalarFunction(TimeScalarFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def value(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def value(self, fieldAbsoluteDate: FieldAbsoluteDate[_value_1__T]) -> _value_1__T: ...
    _value_F__T = typing.TypeVar('_value_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def value_F(self, fieldAbsoluteDate: FieldAbsoluteDate[_value_F__T]) -> _value_F__T: ...

class PythonTimeScale(TimeScale):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    _offsetFromTAI_F__T = typing.TypeVar('_offsetFromTAI_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def offsetFromTAI_F(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_F__T]) -> _offsetFromTAI_F__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonTimeScales(TimeScales):
    def __init__(self): ...
    def createBesselianEpoch(self, double: float) -> AbsoluteDate: ...
    def createJulianEpoch(self, double: float) -> AbsoluteDate: ...
    def finalize(self) -> None: ...
    def getBDT(self) -> BDTScale: ...
    def getBeidouEpoch(self) -> AbsoluteDate: ...
    def getCcsdsEpoch(self) -> AbsoluteDate: ...
    def getFiftiesEpoch(self) -> AbsoluteDate: ...
    def getFutureInfinity(self) -> AbsoluteDate: ...
    def getGLONASS(self) -> GLONASSScale: ...
    def getGMST(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> GMSTScale: ...
    def getGPS(self) -> GPSScale: ...
    def getGST(self) -> GalileoScale: ...
    def getGalileoEpoch(self) -> AbsoluteDate: ...
    def getGlonassEpoch(self) -> AbsoluteDate: ...
    def getGpsEpoch(self) -> AbsoluteDate: ...
    def getIRNSS(self) -> IRNSSScale: ...
    def getIrnssEpoch(self) -> AbsoluteDate: ...
    def getJ2000Epoch(self) -> AbsoluteDate: ...
    def getJavaEpoch(self) -> AbsoluteDate: ...
    def getJulianEpoch(self) -> AbsoluteDate: ...
    def getModifiedJulianEpoch(self) -> AbsoluteDate: ...
    def getPastInfinity(self) -> AbsoluteDate: ...
    def getQZSS(self) -> 'QZSSScale': ...
    def getQzssEpoch(self) -> AbsoluteDate: ...
    def getTAI(self) -> 'TAIScale': ...
    def getTCB(self) -> 'TCBScale': ...
    def getTCG(self) -> 'TCGScale': ...
    def getTDB(self) -> 'TDBScale': ...
    def getTT(self) -> 'TTScale': ...
    def getUT1(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'UT1Scale': ...
    def getUTC(self) -> 'UTCScale': ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonTimeShiftable__T = typing.TypeVar('_PythonTimeShiftable__T', bound=TimeShiftable)  # <T>
class PythonTimeShiftable(TimeShiftable[_PythonTimeShiftable__T], typing.Generic[_PythonTimeShiftable__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def shiftedBy(self, double: float) -> _PythonTimeShiftable__T: ...

class PythonTimeStamped(TimeStamped):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getDate(self) -> AbsoluteDate: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonTimeVectorFunction(TimeVectorFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _value_1__T = typing.TypeVar('_value_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def value(self, absoluteDate: AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def value(self, fieldAbsoluteDate: FieldAbsoluteDate[_value_1__T]) -> typing.List[_value_1__T]: ...
    _value_F__T = typing.TypeVar('_value_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def value_F(self, fieldAbsoluteDate: FieldAbsoluteDate[_value_F__T]) -> typing.List[_value_F__T]: ...

class PythonUTCTAIOffsetsLoader(UTCTAIOffsetsLoader):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def loadOffsets(self) -> java.util.List[OffsetModel]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class QZSSScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class SatelliteClockScale(TimeScale):
    def __init__(self, string: str, absoluteDate: AbsoluteDate, timeScale: TimeScale, double: float, double2: float): ...
    def countAtDate(self, absoluteDate: AbsoluteDate) -> float: ...
    def dateAtCount(self, double: float) -> AbsoluteDate: ...
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class TAIScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class TAIUTCDatFilesLoader(org.orekit.data.AbstractSelfFeedingLoader, UTCTAIOffsetsLoader):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def loadOffsets(self) -> java.util.List[OffsetModel]: ...
    class Parser(UTCTAIOffsetsLoader.Parser):
        def __init__(self): ...
        def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.List[OffsetModel]: ...

class TCBScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def toString(self) -> str: ...

class TCGScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def toString(self) -> str: ...

class TDBScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def toString(self) -> str: ...

class TTScale(TimeScale):
    def getName(self) -> str: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class UT1Scale(TimeScale):
    def getEOPHistory(self) -> org.orekit.frames.EOPHistory: ...
    def getName(self) -> str: ...
    def getUTCScale(self) -> 'UTCScale': ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def toString(self) -> str: ...

class UTCScale(TimeScale):
    def getFirstKnownLeapSecond(self) -> AbsoluteDate: ...
    def getLastKnownLeapSecond(self) -> AbsoluteDate: ...
    _getLeap_1__T = typing.TypeVar('_getLeap_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getLeap(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def getLeap(self, fieldAbsoluteDate: FieldAbsoluteDate[_getLeap_1__T]) -> _getLeap_1__T: ...
    def getName(self) -> str: ...
    def getUTCTAIOffsets(self) -> java.util.List['UTCTAIOffset']: ...
    _insideLeap_1__T = typing.TypeVar('_insideLeap_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def insideLeap(self, absoluteDate: AbsoluteDate) -> bool: ...
    @typing.overload
    def insideLeap(self, fieldAbsoluteDate: FieldAbsoluteDate[_insideLeap_1__T]) -> bool: ...
    _minuteDuration_1__T = typing.TypeVar('_minuteDuration_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def minuteDuration(self, absoluteDate: AbsoluteDate) -> int: ...
    @typing.overload
    def minuteDuration(self, fieldAbsoluteDate: FieldAbsoluteDate[_minuteDuration_1__T]) -> int: ...
    _offsetFromTAI_1__T = typing.TypeVar('_offsetFromTAI_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def offsetFromTAI(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def offsetFromTAI(self, fieldAbsoluteDate: FieldAbsoluteDate[_offsetFromTAI_1__T]) -> _offsetFromTAI_1__T: ...
    def offsetToTAI(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    def toString(self) -> str: ...

class UTCTAIBulletinAFilesLoader(org.orekit.data.AbstractSelfFeedingLoader, UTCTAIOffsetsLoader):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def loadOffsets(self) -> java.util.List[OffsetModel]: ...

class UTCTAIHistoryFilesLoader(org.orekit.data.AbstractSelfFeedingLoader, UTCTAIOffsetsLoader):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def loadOffsets(self) -> java.util.List[OffsetModel]: ...
    class Parser(UTCTAIOffsetsLoader.Parser):
        def __init__(self): ...
        def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.List[OffsetModel]: ...

class UTCTAIOffset(TimeStamped, java.io.Serializable):
    def getDate(self) -> AbsoluteDate: ...
    def getLeap(self) -> float: ...
    def getMJD(self) -> int: ...
    _getOffset_2__T = typing.TypeVar('_getOffset_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getOffset(self, absoluteDate: AbsoluteDate) -> float: ...
    @typing.overload
    def getOffset(self, dateComponents: DateComponents, timeComponents: TimeComponents) -> float: ...
    @typing.overload
    def getOffset(self, fieldAbsoluteDate: FieldAbsoluteDate[_getOffset_2__T]) -> _getOffset_2__T: ...
    def getValidityStart(self) -> AbsoluteDate: ...

class LazyLoadedTimeScales(AbstractTimeScales):
    def __init__(self, lazyLoadedEop: org.orekit.frames.LazyLoadedEop): ...
    def addDefaultUTCTAIOffsetsLoaders(self) -> None: ...
    def addUTCTAIOffsetsLoader(self, uTCTAIOffsetsLoader: UTCTAIOffsetsLoader) -> None: ...
    def clearUTCTAIOffsetsLoaders(self) -> None: ...
    def getBDT(self) -> BDTScale: ...
    def getGLONASS(self) -> GLONASSScale: ...
    def getGMST(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> GMSTScale: ...
    def getGPS(self) -> GPSScale: ...
    def getGST(self) -> GalileoScale: ...
    def getIRNSS(self) -> IRNSSScale: ...
    def getQZSS(self) -> QZSSScale: ...
    def getTAI(self) -> TAIScale: ...
    def getTCB(self) -> TCBScale: ...
    def getTCG(self) -> TCGScale: ...
    def getTDB(self) -> TDBScale: ...
    def getTT(self) -> TTScale: ...
    @typing.overload
    def getUT1(self, eOPHistory: org.orekit.frames.EOPHistory) -> UT1Scale: ...
    @typing.overload
    def getUT1(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> UT1Scale: ...
    def getUTC(self) -> UTCScale: ...

class PythonAbstractTimeScales(AbstractTimeScales):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getBDT(self) -> BDTScale: ...
    def getEopHistory(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> org.orekit.frames.EOPHistory: ...
    def getGLONASS(self) -> GLONASSScale: ...
    def getGPS(self) -> GPSScale: ...
    def getGST(self) -> GalileoScale: ...
    def getIRNSS(self) -> IRNSSScale: ...
    def getQZSS(self) -> QZSSScale: ...
    def getTAI(self) -> TAIScale: ...
    def getTCB(self) -> TCBScale: ...
    def getTCG(self) -> TCGScale: ...
    def getTDB(self) -> TDBScale: ...
    def getTT(self) -> TTScale: ...
    def getUTC(self) -> UTCScale: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.time")``.

    AGILeapSecondFilesLoader: typing.Type[AGILeapSecondFilesLoader]
    AbsoluteDate: typing.Type[AbsoluteDate]
    AbstractTimeScales: typing.Type[AbstractTimeScales]
    BDTScale: typing.Type[BDTScale]
    BurstSelector: typing.Type[BurstSelector]
    ChronologicalComparator: typing.Type[ChronologicalComparator]
    DateComponents: typing.Type[DateComponents]
    DateTimeComponents: typing.Type[DateTimeComponents]
    DatesSelector: typing.Type[DatesSelector]
    FieldAbsoluteDate: typing.Type[FieldAbsoluteDate]
    FieldTimeInterpolable: typing.Type[FieldTimeInterpolable]
    FieldTimeShiftable: typing.Type[FieldTimeShiftable]
    FieldTimeStamped: typing.Type[FieldTimeStamped]
    FixedStepSelector: typing.Type[FixedStepSelector]
    GLONASSDate: typing.Type[GLONASSDate]
    GLONASSScale: typing.Type[GLONASSScale]
    GMSTScale: typing.Type[GMSTScale]
    GNSSDate: typing.Type[GNSSDate]
    GPSScale: typing.Type[GPSScale]
    GalileoScale: typing.Type[GalileoScale]
    IRNSSScale: typing.Type[IRNSSScale]
    LazyLoadedTimeScales: typing.Type[LazyLoadedTimeScales]
    Month: typing.Type[Month]
    OffsetModel: typing.Type[OffsetModel]
    PythonAbstractTimeScales: typing.Type[PythonAbstractTimeScales]
    PythonDatesSelector: typing.Type[PythonDatesSelector]
    PythonFieldTimeInterpolable: typing.Type[PythonFieldTimeInterpolable]
    PythonFieldTimeShiftable: typing.Type[PythonFieldTimeShiftable]
    PythonFieldTimeStamped: typing.Type[PythonFieldTimeStamped]
    PythonParser: typing.Type[PythonParser]
    PythonTimeInterpolable: typing.Type[PythonTimeInterpolable]
    PythonTimeScalarFunction: typing.Type[PythonTimeScalarFunction]
    PythonTimeScale: typing.Type[PythonTimeScale]
    PythonTimeScales: typing.Type[PythonTimeScales]
    PythonTimeShiftable: typing.Type[PythonTimeShiftable]
    PythonTimeStamped: typing.Type[PythonTimeStamped]
    PythonTimeVectorFunction: typing.Type[PythonTimeVectorFunction]
    PythonUTCTAIOffsetsLoader: typing.Type[PythonUTCTAIOffsetsLoader]
    QZSSScale: typing.Type[QZSSScale]
    SatelliteClockScale: typing.Type[SatelliteClockScale]
    TAIScale: typing.Type[TAIScale]
    TAIUTCDatFilesLoader: typing.Type[TAIUTCDatFilesLoader]
    TCBScale: typing.Type[TCBScale]
    TCGScale: typing.Type[TCGScale]
    TDBScale: typing.Type[TDBScale]
    TTScale: typing.Type[TTScale]
    TimeComponents: typing.Type[TimeComponents]
    TimeInterpolable: typing.Type[TimeInterpolable]
    TimeScalarFunction: typing.Type[TimeScalarFunction]
    TimeScale: typing.Type[TimeScale]
    TimeScales: typing.Type[TimeScales]
    TimeScalesFactory: typing.Type[TimeScalesFactory]
    TimeShiftable: typing.Type[TimeShiftable]
    TimeStamped: typing.Type[TimeStamped]
    TimeVectorFunction: typing.Type[TimeVectorFunction]
    UT1Scale: typing.Type[UT1Scale]
    UTCScale: typing.Type[UTCScale]
    UTCTAIBulletinAFilesLoader: typing.Type[UTCTAIBulletinAFilesLoader]
    UTCTAIHistoryFilesLoader: typing.Type[UTCTAIHistoryFilesLoader]
    UTCTAIOffset: typing.Type[UTCTAIOffset]
    UTCTAIOffsetsLoader: typing.Type[UTCTAIOffsetsLoader]
