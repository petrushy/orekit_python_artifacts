import java.lang
import java.util
import java.util.stream
import org.hipparchus
import org.hipparchus.analysis.differentiation
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.estimation.measurements.filtering
import org.orekit.estimation.measurements.generation
import org.orekit.estimation.measurements.gnss
import org.orekit.estimation.measurements.modifiers
import org.orekit.frames
import org.orekit.models.earth.displacement
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import typing



class ComparableMeasurement(org.orekit.time.TimeStamped, java.lang.Comparable['ComparableMeasurement']):
    def compareTo(self, comparableMeasurement: 'ComparableMeasurement') -> int: ...
    def getObservedValue(self) -> typing.List[float]: ...

class EstimatedEarthFrameProvider(org.orekit.frames.TransformProvider):
    EARTH_ANGULAR_VELOCITY: typing.ClassVar[float] = ...
    def __init__(self, uT1Scale: org.orekit.time.UT1Scale): ...
    def getEstimatedUT1(self) -> org.orekit.time.UT1Scale: ...
    def getPolarDriftXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarDriftYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> org.orekit.frames.FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.analysis.differentiation.Gradient], int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.frames.Transform: ...

_EstimationModifier__T = typing.TypeVar('_EstimationModifier__T', bound='ObservedMeasurement')  # <T>
class EstimationModifier(typing.Generic[_EstimationModifier__T]):
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def modify(self, estimatedMeasurement: 'EstimatedMeasurement'[_EstimationModifier__T]) -> None: ...

class EstimationsProvider:
    def getEstimatedMeasurement(self, int: int) -> 'EstimatedMeasurement'[typing.Any]: ...
    def getNumber(self) -> int: ...

class GroundStation:
    OFFSET_SUFFIX: typing.ClassVar[str] = ...
    DRIFT_SUFFIX: typing.ClassVar[str] = ...
    INTERMEDIATE_SUFFIX: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame): ...
    @typing.overload
    def __init__(self, topocentricFrame: org.orekit.frames.TopocentricFrame, eOPHistory: org.orekit.frames.EOPHistory, stationDisplacementArray: typing.List[org.orekit.models.earth.displacement.StationDisplacement]): ...
    def getBaseFrame(self) -> org.orekit.frames.TopocentricFrame: ...
    def getClockDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getClockOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getDisplacements(self) -> typing.List[org.orekit.models.earth.displacement.StationDisplacement]: ...
    def getEastOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getEstimatedEarthFrame(self) -> org.orekit.frames.Frame: ...
    def getEstimatedUT1(self) -> org.orekit.time.UT1Scale: ...
    def getNorthOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getOffsetGeodeticPoint(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.bodies.GeodeticPoint: ...
    @typing.overload
    def getOffsetToInertial(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    @typing.overload
    def getOffsetToInertial(self, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.analysis.differentiation.Gradient], int: int, map: typing.Union[java.util.Map[str, int], typing.Mapping[str, int]]) -> org.orekit.frames.FieldTransform[org.hipparchus.analysis.differentiation.Gradient]: ...
    @typing.overload
    def getOffsetToInertial(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.frames.Transform: ...
    def getPolarDriftXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarDriftYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetXDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPolarOffsetYDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPrimeMeridianOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getZenithOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...

class ObservableSatellite:
    CLOCK_OFFSET_PREFIX: typing.ClassVar[str] = ...
    CLOCK_DRIFT_PREFIX: typing.ClassVar[str] = ...
    def __init__(self, int: int): ...
    def getClockDriftDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getClockOffsetDriver(self) -> org.orekit.utils.ParameterDriver: ...
    def getPropagatorIndex(self) -> int: ...

_EstimatedMeasurement__T = typing.TypeVar('_EstimatedMeasurement__T', bound='ObservedMeasurement')  # <T>
class EstimatedMeasurement(ComparableMeasurement, typing.Generic[_EstimatedMeasurement__T]):
    def __init__(self, t: _EstimatedMeasurement__T, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState], timeStampedPVCoordinatesArray: typing.List[org.orekit.utils.TimeStampedPVCoordinates]): ...
    def getCount(self) -> int: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDerivativesDrivers(self) -> java.util.stream.Stream[org.orekit.utils.ParameterDriver]: ...
    def getEstimatedValue(self) -> typing.List[float]: ...
    def getIteration(self) -> int: ...
    def getObservedMeasurement(self) -> _EstimatedMeasurement__T: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def getParameterDerivatives(self, parameterDriver: org.orekit.utils.ParameterDriver) -> typing.List[float]: ...
    def getParticipants(self) -> typing.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
    def getStateDerivatives(self, int: int) -> typing.List[typing.List[float]]: ...
    def getStateSize(self) -> int: ...
    def getStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getStatus(self) -> 'EstimatedMeasurement.Status': ...
    def getTimeOffset(self) -> float: ...
    def setEstimatedValue(self, doubleArray: typing.List[float]) -> None: ...
    def setParameterDerivatives(self, parameterDriver: org.orekit.utils.ParameterDriver, doubleArray: typing.List[float]) -> None: ...
    def setStateDerivatives(self, int: int, doubleArray: typing.List[typing.List[float]]) -> None: ...
    def setStatus(self, status: 'EstimatedMeasurement.Status') -> None: ...
    class Status(java.lang.Enum['EstimatedMeasurement.Status']):
        PROCESSED: typing.ClassVar['EstimatedMeasurement.Status'] = ...
        REJECTED: typing.ClassVar['EstimatedMeasurement.Status'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'EstimatedMeasurement.Status': ...
        @staticmethod
        def values() -> typing.List['EstimatedMeasurement.Status']: ...

_ObservedMeasurement__T = typing.TypeVar('_ObservedMeasurement__T', bound='ObservedMeasurement')  # <T>
class ObservedMeasurement(ComparableMeasurement, typing.Generic[_ObservedMeasurement__T]):
    def addModifier(self, estimationModifier: EstimationModifier[_ObservedMeasurement__T]) -> None: ...
    def estimate(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_ObservedMeasurement__T]: ...
    def getBaseWeight(self) -> typing.List[float]: ...
    def getDimension(self) -> int: ...
    def getModifiers(self) -> java.util.List[EstimationModifier[_ObservedMeasurement__T]]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getSatellites(self) -> java.util.List[ObservableSatellite]: ...
    def getTheoreticalStandardDeviation(self) -> typing.List[float]: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, boolean: bool) -> None: ...

class PythonComparableMeasurement(ComparableMeasurement):
    def __init__(self): ...
    def compareTo(self, comparableMeasurement: ComparableMeasurement) -> int: ...
    def finalize(self) -> None: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_PythonEstimationModifier__T = typing.TypeVar('_PythonEstimationModifier__T', bound=ObservedMeasurement)  # <T>
class PythonEstimationModifier(EstimationModifier[_PythonEstimationModifier__T], typing.Generic[_PythonEstimationModifier__T]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def modify(self, estimatedMeasurement: EstimatedMeasurement[_PythonEstimationModifier__T]) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEstimationsProvider(EstimationsProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getEstimatedMeasurement(self, int: int) -> EstimatedMeasurement[typing.Any]: ...
    def getNumber(self) -> int: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

_AbstractMeasurement__T = typing.TypeVar('_AbstractMeasurement__T', bound=ObservedMeasurement)  # <T>
class AbstractMeasurement(ObservedMeasurement[_AbstractMeasurement__T], typing.Generic[_AbstractMeasurement__T]):
    def addModifier(self, estimationModifier: EstimationModifier[_AbstractMeasurement__T]) -> None: ...
    def estimate(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_AbstractMeasurement__T]: ...
    def getBaseWeight(self) -> typing.List[float]: ...
    @staticmethod
    def getCoordinates(spacecraftState: org.orekit.propagation.SpacecraftState, int: int, int2: int) -> org.orekit.utils.TimeStampedFieldPVCoordinates[org.hipparchus.analysis.differentiation.Gradient]: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDimension(self) -> int: ...
    def getModifiers(self) -> java.util.List[EstimationModifier[_AbstractMeasurement__T]]: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getSatellites(self) -> java.util.List[ObservableSatellite]: ...
    def getTheoreticalStandardDeviation(self) -> typing.List[float]: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, boolean: bool) -> None: ...
    _signalTimeOfFlight_1__T = typing.TypeVar('_signalTimeOfFlight_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    @staticmethod
    def signalTimeOfFlight(timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_signalTimeOfFlight_1__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_signalTimeOfFlight_1__T], fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_signalTimeOfFlight_1__T]) -> _signalTimeOfFlight_1__T: ...

_PythonObservedMeasurement__T = typing.TypeVar('_PythonObservedMeasurement__T', bound=ObservedMeasurement)  # <T>
class PythonObservedMeasurement(ObservedMeasurement[_PythonObservedMeasurement__T], typing.Generic[_PythonObservedMeasurement__T]):
    def __init__(self): ...
    def addModifier(self, estimationModifier: EstimationModifier[_PythonObservedMeasurement__T]) -> None: ...
    def compareTo(self, comparableMeasurement: ComparableMeasurement) -> int: ...
    def estimate(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_PythonObservedMeasurement__T]: ...
    def finalize(self) -> None: ...
    def getBaseWeight(self) -> typing.List[float]: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDimension(self) -> int: ...
    def getModifiers(self) -> java.util.List[EstimationModifier[_PythonObservedMeasurement__T]]: ...
    def getObservedValue(self) -> typing.List[float]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    def getSatellites(self) -> java.util.List[ObservableSatellite]: ...
    def getTheoreticalStandardDeviation(self) -> typing.List[float]: ...
    def isEnabled(self) -> bool: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def setEnabled(self, boolean: bool) -> None: ...

class AngularAzEl(AbstractMeasurement['AngularAzEl']):
    def __init__(self, groundStation: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float], observableSatellite: ObservableSatellite): ...
    def getStation(self) -> GroundStation: ...

class AngularRaDec(AbstractMeasurement['AngularRaDec']):
    def __init__(self, groundStation: GroundStation, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float], observableSatellite: ObservableSatellite): ...
    def getReferenceFrame(self) -> org.orekit.frames.Frame: ...
    def getStation(self) -> GroundStation: ...

class InterSatellitesRange(AbstractMeasurement['InterSatellitesRange']):
    def __init__(self, observableSatellite: ObservableSatellite, observableSatellite2: ObservableSatellite, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float): ...
    def isTwoWay(self) -> bool: ...

class MultiplexedMeasurement(AbstractMeasurement['MultiplexedMeasurement']):
    def __init__(self, list: java.util.List[ObservedMeasurement[typing.Any]]): ...
    def getEstimatedMeasurements(self) -> java.util.List[EstimatedMeasurement[typing.Any]]: ...
    def getMeasurements(self) -> java.util.List[ObservedMeasurement[typing.Any]]: ...

class PV(AbstractMeasurement['PV']):
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[float], double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[float], doubleArray2: typing.List[float], double3: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[typing.List[float]], double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[typing.List[float]], doubleArray2: typing.List[typing.List[float]], double3: float, observableSatellite: ObservableSatellite): ...
    def getCorrelationCoefficientsMatrix(self) -> typing.List[typing.List[float]]: ...
    def getCovarianceMatrix(self) -> typing.List[typing.List[float]]: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class Position(AbstractMeasurement['Position']):
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[float], double2: float, observableSatellite: ObservableSatellite): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, doubleArray: typing.List[typing.List[float]], double2: float, observableSatellite: ObservableSatellite): ...
    def getCorrelationCoefficientsMatrix(self) -> typing.List[typing.List[float]]: ...
    def getCovarianceMatrix(self) -> typing.List[typing.List[float]]: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

_PythonAbstractMeasurement__T = typing.TypeVar('_PythonAbstractMeasurement__T', bound=ObservedMeasurement)  # <T>
class PythonAbstractMeasurement(AbstractMeasurement[_PythonAbstractMeasurement__T], typing.Generic[_PythonAbstractMeasurement__T]):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, list: java.util.List[ObservableSatellite]): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def theoreticalEvaluation(self, int: int, int2: int, spacecraftStateArray: typing.List[org.orekit.propagation.SpacecraftState]) -> EstimatedMeasurement[_PythonAbstractMeasurement__T]: ...

class Range(AbstractMeasurement['Range']):
    def __init__(self, groundStation: GroundStation, boolean: bool, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    def getStation(self) -> GroundStation: ...
    def isTwoWay(self) -> bool: ...

class RangeRate(AbstractMeasurement['RangeRate']):
    def __init__(self, groundStation: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, boolean: bool, observableSatellite: ObservableSatellite): ...
    def getStation(self) -> GroundStation: ...
    def isTwoWay(self) -> bool: ...

class TurnAroundRange(AbstractMeasurement['TurnAroundRange']):
    def __init__(self, groundStation: GroundStation, groundStation2: GroundStation, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, observableSatellite: ObservableSatellite): ...
    def getPrimaryStation(self) -> GroundStation: ...
    def getSecondaryStation(self) -> GroundStation: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.estimation.measurements")``.

    AbstractMeasurement: typing.Type[AbstractMeasurement]
    AngularAzEl: typing.Type[AngularAzEl]
    AngularRaDec: typing.Type[AngularRaDec]
    ComparableMeasurement: typing.Type[ComparableMeasurement]
    EstimatedEarthFrameProvider: typing.Type[EstimatedEarthFrameProvider]
    EstimatedMeasurement: typing.Type[EstimatedMeasurement]
    EstimationModifier: typing.Type[EstimationModifier]
    EstimationsProvider: typing.Type[EstimationsProvider]
    GroundStation: typing.Type[GroundStation]
    InterSatellitesRange: typing.Type[InterSatellitesRange]
    MultiplexedMeasurement: typing.Type[MultiplexedMeasurement]
    ObservableSatellite: typing.Type[ObservableSatellite]
    ObservedMeasurement: typing.Type[ObservedMeasurement]
    PV: typing.Type[PV]
    Position: typing.Type[Position]
    PythonAbstractMeasurement: typing.Type[PythonAbstractMeasurement]
    PythonComparableMeasurement: typing.Type[PythonComparableMeasurement]
    PythonEstimationModifier: typing.Type[PythonEstimationModifier]
    PythonEstimationsProvider: typing.Type[PythonEstimationsProvider]
    PythonObservedMeasurement: typing.Type[PythonObservedMeasurement]
    Range: typing.Type[Range]
    RangeRate: typing.Type[RangeRate]
    TurnAroundRange: typing.Type[TurnAroundRange]
    filtering: org.orekit.estimation.measurements.filtering.__module_protocol__
    generation: org.orekit.estimation.measurements.generation.__module_protocol__
    gnss: org.orekit.estimation.measurements.gnss.__module_protocol__
    modifiers: org.orekit.estimation.measurements.modifiers.__module_protocol__
