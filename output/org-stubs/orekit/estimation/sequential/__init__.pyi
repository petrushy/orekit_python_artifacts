import java.lang
import java.util
import org.hipparchus.analysis
import org.hipparchus.filtering.kalman
import org.hipparchus.filtering.kalman.extended
import org.hipparchus.linear
import org.orekit.estimation.measurements
import org.orekit.frames
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.propagation.conversion
import org.orekit.propagation.integration
import org.orekit.time
import org.orekit.utils
import typing



class CovarianceMatrixProvider:
    def getInitialCovarianceMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...

class KalmanEstimation:
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...

class KalmanEstimator:
    def estimationStep(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]) -> typing.List[org.orekit.propagation.Propagator]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getOrbitalParametersDrivers(self, boolean: bool) -> org.orekit.utils.ParameterDriversList: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPropagationParametersDrivers(self, boolean: bool) -> org.orekit.utils.ParameterDriversList: ...
    def processMeasurements(self, iterable: typing.Union[java.lang.Iterable[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], typing.Sequence[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]], typing.Set[org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]]]) -> typing.List[org.orekit.propagation.Propagator]: ...
    def setObserver(self, kalmanObserver: 'KalmanObserver') -> None: ...

class KalmanEstimatorBuilder:
    def __init__(self): ...
    def addPropagationConfiguration(self, orbitDeterminationPropagatorBuilder: org.orekit.propagation.conversion.OrbitDeterminationPropagatorBuilder, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'KalmanEstimatorBuilder': ...
    def build(self) -> KalmanEstimator: ...
    def decomposer(self, matrixDecomposer: org.hipparchus.linear.MatrixDecomposer) -> 'KalmanEstimatorBuilder': ...
    def estimatedMeasurementsParameters(self, parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider) -> 'KalmanEstimatorBuilder': ...

class KalmanObserver:
    def evaluationPerformed(self, kalmanEstimation: KalmanEstimation) -> None: ...

class MeasurementDecorator(org.hipparchus.filtering.kalman.Measurement):
    def __init__(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], realMatrix: org.hipparchus.linear.RealMatrix, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def getCovariance(self) -> org.hipparchus.linear.RealMatrix: ...
    def getObservedMeasurement(self) -> org.orekit.estimation.measurements.ObservedMeasurement[typing.Any]: ...
    def getTime(self) -> float: ...
    def getValue(self) -> org.hipparchus.linear.RealVector: ...

class AbstractCovarianceMatrixProvider(CovarianceMatrixProvider):
    def getInitialCovarianceMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...

class AbstractKalmanModel(KalmanEstimation, org.hipparchus.filtering.kalman.extended.NonLinearProcess[MeasurementDecorator]):
    def finalizeEstimation(self, observedMeasurement: org.orekit.estimation.measurements.ObservedMeasurement[typing.Any], processEstimate: org.hipparchus.filtering.kalman.ProcessEstimate) -> None: ...
    def getBuilders(self) -> java.util.List[org.orekit.propagation.conversion.OrbitDeterminationPropagatorBuilder]: ...
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimate(self) -> org.hipparchus.filtering.kalman.ProcessEstimate: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagators(self) -> typing.List[org.orekit.propagation.Propagator]: ...
    def getEvolution(self, double: float, realVector: org.hipparchus.linear.RealVector, measurementDecorator: MeasurementDecorator) -> org.hipparchus.filtering.kalman.extended.NonLinearEvolution: ...
    def getInnovation(self, measurementDecorator: MeasurementDecorator, nonLinearEvolution: org.hipparchus.filtering.kalman.extended.NonLinearEvolution, realMatrix: org.hipparchus.linear.RealMatrix) -> org.hipparchus.linear.RealVector: ...
    def getMappers(self) -> typing.List[org.orekit.propagation.integration.AbstractJacobiansMapper]: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getReferenceTrajectories(self) -> typing.List[org.orekit.propagation.Propagator]: ...
    def setMappers(self, abstractJacobiansMapperArray: typing.List[org.orekit.propagation.integration.AbstractJacobiansMapper]) -> None: ...
    def setReferenceTrajectories(self, propagatorArray: typing.List[org.orekit.propagation.Propagator]) -> None: ...

class PythonCovarianceMatrixProvider(CovarianceMatrixProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getInitialCovarianceMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonKalmanEstimation(KalmanEstimation):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getCorrectedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getCorrectedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def getCurrentDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCurrentMeasurementNumber(self) -> int: ...
    def getEstimatedMeasurementsParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedOrbitalParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getEstimatedPropagationParameters(self) -> org.orekit.utils.ParameterDriversList: ...
    def getPhysicalEstimatedCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalEstimatedState(self) -> org.hipparchus.linear.RealVector: ...
    def getPhysicalInnovationCovarianceMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalKalmanGain(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalMeasurementJacobian(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPhysicalStateTransitionMatrix(self) -> org.hipparchus.linear.RealMatrix: ...
    def getPredictedMeasurement(self) -> org.orekit.estimation.measurements.EstimatedMeasurement[typing.Any]: ...
    def getPredictedSpacecraftStates(self) -> typing.List[org.orekit.propagation.SpacecraftState]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonKalmanObserver(KalmanObserver):
    def __init__(self): ...
    def evaluationPerformed(self, kalmanEstimation: KalmanEstimation) -> None: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class ConstantProcessNoise(AbstractCovarianceMatrixProvider):
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, realMatrix2: org.hipparchus.linear.RealMatrix): ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...

class DSSTKalmanModel(AbstractKalmanModel):
    def __init__(self, list: java.util.List[org.orekit.propagation.conversion.OrbitDeterminationPropagatorBuilder], list2: java.util.List[CovarianceMatrixProvider], parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider, propagationType: org.orekit.propagation.PropagationType, propagationType2: org.orekit.propagation.PropagationType): ...

class KalmanModel(AbstractKalmanModel):
    def __init__(self, list: java.util.List[org.orekit.propagation.conversion.OrbitDeterminationPropagatorBuilder], list2: java.util.List[CovarianceMatrixProvider], parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider): ...

class PythonAbstractCovarianceMatrixProvider(AbstractCovarianceMatrixProvider):
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix): ...
    def finalize(self) -> None: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class TLEKalmanModel(AbstractKalmanModel):
    def __init__(self, list: java.util.List[org.orekit.propagation.conversion.OrbitDeterminationPropagatorBuilder], list2: java.util.List[CovarianceMatrixProvider], parameterDriversList: org.orekit.utils.ParameterDriversList, covarianceMatrixProvider: CovarianceMatrixProvider): ...

class UnivariateProcessNoise(AbstractCovarianceMatrixProvider):
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, lOFType: org.orekit.frames.LOFType, positionAngle: org.orekit.orbits.PositionAngle, univariateFunctionArray: typing.List[org.hipparchus.analysis.UnivariateFunction], univariateFunctionArray2: typing.List[org.hipparchus.analysis.UnivariateFunction]): ...
    @typing.overload
    def __init__(self, realMatrix: org.hipparchus.linear.RealMatrix, lOFType: org.orekit.frames.LOFType, positionAngle: org.orekit.orbits.PositionAngle, univariateFunctionArray: typing.List[org.hipparchus.analysis.UnivariateFunction], univariateFunctionArray2: typing.List[org.hipparchus.analysis.UnivariateFunction], univariateFunctionArray3: typing.List[org.hipparchus.analysis.UnivariateFunction]): ...
    def getLofCartesianOrbitalParametersEvolution(self) -> typing.List[org.hipparchus.analysis.UnivariateFunction]: ...
    def getLofType(self) -> org.orekit.frames.LOFType: ...
    def getMeasurementsParametersEvolution(self) -> typing.List[org.hipparchus.analysis.UnivariateFunction]: ...
    def getPositionAngle(self) -> org.orekit.orbits.PositionAngle: ...
    def getProcessNoiseMatrix(self, spacecraftState: org.orekit.propagation.SpacecraftState, spacecraftState2: org.orekit.propagation.SpacecraftState) -> org.hipparchus.linear.RealMatrix: ...
    def getPropagationParametersEvolution(self) -> typing.List[org.hipparchus.analysis.UnivariateFunction]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.estimation.sequential")``.

    AbstractCovarianceMatrixProvider: typing.Type[AbstractCovarianceMatrixProvider]
    AbstractKalmanModel: typing.Type[AbstractKalmanModel]
    ConstantProcessNoise: typing.Type[ConstantProcessNoise]
    CovarianceMatrixProvider: typing.Type[CovarianceMatrixProvider]
    DSSTKalmanModel: typing.Type[DSSTKalmanModel]
    KalmanEstimation: typing.Type[KalmanEstimation]
    KalmanEstimator: typing.Type[KalmanEstimator]
    KalmanEstimatorBuilder: typing.Type[KalmanEstimatorBuilder]
    KalmanModel: typing.Type[KalmanModel]
    KalmanObserver: typing.Type[KalmanObserver]
    MeasurementDecorator: typing.Type[MeasurementDecorator]
    PythonAbstractCovarianceMatrixProvider: typing.Type[PythonAbstractCovarianceMatrixProvider]
    PythonCovarianceMatrixProvider: typing.Type[PythonCovarianceMatrixProvider]
    PythonKalmanEstimation: typing.Type[PythonKalmanEstimation]
    PythonKalmanObserver: typing.Type[PythonKalmanObserver]
    TLEKalmanModel: typing.Type[TLEKalmanModel]
    UnivariateProcessNoise: typing.Type[UnivariateProcessNoise]
