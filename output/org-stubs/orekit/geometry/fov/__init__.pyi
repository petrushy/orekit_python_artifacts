import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.geometry.spherical.twod
import org.orekit.bodies
import org.orekit.frames
import org.orekit.propagation.events
import typing



class FieldOfView:
    def getFootprint(self, transform: org.orekit.frames.Transform, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float) -> java.util.List[java.util.List[org.orekit.bodies.GeodeticPoint]]: ...
    def getMargin(self) -> float: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class AbstractFieldOfView(FieldOfView):
    def getMargin(self) -> float: ...

class PythonFieldOfView(FieldOfView):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getFootprint(self, transform: org.orekit.frames.Transform, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float) -> java.util.List[java.util.List[org.orekit.bodies.GeodeticPoint]]: ...
    def getMargin(self) -> float: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PolygonalFieldOfView(AbstractFieldOfView):
    @typing.overload
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, definingConeType: 'PolygonalFieldOfView.DefiningConeType', vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, int: int, double2: float): ...
    @typing.overload
    def __init__(self, sphericalPolygonsSet: org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet, double: float): ...
    def getFootprint(self, transform: org.orekit.frames.Transform, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float) -> java.util.List[java.util.List[org.orekit.bodies.GeodeticPoint]]: ...
    def getZone(self) -> org.hipparchus.geometry.spherical.twod.SphericalPolygonsSet: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    class DefiningConeType(java.lang.Enum['PolygonalFieldOfView.DefiningConeType']):
        INSIDE_CONE_TOUCHING_POLYGON_AT_EDGES_MIDDLE: typing.ClassVar['PolygonalFieldOfView.DefiningConeType'] = ...
        OUTSIDE_CONE_TOUCHING_POLYGON_AT_VERTICES: typing.ClassVar['PolygonalFieldOfView.DefiningConeType'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PolygonalFieldOfView.DefiningConeType': ...
        @staticmethod
        def values() -> typing.List['PolygonalFieldOfView.DefiningConeType']: ...

class PythonAbstractFieldOfView(AbstractFieldOfView):
    def __init__(self, double: float): ...
    def finalize(self) -> None: ...
    def getFootprint(self, transform: org.orekit.frames.Transform, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float) -> java.util.List[java.util.List[org.orekit.bodies.GeodeticPoint]]: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class SmoothFieldOfView(AbstractFieldOfView):
    def getCenter(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getFootprint(self, transform: org.orekit.frames.Transform, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, double: float) -> java.util.List[java.util.List[org.orekit.bodies.GeodeticPoint]]: ...
    def getX(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getY(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getZ(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class CircularFieldOfView(SmoothFieldOfView):
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float): ...
    def getHalfAperture(self) -> float: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class DoubleDihedraFieldOfView(PolygonalFieldOfView):
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D, double2: float, double3: float): ...

class EllipticalFieldOfView(SmoothFieldOfView):
    def __init__(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float, double3: float): ...
    def getFocus1(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getFocus2(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getHalfApertureAlongX(self) -> float: ...
    def getHalfApertureAlongY(self) -> float: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class PythonSmoothFieldOfView(SmoothFieldOfView):
    def finalize(self) -> None: ...
    def offsetFromBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, visibilityTrigger: org.orekit.propagation.events.VisibilityTrigger) -> float: ...
    def projectToBoundary(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.geometry.fov")``.

    AbstractFieldOfView: typing.Type[AbstractFieldOfView]
    CircularFieldOfView: typing.Type[CircularFieldOfView]
    DoubleDihedraFieldOfView: typing.Type[DoubleDihedraFieldOfView]
    EllipticalFieldOfView: typing.Type[EllipticalFieldOfView]
    FieldOfView: typing.Type[FieldOfView]
    PolygonalFieldOfView: typing.Type[PolygonalFieldOfView]
    PythonAbstractFieldOfView: typing.Type[PythonAbstractFieldOfView]
    PythonFieldOfView: typing.Type[PythonFieldOfView]
    PythonSmoothFieldOfView: typing.Type[PythonSmoothFieldOfView]
    SmoothFieldOfView: typing.Type[SmoothFieldOfView]
