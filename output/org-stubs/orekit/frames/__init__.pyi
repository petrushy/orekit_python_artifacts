import java.io
import java.lang
import java.util
import java.util.function
import java.util.stream
import org
import org.hipparchus
import org.hipparchus.geometry.euclidean.threed
import org.orekit.bodies
import org.orekit.data
import org.orekit.time
import org.orekit.utils
import typing



class AbstractEopLoader(org.orekit.data.AbstractSelfFeedingLoader):
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, supplier: typing.Union[java.util.function.Supplier[org.orekit.time.TimeScale], typing.Callable[[], org.orekit.time.TimeScale]]): ...

class EOPEntry(org.orekit.time.TimeStamped, java.io.Serializable):
    def __init__(self, int: int, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, iTRFVersion: 'ITRFVersion', absoluteDate: org.orekit.time.AbsoluteDate): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getDdEps(self) -> float: ...
    def getDdPsi(self) -> float: ...
    def getDx(self) -> float: ...
    def getDy(self) -> float: ...
    def getITRFType(self) -> 'ITRFVersion': ...
    def getLOD(self) -> float: ...
    def getMjd(self) -> int: ...
    def getUT1MinusUTC(self) -> float: ...
    def getX(self) -> float: ...
    def getY(self) -> float: ...

class EOPHistory(java.io.Serializable):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, collection: typing.Union[java.util.Collection[EOPEntry], typing.Sequence[EOPEntry], typing.Set[EOPEntry]], boolean: bool, timeScales: org.orekit.time.TimeScales): ...
    def checkEOPContinuity(self, double: float) -> None: ...
    def getConventions(self) -> org.orekit.utils.IERSConventions: ...
    def getEndDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getEntries(self) -> java.util.List[EOPEntry]: ...
    _getEquinoxNutationCorrection_1__T = typing.TypeVar('_getEquinoxNutationCorrection_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getEquinoxNutationCorrection(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def getEquinoxNutationCorrection(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getEquinoxNutationCorrection_1__T]) -> typing.List[_getEquinoxNutationCorrection_1__T]: ...
    def getITRFVersion(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'ITRFVersion': ...
    _getLOD_1__T = typing.TypeVar('_getLOD_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getLOD(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getLOD(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getLOD_1__T]) -> _getLOD_1__T: ...
    def getNonInterpolatingEOPHistory(self) -> 'EOPHistory': ...
    _getNonRotatinOriginNutationCorrection_1__T = typing.TypeVar('_getNonRotatinOriginNutationCorrection_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getNonRotatinOriginNutationCorrection(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    @typing.overload
    def getNonRotatinOriginNutationCorrection(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getNonRotatinOriginNutationCorrection_1__T]) -> typing.List[_getNonRotatinOriginNutationCorrection_1__T]: ...
    _getPoleCorrection_0__T = typing.TypeVar('_getPoleCorrection_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPoleCorrection(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getPoleCorrection_0__T]) -> 'FieldPoleCorrection'[_getPoleCorrection_0__T]: ...
    @typing.overload
    def getPoleCorrection(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'PoleCorrection': ...
    def getStartDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getTimeScales(self) -> org.orekit.time.TimeScales: ...
    _getUT1MinusUTC_1__T = typing.TypeVar('_getUT1MinusUTC_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getUT1MinusUTC(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getUT1MinusUTC(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getUT1MinusUTC_1__T]) -> _getUT1MinusUTC_1__T: ...
    def isSimpleEop(self) -> bool: ...
    def usesInterpolation(self) -> bool: ...

class EOPHistoryLoader:
    def fillHistory(self, nutationCorrectionConverter: org.orekit.utils.IERSConventions.NutationCorrectionConverter, sortedSet: java.util.SortedSet[EOPEntry]) -> None: ...
    class Parser:
        @staticmethod
        def newBulletinBParser(iERSConventions: org.orekit.utils.IERSConventions, itrfVersionProvider: 'ItrfVersionProvider', timeScales: org.orekit.time.TimeScales) -> 'EOPHistoryLoader.Parser': ...
        @staticmethod
        def newEopC04Parser(iERSConventions: org.orekit.utils.IERSConventions, itrfVersionProvider: 'ItrfVersionProvider', timeScales: org.orekit.time.TimeScales) -> 'EOPHistoryLoader.Parser': ...
        @staticmethod
        def newFinalsColumnsParser(iERSConventions: org.orekit.utils.IERSConventions, itrfVersionProvider: 'ItrfVersionProvider', timeScales: org.orekit.time.TimeScales, boolean: bool) -> 'EOPHistoryLoader.Parser': ...
        @staticmethod
        def newFinalsXmlParser(iERSConventions: org.orekit.utils.IERSConventions, itrfVersionProvider: 'ItrfVersionProvider', timeScales: org.orekit.time.TimeScales) -> 'EOPHistoryLoader.Parser': ...
        def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.Collection[EOPEntry]: ...

_FieldPoleCorrection__T = typing.TypeVar('_FieldPoleCorrection__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldPoleCorrection(typing.Generic[_FieldPoleCorrection__T]):
    def __init__(self, t: _FieldPoleCorrection__T, t2: _FieldPoleCorrection__T): ...
    def getXp(self) -> _FieldPoleCorrection__T: ...
    def getYp(self) -> _FieldPoleCorrection__T: ...

_FieldTransform__T = typing.TypeVar('_FieldTransform__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldTransform(org.orekit.time.TimeStamped, org.orekit.time.TimeShiftable['FieldTransform'[_FieldTransform__T]], typing.Generic[_FieldTransform__T]):
    @typing.overload
    def __init__(self, field: org.hipparchus.Field[_FieldTransform__T], transform: 'Transform'): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldTransform__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldRotation: org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldTransform__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T], fieldVector3D2: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T], fieldVector3D3: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldTransform: 'FieldTransform'[_FieldTransform__T], fieldTransform2: 'FieldTransform'[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldAngularCoordinates: org.orekit.utils.FieldAngularCoordinates[_FieldTransform__T]): ...
    @typing.overload
    def __init__(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldTransform__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldTransform__T]): ...
    def freeze(self) -> 'FieldTransform'[_FieldTransform__T]: ...
    def getAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    def getAngular(self) -> org.orekit.utils.FieldAngularCoordinates[_FieldTransform__T]: ...
    def getCartesian(self) -> org.orekit.utils.FieldPVCoordinates[_FieldTransform__T]: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getFieldDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldTransform__T]: ...
    _getIdentity__T = typing.TypeVar('_getIdentity__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def getIdentity(field: org.hipparchus.Field[_getIdentity__T]) -> 'FieldTransform'[_getIdentity__T]: ...
    def getInverse(self) -> 'FieldTransform'[_FieldTransform__T]: ...
    def getJacobian(self, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, tArray: typing.List[typing.List[_FieldTransform__T]]) -> None: ...
    def getRotation(self) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_FieldTransform__T]: ...
    def getRotationAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    def getRotationRate(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    def getTranslation(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    _interpolate_0__T = typing.TypeVar('_interpolate_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _interpolate_1__T = typing.TypeVar('_interpolate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _interpolate_2__T = typing.TypeVar('_interpolate_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_0__T], collection: typing.Union[java.util.Collection['FieldTransform'[_interpolate_0__T]], typing.Sequence['FieldTransform'[_interpolate_0__T]], typing.Set['FieldTransform'[_interpolate_0__T]]]) -> 'FieldTransform'[_interpolate_0__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_1__T], cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter, collection: typing.Union[java.util.Collection['FieldTransform'[_interpolate_1__T]], typing.Sequence['FieldTransform'[_interpolate_1__T]], typing.Set['FieldTransform'[_interpolate_1__T]]]) -> 'FieldTransform'[_interpolate_1__T]: ...
    @typing.overload
    @staticmethod
    def interpolate(fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_interpolate_2__T], cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter, stream: java.util.stream.Stream['FieldTransform'[_interpolate_2__T]]) -> 'FieldTransform'[_interpolate_2__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldTransform'[_FieldTransform__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldTransform__T) -> 'FieldTransform'[_FieldTransform__T]: ...
    @typing.overload
    def transformLine(self, fieldLine: org.hipparchus.geometry.euclidean.threed.FieldLine[_FieldTransform__T]) -> org.hipparchus.geometry.euclidean.threed.FieldLine[_FieldTransform__T]: ...
    @typing.overload
    def transformLine(self, line: org.hipparchus.geometry.euclidean.threed.Line) -> org.hipparchus.geometry.euclidean.threed.FieldLine[_FieldTransform__T]: ...
    @typing.overload
    def transformPVCoordinates(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldTransform__T]) -> org.orekit.utils.FieldPVCoordinates[_FieldTransform__T]: ...
    @typing.overload
    def transformPVCoordinates(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.orekit.utils.FieldPVCoordinates[_FieldTransform__T]: ...
    @typing.overload
    def transformPVCoordinates(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldTransform__T]) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldTransform__T]: ...
    @typing.overload
    def transformPVCoordinates(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldTransform__T]: ...
    @typing.overload
    def transformPosition(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    @typing.overload
    def transformPosition(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    @typing.overload
    def transformVector(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...
    @typing.overload
    def transformVector(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_FieldTransform__T]: ...

_FieldTransformGenerator__T = typing.TypeVar('_FieldTransformGenerator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldTransformGenerator(org.orekit.utils.TimeStampedGenerator[FieldTransform[_FieldTransformGenerator__T]], typing.Generic[_FieldTransformGenerator__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldTransformGenerator__T], int: int, transformProvider: 'TransformProvider', double: float): ...
    def generate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> java.util.List[FieldTransform[_FieldTransformGenerator__T]]: ...

class Frame(java.io.Serializable):
    @typing.overload
    def __init__(self, frame: 'Frame', transform: 'Transform', string: str): ...
    @typing.overload
    def __init__(self, frame: 'Frame', transform: 'Transform', string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, frame: 'Frame', transformProvider: 'TransformProvider', string: str): ...
    @typing.overload
    def __init__(self, frame: 'Frame', transformProvider: 'TransformProvider', string: str, boolean: bool): ...
    def getAncestor(self, int: int) -> 'Frame': ...
    def getDepth(self) -> int: ...
    def getFrozenFrame(self, frame: 'Frame', absoluteDate: org.orekit.time.AbsoluteDate, string: str) -> 'Frame': ...
    def getName(self) -> str: ...
    def getParent(self) -> 'Frame': ...
    @staticmethod
    def getRoot() -> 'Frame': ...
    def getTransformProvider(self) -> 'TransformProvider': ...
    _getTransformTo_0__T = typing.TypeVar('_getTransformTo_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransformTo(self, frame: 'Frame', fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransformTo_0__T]) -> FieldTransform[_getTransformTo_0__T]: ...
    @typing.overload
    def getTransformTo(self, frame: 'Frame', absoluteDate: org.orekit.time.AbsoluteDate) -> 'Transform': ...
    def isChildOf(self, frame: 'Frame') -> bool: ...
    def isPseudoInertial(self) -> bool: ...
    def toString(self) -> str: ...

class Frames:
    def getCIRF(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getEME2000(self) -> 'FactoryManagedFrame': ...
    def getEOPHistory(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> EOPHistory: ...
    def getEcliptic(self, iERSConventions: org.orekit.utils.IERSConventions) -> Frame: ...
    def getFrame(self, predefined: 'Predefined') -> Frame: ...
    def getGCRF(self) -> Frame: ...
    @typing.overload
    def getGTOD(self, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getGTOD(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getICRF(self) -> Frame: ...
    @typing.overload
    def getITRF(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getITRF(self, iTRFVersion: 'ITRFVersion', iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'VersionedITRF': ...
    def getITRFEquinox(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getMOD(self, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getMOD(self, iERSConventions: org.orekit.utils.IERSConventions) -> 'FactoryManagedFrame': ...
    def getPZ9011(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getTEME(self) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTIRF(self, iERSConventions: org.orekit.utils.IERSConventions) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTIRF(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTOD(self, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTOD(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getVeis1950(self) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def of(timeScales: org.orekit.time.TimeScales, supplier: typing.Union[java.util.function.Supplier[Frame], typing.Callable[[], Frame]]) -> 'Frames': ...
    @typing.overload
    @staticmethod
    def of(timeScales: org.orekit.time.TimeScales, celestialBodies: org.orekit.bodies.CelestialBodies) -> 'Frames': ...

class FramesFactory:
    RAPID_DATA_PREDICTION_COLUMNS_1980_FILENAME: typing.ClassVar[str] = ...
    RAPID_DATA_PREDICTION_XML_1980_FILENAME: typing.ClassVar[str] = ...
    EOPC04_1980_FILENAME: typing.ClassVar[str] = ...
    BULLETINB_1980_FILENAME: typing.ClassVar[str] = ...
    RAPID_DATA_PREDICITON_COLUMNS_2000_FILENAME: typing.ClassVar[str] = ...
    RAPID_DATA_PREDICITON_XML_2000_FILENAME: typing.ClassVar[str] = ...
    EOPC04_2000_FILENAME: typing.ClassVar[str] = ...
    BULLETINB_2000_FILENAME: typing.ClassVar[str] = ...
    BULLETINA_FILENAME: typing.ClassVar[str] = ...
    @staticmethod
    def addDefaultEOP1980HistoryLoaders(string: str, string2: str, string3: str, string4: str, string5: str) -> None: ...
    @staticmethod
    def addDefaultEOP2000HistoryLoaders(string: str, string2: str, string3: str, string4: str, string5: str) -> None: ...
    @staticmethod
    def addEOPHistoryLoader(iERSConventions: org.orekit.utils.IERSConventions, eOPHistoryLoader: EOPHistoryLoader) -> None: ...
    @staticmethod
    def clearEOPHistoryLoaders() -> None: ...
    @staticmethod
    def findEOP(frame: Frame) -> EOPHistory: ...
    @staticmethod
    def getCIRF(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @staticmethod
    def getEME2000() -> 'FactoryManagedFrame': ...
    @staticmethod
    def getEOPHistory(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> EOPHistory: ...
    @staticmethod
    def getEcliptic(iERSConventions: org.orekit.utils.IERSConventions) -> Frame: ...
    @staticmethod
    def getFrame(predefined: 'Predefined') -> Frame: ...
    @staticmethod
    def getFrames() -> 'LazyLoadedFrames': ...
    @staticmethod
    def getGCRF() -> Frame: ...
    @typing.overload
    @staticmethod
    def getGTOD(boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getGTOD(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @staticmethod
    def getICRF() -> Frame: ...
    @typing.overload
    @staticmethod
    def getITRF(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getITRF(iTRFVersion: 'ITRFVersion', iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'VersionedITRF': ...
    @staticmethod
    def getITRFEquinox(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getMOD(boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getMOD(iERSConventions: org.orekit.utils.IERSConventions) -> 'FactoryManagedFrame': ...
    _getNonInterpolatingTransform_0__T = typing.TypeVar('_getNonInterpolatingTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    @staticmethod
    def getNonInterpolatingTransform(frame: Frame, frame2: Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getNonInterpolatingTransform_0__T]) -> FieldTransform[_getNonInterpolatingTransform_0__T]: ...
    @typing.overload
    @staticmethod
    def getNonInterpolatingTransform(frame: Frame, frame2: Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> 'Transform': ...
    @staticmethod
    def getPZ9011(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @staticmethod
    def getTEME() -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getTIRF(iERSConventions: org.orekit.utils.IERSConventions) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getTIRF(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getTOD(boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    @staticmethod
    def getTOD(iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @staticmethod
    def getVeis1950() -> 'FactoryManagedFrame': ...
    @staticmethod
    def setEOPContinuityThreshold(double: float) -> None: ...

class ItrfVersionProvider:
    def getConfiguration(self, string: str, int: int) -> 'ITRFVersionLoader.ITRFVersionConfiguration': ...

class LOFType(java.lang.Enum['LOFType']):
    TNW: typing.ClassVar['LOFType'] = ...
    QSW: typing.ClassVar['LOFType'] = ...
    LVLH: typing.ClassVar['LOFType'] = ...
    LVLH_CCSDS: typing.ClassVar['LOFType'] = ...
    VVLH: typing.ClassVar['LOFType'] = ...
    VNC: typing.ClassVar['LOFType'] = ...
    EQW: typing.ClassVar['LOFType'] = ...
    NTW: typing.ClassVar['LOFType'] = ...
    _rotationFromInertial_0__T = typing.TypeVar('_rotationFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def rotationFromInertial(self, field: org.hipparchus.Field[_rotationFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_rotationFromInertial_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldRotation[_rotationFromInertial_0__T]: ...
    @typing.overload
    def rotationFromInertial(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    _transformFromInertial_0__T = typing.TypeVar('_transformFromInertial_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transformFromInertial(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_transformFromInertial_0__T], fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_transformFromInertial_0__T]) -> FieldTransform[_transformFromInertial_0__T]: ...
    @typing.overload
    def transformFromInertial(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates) -> 'Transform': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LOFType': ...
    @staticmethod
    def values() -> typing.List['LOFType']: ...

class LazyLoadedEop:
    def __init__(self, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def addDefaultEOP1980HistoryLoaders(self, string: str, string2: str, string3: str, string4: str, string5: str, supplier: typing.Union[java.util.function.Supplier[org.orekit.time.TimeScale], typing.Callable[[], org.orekit.time.TimeScale]]) -> None: ...
    def addDefaultEOP2000HistoryLoaders(self, string: str, string2: str, string3: str, string4: str, string5: str, supplier: typing.Union[java.util.function.Supplier[org.orekit.time.TimeScale], typing.Callable[[], org.orekit.time.TimeScale]]) -> None: ...
    def addEOPHistoryLoader(self, iERSConventions: org.orekit.utils.IERSConventions, eOPHistoryLoader: EOPHistoryLoader) -> None: ...
    def clearEOPHistoryLoaders(self) -> None: ...
    def getDataProvidersManager(self) -> org.orekit.data.DataProvidersManager: ...
    def getEOPHistory(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, timeScales: org.orekit.time.TimeScales) -> EOPHistory: ...
    def setEOPContinuityThreshold(self, double: float) -> None: ...

class OrphanFrame(java.io.Serializable):
    def __init__(self, string: str): ...
    @typing.overload
    def addChild(self, orphanFrame: 'OrphanFrame', transform: 'Transform', boolean: bool) -> None: ...
    @typing.overload
    def addChild(self, orphanFrame: 'OrphanFrame', transformProvider: 'TransformProvider', boolean: bool) -> None: ...
    @typing.overload
    def attachTo(self, frame: Frame, transform: 'Transform', boolean: bool) -> None: ...
    @typing.overload
    def attachTo(self, frame: Frame, transformProvider: 'TransformProvider', boolean: bool) -> None: ...
    def getChildren(self) -> java.util.List['OrphanFrame']: ...
    def getFrame(self) -> Frame: ...
    def toString(self) -> str: ...

class PoleCorrection(java.io.Serializable):
    NULL_CORRECTION: typing.ClassVar['PoleCorrection'] = ...
    def __init__(self, double: float, double2: float): ...
    def getXp(self) -> float: ...
    def getYp(self) -> float: ...

class Predefined(java.lang.Enum['Predefined']):
    GCRF: typing.ClassVar['Predefined'] = ...
    ICRF: typing.ClassVar['Predefined'] = ...
    ECLIPTIC_CONVENTIONS_1996: typing.ClassVar['Predefined'] = ...
    ECLIPTIC_CONVENTIONS_2003: typing.ClassVar['Predefined'] = ...
    ECLIPTIC_CONVENTIONS_2010: typing.ClassVar['Predefined'] = ...
    EME2000: typing.ClassVar['Predefined'] = ...
    ITRF_CIO_CONV_2010_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_CIO_CONV_2010_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_CIO_CONV_2003_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_CIO_CONV_2003_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_CIO_CONV_1996_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_CIO_CONV_1996_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_EQUINOX_CONV_2010_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_EQUINOX_CONV_2010_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_EQUINOX_CONV_2003_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_EQUINOX_CONV_2003_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_EQUINOX_CONV_1996_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    ITRF_EQUINOX_CONV_1996_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    TIRF_CONVENTIONS_2010_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    TIRF_CONVENTIONS_2010_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    TIRF_CONVENTIONS_2003_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    TIRF_CONVENTIONS_2003_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    TIRF_CONVENTIONS_1996_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    TIRF_CONVENTIONS_1996_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    CIRF_CONVENTIONS_2010_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    CIRF_CONVENTIONS_2010_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    CIRF_CONVENTIONS_2003_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    CIRF_CONVENTIONS_2003_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    CIRF_CONVENTIONS_1996_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    CIRF_CONVENTIONS_1996_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    VEIS_1950: typing.ClassVar['Predefined'] = ...
    GTOD_WITHOUT_EOP_CORRECTIONS: typing.ClassVar['Predefined'] = ...
    GTOD_CONVENTIONS_2010_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    GTOD_CONVENTIONS_2010_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    GTOD_CONVENTIONS_2003_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    GTOD_CONVENTIONS_2003_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    GTOD_CONVENTIONS_1996_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    GTOD_CONVENTIONS_1996_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    TOD_WITHOUT_EOP_CORRECTIONS: typing.ClassVar['Predefined'] = ...
    TOD_CONVENTIONS_2010_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    TOD_CONVENTIONS_2010_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    TOD_CONVENTIONS_2003_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    TOD_CONVENTIONS_2003_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    TOD_CONVENTIONS_1996_ACCURATE_EOP: typing.ClassVar['Predefined'] = ...
    TOD_CONVENTIONS_1996_SIMPLE_EOP: typing.ClassVar['Predefined'] = ...
    MOD_WITHOUT_EOP_CORRECTIONS: typing.ClassVar['Predefined'] = ...
    MOD_CONVENTIONS_2010: typing.ClassVar['Predefined'] = ...
    MOD_CONVENTIONS_2003: typing.ClassVar['Predefined'] = ...
    MOD_CONVENTIONS_1996: typing.ClassVar['Predefined'] = ...
    TEME: typing.ClassVar['Predefined'] = ...
    PZ90_11: typing.ClassVar['Predefined'] = ...
    def getName(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Predefined': ...
    @staticmethod
    def values() -> typing.List['Predefined']: ...

class Transform(org.orekit.time.TimeStamped, org.orekit.time.TimeShiftable['Transform'], org.orekit.time.TimeInterpolable['Transform'], java.io.Serializable):
    IDENTITY: typing.ClassVar['Transform'] = ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, rotation: org.hipparchus.geometry.euclidean.threed.Rotation): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, rotation: org.hipparchus.geometry.euclidean.threed.Rotation, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, rotation: org.hipparchus.geometry.euclidean.threed.Rotation, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, transform: 'Transform', transform2: 'Transform'): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, angularCoordinates: org.orekit.utils.AngularCoordinates): ...
    @typing.overload
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, pVCoordinates: org.orekit.utils.PVCoordinates): ...
    def freeze(self) -> 'Transform': ...
    def getAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAngular(self) -> org.orekit.utils.AngularCoordinates: ...
    def getCartesian(self) -> org.orekit.utils.PVCoordinates: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getInverse(self) -> 'Transform': ...
    def getJacobian(self, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, doubleArray: typing.List[typing.List[float]]) -> None: ...
    def getRotation(self) -> org.hipparchus.geometry.euclidean.threed.Rotation: ...
    def getRotationAcceleration(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getRotationRate(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getTranslation(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream['Transform']) -> 'Transform': ...
    @typing.overload
    @staticmethod
    def interpolate(absoluteDate: org.orekit.time.AbsoluteDate, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter, collection: typing.Union[java.util.Collection['Transform'], typing.Sequence['Transform'], typing.Set['Transform']]) -> 'Transform': ...
    def shiftedBy(self, double: float) -> 'Transform': ...
    def transformLine(self, line: org.hipparchus.geometry.euclidean.threed.Line) -> org.hipparchus.geometry.euclidean.threed.Line: ...
    _transformPVCoordinates_0__T = typing.TypeVar('_transformPVCoordinates_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _transformPVCoordinates_2__T = typing.TypeVar('_transformPVCoordinates_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transformPVCoordinates(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_transformPVCoordinates_0__T]) -> org.orekit.utils.FieldPVCoordinates[_transformPVCoordinates_0__T]: ...
    @typing.overload
    def transformPVCoordinates(self, pVCoordinates: org.orekit.utils.PVCoordinates) -> org.orekit.utils.PVCoordinates: ...
    @typing.overload
    def transformPVCoordinates(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_transformPVCoordinates_2__T]) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_transformPVCoordinates_2__T]: ...
    @typing.overload
    def transformPVCoordinates(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    _transformPosition_0__T = typing.TypeVar('_transformPosition_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transformPosition(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transformPosition_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transformPosition_0__T]: ...
    @typing.overload
    def transformPosition(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    _transformVector_0__T = typing.TypeVar('_transformVector_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def transformVector(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transformVector_0__T]) -> org.hipparchus.geometry.euclidean.threed.FieldVector3D[_transformVector_0__T]: ...
    @typing.overload
    def transformVector(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...

class TransformGenerator(org.orekit.utils.TimeStampedGenerator[Transform]):
    def __init__(self, int: int, transformProvider: 'TransformProvider', double: float): ...
    def generate(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate) -> java.util.List[Transform]: ...

class TransformProvider(java.io.Serializable):
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class TransformProviderUtils:
    IDENTITY_PROVIDER: typing.ClassVar[TransformProvider] = ...
    @staticmethod
    def getCombinedProvider(transformProvider: TransformProvider, transformProvider2: TransformProvider) -> TransformProvider: ...
    @staticmethod
    def getReversedProvider(transformProvider: TransformProvider) -> TransformProvider: ...

class AbstractFrames(Frames):
    def __init__(self, timeScales: org.orekit.time.TimeScales, supplier: typing.Union[java.util.function.Supplier[Frame], typing.Callable[[], Frame]]): ...
    def getCIRF(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getEME2000(self) -> 'FactoryManagedFrame': ...
    def getEcliptic(self, iERSConventions: org.orekit.utils.IERSConventions) -> Frame: ...
    def getFrame(self, predefined: Predefined) -> Frame: ...
    def getGCRF(self) -> Frame: ...
    @typing.overload
    def getGTOD(self, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getGTOD(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getICRF(self) -> Frame: ...
    @typing.overload
    def getITRF(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getITRF(self, iTRFVersion: 'ITRFVersion', iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'VersionedITRF': ...
    def getITRFEquinox(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getMOD(self, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getMOD(self, iERSConventions: org.orekit.utils.IERSConventions) -> 'FactoryManagedFrame': ...
    def getPZ9011(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getTEME(self) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTIRF(self, iERSConventions: org.orekit.utils.IERSConventions) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTIRF(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTOD(self, boolean: bool) -> 'FactoryManagedFrame': ...
    @typing.overload
    def getTOD(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> 'FactoryManagedFrame': ...
    def getVeis1950(self) -> 'FactoryManagedFrame': ...

class CR3BPRotatingFrame(Frame):
    def __init__(self, double: float, celestialBody: org.orekit.bodies.CelestialBody, celestialBody2: org.orekit.bodies.CelestialBody): ...

class EOPBasedTransformProvider(TransformProvider):
    def getEOPHistory(self) -> EOPHistory: ...
    def getNonInterpolatingProvider(self) -> 'EOPBasedTransformProvider': ...

class EclipticProvider(TransformProvider):
    @typing.overload
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions): ...
    @typing.overload
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, timeScales: org.orekit.time.TimeScales): ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class FactoryManagedFrame(Frame):
    def __init__(self, frame: Frame, transformProvider: TransformProvider, boolean: bool, predefined: Predefined): ...
    def getFactoryKey(self) -> Predefined: ...

class FixedTransformProvider(TransformProvider):
    def __init__(self, transform: Transform): ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class HelmertTransformation(TransformProvider):
    def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float): ...
    def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...
    class Predefined(java.lang.Enum['HelmertTransformation.Predefined']):
        ITRF_2014_TO_ITRF_2008: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_2005: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_2000: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1997: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1996: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1994: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1993: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1992: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1991: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1990: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1989: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2014_TO_ITRF_1988: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_2005: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_2000: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1997: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1996: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1994: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1993: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1992: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1991: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1990: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1989: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        ITRF_2008_TO_ITRF_1988: typing.ClassVar['HelmertTransformation.Predefined'] = ...
        @typing.overload
        def createTransformedITRF(self, frame: Frame, string: str) -> Frame: ...
        @typing.overload
        def createTransformedITRF(self, frame: Frame, string: str, timeScale: org.orekit.time.TimeScale) -> Frame: ...
        def getDestination(self) -> 'ITRFVersion': ...
        def getOrigin(self) -> 'ITRFVersion': ...
        @typing.overload
        def getTransformation(self) -> 'HelmertTransformation': ...
        @typing.overload
        def getTransformation(self, timeScale: org.orekit.time.TimeScale) -> 'HelmertTransformation': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'HelmertTransformation.Predefined': ...
        @staticmethod
        def values() -> typing.List['HelmertTransformation.Predefined']: ...

class ITRFVersion(java.lang.Enum['ITRFVersion']):
    ITRF_2014: typing.ClassVar['ITRFVersion'] = ...
    ITRF_2008: typing.ClassVar['ITRFVersion'] = ...
    ITRF_2005: typing.ClassVar['ITRFVersion'] = ...
    ITRF_2000: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1997: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1996: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1994: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1993: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1992: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1991: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1990: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1989: typing.ClassVar['ITRFVersion'] = ...
    ITRF_1988: typing.ClassVar['ITRFVersion'] = ...
    @typing.overload
    @staticmethod
    def getConverter(iTRFVersion: 'ITRFVersion', iTRFVersion2: 'ITRFVersion') -> 'ITRFVersion.Converter': ...
    @typing.overload
    @staticmethod
    def getConverter(iTRFVersion: 'ITRFVersion', iTRFVersion2: 'ITRFVersion', timeScale: org.orekit.time.TimeScale) -> 'ITRFVersion.Converter': ...
    @typing.overload
    @staticmethod
    def getITRFVersion(int: int) -> 'ITRFVersion': ...
    @typing.overload
    @staticmethod
    def getITRFVersion(string: str) -> 'ITRFVersion': ...
    def getName(self) -> str: ...
    def getYear(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ITRFVersion': ...
    @staticmethod
    def values() -> typing.List['ITRFVersion']: ...
    class Converter(TransformProvider):
        def getDestination(self) -> 'ITRFVersion': ...
        def getOrigin(self) -> 'ITRFVersion': ...
        _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
        @typing.overload
        def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
        @typing.overload
        def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class ITRFVersionLoader(ItrfVersionProvider):
    SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def getConfiguration(self, string: str, int: int) -> 'ITRFVersionLoader.ITRFVersionConfiguration': ...
    class ITRFVersionConfiguration:
        def __init__(self, string: str, iTRFVersion: ITRFVersion, int: int, int2: int): ...
        def appliesTo(self, string: str) -> bool: ...
        def getVersion(self) -> ITRFVersion: ...
        def isValid(self, int: int) -> bool: ...

class InterpolatingTransformProvider(TransformProvider):
    def __init__(self, transformProvider: TransformProvider, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter, int: int, double: float, int2: int, double2: float, double3: float): ...
    def getGridPoints(self) -> int: ...
    def getRawProvider(self) -> TransformProvider: ...
    def getStep(self) -> float: ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class L1Frame(Frame):
    def __init__(self, celestialBody: org.orekit.bodies.CelestialBody, celestialBody2: org.orekit.bodies.CelestialBody): ...

class L1TransformProvider(TransformProvider):
    def __init__(self, celestialBody: org.orekit.bodies.CelestialBody, celestialBody2: org.orekit.bodies.CelestialBody): ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class L2Frame(Frame):
    def __init__(self, celestialBody: org.orekit.bodies.CelestialBody, celestialBody2: org.orekit.bodies.CelestialBody): ...

class LocalOrbitalFrame(Frame):
    def __init__(self, frame: Frame, lOFType: LOFType, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, string: str): ...

class PythonEOPHistoryLoader(EOPHistoryLoader):
    def __init__(self): ...
    def fillHistory(self, nutationCorrectionConverter: org.orekit.utils.IERSConventions.NutationCorrectionConverter, sortedSet: java.util.SortedSet[EOPEntry]) -> None: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonItrfVersionProvider(ItrfVersionProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getConfiguration(self, string: str, int: int) -> ITRFVersionLoader.ITRFVersionConfiguration: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonTransformProvider(TransformProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getTransform_1__T = typing.TypeVar('_getTransform_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_1__T]) -> FieldTransform[_getTransform_1__T]: ...
    _getTransform_F__T = typing.TypeVar('_getTransform_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getTransform_F(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_F__T]) -> FieldTransform[_getTransform_F__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class ShiftingTransformProvider(TransformProvider):
    def __init__(self, transformProvider: TransformProvider, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter, int: int, double: float, int2: int, double2: float, double3: float): ...
    def getGridPoints(self) -> int: ...
    def getRawProvider(self) -> TransformProvider: ...
    def getStep(self) -> float: ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class TopocentricFrame(Frame, org.orekit.utils.PVCoordinatesProvider):
    def __init__(self, bodyShape: org.orekit.bodies.BodyShape, geodeticPoint: org.orekit.bodies.GeodeticPoint, string: str): ...
    def computeLimitVisibilityPoint(self, double: float, double2: float, double3: float) -> org.orekit.bodies.GeodeticPoint: ...
    _getAzimuth_1__T = typing.TypeVar('_getAzimuth_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getAzimuth(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getAzimuth(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getAzimuth_1__T], frame: Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getAzimuth_1__T]) -> _getAzimuth_1__T: ...
    def getEast(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    _getElevation_1__T = typing.TypeVar('_getElevation_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getElevation(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getElevation(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getElevation_1__T], frame: Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getElevation_1__T]) -> _getElevation_1__T: ...
    def getNadir(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getNorth(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def getParentShape(self) -> org.orekit.bodies.BodyShape: ...
    _getPoint_0__T = typing.TypeVar('_getPoint_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getPoint(self, field: org.hipparchus.Field[_getPoint_0__T]) -> org.orekit.bodies.FieldGeodeticPoint[_getPoint_0__T]: ...
    @typing.overload
    def getPoint(self) -> org.orekit.bodies.GeodeticPoint: ...
    _getRange_1__T = typing.TypeVar('_getRange_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getRange(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, frame: Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getRange(self, fieldVector3D: org.hipparchus.geometry.euclidean.threed.FieldVector3D[_getRange_1__T], frame: Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getRange_1__T]) -> _getRange_1__T: ...
    _getRangeRate_1__T = typing.TypeVar('_getRangeRate_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getRangeRate(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: Frame, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    @typing.overload
    def getRangeRate(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_getRangeRate_1__T], frame: Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getRangeRate_1__T]) -> _getRangeRate_1__T: ...
    def getSouth(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getWest(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getZenith(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def pointAtDistance(self, double: float, double2: float, double3: float) -> org.orekit.bodies.GeodeticPoint: ...

class TwoBodiesBaryFrame(Frame):
    def __init__(self, celestialBody: org.orekit.bodies.CelestialBody, celestialBody2: org.orekit.bodies.CelestialBody): ...

class UpdatableFrame(Frame):
    @typing.overload
    def __init__(self, frame: Frame, transform: Transform, string: str): ...
    @typing.overload
    def __init__(self, frame: Frame, transform: Transform, string: str, boolean: bool): ...
    def updateTransform(self, frame: Frame, frame2: Frame, transform: Transform, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...

class VersionedITRF(Frame):
    def getITRFVersion(self) -> ITRFVersion: ...

class GTODProvider(EOPBasedTransformProvider):
    def getEOPHistory(self) -> EOPHistory: ...
    def getNonInterpolatingProvider(self) -> 'GTODProvider': ...
    _getTransform_0__T = typing.TypeVar('_getTransform_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_0__T]) -> FieldTransform[_getTransform_0__T]: ...
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...

class LazyLoadedFrames(AbstractFrames):
    def __init__(self, lazyLoadedEop: LazyLoadedEop, timeScales: org.orekit.time.TimeScales, celestialBodies: org.orekit.bodies.CelestialBodies): ...
    def addDefaultEOP1980HistoryLoaders(self, string: str, string2: str, string3: str, string4: str, string5: str) -> None: ...
    def addDefaultEOP2000HistoryLoaders(self, string: str, string2: str, string3: str, string4: str, string5: str) -> None: ...
    def addEOPHistoryLoader(self, iERSConventions: org.orekit.utils.IERSConventions, eOPHistoryLoader: EOPHistoryLoader) -> None: ...
    def clearEOPHistoryLoaders(self) -> None: ...
    def getEOPHistory(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> EOPHistory: ...
    def setEOPContinuityThreshold(self, double: float) -> None: ...

class PythonAbstractFrames(AbstractFrames):
    def __init__(self, timeScales: org.orekit.time.TimeScales, supplier: typing.Union[java.util.function.Supplier[Frame], typing.Callable[[], Frame]]): ...
    def finalize(self) -> None: ...
    def getEOPHistory(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool) -> EOPHistory: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEOPBasedTransformProvider(EOPBasedTransformProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getEOPHistory(self) -> EOPHistory: ...
    def getNonInterpolatingProvider(self) -> EOPBasedTransformProvider: ...
    _getTransform_1__T = typing.TypeVar('_getTransform_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTransform(self, absoluteDate: org.orekit.time.AbsoluteDate) -> Transform: ...
    @typing.overload
    def getTransform(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_1__T]) -> FieldTransform[_getTransform_1__T]: ...
    _getTransform_F__T = typing.TypeVar('_getTransform_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getTransform_F(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTransform_F__T]) -> FieldTransform[_getTransform_F__T]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonAbstractEopParser(org.orekit.frames.AbstractEopParser):
    def __init__(self, nutationCorrectionConverter: org.orekit.utils.IERSConventions.NutationCorrectionConverter, itrfVersionProvider: ItrfVersionProvider, timeScale: org.orekit.time.TimeScale): ...
    def finalize(self) -> None: ...
    def parse(self, inputStream: java.io.InputStream, string: str) -> java.util.Collection[EOPEntry]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class AbstractEopParser: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.frames")``.

    AbstractEopLoader: typing.Type[AbstractEopLoader]
    AbstractEopParser: typing.Type[AbstractEopParser]
    AbstractFrames: typing.Type[AbstractFrames]
    CR3BPRotatingFrame: typing.Type[CR3BPRotatingFrame]
    EOPBasedTransformProvider: typing.Type[EOPBasedTransformProvider]
    EOPEntry: typing.Type[EOPEntry]
    EOPHistory: typing.Type[EOPHistory]
    EOPHistoryLoader: typing.Type[EOPHistoryLoader]
    EclipticProvider: typing.Type[EclipticProvider]
    FactoryManagedFrame: typing.Type[FactoryManagedFrame]
    FieldPoleCorrection: typing.Type[FieldPoleCorrection]
    FieldTransform: typing.Type[FieldTransform]
    FieldTransformGenerator: typing.Type[FieldTransformGenerator]
    FixedTransformProvider: typing.Type[FixedTransformProvider]
    Frame: typing.Type[Frame]
    Frames: typing.Type[Frames]
    FramesFactory: typing.Type[FramesFactory]
    GTODProvider: typing.Type[GTODProvider]
    HelmertTransformation: typing.Type[HelmertTransformation]
    ITRFVersion: typing.Type[ITRFVersion]
    ITRFVersionLoader: typing.Type[ITRFVersionLoader]
    InterpolatingTransformProvider: typing.Type[InterpolatingTransformProvider]
    ItrfVersionProvider: typing.Type[ItrfVersionProvider]
    L1Frame: typing.Type[L1Frame]
    L1TransformProvider: typing.Type[L1TransformProvider]
    L2Frame: typing.Type[L2Frame]
    LOFType: typing.Type[LOFType]
    LazyLoadedEop: typing.Type[LazyLoadedEop]
    LazyLoadedFrames: typing.Type[LazyLoadedFrames]
    LocalOrbitalFrame: typing.Type[LocalOrbitalFrame]
    OrphanFrame: typing.Type[OrphanFrame]
    PoleCorrection: typing.Type[PoleCorrection]
    Predefined: typing.Type[Predefined]
    PythonAbstractEopParser: typing.Type[PythonAbstractEopParser]
    PythonAbstractFrames: typing.Type[PythonAbstractFrames]
    PythonEOPBasedTransformProvider: typing.Type[PythonEOPBasedTransformProvider]
    PythonEOPHistoryLoader: typing.Type[PythonEOPHistoryLoader]
    PythonItrfVersionProvider: typing.Type[PythonItrfVersionProvider]
    PythonTransformProvider: typing.Type[PythonTransformProvider]
    ShiftingTransformProvider: typing.Type[ShiftingTransformProvider]
    TopocentricFrame: typing.Type[TopocentricFrame]
    Transform: typing.Type[Transform]
    TransformGenerator: typing.Type[TransformGenerator]
    TransformProvider: typing.Type[TransformProvider]
    TransformProviderUtils: typing.Type[TransformProviderUtils]
    TwoBodiesBaryFrame: typing.Type[TwoBodiesBaryFrame]
    UpdatableFrame: typing.Type[UpdatableFrame]
    VersionedITRF: typing.Type[VersionedITRF]
