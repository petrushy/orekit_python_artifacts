import java.io
import java.lang
import java.util
import java.util.stream
import org.hipparchus
import org.orekit.attitudes
import org.orekit.bodies
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.numerical.cr3bp
import org.orekit.time
import org.orekit.utils
import typing



class CR3BPDifferentialCorrection:
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, cR3BPSystem: org.orekit.bodies.CR3BPSystem, double: float): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, cR3BPSystem: org.orekit.bodies.CR3BPSystem, double: float, attitudeProvider: org.orekit.attitudes.AttitudeProvider, timeScale: org.orekit.time.TimeScale): ...
    def compute(self, librationOrbitType: 'LibrationOrbitType') -> org.orekit.utils.PVCoordinates: ...
    def computeLyapunov(self, sTMEquations: org.orekit.propagation.numerical.cr3bp.STMEquations) -> org.orekit.utils.PVCoordinates: ...
    def getOrbitalPeriod(self) -> float: ...

_FieldOrbit__T = typing.TypeVar('_FieldOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldOrbit(org.orekit.utils.FieldPVCoordinatesProvider[_FieldOrbit__T], org.orekit.time.FieldTimeStamped[_FieldOrbit__T], org.orekit.time.FieldTimeShiftable['FieldOrbit'[_FieldOrbit__T], _FieldOrbit__T], org.orekit.time.FieldTimeInterpolable['FieldOrbit'[_FieldOrbit__T], _FieldOrbit__T], typing.Generic[_FieldOrbit__T]):
    def addKeplerContribution(self, positionAngle: 'PositionAngle', t: _FieldOrbit__T, tArray: typing.List[_FieldOrbit__T]) -> None: ...
    def getA(self) -> _FieldOrbit__T: ...
    def getADot(self) -> _FieldOrbit__T: ...
    def getDate(self) -> org.orekit.time.FieldAbsoluteDate[_FieldOrbit__T]: ...
    def getE(self) -> _FieldOrbit__T: ...
    def getEDot(self) -> _FieldOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldOrbit__T: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getHx(self) -> _FieldOrbit__T: ...
    def getHxDot(self) -> _FieldOrbit__T: ...
    def getHy(self) -> _FieldOrbit__T: ...
    def getHyDot(self) -> _FieldOrbit__T: ...
    def getI(self) -> _FieldOrbit__T: ...
    def getIDot(self) -> _FieldOrbit__T: ...
    def getJacobianWrtCartesian(self, positionAngle: 'PositionAngle', tArray: typing.List[typing.List[_FieldOrbit__T]]) -> None: ...
    def getJacobianWrtParameters(self, positionAngle: 'PositionAngle', tArray: typing.List[typing.List[_FieldOrbit__T]]) -> None: ...
    def getKeplerianMeanMotion(self) -> _FieldOrbit__T: ...
    def getKeplerianPeriod(self) -> _FieldOrbit__T: ...
    def getLE(self) -> _FieldOrbit__T: ...
    def getLEDot(self) -> _FieldOrbit__T: ...
    def getLM(self) -> _FieldOrbit__T: ...
    def getLMDot(self) -> _FieldOrbit__T: ...
    def getLv(self) -> _FieldOrbit__T: ...
    def getLvDot(self) -> _FieldOrbit__T: ...
    def getMu(self) -> _FieldOrbit__T: ...
    @typing.overload
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldOrbit__T]: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldOrbit__T]: ...
    @typing.overload
    def getPVCoordinates(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldOrbit__T], frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldOrbit__T]: ...
    def getType(self) -> 'OrbitType': ...
    def hasDerivatives(self) -> bool: ...
    @typing.overload
    def shiftedBy(self, t: _FieldOrbit__T) -> 'FieldOrbit'[_FieldOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> _FieldOrbit__T: ...
    def toOrbit(self) -> 'Orbit': ...

class LibrationOrbit:
    @typing.overload
    def applyDifferentialCorrection(self) -> None: ...
    @typing.overload
    def applyDifferentialCorrection(self, attitudeProvider: org.orekit.attitudes.AttitudeProvider, timeScale: org.orekit.time.TimeScale) -> None: ...
    def getInitialPV(self) -> org.orekit.utils.PVCoordinates: ...
    def getManifolds(self, spacecraftState: org.orekit.propagation.SpacecraftState, boolean: bool) -> org.orekit.utils.PVCoordinates: ...
    def getOrbitalPeriod(self) -> float: ...

class LibrationOrbitFamily(java.lang.Enum['LibrationOrbitFamily']):
    NORTHERN: typing.ClassVar['LibrationOrbitFamily'] = ...
    SOUTHERN: typing.ClassVar['LibrationOrbitFamily'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LibrationOrbitFamily': ...
    @staticmethod
    def values() -> typing.List['LibrationOrbitFamily']: ...

class LibrationOrbitType(java.lang.Enum['LibrationOrbitType']):
    HALO: typing.ClassVar['LibrationOrbitType'] = ...
    LYAPUNOV: typing.ClassVar['LibrationOrbitType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LibrationOrbitType': ...
    @staticmethod
    def values() -> typing.List['LibrationOrbitType']: ...

class Orbit(org.orekit.time.TimeStamped, org.orekit.time.TimeShiftable['Orbit'], org.orekit.time.TimeInterpolable['Orbit'], java.io.Serializable, org.orekit.utils.PVCoordinatesProvider):
    def addKeplerContribution(self, positionAngle: 'PositionAngle', double: float, doubleArray: typing.List[float]) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getJacobianWrtCartesian(self, positionAngle: 'PositionAngle', doubleArray: typing.List[typing.List[float]]) -> None: ...
    def getJacobianWrtParameters(self, positionAngle: 'PositionAngle', doubleArray: typing.List[typing.List[float]]) -> None: ...
    def getKeplerianMeanMotion(self) -> float: ...
    def getKeplerianPeriod(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getMu(self) -> float: ...
    @typing.overload
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def getPVCoordinates(self, absoluteDate: org.orekit.time.AbsoluteDate, frame: org.orekit.frames.Frame) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def getType(self) -> 'OrbitType': ...
    def hasDerivatives(self) -> bool: ...
    def shiftedBy(self, double: float) -> 'Orbit': ...

class OrbitType(java.lang.Enum['OrbitType']):
    CARTESIAN: typing.ClassVar['OrbitType'] = ...
    CIRCULAR: typing.ClassVar['OrbitType'] = ...
    EQUINOCTIAL: typing.ClassVar['OrbitType'] = ...
    KEPLERIAN: typing.ClassVar['OrbitType'] = ...
    POS_X: typing.ClassVar[str] = ...
    POS_Y: typing.ClassVar[str] = ...
    POS_Z: typing.ClassVar[str] = ...
    VEL_X: typing.ClassVar[str] = ...
    VEL_Y: typing.ClassVar[str] = ...
    VEL_Z: typing.ClassVar[str] = ...
    A: typing.ClassVar[str] = ...
    ECC: typing.ClassVar[str] = ...
    E_X: typing.ClassVar[str] = ...
    E_Y: typing.ClassVar[str] = ...
    INC: typing.ClassVar[str] = ...
    H_X: typing.ClassVar[str] = ...
    H_Y: typing.ClassVar[str] = ...
    PA: typing.ClassVar[str] = ...
    RAAN: typing.ClassVar[str] = ...
    MEAN_ANOM: typing.ClassVar[str] = ...
    ECC_ANOM: typing.ClassVar[str] = ...
    TRUE_ANOM: typing.ClassVar[str] = ...
    MEAN_LAT_ARG: typing.ClassVar[str] = ...
    ECC_LAT_ARG: typing.ClassVar[str] = ...
    TRUE_LAT_ARG: typing.ClassVar[str] = ...
    MEAN_LON_ARG: typing.ClassVar[str] = ...
    ECC_LON_ARG: typing.ClassVar[str] = ...
    TRUE_LON_ARG: typing.ClassVar[str] = ...
    _convertType_0__T = typing.TypeVar('_convertType_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def convertType(self, fieldOrbit: FieldOrbit[_convertType_0__T]) -> FieldOrbit[_convertType_0__T]: ...
    @typing.overload
    def convertType(self, orbit: Orbit) -> Orbit: ...
    def getDrivers(self, double: float, orbit: Orbit, positionAngle: 'PositionAngle') -> org.orekit.utils.ParameterDriversList: ...
    _mapArrayToOrbit_0__T = typing.TypeVar('_mapArrayToOrbit_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mapArrayToOrbit(self, tArray: typing.List[_mapArrayToOrbit_0__T], tArray2: typing.List[_mapArrayToOrbit_0__T], positionAngle: 'PositionAngle', fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_mapArrayToOrbit_0__T], t3: _mapArrayToOrbit_0__T, frame: org.orekit.frames.Frame) -> FieldOrbit[_mapArrayToOrbit_0__T]: ...
    @typing.overload
    def mapArrayToOrbit(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], positionAngle: 'PositionAngle', absoluteDate: org.orekit.time.AbsoluteDate, double3: float, frame: org.orekit.frames.Frame) -> Orbit: ...
    _mapOrbitToArray_0__T = typing.TypeVar('_mapOrbitToArray_0__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mapOrbitToArray(self, fieldOrbit: FieldOrbit[_mapOrbitToArray_0__T], positionAngle: 'PositionAngle', tArray: typing.List[_mapOrbitToArray_0__T], tArray2: typing.List[_mapOrbitToArray_0__T]) -> None: ...
    @typing.overload
    def mapOrbitToArray(self, orbit: Orbit, positionAngle: 'PositionAngle', doubleArray: typing.List[float], doubleArray2: typing.List[float]) -> None: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OrbitType': ...
    @staticmethod
    def values() -> typing.List['OrbitType']: ...

class PositionAngle(java.lang.Enum['PositionAngle']):
    MEAN: typing.ClassVar['PositionAngle'] = ...
    ECCENTRIC: typing.ClassVar['PositionAngle'] = ...
    TRUE: typing.ClassVar['PositionAngle'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PositionAngle': ...
    @staticmethod
    def values() -> typing.List['PositionAngle']: ...

class RichardsonExpansion:
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, lagrangianPoints: org.orekit.utils.LagrangianPoints): ...
    def computeHaloFirstGuess(self, double: float, librationOrbitFamily: LibrationOrbitFamily, double2: float, double3: float) -> org.orekit.utils.PVCoordinates: ...
    def computeLyapunovFirstGuess(self, double: float, double2: float, double3: float) -> org.orekit.utils.PVCoordinates: ...
    def getCr3bpSystem(self) -> org.orekit.bodies.CR3BPSystem: ...
    def getHaloOrbitalPeriod(self, double: float) -> float: ...
    def getLagrangianPoint(self) -> org.orekit.utils.LagrangianPoints: ...
    def getLyapunovOrbitalPeriod(self, double: float) -> float: ...

class CartesianOrbit(Orbit):
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, double: float, doubleArray: typing.List[float]) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[Orbit]) -> 'CartesianOrbit': ...
    def shiftedBy(self, double: float) -> 'CartesianOrbit': ...
    def toString(self) -> str: ...

class CircularOrbit(Orbit):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, double: float, doubleArray: typing.List[float]) -> None: ...
    @staticmethod
    def eccentricToMean(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def eccentricToTrue(double: float, double2: float, double3: float) -> float: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getAlpha(self, positionAngle: PositionAngle) -> float: ...
    def getAlphaDot(self, positionAngle: PositionAngle) -> float: ...
    def getAlphaE(self) -> float: ...
    def getAlphaEDot(self) -> float: ...
    def getAlphaM(self) -> float: ...
    def getAlphaMDot(self) -> float: ...
    def getAlphaV(self) -> float: ...
    def getAlphaVDot(self) -> float: ...
    def getCircularEx(self) -> float: ...
    def getCircularExDot(self) -> float: ...
    def getCircularEy(self) -> float: ...
    def getCircularEyDot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getRightAscensionOfAscendingNode(self) -> float: ...
    def getRightAscensionOfAscendingNodeDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[Orbit]) -> 'CircularOrbit': ...
    @staticmethod
    def meanToEccentric(double: float, double2: float, double3: float) -> float: ...
    def shiftedBy(self, double: float) -> 'CircularOrbit': ...
    def toString(self) -> str: ...
    @staticmethod
    def trueToEccentric(double: float, double2: float, double3: float) -> float: ...

class EquinoctialOrbit(Orbit):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, double: float, doubleArray: typing.List[float]) -> None: ...
    @staticmethod
    def eccentricToMean(double: float, double2: float, double3: float) -> float: ...
    @staticmethod
    def eccentricToTrue(double: float, double2: float, double3: float) -> float: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getL(self, positionAngle: PositionAngle) -> float: ...
    def getLDot(self, positionAngle: PositionAngle) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[Orbit]) -> 'EquinoctialOrbit': ...
    @staticmethod
    def meanToEccentric(double: float, double2: float, double3: float) -> float: ...
    def shiftedBy(self, double: float) -> 'EquinoctialOrbit': ...
    def toString(self) -> str: ...
    @staticmethod
    def trueToEccentric(double: float, double2: float, double3: float) -> float: ...

_FieldCartesianOrbit__T = typing.TypeVar('_FieldCartesianOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCartesianOrbit(FieldOrbit[_FieldCartesianOrbit__T], typing.Generic[_FieldCartesianOrbit__T]):
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldCartesianOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldCartesianOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCartesianOrbit__T], t: _FieldCartesianOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldCartesianOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldCartesianOrbit__T): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, t: _FieldCartesianOrbit__T, tArray: typing.List[_FieldCartesianOrbit__T]) -> None: ...
    def getA(self) -> _FieldCartesianOrbit__T: ...
    def getADot(self) -> _FieldCartesianOrbit__T: ...
    def getE(self) -> _FieldCartesianOrbit__T: ...
    def getEDot(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldCartesianOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldCartesianOrbit__T: ...
    def getHx(self) -> _FieldCartesianOrbit__T: ...
    def getHxDot(self) -> _FieldCartesianOrbit__T: ...
    def getHy(self) -> _FieldCartesianOrbit__T: ...
    def getHyDot(self) -> _FieldCartesianOrbit__T: ...
    def getI(self) -> _FieldCartesianOrbit__T: ...
    def getIDot(self) -> _FieldCartesianOrbit__T: ...
    def getLE(self) -> _FieldCartesianOrbit__T: ...
    def getLEDot(self) -> _FieldCartesianOrbit__T: ...
    def getLM(self) -> _FieldCartesianOrbit__T: ...
    def getLMDot(self) -> _FieldCartesianOrbit__T: ...
    def getLv(self) -> _FieldCartesianOrbit__T: ...
    def getLvDot(self) -> _FieldCartesianOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.CalculusFieldElement], collection: typing.Union[java.util.Collection[_FieldCartesianOrbit__T], typing.Sequence[_FieldCartesianOrbit__T], typing.Set[_FieldCartesianOrbit__T]]) -> _FieldCartesianOrbit__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCartesianOrbit__T], stream: java.util.stream.Stream[FieldOrbit[_FieldCartesianOrbit__T]]) -> 'FieldCartesianOrbit'[_FieldCartesianOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldCartesianOrbit'[_FieldCartesianOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldCartesianOrbit__T) -> 'FieldCartesianOrbit'[_FieldCartesianOrbit__T]: ...
    def toOrbit(self) -> CartesianOrbit: ...
    def toString(self) -> str: ...

_FieldCircularOrbit__T = typing.TypeVar('_FieldCircularOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldCircularOrbit(FieldOrbit[_FieldCircularOrbit__T], typing.Generic[_FieldCircularOrbit__T]):
    @typing.overload
    def __init__(self, t: _FieldCircularOrbit__T, t2: _FieldCircularOrbit__T, t3: _FieldCircularOrbit__T, t4: _FieldCircularOrbit__T, t5: _FieldCircularOrbit__T, t6: _FieldCircularOrbit__T, t7: _FieldCircularOrbit__T, t8: _FieldCircularOrbit__T, t9: _FieldCircularOrbit__T, t10: _FieldCircularOrbit__T, t11: _FieldCircularOrbit__T, t12: _FieldCircularOrbit__T, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t13: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldCircularOrbit__T, t2: _FieldCircularOrbit__T, t3: _FieldCircularOrbit__T, t4: _FieldCircularOrbit__T, t5: _FieldCircularOrbit__T, t6: _FieldCircularOrbit__T, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t7: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldCircularOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldCircularOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], t: _FieldCircularOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldCircularOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldCircularOrbit__T): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, t: _FieldCircularOrbit__T, tArray: typing.List[_FieldCircularOrbit__T]) -> None: ...
    _eccentricToMean__T = typing.TypeVar('_eccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToMean(t: _eccentricToMean__T, t2: _eccentricToMean__T, t3: _eccentricToMean__T) -> _eccentricToMean__T: ...
    _eccentricToTrue__T = typing.TypeVar('_eccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToTrue(t: _eccentricToTrue__T, t2: _eccentricToTrue__T, t3: _eccentricToTrue__T) -> _eccentricToTrue__T: ...
    def getA(self) -> _FieldCircularOrbit__T: ...
    def getADot(self) -> _FieldCircularOrbit__T: ...
    def getAlpha(self, positionAngle: PositionAngle) -> _FieldCircularOrbit__T: ...
    def getAlphaDot(self, positionAngle: PositionAngle) -> _FieldCircularOrbit__T: ...
    def getAlphaE(self) -> _FieldCircularOrbit__T: ...
    def getAlphaEDot(self) -> _FieldCircularOrbit__T: ...
    def getAlphaM(self) -> _FieldCircularOrbit__T: ...
    def getAlphaMDot(self) -> _FieldCircularOrbit__T: ...
    def getAlphaV(self) -> _FieldCircularOrbit__T: ...
    def getAlphaVDot(self) -> _FieldCircularOrbit__T: ...
    def getCircularEx(self) -> _FieldCircularOrbit__T: ...
    def getCircularExDot(self) -> _FieldCircularOrbit__T: ...
    def getCircularEy(self) -> _FieldCircularOrbit__T: ...
    def getCircularEyDot(self) -> _FieldCircularOrbit__T: ...
    def getE(self) -> _FieldCircularOrbit__T: ...
    def getEDot(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldCircularOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldCircularOrbit__T: ...
    def getHx(self) -> _FieldCircularOrbit__T: ...
    def getHxDot(self) -> _FieldCircularOrbit__T: ...
    def getHy(self) -> _FieldCircularOrbit__T: ...
    def getHyDot(self) -> _FieldCircularOrbit__T: ...
    def getI(self) -> _FieldCircularOrbit__T: ...
    def getIDot(self) -> _FieldCircularOrbit__T: ...
    def getLE(self) -> _FieldCircularOrbit__T: ...
    def getLEDot(self) -> _FieldCircularOrbit__T: ...
    def getLM(self) -> _FieldCircularOrbit__T: ...
    def getLMDot(self) -> _FieldCircularOrbit__T: ...
    def getLv(self) -> _FieldCircularOrbit__T: ...
    def getLvDot(self) -> _FieldCircularOrbit__T: ...
    def getRightAscensionOfAscendingNode(self) -> _FieldCircularOrbit__T: ...
    def getRightAscensionOfAscendingNodeDot(self) -> _FieldCircularOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.CalculusFieldElement], collection: typing.Union[java.util.Collection[_FieldCircularOrbit__T], typing.Sequence[_FieldCircularOrbit__T], typing.Set[_FieldCircularOrbit__T]]) -> _FieldCircularOrbit__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldCircularOrbit__T], stream: java.util.stream.Stream[FieldOrbit[_FieldCircularOrbit__T]]) -> 'FieldCircularOrbit'[_FieldCircularOrbit__T]: ...
    _meanToEccentric__T = typing.TypeVar('_meanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEccentric(t: _meanToEccentric__T, t2: _meanToEccentric__T, t3: _meanToEccentric__T) -> _meanToEccentric__T: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldCircularOrbit'[_FieldCircularOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldCircularOrbit__T) -> 'FieldCircularOrbit'[_FieldCircularOrbit__T]: ...
    def toOrbit(self) -> CircularOrbit: ...
    def toString(self) -> str: ...
    _trueToEccentric__T = typing.TypeVar('_trueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEccentric(t: _trueToEccentric__T, t2: _trueToEccentric__T, t3: _trueToEccentric__T) -> _trueToEccentric__T: ...

_FieldEquinoctialOrbit__T = typing.TypeVar('_FieldEquinoctialOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldEquinoctialOrbit(FieldOrbit[_FieldEquinoctialOrbit__T], typing.Generic[_FieldEquinoctialOrbit__T]):
    @typing.overload
    def __init__(self, t: _FieldEquinoctialOrbit__T, t2: _FieldEquinoctialOrbit__T, t3: _FieldEquinoctialOrbit__T, t4: _FieldEquinoctialOrbit__T, t5: _FieldEquinoctialOrbit__T, t6: _FieldEquinoctialOrbit__T, t7: _FieldEquinoctialOrbit__T, t8: _FieldEquinoctialOrbit__T, t9: _FieldEquinoctialOrbit__T, t10: _FieldEquinoctialOrbit__T, t11: _FieldEquinoctialOrbit__T, t12: _FieldEquinoctialOrbit__T, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t13: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldEquinoctialOrbit__T, t2: _FieldEquinoctialOrbit__T, t3: _FieldEquinoctialOrbit__T, t4: _FieldEquinoctialOrbit__T, t5: _FieldEquinoctialOrbit__T, t6: _FieldEquinoctialOrbit__T, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t7: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldEquinoctialOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldEquinoctialOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], t: _FieldEquinoctialOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldEquinoctialOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldEquinoctialOrbit__T): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, t: _FieldEquinoctialOrbit__T, tArray: typing.List[_FieldEquinoctialOrbit__T]) -> None: ...
    _eccentricToMean__T = typing.TypeVar('_eccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToMean(t: _eccentricToMean__T, t2: _eccentricToMean__T, t3: _eccentricToMean__T) -> _eccentricToMean__T: ...
    _eccentricToTrue__T = typing.TypeVar('_eccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def eccentricToTrue(t: _eccentricToTrue__T, t2: _eccentricToTrue__T, t3: _eccentricToTrue__T) -> _eccentricToTrue__T: ...
    def getA(self) -> _FieldEquinoctialOrbit__T: ...
    def getADot(self) -> _FieldEquinoctialOrbit__T: ...
    def getE(self) -> _FieldEquinoctialOrbit__T: ...
    def getEDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldEquinoctialOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getHx(self) -> _FieldEquinoctialOrbit__T: ...
    def getHxDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getHy(self) -> _FieldEquinoctialOrbit__T: ...
    def getHyDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getI(self) -> _FieldEquinoctialOrbit__T: ...
    def getIDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getL(self, positionAngle: PositionAngle) -> _FieldEquinoctialOrbit__T: ...
    def getLDot(self, positionAngle: PositionAngle) -> _FieldEquinoctialOrbit__T: ...
    def getLE(self) -> _FieldEquinoctialOrbit__T: ...
    def getLEDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getLM(self) -> _FieldEquinoctialOrbit__T: ...
    def getLMDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getLv(self) -> _FieldEquinoctialOrbit__T: ...
    def getLvDot(self) -> _FieldEquinoctialOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.CalculusFieldElement], collection: typing.Union[java.util.Collection[_FieldEquinoctialOrbit__T], typing.Sequence[_FieldEquinoctialOrbit__T], typing.Set[_FieldEquinoctialOrbit__T]]) -> _FieldEquinoctialOrbit__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldEquinoctialOrbit__T], stream: java.util.stream.Stream[FieldOrbit[_FieldEquinoctialOrbit__T]]) -> 'FieldEquinoctialOrbit'[_FieldEquinoctialOrbit__T]: ...
    _meanToEccentric__T = typing.TypeVar('_meanToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEccentric(t: _meanToEccentric__T, t2: _meanToEccentric__T, t3: _meanToEccentric__T) -> _meanToEccentric__T: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldEquinoctialOrbit'[_FieldEquinoctialOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldEquinoctialOrbit__T) -> 'FieldEquinoctialOrbit'[_FieldEquinoctialOrbit__T]: ...
    def toOrbit(self) -> EquinoctialOrbit: ...
    def toString(self) -> str: ...
    _trueToEccentric__T = typing.TypeVar('_trueToEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEccentric(t: _trueToEccentric__T, t2: _trueToEccentric__T, t3: _trueToEccentric__T) -> _trueToEccentric__T: ...

_FieldKeplerianOrbit__T = typing.TypeVar('_FieldKeplerianOrbit__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldKeplerianOrbit(FieldOrbit[_FieldKeplerianOrbit__T], typing.Generic[_FieldKeplerianOrbit__T]):
    @typing.overload
    def __init__(self, t: _FieldKeplerianOrbit__T, t2: _FieldKeplerianOrbit__T, t3: _FieldKeplerianOrbit__T, t4: _FieldKeplerianOrbit__T, t5: _FieldKeplerianOrbit__T, t6: _FieldKeplerianOrbit__T, t7: _FieldKeplerianOrbit__T, t8: _FieldKeplerianOrbit__T, t9: _FieldKeplerianOrbit__T, t10: _FieldKeplerianOrbit__T, t11: _FieldKeplerianOrbit__T, t12: _FieldKeplerianOrbit__T, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t13: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, t: _FieldKeplerianOrbit__T, t2: _FieldKeplerianOrbit__T, t3: _FieldKeplerianOrbit__T, t4: _FieldKeplerianOrbit__T, t5: _FieldKeplerianOrbit__T, t6: _FieldKeplerianOrbit__T, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t7: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, fieldOrbit: FieldOrbit[_FieldKeplerianOrbit__T]): ...
    @typing.overload
    def __init__(self, fieldPVCoordinates: org.orekit.utils.FieldPVCoordinates[_FieldKeplerianOrbit__T], frame: org.orekit.frames.Frame, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], t: _FieldKeplerianOrbit__T): ...
    @typing.overload
    def __init__(self, timeStampedFieldPVCoordinates: org.orekit.utils.TimeStampedFieldPVCoordinates[_FieldKeplerianOrbit__T], frame: org.orekit.frames.Frame, t2: _FieldKeplerianOrbit__T): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, t: _FieldKeplerianOrbit__T, tArray: typing.List[_FieldKeplerianOrbit__T]) -> None: ...
    _ellipticEccentricToMean__T = typing.TypeVar('_ellipticEccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticEccentricToMean(t: _ellipticEccentricToMean__T, t2: _ellipticEccentricToMean__T) -> _ellipticEccentricToMean__T: ...
    _ellipticEccentricToTrue__T = typing.TypeVar('_ellipticEccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def ellipticEccentricToTrue(t: _ellipticEccentricToTrue__T, t2: _ellipticEccentricToTrue__T) -> _ellipticEccentricToTrue__T: ...
    def getA(self) -> _FieldKeplerianOrbit__T: ...
    def getADot(self) -> _FieldKeplerianOrbit__T: ...
    def getAnomaly(self, positionAngle: PositionAngle) -> _FieldKeplerianOrbit__T: ...
    def getAnomalyDot(self, positionAngle: PositionAngle) -> _FieldKeplerianOrbit__T: ...
    def getE(self) -> _FieldKeplerianOrbit__T: ...
    def getEDot(self) -> _FieldKeplerianOrbit__T: ...
    def getEccentricAnomaly(self) -> _FieldKeplerianOrbit__T: ...
    def getEccentricAnomalyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialEx(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialExDot(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialEy(self) -> _FieldKeplerianOrbit__T: ...
    def getEquinoctialEyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getHx(self) -> _FieldKeplerianOrbit__T: ...
    def getHxDot(self) -> _FieldKeplerianOrbit__T: ...
    def getHy(self) -> _FieldKeplerianOrbit__T: ...
    def getHyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getI(self) -> _FieldKeplerianOrbit__T: ...
    def getIDot(self) -> _FieldKeplerianOrbit__T: ...
    def getLE(self) -> _FieldKeplerianOrbit__T: ...
    def getLEDot(self) -> _FieldKeplerianOrbit__T: ...
    def getLM(self) -> _FieldKeplerianOrbit__T: ...
    def getLMDot(self) -> _FieldKeplerianOrbit__T: ...
    def getLv(self) -> _FieldKeplerianOrbit__T: ...
    def getLvDot(self) -> _FieldKeplerianOrbit__T: ...
    def getMeanAnomaly(self) -> _FieldKeplerianOrbit__T: ...
    def getMeanAnomalyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getPerigeeArgument(self) -> _FieldKeplerianOrbit__T: ...
    def getPerigeeArgumentDot(self) -> _FieldKeplerianOrbit__T: ...
    def getRightAscensionOfAscendingNode(self) -> _FieldKeplerianOrbit__T: ...
    def getRightAscensionOfAscendingNodeDot(self) -> _FieldKeplerianOrbit__T: ...
    def getTrueAnomaly(self) -> _FieldKeplerianOrbit__T: ...
    def getTrueAnomalyDot(self) -> _FieldKeplerianOrbit__T: ...
    def getType(self) -> OrbitType: ...
    def hasDerivatives(self) -> bool: ...
    _hyperbolicEccentricToMean__T = typing.TypeVar('_hyperbolicEccentricToMean__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicEccentricToMean(t: _hyperbolicEccentricToMean__T, t2: _hyperbolicEccentricToMean__T) -> _hyperbolicEccentricToMean__T: ...
    _hyperbolicEccentricToTrue__T = typing.TypeVar('_hyperbolicEccentricToTrue__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def hyperbolicEccentricToTrue(t: _hyperbolicEccentricToTrue__T, t2: _hyperbolicEccentricToTrue__T) -> _hyperbolicEccentricToTrue__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[org.hipparchus.CalculusFieldElement], collection: typing.Union[java.util.Collection[_FieldKeplerianOrbit__T], typing.Sequence[_FieldKeplerianOrbit__T], typing.Set[_FieldKeplerianOrbit__T]]) -> _FieldKeplerianOrbit__T: ...
    @typing.overload
    def interpolate(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_FieldKeplerianOrbit__T], stream: java.util.stream.Stream[FieldOrbit[_FieldKeplerianOrbit__T]]) -> 'FieldKeplerianOrbit'[_FieldKeplerianOrbit__T]: ...
    _meanToEllipticEccentric__T = typing.TypeVar('_meanToEllipticEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToEllipticEccentric(t: _meanToEllipticEccentric__T, t2: _meanToEllipticEccentric__T) -> _meanToEllipticEccentric__T: ...
    _meanToHyperbolicEccentric__T = typing.TypeVar('_meanToHyperbolicEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def meanToHyperbolicEccentric(t: _meanToHyperbolicEccentric__T, t2: _meanToHyperbolicEccentric__T) -> _meanToHyperbolicEccentric__T: ...
    @typing.overload
    def shiftedBy(self, double: float) -> 'FieldKeplerianOrbit'[_FieldKeplerianOrbit__T]: ...
    @typing.overload
    def shiftedBy(self, t: _FieldKeplerianOrbit__T) -> 'FieldKeplerianOrbit'[_FieldKeplerianOrbit__T]: ...
    def toOrbit(self) -> 'KeplerianOrbit': ...
    def toString(self) -> str: ...
    _trueToEllipticEccentric__T = typing.TypeVar('_trueToEllipticEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToEllipticEccentric(t: _trueToEllipticEccentric__T, t2: _trueToEllipticEccentric__T) -> _trueToEllipticEccentric__T: ...
    _trueToHyperbolicEccentric__T = typing.TypeVar('_trueToHyperbolicEccentric__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @staticmethod
    def trueToHyperbolicEccentric(t: _trueToHyperbolicEccentric__T, t2: _trueToHyperbolicEccentric__T) -> _trueToHyperbolicEccentric__T: ...

class HaloOrbit(LibrationOrbit):
    @typing.overload
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, pVCoordinates: org.orekit.utils.PVCoordinates, double: float): ...
    @typing.overload
    def __init__(self, richardsonExpansion: RichardsonExpansion, double: float, librationOrbitFamily: LibrationOrbitFamily): ...

class KeplerianOrbit(Orbit):
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double13: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, positionAngle: PositionAngle, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double7: float): ...
    @typing.overload
    def __init__(self, orbit: Orbit): ...
    @typing.overload
    def __init__(self, pVCoordinates: org.orekit.utils.PVCoordinates, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, double: float, doubleArray: typing.List[float]) -> None: ...
    @staticmethod
    def ellipticEccentricToMean(double: float, double2: float) -> float: ...
    @staticmethod
    def ellipticEccentricToTrue(double: float, double2: float) -> float: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getAnomaly(self, positionAngle: PositionAngle) -> float: ...
    def getAnomalyDot(self, positionAngle: PositionAngle) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEccentricAnomaly(self) -> float: ...
    def getEccentricAnomalyDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getMeanAnomaly(self) -> float: ...
    def getMeanAnomalyDot(self) -> float: ...
    def getPerigeeArgument(self) -> float: ...
    def getPerigeeArgumentDot(self) -> float: ...
    def getRightAscensionOfAscendingNode(self) -> float: ...
    def getRightAscensionOfAscendingNodeDot(self) -> float: ...
    def getTrueAnomaly(self) -> float: ...
    def getTrueAnomalyDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    @staticmethod
    def hyperbolicEccentricToMean(double: float, double2: float) -> float: ...
    @staticmethod
    def hyperbolicEccentricToTrue(double: float, double2: float) -> float: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[Orbit]) -> 'KeplerianOrbit': ...
    @staticmethod
    def meanToEllipticEccentric(double: float, double2: float) -> float: ...
    @staticmethod
    def meanToHyperbolicEccentric(double: float, double2: float) -> float: ...
    def shiftedBy(self, double: float) -> 'KeplerianOrbit': ...
    def toString(self) -> str: ...
    @staticmethod
    def trueToEllipticEccentric(double: float, double2: float) -> float: ...
    @staticmethod
    def trueToHyperbolicEccentric(double: float, double2: float) -> float: ...

class LyapunovOrbit(LibrationOrbit):
    @typing.overload
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, pVCoordinates: org.orekit.utils.PVCoordinates, double: float): ...
    @typing.overload
    def __init__(self, richardsonExpansion: RichardsonExpansion, double: float): ...

class PythonLibrationOrbit(LibrationOrbit):
    def __init__(self, cR3BPSystem: org.orekit.bodies.CR3BPSystem, pVCoordinates: org.orekit.utils.PVCoordinates, double: float): ...
    def applyCorrectionOnPV(self, cR3BPDifferentialCorrection: CR3BPDifferentialCorrection) -> org.orekit.utils.PVCoordinates: ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonOrbit(Orbit):
    @typing.overload
    def __init__(self, frame: org.orekit.frames.Frame, absoluteDate: org.orekit.time.AbsoluteDate, double: float): ...
    @typing.overload
    def __init__(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates, frame: org.orekit.frames.Frame, double: float): ...
    def addKeplerContribution(self, positionAngle: PositionAngle, double: float, doubleArray: typing.List[float]) -> None: ...
    def finalize(self) -> None: ...
    def getA(self) -> float: ...
    def getADot(self) -> float: ...
    def getE(self) -> float: ...
    def getEDot(self) -> float: ...
    def getEquinoctialEx(self) -> float: ...
    def getEquinoctialExDot(self) -> float: ...
    def getEquinoctialEy(self) -> float: ...
    def getEquinoctialEyDot(self) -> float: ...
    def getHx(self) -> float: ...
    def getHxDot(self) -> float: ...
    def getHy(self) -> float: ...
    def getHyDot(self) -> float: ...
    def getI(self) -> float: ...
    def getIDot(self) -> float: ...
    def getLE(self) -> float: ...
    def getLEDot(self) -> float: ...
    def getLM(self) -> float: ...
    def getLMDot(self) -> float: ...
    def getLv(self) -> float: ...
    def getLvDot(self) -> float: ...
    def getType(self) -> OrbitType: ...
    def initPVCoordinates(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, collection: typing.Union[java.util.Collection[org.orekit.time.TimeInterpolable], typing.Sequence[org.orekit.time.TimeInterpolable], typing.Set[org.orekit.time.TimeInterpolable]]) -> org.orekit.time.TimeInterpolable: ...
    @typing.overload
    def interpolate(self, absoluteDate: org.orekit.time.AbsoluteDate, stream: java.util.stream.Stream[Orbit]) -> Orbit: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def shiftedBy(self, double: float) -> Orbit: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.orbits")``.

    CR3BPDifferentialCorrection: typing.Type[CR3BPDifferentialCorrection]
    CartesianOrbit: typing.Type[CartesianOrbit]
    CircularOrbit: typing.Type[CircularOrbit]
    EquinoctialOrbit: typing.Type[EquinoctialOrbit]
    FieldCartesianOrbit: typing.Type[FieldCartesianOrbit]
    FieldCircularOrbit: typing.Type[FieldCircularOrbit]
    FieldEquinoctialOrbit: typing.Type[FieldEquinoctialOrbit]
    FieldKeplerianOrbit: typing.Type[FieldKeplerianOrbit]
    FieldOrbit: typing.Type[FieldOrbit]
    HaloOrbit: typing.Type[HaloOrbit]
    KeplerianOrbit: typing.Type[KeplerianOrbit]
    LibrationOrbit: typing.Type[LibrationOrbit]
    LibrationOrbitFamily: typing.Type[LibrationOrbitFamily]
    LibrationOrbitType: typing.Type[LibrationOrbitType]
    LyapunovOrbit: typing.Type[LyapunovOrbit]
    Orbit: typing.Type[Orbit]
    OrbitType: typing.Type[OrbitType]
    PositionAngle: typing.Type[PositionAngle]
    PythonLibrationOrbit: typing.Type[PythonLibrationOrbit]
    PythonOrbit: typing.Type[PythonOrbit]
    RichardsonExpansion: typing.Type[RichardsonExpansion]
