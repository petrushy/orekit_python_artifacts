import java.io
import java.lang
import java.util
import java.util.function
import org.orekit.frames
import org.orekit.gnss
import org.orekit.time
import org.orekit.utils
import typing



class RinexClock:
    def __init__(self, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]]): ...
    def addAppliedDCBS(self, appliedDCBS: org.orekit.gnss.AppliedDCBS) -> None: ...
    def addAppliedPCVS(self, appliedPCVS: org.orekit.gnss.AppliedPCVS) -> None: ...
    def addClockData(self, string: str, clockDataLine: 'RinexClock.ClockDataLine') -> None: ...
    def addClockDataType(self, clockDataType: 'RinexClock.ClockDataType') -> None: ...
    def addComment(self, string: str) -> None: ...
    def addReceiver(self, receiver: 'RinexClock.Receiver') -> None: ...
    def addReferenceClockList(self, list: java.util.List['RinexClock.ReferenceClock'], absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def addSatellite(self, string: str) -> None: ...
    def addSystemObservationType(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, observationType: org.orekit.gnss.ObservationType) -> None: ...
    def getAgencyName(self) -> str: ...
    def getAnalysisCenterID(self) -> str: ...
    def getAnalysisCenterName(self) -> str: ...
    def getClockData(self) -> java.util.Map[str, java.util.List['RinexClock.ClockDataLine']]: ...
    def getClockDataTypes(self) -> java.util.List['RinexClock.ClockDataType']: ...
    def getComments(self) -> str: ...
    def getCreationDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getCreationDateString(self) -> str: ...
    def getCreationTimeString(self) -> str: ...
    def getCreationTimeZoneString(self) -> str: ...
    def getExternalClockReference(self) -> str: ...
    def getFormatVersion(self) -> float: ...
    def getFrame(self) -> org.orekit.frames.Frame: ...
    def getFrameName(self) -> str: ...
    def getListAppliedDCBS(self) -> java.util.List[org.orekit.gnss.AppliedDCBS]: ...
    def getListAppliedPCVS(self) -> java.util.List[org.orekit.gnss.AppliedPCVS]: ...
    def getNumberOfClockDataTypes(self) -> int: ...
    def getNumberOfLeapSeconds(self) -> int: ...
    def getNumberOfLeapSecondsGNSS(self) -> int: ...
    def getNumberOfReceivers(self) -> int: ...
    def getNumberOfSatellites(self) -> int: ...
    def getProgramName(self) -> str: ...
    def getReceivers(self) -> java.util.List['RinexClock.Receiver']: ...
    def getReferenceClocks(self) -> org.orekit.utils.TimeSpanMap[java.util.List['RinexClock.ReferenceClock']]: ...
    def getSatelliteSystem(self) -> org.orekit.gnss.SatelliteSystem: ...
    def getSatellites(self) -> java.util.List[str]: ...
    def getStationIdentifier(self) -> str: ...
    def getStationName(self) -> str: ...
    def getSystemObservationTypes(self) -> java.util.Map[org.orekit.gnss.SatelliteSystem, java.util.List[org.orekit.gnss.ObservationType]]: ...
    def getTimeScale(self) -> org.orekit.time.TimeScale: ...
    def getTimeSystem(self) -> org.orekit.gnss.TimeSystem: ...
    def getTotalNumberOfDataLines(self) -> int: ...
    def numberOfObsTypes(self, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> int: ...
    def setAgencyName(self, string: str) -> None: ...
    def setAnalysisCenterID(self, string: str) -> None: ...
    def setAnalysisCenterName(self, string: str) -> None: ...
    def setCreationDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setCreationDateString(self, string: str) -> None: ...
    def setCreationTimeString(self, string: str) -> None: ...
    def setCreationTimeZoneString(self, string: str) -> None: ...
    def setExternalClockReference(self, string: str) -> None: ...
    def setFormatVersion(self, double: float) -> None: ...
    def setFrameName(self, string: str) -> None: ...
    def setNumberOfLeapSeconds(self, int: int) -> None: ...
    def setNumberOfLeapSecondsGNSS(self, int: int) -> None: ...
    def setProgramName(self, string: str) -> None: ...
    def setSatelliteSystem(self, satelliteSystem: org.orekit.gnss.SatelliteSystem) -> None: ...
    def setStationIdentifier(self, string: str) -> None: ...
    def setStationName(self, string: str) -> None: ...
    def setTimeScale(self, timeScale: org.orekit.time.TimeScale) -> None: ...
    def setTimeSystem(self, timeSystem: org.orekit.gnss.TimeSystem) -> None: ...
    class ClockDataLine:
        def __init__(self, rinexClock: 'RinexClock', clockDataType: 'RinexClock.ClockDataType', string: str, dateComponents: org.orekit.time.DateComponents, timeComponents: org.orekit.time.TimeComponents, int: int, double: float, double2: float, double3: float, double4: float, double5: float, double6: float): ...
        def getClockAcceleration(self) -> float: ...
        def getClockAccelerationSigma(self) -> float: ...
        def getClockBias(self) -> float: ...
        def getClockBiasSigma(self) -> float: ...
        def getClockRate(self) -> float: ...
        def getClockRateSigma(self) -> float: ...
        def getDataType(self) -> 'RinexClock.ClockDataType': ...
        @typing.overload
        def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
        @typing.overload
        def getEpoch(self, timeScale: org.orekit.time.TimeScale) -> org.orekit.time.AbsoluteDate: ...
        def getName(self) -> str: ...
        def getNumberOfValues(self) -> int: ...
    class ClockDataType(java.lang.Enum['RinexClock.ClockDataType']):
        AR: typing.ClassVar['RinexClock.ClockDataType'] = ...
        AS: typing.ClassVar['RinexClock.ClockDataType'] = ...
        CR: typing.ClassVar['RinexClock.ClockDataType'] = ...
        DR: typing.ClassVar['RinexClock.ClockDataType'] = ...
        MS: typing.ClassVar['RinexClock.ClockDataType'] = ...
        def getKey(self) -> str: ...
        @staticmethod
        def parseClockDataType(string: str) -> 'RinexClock.ClockDataType': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'RinexClock.ClockDataType': ...
        @staticmethod
        def values() -> typing.List['RinexClock.ClockDataType']: ...
    class Receiver:
        def __init__(self, string: str, string2: str, double: float, double2: float, double3: float): ...
        def getDesignator(self) -> str: ...
        def getReceiverIdentifier(self) -> str: ...
        def getX(self) -> float: ...
        def getY(self) -> float: ...
        def getZ(self) -> float: ...
    class ReferenceClock:
        def __init__(self, string: str, string2: str, double: float, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate): ...
        def getClockConstraint(self) -> float: ...
        def getClockID(self) -> str: ...
        def getEndDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getReferenceName(self) -> str: ...
        def getStartDate(self) -> org.orekit.time.AbsoluteDate: ...

class RinexClockParser:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]]): ...
    @typing.overload
    def __init__(self, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]], timeScales: org.orekit.time.TimeScales): ...
    @typing.overload
    def parse(self, bufferedReader: java.io.BufferedReader, string: str) -> RinexClock: ...
    @typing.overload
    def parse(self, inputStream: java.io.InputStream) -> RinexClock: ...
    @typing.overload
    def parse(self, string: str) -> RinexClock: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss.clock")``.

    RinexClock: typing.Type[RinexClock]
    RinexClockParser: typing.Type[RinexClockParser]
