import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.orekit.data
import org.orekit.frames
import org.orekit.gnss
import org.orekit.gnss.attitude
import org.orekit.time
import org.orekit.utils
import typing



class Antenna:
    def getEccentricities(self, frequency: org.orekit.gnss.Frequency) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getFrequencies(self) -> java.util.List[org.orekit.gnss.Frequency]: ...
    def getPhaseCenterVariation(self, frequency: org.orekit.gnss.Frequency, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> float: ...
    def getSinexCode(self) -> str: ...
    def getType(self) -> str: ...

class AntexLoader:
    DEFAULT_ANTEX_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    def findSatelliteAntenna(self, satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int) -> org.orekit.utils.TimeSpanMap['SatelliteAntenna']: ...
    def getReceiversAntennas(self) -> java.util.List['ReceiverAntenna']: ...
    def getSatellitesAntennas(self) -> java.util.List[org.orekit.utils.TimeSpanMap['SatelliteAntenna']]: ...

class FrequencyPattern:
    def getEccentricities(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getPhaseCenterVariation(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> float: ...

class PhaseCenterVariationFunction:
    def value(self, double: float, double2: float) -> float: ...

class SatelliteType(java.lang.Enum['SatelliteType']):
    BEIDOU_2G: typing.ClassVar['SatelliteType'] = ...
    BEIDOU_2I: typing.ClassVar['SatelliteType'] = ...
    BEIDOU_2M: typing.ClassVar['SatelliteType'] = ...
    BEIDOU_3I: typing.ClassVar['SatelliteType'] = ...
    BLOCK_I: typing.ClassVar['SatelliteType'] = ...
    BLOCK_II: typing.ClassVar['SatelliteType'] = ...
    BLOCK_IIA: typing.ClassVar['SatelliteType'] = ...
    BLOCK_IIR_A: typing.ClassVar['SatelliteType'] = ...
    BLOCK_IIR_B: typing.ClassVar['SatelliteType'] = ...
    BLOCK_IIR_M: typing.ClassVar['SatelliteType'] = ...
    BLOCK_IIF: typing.ClassVar['SatelliteType'] = ...
    BLOCK_IIIA: typing.ClassVar['SatelliteType'] = ...
    GALILEO_0A: typing.ClassVar['SatelliteType'] = ...
    GALILEO_0B: typing.ClassVar['SatelliteType'] = ...
    GALILEO_1: typing.ClassVar['SatelliteType'] = ...
    GALILEO_2: typing.ClassVar['SatelliteType'] = ...
    GLONASS: typing.ClassVar['SatelliteType'] = ...
    GLONASS_M: typing.ClassVar['SatelliteType'] = ...
    GLONASS_K1: typing.ClassVar['SatelliteType'] = ...
    GLONASS_K2: typing.ClassVar['SatelliteType'] = ...
    IRNSS_1GEO: typing.ClassVar['SatelliteType'] = ...
    IRNSS_1IGSO: typing.ClassVar['SatelliteType'] = ...
    QZSS: typing.ClassVar['SatelliteType'] = ...
    QZSS_2I: typing.ClassVar['SatelliteType'] = ...
    QZSS_2G: typing.ClassVar['SatelliteType'] = ...
    def buildAttitudeProvider(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate, extendedPVCoordinatesProvider: org.orekit.utils.ExtendedPVCoordinatesProvider, frame: org.orekit.frames.Frame, int: int) -> org.orekit.gnss.attitude.GNSSAttitudeProvider: ...
    def getName(self) -> str: ...
    @staticmethod
    def parseSatelliteType(string: str) -> 'SatelliteType': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SatelliteType': ...
    @staticmethod
    def values() -> typing.List['SatelliteType']: ...

class PythonPhaseCenterVariationFunction(PhaseCenterVariationFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def value(self, double: float, double2: float) -> float: ...

class ReceiverAntenna(Antenna):
    def __init__(self, string: str, string2: str, map: typing.Union[java.util.Map[org.orekit.gnss.Frequency, FrequencyPattern], typing.Mapping[org.orekit.gnss.Frequency, FrequencyPattern]], string3: str): ...
    def getSerialNumber(self) -> str: ...

class SatelliteAntenna(Antenna):
    def __init__(self, string: str, string2: str, map: typing.Union[java.util.Map[org.orekit.gnss.Frequency, FrequencyPattern], typing.Mapping[org.orekit.gnss.Frequency, FrequencyPattern]], satelliteSystem: org.orekit.gnss.SatelliteSystem, int: int, satelliteType: SatelliteType, int2: int, string3: str, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate): ...
    def getCosparID(self) -> str: ...
    def getPrnNumber(self) -> int: ...
    def getSatelliteCode(self) -> int: ...
    def getSatelliteSystem(self) -> org.orekit.gnss.SatelliteSystem: ...
    def getSatelliteType(self) -> SatelliteType: ...
    def getValidFrom(self) -> org.orekit.time.AbsoluteDate: ...
    def getValidUntil(self) -> org.orekit.time.AbsoluteDate: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss.antenna")``.

    Antenna: typing.Type[Antenna]
    AntexLoader: typing.Type[AntexLoader]
    FrequencyPattern: typing.Type[FrequencyPattern]
    PhaseCenterVariationFunction: typing.Type[PhaseCenterVariationFunction]
    PythonPhaseCenterVariationFunction: typing.Type[PythonPhaseCenterVariationFunction]
    ReceiverAntenna: typing.Type[ReceiverAntenna]
    SatelliteAntenna: typing.Type[SatelliteAntenna]
    SatelliteType: typing.Type[SatelliteType]
