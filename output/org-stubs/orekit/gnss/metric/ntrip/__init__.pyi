import java.lang
import java.net
import java.util
import org.orekit.errors
import org.orekit.gnss.metric.messages
import org.orekit.gnss.metric.parser
import typing



class Authentication(java.lang.Enum['Authentication']):
    NONE: typing.ClassVar['Authentication'] = ...
    BASIC: typing.ClassVar['Authentication'] = ...
    DIGEST: typing.ClassVar['Authentication'] = ...
    @staticmethod
    def getAuthentication(string: str) -> 'Authentication': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Authentication': ...
    @staticmethod
    def values() -> typing.List['Authentication']: ...

class CarrierPhase(java.lang.Enum['CarrierPhase']):
    NO: typing.ClassVar['CarrierPhase'] = ...
    L1: typing.ClassVar['CarrierPhase'] = ...
    L1_L2: typing.ClassVar['CarrierPhase'] = ...
    @staticmethod
    def getCarrierPhase(string: str) -> 'CarrierPhase': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CarrierPhase': ...
    @staticmethod
    def values() -> typing.List['CarrierPhase']: ...

class DataFormat(java.lang.Enum['DataFormat']):
    RTCM_2: typing.ClassVar['DataFormat'] = ...
    RTCM_3: typing.ClassVar['DataFormat'] = ...
    RTCM_SAPOS: typing.ClassVar['DataFormat'] = ...
    CMR: typing.ClassVar['DataFormat'] = ...
    CMR_PLUS: typing.ClassVar['DataFormat'] = ...
    SAPOS_ADV: typing.ClassVar['DataFormat'] = ...
    RTCA: typing.ClassVar['DataFormat'] = ...
    RAW: typing.ClassVar['DataFormat'] = ...
    RINEX: typing.ClassVar['DataFormat'] = ...
    SP3: typing.ClassVar['DataFormat'] = ...
    BINEX: typing.ClassVar['DataFormat'] = ...
    @staticmethod
    def getDataFormat(string: str) -> 'DataFormat': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'DataFormat': ...
    @staticmethod
    def values() -> typing.List['DataFormat']: ...

class GnssData:
    def __init__(self, byteArray: typing.List[int], int: int): ...
    def toString(self) -> str: ...

class MessageObserver:
    def messageAvailable(self, string: str, parsedMessage: org.orekit.gnss.metric.messages.ParsedMessage) -> None: ...

class NavigationSystem(java.lang.Enum['NavigationSystem']):
    GPS: typing.ClassVar['NavigationSystem'] = ...
    GLO: typing.ClassVar['NavigationSystem'] = ...
    GAL: typing.ClassVar['NavigationSystem'] = ...
    BDS: typing.ClassVar['NavigationSystem'] = ...
    QZS: typing.ClassVar['NavigationSystem'] = ...
    SBAS: typing.ClassVar['NavigationSystem'] = ...
    EMPTY: typing.ClassVar['NavigationSystem'] = ...
    @staticmethod
    def getNavigationSystem(string: str) -> 'NavigationSystem': ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'NavigationSystem': ...
    @staticmethod
    def values() -> typing.List['NavigationSystem']: ...

class NtripClient:
    DEFAULT_TIMEOUT: typing.ClassVar[int] = ...
    DEFAULT_PORT: typing.ClassVar[int] = ...
    DEFAULT_RECONNECT_DELAY: typing.ClassVar[float] = ...
    DEFAULT_RECONNECT_DELAY_FACTOR: typing.ClassVar[float] = ...
    DEFAULT_MAX_RECONNECT: typing.ClassVar[int] = ...
    def __init__(self, string: str, int: int): ...
    def addObserver(self, int: int, string: str, messageObserver: MessageObserver) -> None: ...
    def checkException(self) -> None: ...
    def getHost(self) -> str: ...
    def getPort(self) -> int: ...
    def getProxy(self) -> java.net.Proxy: ...
    def getSourceTable(self) -> 'SourceTable': ...
    def setFix(self, int: int, int2: int, double: float, double2: float, double3: float, double4: float, double5: float) -> None: ...
    def setProxy(self, type: java.net.Proxy.Type, string: str, int: int) -> None: ...
    def setReconnectParameters(self, double: float, double2: float, int: int) -> None: ...
    def setTimeout(self, int: int) -> None: ...
    def startStreaming(self, string: str, type: 'Type', boolean: bool, boolean2: bool) -> None: ...
    def stopStreaming(self, int: int) -> None: ...

class Record:
    def getMisc(self) -> str: ...
    def getRecordType(self) -> 'RecordType': ...

class RecordType(java.lang.Enum['RecordType']):
    STR: typing.ClassVar['RecordType'] = ...
    CAS: typing.ClassVar['RecordType'] = ...
    NET: typing.ClassVar['RecordType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RecordType': ...
    @staticmethod
    def values() -> typing.List['RecordType']: ...

class SourceTable:
    def getCasters(self) -> java.util.List['CasterRecord']: ...
    def getDataStreams(self) -> java.util.List['DataStreamRecord']: ...
    def getNetworks(self) -> java.util.List['NetworkRecord']: ...
    def getNtripFlags(self) -> str: ...

class StreamMonitor(org.orekit.gnss.metric.parser.AbstractEncodedMessages, java.lang.Runnable):
    def __init__(self, ntripClient: NtripClient, string: str, type: 'Type', boolean: bool, boolean2: bool, double: float, double2: float, int: int): ...
    def addObserver(self, int: int, messageObserver: MessageObserver) -> None: ...
    def getException(self) -> org.orekit.errors.OrekitException: ...
    def run(self) -> None: ...
    def stopMonitoring(self) -> None: ...

class StreamedMessage:
    def getId(self) -> str: ...
    def getRate(self) -> int: ...

class Type(java.lang.Enum['Type']):
    RTCM: typing.ClassVar['Type'] = ...
    IGS_SSR: typing.ClassVar['Type'] = ...
    def getParser(self, list: java.util.List[int]) -> org.orekit.gnss.metric.parser.MessagesParser: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Type': ...
    @staticmethod
    def values() -> typing.List['Type']: ...

class CasterRecord(Record):
    def __init__(self, string: str): ...
    def canReceiveNMEA(self) -> bool: ...
    def getCountry(self) -> str: ...
    def getFallbackHostOrIPAddress(self) -> str: ...
    def getFallbackPort(self) -> int: ...
    def getHostOrIPAddress(self) -> str: ...
    def getLatitude(self) -> float: ...
    def getLongitude(self) -> float: ...
    def getOperator(self) -> str: ...
    def getPort(self) -> int: ...
    def getRecordType(self) -> RecordType: ...
    def getSourceIdentifier(self) -> str: ...

class DataStreamRecord(Record):
    def __init__(self, string: str): ...
    def areFeesRequired(self) -> bool: ...
    def getAuthentication(self) -> Authentication: ...
    def getBitRate(self) -> int: ...
    def getCarrierPhase(self) -> CarrierPhase: ...
    def getCompressionEncryption(self) -> str: ...
    def getCountry(self) -> str: ...
    def getFormat(self) -> DataFormat: ...
    def getFormatDetails(self) -> java.util.List[StreamedMessage]: ...
    def getGenerator(self) -> str: ...
    def getLatitude(self) -> float: ...
    def getLongitude(self) -> float: ...
    def getMountPoint(self) -> str: ...
    def getNavigationSystems(self) -> java.util.List[NavigationSystem]: ...
    def getNetwork(self) -> str: ...
    def getRecordType(self) -> RecordType: ...
    def getSourceIdentifier(self) -> str: ...
    def isNMEARequired(self) -> bool: ...
    def isNetworked(self) -> bool: ...

class NetworkRecord(Record):
    def __init__(self, string: str): ...
    def areFeesRequired(self) -> bool: ...
    def getAuthentication(self) -> Authentication: ...
    def getNetworkIdentifier(self) -> str: ...
    def getNetworkInfoAddress(self) -> str: ...
    def getOperator(self) -> str: ...
    def getRecordType(self) -> RecordType: ...
    def getRegistrationAddress(self) -> str: ...
    def getStreamInfoAddress(self) -> str: ...

class PythonMessageObserver(MessageObserver):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def messageAvailable(self, string: str, parsedMessage: org.orekit.gnss.metric.messages.ParsedMessage) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss.metric.ntrip")``.

    Authentication: typing.Type[Authentication]
    CarrierPhase: typing.Type[CarrierPhase]
    CasterRecord: typing.Type[CasterRecord]
    DataFormat: typing.Type[DataFormat]
    DataStreamRecord: typing.Type[DataStreamRecord]
    GnssData: typing.Type[GnssData]
    MessageObserver: typing.Type[MessageObserver]
    NavigationSystem: typing.Type[NavigationSystem]
    NetworkRecord: typing.Type[NetworkRecord]
    NtripClient: typing.Type[NtripClient]
    PythonMessageObserver: typing.Type[PythonMessageObserver]
    Record: typing.Type[Record]
    RecordType: typing.Type[RecordType]
    SourceTable: typing.Type[SourceTable]
    StreamMonitor: typing.Type[StreamMonitor]
    StreamedMessage: typing.Type[StreamedMessage]
    Type: typing.Type[Type]
