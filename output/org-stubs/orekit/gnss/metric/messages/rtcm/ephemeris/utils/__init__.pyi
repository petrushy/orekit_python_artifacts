import typing



class AccuracyProvider:
    def getAccuracy(self) -> float: ...

class GlonassUserRangeAccuracy(AccuracyProvider):
    def __init__(self, int: int): ...
    def getAccuracy(self) -> float: ...

class PythonAccuracyProvider(AccuracyProvider):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getAccuracy(self) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class SignalInSpaceAccuracy(AccuracyProvider):
    def __init__(self, int: int): ...
    def getAccuracy(self) -> float: ...

class UserRangeAccuracy(AccuracyProvider):
    def __init__(self, int: int): ...
    def getAccuracy(self) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss.metric.messages.rtcm.ephemeris.utils")``.

    AccuracyProvider: typing.Type[AccuracyProvider]
    GlonassUserRangeAccuracy: typing.Type[GlonassUserRangeAccuracy]
    PythonAccuracyProvider: typing.Type[PythonAccuracyProvider]
    SignalInSpaceAccuracy: typing.Type[SignalInSpaceAccuracy]
    UserRangeAccuracy: typing.Type[UserRangeAccuracy]
