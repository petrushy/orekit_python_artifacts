import java.io
import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.hipparchus.geometry.euclidean.twod
import org.orekit.bodies
import org.orekit.data
import org.orekit.estimation.measurements.gnss
import org.orekit.gnss.antenna
import org.orekit.gnss.attitude
import org.orekit.gnss.clock
import org.orekit.gnss.metric
import org.orekit.gnss.navigation
import org.orekit.propagation
import org.orekit.propagation.analytical.gnss.data
import org.orekit.time
import org.orekit.utils
import typing



class AppliedDCBS:
    def __init__(self, satelliteSystem: 'SatelliteSystem', string: str, string2: str): ...
    def getProgDCBS(self) -> str: ...
    def getSatelliteSystem(self) -> 'SatelliteSystem': ...
    def getSourceDCBS(self) -> str: ...

class AppliedPCVS:
    def __init__(self, satelliteSystem: 'SatelliteSystem', string: str, string2: str): ...
    def getProgPCVS(self) -> str: ...
    def getSatelliteSystem(self) -> 'SatelliteSystem': ...
    def getSourcePCVS(self) -> str: ...

class CombinedObservationData:
    def __init__(self, combinationType: org.orekit.estimation.measurements.gnss.CombinationType, measurementType: 'MeasurementType', double: float, double2: float, list: java.util.List['ObservationData']): ...
    def getCombinationType(self) -> org.orekit.estimation.measurements.gnss.CombinationType: ...
    def getCombinedMHzFrequency(self) -> float: ...
    def getMeasurementType(self) -> 'MeasurementType': ...
    def getUsedObservationData(self) -> java.util.List['ObservationData']: ...
    def getValue(self) -> float: ...

class CombinedObservationDataSet(org.orekit.time.TimeStamped):
    def __init__(self, rinexObservationHeader: 'RinexObservationHeader', satelliteSystem: 'SatelliteSystem', int: int, absoluteDate: org.orekit.time.AbsoluteDate, double: float, list: java.util.List[CombinedObservationData]): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getHeader(self) -> 'RinexObservationHeader': ...
    def getObservationData(self) -> java.util.List[CombinedObservationData]: ...
    def getPrnNumber(self) -> int: ...
    def getRcvrClkOffset(self) -> float: ...
    def getSatelliteSystem(self) -> 'SatelliteSystem': ...

class DOP:
    def __init__(self, geodeticPoint: org.orekit.bodies.GeodeticPoint, absoluteDate: org.orekit.time.AbsoluteDate, int: int, double: float, double2: float, double3: float, double4: float, double5: float): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getGdop(self) -> float: ...
    def getGnssNb(self) -> int: ...
    def getHdop(self) -> float: ...
    def getLocation(self) -> org.orekit.bodies.GeodeticPoint: ...
    def getPdop(self) -> float: ...
    def getTdop(self) -> float: ...
    def getVdop(self) -> float: ...

class DOPComputer:
    DOP_MIN_ELEVATION: typing.ClassVar[float] = ...
    def compute(self, absoluteDate: org.orekit.time.AbsoluteDate, list: java.util.List[org.orekit.propagation.Propagator]) -> DOP: ...
    @staticmethod
    def create(oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> 'DOPComputer': ...
    def getElevationMask(self) -> org.orekit.utils.ElevationMask: ...
    def getMinElevation(self) -> float: ...
    def withElevationMask(self, elevationMask: org.orekit.utils.ElevationMask) -> 'DOPComputer': ...
    def withMinElevation(self, double: float) -> 'DOPComputer': ...

class Frequency(java.lang.Enum['Frequency']):
    G01: typing.ClassVar['Frequency'] = ...
    G02: typing.ClassVar['Frequency'] = ...
    G05: typing.ClassVar['Frequency'] = ...
    R01: typing.ClassVar['Frequency'] = ...
    R02: typing.ClassVar['Frequency'] = ...
    R03: typing.ClassVar['Frequency'] = ...
    R04: typing.ClassVar['Frequency'] = ...
    R06: typing.ClassVar['Frequency'] = ...
    E01: typing.ClassVar['Frequency'] = ...
    E05: typing.ClassVar['Frequency'] = ...
    E07: typing.ClassVar['Frequency'] = ...
    E08: typing.ClassVar['Frequency'] = ...
    E06: typing.ClassVar['Frequency'] = ...
    C01: typing.ClassVar['Frequency'] = ...
    C02: typing.ClassVar['Frequency'] = ...
    C06: typing.ClassVar['Frequency'] = ...
    C07: typing.ClassVar['Frequency'] = ...
    B01: typing.ClassVar['Frequency'] = ...
    B02: typing.ClassVar['Frequency'] = ...
    B03: typing.ClassVar['Frequency'] = ...
    J01: typing.ClassVar['Frequency'] = ...
    J02: typing.ClassVar['Frequency'] = ...
    J05: typing.ClassVar['Frequency'] = ...
    J06: typing.ClassVar['Frequency'] = ...
    I05: typing.ClassVar['Frequency'] = ...
    I09: typing.ClassVar['Frequency'] = ...
    S01: typing.ClassVar['Frequency'] = ...
    S05: typing.ClassVar['Frequency'] = ...
    F0: typing.ClassVar[float] = ...
    def getMHzFrequency(self) -> float: ...
    def getName(self) -> str: ...
    def getRatio(self) -> float: ...
    def getSatelliteSystem(self) -> 'SatelliteSystem': ...
    def getWavelength(self) -> float: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Frequency': ...
    @staticmethod
    def values() -> typing.List['Frequency']: ...

class HatanakaCompressFilter(org.orekit.data.DataFilter):
    def __init__(self): ...
    def filter(self, dataSource: org.orekit.data.DataSource) -> org.orekit.data.DataSource: ...

class MeasurementType(java.lang.Enum['MeasurementType']):
    PSEUDO_RANGE: typing.ClassVar['MeasurementType'] = ...
    CARRIER_PHASE: typing.ClassVar['MeasurementType'] = ...
    DOPPLER: typing.ClassVar['MeasurementType'] = ...
    SIGNAL_STRENGTH: typing.ClassVar['MeasurementType'] = ...
    COMBINED_RANGE_PHASE: typing.ClassVar['MeasurementType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'MeasurementType': ...
    @staticmethod
    def values() -> typing.List['MeasurementType']: ...

class ObservationData:
    def __init__(self, observationType: 'ObservationType', double: float, int: int, int2: int): ...
    def getLossOfLockIndicator(self) -> int: ...
    def getObservationType(self) -> 'ObservationType': ...
    def getSignalStrength(self) -> int: ...
    def getValue(self) -> float: ...

class ObservationDataSet(org.orekit.time.TimeStamped):
    def __init__(self, rinexObservationHeader: 'RinexObservationHeader', satelliteSystem: 'SatelliteSystem', int: int, absoluteDate: org.orekit.time.AbsoluteDate, double: float, list: java.util.List[ObservationData]): ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getHeader(self) -> 'RinexObservationHeader': ...
    def getObservationData(self) -> java.util.List[ObservationData]: ...
    def getPrnNumber(self) -> int: ...
    def getRcvrClkOffset(self) -> float: ...
    def getSatelliteSystem(self) -> 'SatelliteSystem': ...

class ObservationType(java.lang.Enum['ObservationType']):
    C1: typing.ClassVar['ObservationType'] = ...
    C2: typing.ClassVar['ObservationType'] = ...
    C5: typing.ClassVar['ObservationType'] = ...
    C6: typing.ClassVar['ObservationType'] = ...
    C7: typing.ClassVar['ObservationType'] = ...
    C8: typing.ClassVar['ObservationType'] = ...
    P1: typing.ClassVar['ObservationType'] = ...
    P2: typing.ClassVar['ObservationType'] = ...
    L1: typing.ClassVar['ObservationType'] = ...
    L2: typing.ClassVar['ObservationType'] = ...
    L5: typing.ClassVar['ObservationType'] = ...
    L6: typing.ClassVar['ObservationType'] = ...
    L7: typing.ClassVar['ObservationType'] = ...
    L8: typing.ClassVar['ObservationType'] = ...
    LA: typing.ClassVar['ObservationType'] = ...
    LB: typing.ClassVar['ObservationType'] = ...
    LC: typing.ClassVar['ObservationType'] = ...
    LD: typing.ClassVar['ObservationType'] = ...
    D1: typing.ClassVar['ObservationType'] = ...
    D2: typing.ClassVar['ObservationType'] = ...
    D5: typing.ClassVar['ObservationType'] = ...
    D6: typing.ClassVar['ObservationType'] = ...
    D7: typing.ClassVar['ObservationType'] = ...
    D8: typing.ClassVar['ObservationType'] = ...
    S1: typing.ClassVar['ObservationType'] = ...
    S2: typing.ClassVar['ObservationType'] = ...
    S5: typing.ClassVar['ObservationType'] = ...
    S6: typing.ClassVar['ObservationType'] = ...
    S7: typing.ClassVar['ObservationType'] = ...
    S8: typing.ClassVar['ObservationType'] = ...
    C1A: typing.ClassVar['ObservationType'] = ...
    C1B: typing.ClassVar['ObservationType'] = ...
    C1C: typing.ClassVar['ObservationType'] = ...
    C1I: typing.ClassVar['ObservationType'] = ...
    C1L: typing.ClassVar['ObservationType'] = ...
    C1M: typing.ClassVar['ObservationType'] = ...
    C1P: typing.ClassVar['ObservationType'] = ...
    C1Q: typing.ClassVar['ObservationType'] = ...
    C1S: typing.ClassVar['ObservationType'] = ...
    C1W: typing.ClassVar['ObservationType'] = ...
    C1X: typing.ClassVar['ObservationType'] = ...
    C1Y: typing.ClassVar['ObservationType'] = ...
    C1Z: typing.ClassVar['ObservationType'] = ...
    C2C: typing.ClassVar['ObservationType'] = ...
    C2D: typing.ClassVar['ObservationType'] = ...
    C2I: typing.ClassVar['ObservationType'] = ...
    C2L: typing.ClassVar['ObservationType'] = ...
    C2M: typing.ClassVar['ObservationType'] = ...
    C2P: typing.ClassVar['ObservationType'] = ...
    C2Q: typing.ClassVar['ObservationType'] = ...
    C2S: typing.ClassVar['ObservationType'] = ...
    C2W: typing.ClassVar['ObservationType'] = ...
    C2X: typing.ClassVar['ObservationType'] = ...
    C2Y: typing.ClassVar['ObservationType'] = ...
    C3I: typing.ClassVar['ObservationType'] = ...
    C3Q: typing.ClassVar['ObservationType'] = ...
    C3X: typing.ClassVar['ObservationType'] = ...
    C4A: typing.ClassVar['ObservationType'] = ...
    C4B: typing.ClassVar['ObservationType'] = ...
    C4X: typing.ClassVar['ObservationType'] = ...
    C5A: typing.ClassVar['ObservationType'] = ...
    C5B: typing.ClassVar['ObservationType'] = ...
    C5C: typing.ClassVar['ObservationType'] = ...
    C5D: typing.ClassVar['ObservationType'] = ...
    C5I: typing.ClassVar['ObservationType'] = ...
    C5P: typing.ClassVar['ObservationType'] = ...
    C5Q: typing.ClassVar['ObservationType'] = ...
    C5X: typing.ClassVar['ObservationType'] = ...
    C5Z: typing.ClassVar['ObservationType'] = ...
    C6A: typing.ClassVar['ObservationType'] = ...
    C6B: typing.ClassVar['ObservationType'] = ...
    C6C: typing.ClassVar['ObservationType'] = ...
    C6E: typing.ClassVar['ObservationType'] = ...
    C6I: typing.ClassVar['ObservationType'] = ...
    C6Q: typing.ClassVar['ObservationType'] = ...
    C6L: typing.ClassVar['ObservationType'] = ...
    C6S: typing.ClassVar['ObservationType'] = ...
    C6X: typing.ClassVar['ObservationType'] = ...
    C6Z: typing.ClassVar['ObservationType'] = ...
    C7I: typing.ClassVar['ObservationType'] = ...
    C7Q: typing.ClassVar['ObservationType'] = ...
    C7X: typing.ClassVar['ObservationType'] = ...
    C8I: typing.ClassVar['ObservationType'] = ...
    C8Q: typing.ClassVar['ObservationType'] = ...
    C8X: typing.ClassVar['ObservationType'] = ...
    C9A: typing.ClassVar['ObservationType'] = ...
    C9B: typing.ClassVar['ObservationType'] = ...
    C9C: typing.ClassVar['ObservationType'] = ...
    C9X: typing.ClassVar['ObservationType'] = ...
    C0: typing.ClassVar['ObservationType'] = ...
    CA: typing.ClassVar['ObservationType'] = ...
    CB: typing.ClassVar['ObservationType'] = ...
    CC: typing.ClassVar['ObservationType'] = ...
    CD: typing.ClassVar['ObservationType'] = ...
    D1A: typing.ClassVar['ObservationType'] = ...
    D1B: typing.ClassVar['ObservationType'] = ...
    D1C: typing.ClassVar['ObservationType'] = ...
    D1I: typing.ClassVar['ObservationType'] = ...
    D1L: typing.ClassVar['ObservationType'] = ...
    D1M: typing.ClassVar['ObservationType'] = ...
    D1N: typing.ClassVar['ObservationType'] = ...
    D1P: typing.ClassVar['ObservationType'] = ...
    D1S: typing.ClassVar['ObservationType'] = ...
    D1W: typing.ClassVar['ObservationType'] = ...
    D1X: typing.ClassVar['ObservationType'] = ...
    D1Y: typing.ClassVar['ObservationType'] = ...
    D1Z: typing.ClassVar['ObservationType'] = ...
    D2C: typing.ClassVar['ObservationType'] = ...
    D2D: typing.ClassVar['ObservationType'] = ...
    D2I: typing.ClassVar['ObservationType'] = ...
    D2L: typing.ClassVar['ObservationType'] = ...
    D2M: typing.ClassVar['ObservationType'] = ...
    D2N: typing.ClassVar['ObservationType'] = ...
    D2P: typing.ClassVar['ObservationType'] = ...
    D2Q: typing.ClassVar['ObservationType'] = ...
    D2S: typing.ClassVar['ObservationType'] = ...
    D2W: typing.ClassVar['ObservationType'] = ...
    D2X: typing.ClassVar['ObservationType'] = ...
    D2Y: typing.ClassVar['ObservationType'] = ...
    D3I: typing.ClassVar['ObservationType'] = ...
    D3Q: typing.ClassVar['ObservationType'] = ...
    D3X: typing.ClassVar['ObservationType'] = ...
    D4A: typing.ClassVar['ObservationType'] = ...
    D4B: typing.ClassVar['ObservationType'] = ...
    D4X: typing.ClassVar['ObservationType'] = ...
    D5A: typing.ClassVar['ObservationType'] = ...
    D5B: typing.ClassVar['ObservationType'] = ...
    D5C: typing.ClassVar['ObservationType'] = ...
    D5D: typing.ClassVar['ObservationType'] = ...
    D5I: typing.ClassVar['ObservationType'] = ...
    D5P: typing.ClassVar['ObservationType'] = ...
    D5Q: typing.ClassVar['ObservationType'] = ...
    D5X: typing.ClassVar['ObservationType'] = ...
    D5Z: typing.ClassVar['ObservationType'] = ...
    D6A: typing.ClassVar['ObservationType'] = ...
    D6B: typing.ClassVar['ObservationType'] = ...
    D6C: typing.ClassVar['ObservationType'] = ...
    D6E: typing.ClassVar['ObservationType'] = ...
    D6I: typing.ClassVar['ObservationType'] = ...
    D6Q: typing.ClassVar['ObservationType'] = ...
    D6L: typing.ClassVar['ObservationType'] = ...
    D6S: typing.ClassVar['ObservationType'] = ...
    D6X: typing.ClassVar['ObservationType'] = ...
    D6Z: typing.ClassVar['ObservationType'] = ...
    D7I: typing.ClassVar['ObservationType'] = ...
    D7Q: typing.ClassVar['ObservationType'] = ...
    D7X: typing.ClassVar['ObservationType'] = ...
    D8I: typing.ClassVar['ObservationType'] = ...
    D8Q: typing.ClassVar['ObservationType'] = ...
    D8X: typing.ClassVar['ObservationType'] = ...
    D9A: typing.ClassVar['ObservationType'] = ...
    D9B: typing.ClassVar['ObservationType'] = ...
    D9C: typing.ClassVar['ObservationType'] = ...
    D9X: typing.ClassVar['ObservationType'] = ...
    D0: typing.ClassVar['ObservationType'] = ...
    DA: typing.ClassVar['ObservationType'] = ...
    DB: typing.ClassVar['ObservationType'] = ...
    DC: typing.ClassVar['ObservationType'] = ...
    DD: typing.ClassVar['ObservationType'] = ...
    L1A: typing.ClassVar['ObservationType'] = ...
    L1B: typing.ClassVar['ObservationType'] = ...
    L1C: typing.ClassVar['ObservationType'] = ...
    L1I: typing.ClassVar['ObservationType'] = ...
    L1L: typing.ClassVar['ObservationType'] = ...
    L1M: typing.ClassVar['ObservationType'] = ...
    L1N: typing.ClassVar['ObservationType'] = ...
    L1P: typing.ClassVar['ObservationType'] = ...
    L1S: typing.ClassVar['ObservationType'] = ...
    L1W: typing.ClassVar['ObservationType'] = ...
    L1X: typing.ClassVar['ObservationType'] = ...
    L1Y: typing.ClassVar['ObservationType'] = ...
    L1Z: typing.ClassVar['ObservationType'] = ...
    L2C: typing.ClassVar['ObservationType'] = ...
    L2D: typing.ClassVar['ObservationType'] = ...
    L2I: typing.ClassVar['ObservationType'] = ...
    L2L: typing.ClassVar['ObservationType'] = ...
    L2M: typing.ClassVar['ObservationType'] = ...
    L2N: typing.ClassVar['ObservationType'] = ...
    L2P: typing.ClassVar['ObservationType'] = ...
    L2Q: typing.ClassVar['ObservationType'] = ...
    L2S: typing.ClassVar['ObservationType'] = ...
    L2W: typing.ClassVar['ObservationType'] = ...
    L2X: typing.ClassVar['ObservationType'] = ...
    L2Y: typing.ClassVar['ObservationType'] = ...
    L3I: typing.ClassVar['ObservationType'] = ...
    L3Q: typing.ClassVar['ObservationType'] = ...
    L3X: typing.ClassVar['ObservationType'] = ...
    L4A: typing.ClassVar['ObservationType'] = ...
    L4B: typing.ClassVar['ObservationType'] = ...
    L4X: typing.ClassVar['ObservationType'] = ...
    L5A: typing.ClassVar['ObservationType'] = ...
    L5B: typing.ClassVar['ObservationType'] = ...
    L5C: typing.ClassVar['ObservationType'] = ...
    L5D: typing.ClassVar['ObservationType'] = ...
    L5I: typing.ClassVar['ObservationType'] = ...
    L5P: typing.ClassVar['ObservationType'] = ...
    L5Q: typing.ClassVar['ObservationType'] = ...
    L5X: typing.ClassVar['ObservationType'] = ...
    L5Z: typing.ClassVar['ObservationType'] = ...
    L6A: typing.ClassVar['ObservationType'] = ...
    L6B: typing.ClassVar['ObservationType'] = ...
    L6C: typing.ClassVar['ObservationType'] = ...
    L6E: typing.ClassVar['ObservationType'] = ...
    L6I: typing.ClassVar['ObservationType'] = ...
    L6Q: typing.ClassVar['ObservationType'] = ...
    L6L: typing.ClassVar['ObservationType'] = ...
    L6S: typing.ClassVar['ObservationType'] = ...
    L6X: typing.ClassVar['ObservationType'] = ...
    L6Z: typing.ClassVar['ObservationType'] = ...
    L7I: typing.ClassVar['ObservationType'] = ...
    L7Q: typing.ClassVar['ObservationType'] = ...
    L7X: typing.ClassVar['ObservationType'] = ...
    L8I: typing.ClassVar['ObservationType'] = ...
    L8Q: typing.ClassVar['ObservationType'] = ...
    L8X: typing.ClassVar['ObservationType'] = ...
    L9A: typing.ClassVar['ObservationType'] = ...
    L9B: typing.ClassVar['ObservationType'] = ...
    L9C: typing.ClassVar['ObservationType'] = ...
    L9X: typing.ClassVar['ObservationType'] = ...
    L0: typing.ClassVar['ObservationType'] = ...
    S1A: typing.ClassVar['ObservationType'] = ...
    S1B: typing.ClassVar['ObservationType'] = ...
    S1C: typing.ClassVar['ObservationType'] = ...
    S1I: typing.ClassVar['ObservationType'] = ...
    S1L: typing.ClassVar['ObservationType'] = ...
    S1M: typing.ClassVar['ObservationType'] = ...
    S1N: typing.ClassVar['ObservationType'] = ...
    S1P: typing.ClassVar['ObservationType'] = ...
    S1S: typing.ClassVar['ObservationType'] = ...
    S1W: typing.ClassVar['ObservationType'] = ...
    S1X: typing.ClassVar['ObservationType'] = ...
    S1Y: typing.ClassVar['ObservationType'] = ...
    S1Z: typing.ClassVar['ObservationType'] = ...
    S2C: typing.ClassVar['ObservationType'] = ...
    S2D: typing.ClassVar['ObservationType'] = ...
    S2I: typing.ClassVar['ObservationType'] = ...
    S2L: typing.ClassVar['ObservationType'] = ...
    S2M: typing.ClassVar['ObservationType'] = ...
    S2N: typing.ClassVar['ObservationType'] = ...
    S2P: typing.ClassVar['ObservationType'] = ...
    S2Q: typing.ClassVar['ObservationType'] = ...
    S2S: typing.ClassVar['ObservationType'] = ...
    S2W: typing.ClassVar['ObservationType'] = ...
    S2X: typing.ClassVar['ObservationType'] = ...
    S2Y: typing.ClassVar['ObservationType'] = ...
    S3I: typing.ClassVar['ObservationType'] = ...
    S3Q: typing.ClassVar['ObservationType'] = ...
    S3X: typing.ClassVar['ObservationType'] = ...
    S4A: typing.ClassVar['ObservationType'] = ...
    S4B: typing.ClassVar['ObservationType'] = ...
    S4X: typing.ClassVar['ObservationType'] = ...
    S5A: typing.ClassVar['ObservationType'] = ...
    S5B: typing.ClassVar['ObservationType'] = ...
    S5C: typing.ClassVar['ObservationType'] = ...
    S5D: typing.ClassVar['ObservationType'] = ...
    S5I: typing.ClassVar['ObservationType'] = ...
    S5P: typing.ClassVar['ObservationType'] = ...
    S5Q: typing.ClassVar['ObservationType'] = ...
    S5X: typing.ClassVar['ObservationType'] = ...
    S5Z: typing.ClassVar['ObservationType'] = ...
    S6A: typing.ClassVar['ObservationType'] = ...
    S6B: typing.ClassVar['ObservationType'] = ...
    S6C: typing.ClassVar['ObservationType'] = ...
    S6E: typing.ClassVar['ObservationType'] = ...
    S6I: typing.ClassVar['ObservationType'] = ...
    S6Q: typing.ClassVar['ObservationType'] = ...
    S6L: typing.ClassVar['ObservationType'] = ...
    S6S: typing.ClassVar['ObservationType'] = ...
    S6X: typing.ClassVar['ObservationType'] = ...
    S6Z: typing.ClassVar['ObservationType'] = ...
    S7I: typing.ClassVar['ObservationType'] = ...
    S7Q: typing.ClassVar['ObservationType'] = ...
    S7X: typing.ClassVar['ObservationType'] = ...
    S8I: typing.ClassVar['ObservationType'] = ...
    S8Q: typing.ClassVar['ObservationType'] = ...
    S8X: typing.ClassVar['ObservationType'] = ...
    S9A: typing.ClassVar['ObservationType'] = ...
    S9B: typing.ClassVar['ObservationType'] = ...
    S9C: typing.ClassVar['ObservationType'] = ...
    S9X: typing.ClassVar['ObservationType'] = ...
    S0: typing.ClassVar['ObservationType'] = ...
    SA: typing.ClassVar['ObservationType'] = ...
    SB: typing.ClassVar['ObservationType'] = ...
    SC: typing.ClassVar['ObservationType'] = ...
    SD: typing.ClassVar['ObservationType'] = ...
    def getFrequency(self, satelliteSystem: 'SatelliteSystem') -> Frequency: ...
    def getMeasurementType(self) -> MeasurementType: ...
    def getSignalCode(self) -> 'SignalCode': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ObservationType': ...
    @staticmethod
    def values() -> typing.List['ObservationType']: ...

class RinexObservationHeader:
    @typing.overload
    def __init__(self, double: float, satelliteSystem: 'SatelliteSystem', string: str, string2: str, string3: str, string4: str, string5: str, string6: str, string7: str, string8: str, string9: str, string10: str, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double2: float, vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, string11: str, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D4: org.hipparchus.geometry.euclidean.threed.Vector3D, double3: float, vector3D5: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D6: org.hipparchus.geometry.euclidean.threed.Vector3D, string12: str, double4: float, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate, int: int, list: java.util.List[AppliedDCBS], list2: java.util.List[AppliedPCVS], list3: java.util.List['RinexObservationLoader.Parser.PhaseShiftCorrection'], int2: int, int3: int, int4: int, int5: int): ...
    @typing.overload
    def __init__(self, double: float, satelliteSystem: 'SatelliteSystem', string: str, string2: str, string3: str, string4: str, string5: str, string6: str, string7: str, string8: str, string9: str, string10: str, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double2: float, vector2D: org.hipparchus.geometry.euclidean.twod.Vector2D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D3: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D4: org.hipparchus.geometry.euclidean.threed.Vector3D, double3: float, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate, int: int, int2: int): ...
    def getAgencyName(self) -> str: ...
    def getAntennaAzimuth(self) -> float: ...
    def getAntennaBSight(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAntennaHeight(self) -> float: ...
    def getAntennaNumber(self) -> str: ...
    def getAntennaPhaseCenter(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAntennaReferencePoint(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getAntennaType(self) -> str: ...
    def getAntennaZeroDirection(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getApproxPos(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getCenterMass(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getClkOffset(self) -> int: ...
    def getEccentricities(self) -> org.hipparchus.geometry.euclidean.twod.Vector2D: ...
    def getInterval(self) -> float: ...
    def getLeapSeconds(self) -> int: ...
    def getLeapSecondsDayNum(self) -> int: ...
    def getLeapSecondsFuture(self) -> int: ...
    def getLeapSecondsWeekNum(self) -> int: ...
    def getListAppliedDCBS(self) -> java.util.List[AppliedDCBS]: ...
    def getListAppliedPCVS(self) -> java.util.List[AppliedPCVS]: ...
    def getMarkerName(self) -> str: ...
    def getMarkerNumber(self) -> str: ...
    def getMarkerType(self) -> str: ...
    def getObservationCode(self) -> str: ...
    def getObserverName(self) -> str: ...
    def getPhaseShiftCorrections(self) -> java.util.List['RinexObservationLoader.Parser.PhaseShiftCorrection']: ...
    def getReceiverNumber(self) -> str: ...
    def getReceiverType(self) -> str: ...
    def getReceiverVersion(self) -> str: ...
    def getRinexVersion(self) -> float: ...
    def getSatelliteSystem(self) -> 'SatelliteSystem': ...
    def getSignalStrengthUnit(self) -> str: ...
    def getTFirstObs(self) -> org.orekit.time.AbsoluteDate: ...
    def getTLastObs(self) -> org.orekit.time.AbsoluteDate: ...

class RinexObservationLoader:
    DEFAULT_RINEX_2_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    DEFAULT_RINEX_3_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScales: org.orekit.time.TimeScales): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScales: org.orekit.time.TimeScales): ...
    def getObservationDataSets(self) -> java.util.List[ObservationDataSet]: ...
    class Parser(org.orekit.data.DataLoader):
        def __init__(self, rinexObservationLoader: 'RinexObservationLoader'): ...
        def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
        def stillAcceptsData(self) -> bool: ...
        class PhaseShiftCorrection:
            def getCorrection(self) -> float: ...
            def getSatelliteSystem(self) -> 'SatelliteSystem': ...
            def getSatsCorrected(self) -> typing.List[str]: ...
            def getTypeObs(self) -> ObservationType: ...
        class ScaleFactorCorrection:
            def getCorrection(self) -> float: ...
            def getSatelliteSystem(self) -> 'SatelliteSystem': ...
            def getTypesObsScaled(self) -> java.util.List[ObservationType]: ...

class SEMParser(org.orekit.data.AbstractSelfFeedingLoader, org.orekit.data.DataLoader):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScales: org.orekit.time.TimeScales): ...
    def getAlmanacs(self) -> java.util.List[org.orekit.propagation.analytical.gnss.data.GPSAlmanac]: ...
    def getPRNNumbers(self) -> java.util.List[int]: ...
    def getSupportedNames(self) -> str: ...
    @typing.overload
    def loadData(self) -> None: ...
    @typing.overload
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...

class SatelliteSystem(java.lang.Enum['SatelliteSystem']):
    GPS: typing.ClassVar['SatelliteSystem'] = ...
    GLONASS: typing.ClassVar['SatelliteSystem'] = ...
    GALILEO: typing.ClassVar['SatelliteSystem'] = ...
    BEIDOU: typing.ClassVar['SatelliteSystem'] = ...
    QZSS: typing.ClassVar['SatelliteSystem'] = ...
    IRNSS: typing.ClassVar['SatelliteSystem'] = ...
    SBAS: typing.ClassVar['SatelliteSystem'] = ...
    MIXED: typing.ClassVar['SatelliteSystem'] = ...
    def getDefaultTimeSystem(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeScale: ...
    def getKey(self) -> str: ...
    @staticmethod
    def parseSatelliteSystem(string: str) -> 'SatelliteSystem': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SatelliteSystem': ...
    @staticmethod
    def values() -> typing.List['SatelliteSystem']: ...

class SignalCode(java.lang.Enum['SignalCode']):
    A: typing.ClassVar['SignalCode'] = ...
    B: typing.ClassVar['SignalCode'] = ...
    C: typing.ClassVar['SignalCode'] = ...
    D: typing.ClassVar['SignalCode'] = ...
    E: typing.ClassVar['SignalCode'] = ...
    I: typing.ClassVar['SignalCode'] = ...
    L: typing.ClassVar['SignalCode'] = ...
    M: typing.ClassVar['SignalCode'] = ...
    P: typing.ClassVar['SignalCode'] = ...
    Q: typing.ClassVar['SignalCode'] = ...
    S: typing.ClassVar['SignalCode'] = ...
    W: typing.ClassVar['SignalCode'] = ...
    X: typing.ClassVar['SignalCode'] = ...
    Y: typing.ClassVar['SignalCode'] = ...
    Z: typing.ClassVar['SignalCode'] = ...
    CODELESS: typing.ClassVar['SignalCode'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SignalCode': ...
    @staticmethod
    def values() -> typing.List['SignalCode']: ...

class TimeSystem(java.lang.Enum['TimeSystem']):
    GPS: typing.ClassVar['TimeSystem'] = ...
    GLONASS: typing.ClassVar['TimeSystem'] = ...
    GALILEO: typing.ClassVar['TimeSystem'] = ...
    TAI: typing.ClassVar['TimeSystem'] = ...
    UTC: typing.ClassVar['TimeSystem'] = ...
    QZSS: typing.ClassVar['TimeSystem'] = ...
    BEIDOU: typing.ClassVar['TimeSystem'] = ...
    IRNSS: typing.ClassVar['TimeSystem'] = ...
    UNKNOWN: typing.ClassVar['TimeSystem'] = ...
    def getKey(self) -> str: ...
    def getTimeScale(self, timeScales: org.orekit.time.TimeScales) -> org.orekit.time.TimeScale: ...
    @staticmethod
    def parseTimeSystem(string: str) -> 'TimeSystem': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TimeSystem': ...
    @staticmethod
    def values() -> typing.List['TimeSystem']: ...

class YUMAParser(org.orekit.data.AbstractSelfFeedingLoader, org.orekit.data.DataLoader):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScales: org.orekit.time.TimeScales): ...
    def getAlmanacs(self) -> java.util.List[org.orekit.propagation.analytical.gnss.data.GPSAlmanac]: ...
    def getPRNNumbers(self) -> java.util.List[int]: ...
    def getSupportedNames(self) -> str: ...
    @typing.overload
    def loadData(self) -> None: ...
    @typing.overload
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.gnss")``.

    AppliedDCBS: typing.Type[AppliedDCBS]
    AppliedPCVS: typing.Type[AppliedPCVS]
    CombinedObservationData: typing.Type[CombinedObservationData]
    CombinedObservationDataSet: typing.Type[CombinedObservationDataSet]
    DOP: typing.Type[DOP]
    DOPComputer: typing.Type[DOPComputer]
    Frequency: typing.Type[Frequency]
    HatanakaCompressFilter: typing.Type[HatanakaCompressFilter]
    MeasurementType: typing.Type[MeasurementType]
    ObservationData: typing.Type[ObservationData]
    ObservationDataSet: typing.Type[ObservationDataSet]
    ObservationType: typing.Type[ObservationType]
    RinexObservationHeader: typing.Type[RinexObservationHeader]
    RinexObservationLoader: typing.Type[RinexObservationLoader]
    SEMParser: typing.Type[SEMParser]
    SatelliteSystem: typing.Type[SatelliteSystem]
    SignalCode: typing.Type[SignalCode]
    TimeSystem: typing.Type[TimeSystem]
    YUMAParser: typing.Type[YUMAParser]
    antenna: org.orekit.gnss.antenna.__module_protocol__
    attitude: org.orekit.gnss.attitude.__module_protocol__
    clock: org.orekit.gnss.clock.__module_protocol__
    metric: org.orekit.gnss.metric.__module_protocol__
    navigation: org.orekit.gnss.navigation.__module_protocol__
