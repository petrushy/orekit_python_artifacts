import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.orekit.data
import org.orekit.time
import typing



class SinexLoader:
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource): ...
    @typing.overload
    def __init__(self, dataSource: org.orekit.data.DataSource, timeScale: org.orekit.time.TimeScale): ...
    def getStation(self, string: str) -> 'Station': ...
    def getStations(self) -> java.util.Map[str, 'Station']: ...

class Station:
    def __init__(self): ...
    def getDomes(self) -> str: ...
    def getEccRefSystem(self) -> 'Station.ReferenceSystem': ...
    def getEccentricities(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getPosition(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getSiteCode(self) -> str: ...
    def getValidFrom(self) -> org.orekit.time.AbsoluteDate: ...
    def getValidUntil(self) -> org.orekit.time.AbsoluteDate: ...
    def getVelocity(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def setDomes(self, string: str) -> None: ...
    def setEccRefSystem(self, referenceSystem: 'Station.ReferenceSystem') -> None: ...
    def setEccentricities(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setPosition(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    def setSiteCode(self, string: str) -> None: ...
    def setValidFrom(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setValidUntil(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setVelocity(self, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D) -> None: ...
    class ReferenceSystem(java.lang.Enum['Station.ReferenceSystem']):
        UNE: typing.ClassVar['Station.ReferenceSystem'] = ...
        XYZ: typing.ClassVar['Station.ReferenceSystem'] = ...
        @staticmethod
        def getEccRefSystem(string: str) -> 'Station.ReferenceSystem': ...
        def getName(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Station.ReferenceSystem': ...
        @staticmethod
        def values() -> typing.List['Station.ReferenceSystem']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.sinex")``.

    SinexLoader: typing.Type[SinexLoader]
    Station: typing.Type[Station]
