import java.lang
import java.util
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.time
import org.orekit.utils.units
import typing



class Generator(java.lang.AutoCloseable):
    def close(self) -> None: ...
    @typing.overload
    def dateToString(self, int: int, int2: int, int3: int, int4: int, int5: int, double: float) -> str: ...
    @typing.overload
    def dateToString(self, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate) -> str: ...
    def doubleToString(self, double: float) -> str: ...
    def endMessage(self, string: str) -> None: ...
    def enterSection(self, string: str) -> None: ...
    def exitSection(self) -> str: ...
    def getFormat(self) -> org.orekit.files.ccsds.utils.FileFormat: ...
    def getOutputName(self) -> str: ...
    def newLine(self) -> None: ...
    def siToCcsdsName(self, string: str) -> str: ...
    def startMessage(self, string: str, string2: str, double: float) -> None: ...
    def unitsListToString(self, list: java.util.List[org.orekit.utils.units.Unit]) -> str: ...
    def writeComments(self, list: java.util.List[str]) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, char: str, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, enum: java.lang.Enum[typing.Any], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, string2: str, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, list: java.util.List[str], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> None: ...
    @typing.overload
    def writeRawData(self, char: str) -> None: ...
    @typing.overload
    def writeRawData(self, charSequence: typing.Union[java.lang.CharSequence, str]) -> None: ...

_MessageWriter__H = typing.TypeVar('_MessageWriter__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
_MessageWriter__S = typing.TypeVar('_MessageWriter__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
_MessageWriter__F = typing.TypeVar('_MessageWriter__F', bound=org.orekit.files.ccsds.ndm.NdmConstituent)  # <F>
class MessageWriter(typing.Generic[_MessageWriter__H, _MessageWriter__S, _MessageWriter__F]):
    def writeFooter(self, generator: Generator) -> None: ...
    def writeHeader(self, generator: Generator, h: _MessageWriter__H) -> None: ...
    def writeMessage(self, generator: Generator, f: _MessageWriter__F) -> None: ...
    def writeSegment(self, generator: Generator, s2: _MessageWriter__S) -> None: ...

class AbstractGenerator(Generator):
    def __init__(self, appendable: java.lang.Appendable, string: str, boolean: bool): ...
    def close(self) -> None: ...
    @typing.overload
    def dateToString(self, int: int, int2: int, int3: int, int4: int, int5: int, double: float) -> str: ...
    @typing.overload
    def dateToString(self, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate) -> str: ...
    def doubleToString(self, double: float) -> str: ...
    def enterSection(self, string: str) -> None: ...
    def exitSection(self) -> str: ...
    def getOutputName(self) -> str: ...
    def newLine(self) -> None: ...
    def siToCcsdsName(self, string: str) -> str: ...
    def unitsListToString(self, list: java.util.List[org.orekit.utils.units.Unit]) -> str: ...
    @typing.overload
    def writeEntry(self, string: str, string2: str, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, char: str, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, enum: java.lang.Enum[typing.Any], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, list: java.util.List[str], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> None: ...
    @typing.overload
    def writeRawData(self, char: str) -> None: ...
    @typing.overload
    def writeRawData(self, charSequence: typing.Union[java.lang.CharSequence, str]) -> None: ...
    def writeUnits(self, unit: org.orekit.utils.units.Unit) -> bool: ...

_AbstractMessageWriter__H = typing.TypeVar('_AbstractMessageWriter__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
_AbstractMessageWriter__S = typing.TypeVar('_AbstractMessageWriter__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
_AbstractMessageWriter__F = typing.TypeVar('_AbstractMessageWriter__F', bound=org.orekit.files.ccsds.ndm.NdmConstituent)  # <F>
class AbstractMessageWriter(MessageWriter[_AbstractMessageWriter__H, _AbstractMessageWriter__S, _AbstractMessageWriter__F], typing.Generic[_AbstractMessageWriter__H, _AbstractMessageWriter__S, _AbstractMessageWriter__F]):
    DEFAULT_ORIGINATOR: typing.ClassVar[str] = ...
    def __init__(self, string: str, string2: str, double: float, contextBinding: org.orekit.files.ccsds.utils.ContextBinding): ...
    def getContext(self) -> org.orekit.files.ccsds.utils.ContextBinding: ...
    def getDefaultVersion(self) -> float: ...
    def getTimeConverter(self) -> org.orekit.files.ccsds.definitions.TimeConverter: ...
    def setContext(self, contextBinding: org.orekit.files.ccsds.utils.ContextBinding) -> None: ...
    def writeFooter(self, generator: Generator) -> None: ...
    def writeHeader(self, generator: Generator, h: _AbstractMessageWriter__H) -> None: ...
    def writeSegment(self, generator: Generator, s2: _AbstractMessageWriter__S) -> None: ...
    def writeSegmentContent(self, generator: Generator, double: float, s2: _AbstractMessageWriter__S) -> None: ...

class PythonGenerator(Generator):
    def __init__(self): ...
    def close(self) -> None: ...
    @typing.overload
    def dateToString(self, int: int, int2: int, int3: int, int4: int, int5: int, double: float) -> str: ...
    @typing.overload
    def dateToString(self, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate) -> str: ...
    def doubleToString(self, double: float) -> str: ...
    def endMessage(self, string: str) -> None: ...
    def enterSection(self, string: str) -> None: ...
    def exitSection(self) -> str: ...
    def finalize(self) -> None: ...
    def getFormat(self) -> org.orekit.files.ccsds.utils.FileFormat: ...
    def getOutputName(self) -> str: ...
    def newLine(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def siToCcsdsName(self, string: str) -> str: ...
    def startMessage(self, string: str, string2: str, double: float) -> None: ...
    def unitsListToString(self, list: java.util.List[org.orekit.utils.units.Unit]) -> str: ...
    def writeComments(self, list: java.util.List[str]) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, char: str, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, enum: java.lang.Enum[typing.Any], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, string2: str, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, list: java.util.List[str], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> None: ...
    @typing.overload
    def writeRawData(self, char: str) -> None: ...
    @typing.overload
    def writeRawData(self, charSequence: typing.Union[java.lang.CharSequence, str]) -> None: ...

_PythonMessageWriter__H = typing.TypeVar('_PythonMessageWriter__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
_PythonMessageWriter__S = typing.TypeVar('_PythonMessageWriter__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
_PythonMessageWriter__F = typing.TypeVar('_PythonMessageWriter__F', bound=org.orekit.files.ccsds.ndm.NdmConstituent)  # <F>
class PythonMessageWriter(MessageWriter[_PythonMessageWriter__H, _PythonMessageWriter__S, _PythonMessageWriter__F], typing.Generic[_PythonMessageWriter__H, _PythonMessageWriter__S, _PythonMessageWriter__F]):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def writeFooter(self, generator: Generator) -> None: ...
    def writeHeader(self, generator: Generator, h: _PythonMessageWriter__H) -> None: ...
    def writeSegment(self, generator: Generator, s2: _PythonMessageWriter__S) -> None: ...

class KvnGenerator(AbstractGenerator):
    def __init__(self, appendable: java.lang.Appendable, int: int, string: str, int2: int): ...
    def endMessage(self, string: str) -> None: ...
    def enterSection(self, string: str) -> None: ...
    def exitSection(self) -> str: ...
    def getFormat(self) -> org.orekit.files.ccsds.utils.FileFormat: ...
    def startMessage(self, string: str, string2: str, double: float) -> None: ...
    def writeComments(self, list: java.util.List[str]) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, char: str, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, enum: java.lang.Enum[typing.Any], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, list: java.util.List[str], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, string2: str, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...

class PythonAbstractGenerator(AbstractGenerator):
    def __init__(self, appendable: java.lang.Appendable, string: str, boolean: bool): ...
    def endMessage(self, string: str) -> None: ...
    def finalize(self) -> None: ...
    def getFormat(self) -> org.orekit.files.ccsds.utils.FileFormat: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def startMessage(self, string: str, string2: str, double: float) -> None: ...
    def writeComments(self, list: java.util.List[str]) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, string2: str, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, char: str, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, enum: java.lang.Enum[typing.Any], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, list: java.util.List[str], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> None: ...

_PythonAbstractMessageWriter__H = typing.TypeVar('_PythonAbstractMessageWriter__H', bound=org.orekit.files.ccsds.section.Header)  # <H>
_PythonAbstractMessageWriter__S = typing.TypeVar('_PythonAbstractMessageWriter__S', bound=org.orekit.files.ccsds.section.Segment)  # <S>
_PythonAbstractMessageWriter__F = typing.TypeVar('_PythonAbstractMessageWriter__F', bound=org.orekit.files.ccsds.ndm.NdmConstituent)  # <F>
class PythonAbstractMessageWriter(AbstractMessageWriter[_PythonAbstractMessageWriter__H, _PythonAbstractMessageWriter__S, _PythonAbstractMessageWriter__F], typing.Generic[_PythonAbstractMessageWriter__H, _PythonAbstractMessageWriter__S, _PythonAbstractMessageWriter__F]):
    def __init__(self, string: str, string2: str, double: float, contextBinding: org.orekit.files.ccsds.utils.ContextBinding): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def writeSegmentContent(self, generator: Generator, double: float, s2: _PythonAbstractMessageWriter__S) -> None: ...

class XmlGenerator(AbstractGenerator):
    DEFAULT_INDENT: typing.ClassVar[int] = ...
    UNITS: typing.ClassVar[str] = ...
    def __init__(self, appendable: java.lang.Appendable, int: int, string: str, boolean: bool): ...
    def endMessage(self, string: str) -> None: ...
    def enterSection(self, string: str) -> None: ...
    def exitSection(self) -> str: ...
    def getFormat(self) -> org.orekit.files.ccsds.utils.FileFormat: ...
    def startMessage(self, string: str, string2: str, double: float) -> None: ...
    def writeComments(self, list: java.util.List[str]) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, char: str, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, double: float, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, enum: java.lang.Enum[typing.Any], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, list: java.util.List[str], boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, timeConverter: org.orekit.files.ccsds.definitions.TimeConverter, absoluteDate: org.orekit.time.AbsoluteDate, boolean: bool) -> None: ...
    @typing.overload
    def writeEntry(self, string: str, string2: str, unit: org.orekit.utils.units.Unit, boolean: bool) -> None: ...
    def writeOneAttributeElement(self, string: str, string2: str, string3: str, string4: str) -> None: ...
    def writeTwoAttributesElement(self, string: str, string2: str, string3: str, string4: str, string5: str, string6: str) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.utils.generation")``.

    AbstractGenerator: typing.Type[AbstractGenerator]
    AbstractMessageWriter: typing.Type[AbstractMessageWriter]
    Generator: typing.Type[Generator]
    KvnGenerator: typing.Type[KvnGenerator]
    MessageWriter: typing.Type[MessageWriter]
    PythonAbstractGenerator: typing.Type[PythonAbstractGenerator]
    PythonAbstractMessageWriter: typing.Type[PythonAbstractMessageWriter]
    PythonGenerator: typing.Type[PythonGenerator]
    PythonMessageWriter: typing.Type[PythonMessageWriter]
    XmlGenerator: typing.Type[XmlGenerator]
