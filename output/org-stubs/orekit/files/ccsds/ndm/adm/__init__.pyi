import java.lang
import java.util
import org.hipparchus
import org.hipparchus.geometry.euclidean.threed
import org.orekit.attitudes
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.ndm.adm.aem
import org.orekit.files.ccsds.ndm.adm.apm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.ccsds.utils.parsing
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import org.xml.sax
import typing



class AdmMetadata(org.orekit.files.ccsds.section.Metadata):
    def __init__(self): ...
    def getCenter(self) -> org.orekit.files.ccsds.definitions.BodyFacade: ...
    def getHasCreatableBody(self) -> bool: ...
    def getLaunchNumber(self) -> int: ...
    def getLaunchPiece(self) -> str: ...
    def getLaunchYear(self) -> int: ...
    def getObjectID(self) -> str: ...
    def getObjectName(self) -> str: ...
    def setCenter(self, bodyFacade: org.orekit.files.ccsds.definitions.BodyFacade) -> None: ...
    def setObjectID(self, string: str) -> None: ...
    def setObjectName(self, string: str) -> None: ...
    def validate(self, double: float) -> None: ...

class AdmMetadataKey(java.lang.Enum['AdmMetadataKey']):
    OBJECT_NAME: typing.ClassVar['AdmMetadataKey'] = ...
    OBJECT_ID: typing.ClassVar['AdmMetadataKey'] = ...
    CENTER_NAME: typing.ClassVar['AdmMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, admMetadata: AdmMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AdmMetadataKey': ...
    @staticmethod
    def values() -> typing.List['AdmMetadataKey']: ...

class AdmMetadataWriter(org.orekit.files.ccsds.section.AbstractWriter):
    def __init__(self, admMetadata: AdmMetadata): ...

_AdmParser__T = typing.TypeVar('_AdmParser__T', bound=org.orekit.files.ccsds.ndm.NdmConstituent)  # <T>
_AdmParser__P = typing.TypeVar('_AdmParser__P', bound=org.orekit.files.ccsds.utils.parsing.AbstractConstituentParser)  # <P>
class AdmParser(org.orekit.files.ccsds.utils.parsing.AbstractConstituentParser[_AdmParser__T, _AdmParser__P], typing.Generic[_AdmParser__T, _AdmParser__P]):
    def getMissionReferenceDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getSpecialXmlElementsBuilders(self) -> java.util.Map[str, org.orekit.files.ccsds.utils.lexical.XmlTokenBuilder]: ...
    @staticmethod
    def processRotationOrder(parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, rotationOrderConsumer: 'AdmParser.RotationOrderConsumer') -> bool: ...
    class RotationOrderConsumer:
        def accept(self, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder) -> None: ...

class AttitudeEndoints(org.orekit.attitudes.AttitudeBuilder):
    A2B: typing.ClassVar[str] = ...
    B2A: typing.ClassVar[str] = ...
    def __init__(self): ...
    _build_1__T = typing.TypeVar('_build_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def build(self, frame: org.orekit.frames.Frame, pVCoordinatesProvider: org.orekit.utils.PVCoordinatesProvider, timeStampedAngularCoordinates: org.orekit.utils.TimeStampedAngularCoordinates) -> org.orekit.attitudes.Attitude: ...
    @typing.overload
    def build(self, frame: org.orekit.frames.Frame, fieldPVCoordinatesProvider: org.orekit.utils.FieldPVCoordinatesProvider[_build_1__T], timeStampedFieldAngularCoordinates: org.orekit.utils.TimeStampedFieldAngularCoordinates[_build_1__T]) -> org.orekit.attitudes.FieldAttitude[_build_1__T]: ...
    def checkExternalFrame(self, enum: java.lang.Enum[typing.Any], enum2: java.lang.Enum[typing.Any]) -> None: ...
    def checkMandatoryEntriesExceptExternalFrame(self, enum: java.lang.Enum[typing.Any], enum2: java.lang.Enum[typing.Any], enum3: java.lang.Enum[typing.Any]) -> None: ...
    def getExternalFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getFrameA(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getFrameB(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def getSpacecraftBodyFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def isA2b(self) -> bool: ...
    def isCompatibleWith(self, attitudeEndoints: 'AttitudeEndoints') -> bool: ...
    def isExternal2SpacecraftBody(self) -> bool: ...
    def setA2b(self, boolean: bool) -> None: ...
    def setFrameA(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def setFrameB(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def toString(self) -> str: ...

class AttitudeType(java.lang.Enum['AttitudeType']):
    QUATERNION: typing.ClassVar['AttitudeType'] = ...
    QUATERNION_DERIVATIVE: typing.ClassVar['AttitudeType'] = ...
    QUATERNION_RATE: typing.ClassVar['AttitudeType'] = ...
    EULER_ANGLE: typing.ClassVar['AttitudeType'] = ...
    EULER_ANGLE_RATE: typing.ClassVar['AttitudeType'] = ...
    SPIN: typing.ClassVar['AttitudeType'] = ...
    SPIN_NUTATION: typing.ClassVar['AttitudeType'] = ...
    def build(self, boolean: bool, boolean2: bool, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder, boolean3: bool, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float]) -> org.orekit.utils.TimeStampedAngularCoordinates: ...
    def createDataFields(self, boolean: bool, boolean2: bool, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder, boolean3: bool, timeStampedAngularCoordinates: org.orekit.utils.TimeStampedAngularCoordinates) -> typing.List[str]: ...
    def getAngularDerivativesFilter(self) -> org.orekit.utils.AngularDerivativesFilter: ...
    def parse(self, boolean: bool, boolean2: bool, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder, boolean3: bool, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, stringArray: typing.List[str]) -> org.orekit.utils.TimeStampedAngularCoordinates: ...
    @staticmethod
    def parseType(string: str) -> 'AttitudeType': ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeType': ...
    @staticmethod
    def values() -> typing.List['AttitudeType']: ...

class RotationXmlTokenBuilder(org.orekit.files.ccsds.utils.lexical.XmlTokenBuilder):
    def __init__(self): ...
    def buildTokens(self, boolean: bool, string: str, string2: str, attributes: org.xml.sax.Attributes, int: int, string3: str) -> java.util.List[org.orekit.files.ccsds.utils.lexical.ParseToken]: ...

_PythonAdmParser__T = typing.TypeVar('_PythonAdmParser__T', bound=org.orekit.files.ccsds.ndm.NdmConstituent)  # <T>
_PythonAdmParser__P = typing.TypeVar('_PythonAdmParser__P', bound=org.orekit.files.ccsds.utils.parsing.AbstractConstituentParser)  # <P>
class PythonAdmParser(AdmParser[_PythonAdmParser__T, _PythonAdmParser__P], typing.Generic[_PythonAdmParser__T, _PythonAdmParser__P]):
    def build(self) -> _PythonAdmParser__T: ...
    def finalize(self) -> None: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> org.orekit.files.ccsds.section.Header: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.adm")``.

    AdmMetadata: typing.Type[AdmMetadata]
    AdmMetadataKey: typing.Type[AdmMetadataKey]
    AdmMetadataWriter: typing.Type[AdmMetadataWriter]
    AdmParser: typing.Type[AdmParser]
    AttitudeEndoints: typing.Type[AttitudeEndoints]
    AttitudeType: typing.Type[AttitudeType]
    PythonAdmParser: typing.Type[PythonAdmParser]
    RotationXmlTokenBuilder: typing.Type[RotationXmlTokenBuilder]
    aem: org.orekit.files.ccsds.ndm.adm.aem.__module_protocol__
    apm: org.orekit.files.ccsds.ndm.adm.apm.__module_protocol__
