import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.orekit.attitudes
import org.orekit.data
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.ndm.adm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.files.general
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.sampling
import org.orekit.time
import org.orekit.utils
import typing



class Aem(org.orekit.files.ccsds.ndm.NdmConstituent[org.orekit.files.ccsds.section.Header, 'AemSegment'], org.orekit.files.general.AttitudeEphemerisFile[org.orekit.utils.TimeStampedAngularCoordinates, 'AemSegment']):
    ROOT: typing.ClassVar[str] = ...
    FORMAT_VERSION_KEY: typing.ClassVar[str] = ...
    def __init__(self, header: org.orekit.files.ccsds.section.Header, list: java.util.List['AemSegment'], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext): ...
    def checkTimeSystems(self) -> None: ...
    def getSatellites(self) -> java.util.Map[str, 'AemSatelliteEphemeris']: ...

class AemData(org.orekit.files.ccsds.section.CommentsContainer, org.orekit.files.ccsds.section.Data):
    def __init__(self): ...
    def addData(self, timeStampedAngularCoordinates: org.orekit.utils.TimeStampedAngularCoordinates) -> bool: ...
    def getAngularCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedAngularCoordinates]: ...

class AemMetadata(org.orekit.files.ccsds.ndm.adm.AdmMetadata):
    def __init__(self, int: int): ...
    def getAttitudeType(self) -> org.orekit.files.ccsds.ndm.adm.AttitudeType: ...
    def getEndpoints(self) -> org.orekit.files.ccsds.ndm.adm.AttitudeEndoints: ...
    def getEulerRotSeq(self) -> org.hipparchus.geometry.euclidean.threed.RotationOrder: ...
    def getInterpolationDegree(self) -> int: ...
    def getInterpolationMethod(self) -> str: ...
    def getInterpolationSamples(self) -> int: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    def getStopTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getUseableStartTime(self) -> org.orekit.time.AbsoluteDate: ...
    def getUseableStopTime(self) -> org.orekit.time.AbsoluteDate: ...
    def isFirst(self) -> bool: ...
    def isSpacecraftBodyRate(self) -> bool: ...
    def rateFrameIsA(self) -> bool: ...
    def setAttitudeType(self, attitudeType: org.orekit.files.ccsds.ndm.adm.AttitudeType) -> None: ...
    def setEulerRotSeq(self, rotationOrder: org.hipparchus.geometry.euclidean.threed.RotationOrder) -> None: ...
    def setInterpolationDegree(self, int: int) -> None: ...
    def setInterpolationMethod(self, string: str) -> None: ...
    def setIsFirst(self, boolean: bool) -> None: ...
    def setRateFrameIsA(self, boolean: bool) -> None: ...
    def setStartTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setStopTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setUseableStartTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setUseableStopTime(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def validate(self, double: float) -> None: ...

class AemMetadataKey(java.lang.Enum['AemMetadataKey']):
    REF_FRAME_A: typing.ClassVar['AemMetadataKey'] = ...
    REF_FRAME_B: typing.ClassVar['AemMetadataKey'] = ...
    ATTITUDE_DIR: typing.ClassVar['AemMetadataKey'] = ...
    START_TIME: typing.ClassVar['AemMetadataKey'] = ...
    STOP_TIME: typing.ClassVar['AemMetadataKey'] = ...
    USEABLE_START_TIME: typing.ClassVar['AemMetadataKey'] = ...
    USEABLE_STOP_TIME: typing.ClassVar['AemMetadataKey'] = ...
    ATTITUDE_TYPE: typing.ClassVar['AemMetadataKey'] = ...
    QUATERNION_TYPE: typing.ClassVar['AemMetadataKey'] = ...
    EULER_ROT_SEQ: typing.ClassVar['AemMetadataKey'] = ...
    RATE_FRAME: typing.ClassVar['AemMetadataKey'] = ...
    INTERPOLATION_METHOD: typing.ClassVar['AemMetadataKey'] = ...
    INTERPOLATION_DEGREE: typing.ClassVar['AemMetadataKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, aemMetadata: AemMetadata) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AemMetadataKey': ...
    @staticmethod
    def values() -> typing.List['AemMetadataKey']: ...

class AemParser(org.orekit.files.ccsds.ndm.adm.AdmParser[Aem, 'AemParser'], org.orekit.files.general.AttitudeEphemerisFileParser[Aem]):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate, int: int, parsedUnitsBehavior: org.orekit.files.ccsds.ndm.ParsedUnitsBehavior): ...
    def build(self) -> Aem: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> org.orekit.files.ccsds.section.Header: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> Aem: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class AemSatelliteEphemeris(org.orekit.files.general.AttitudeEphemerisFile.SatelliteAttitudeEphemeris[org.orekit.utils.TimeStampedAngularCoordinates, 'AemSegment']):
    def __init__(self, string: str, list: java.util.List['AemSegment']): ...
    def getId(self) -> str: ...
    def getSegments(self) -> java.util.List['AemSegment']: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class AemSegment(org.orekit.files.ccsds.section.Segment[AemMetadata, AemData], org.orekit.files.general.AttitudeEphemerisFile.AttitudeEphemerisSegment[org.orekit.utils.TimeStampedAngularCoordinates]):
    def __init__(self, aemMetadata: AemMetadata, aemData: AemData): ...
    def getAngularCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedAngularCoordinates]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.AngularDerivativesFilter: ...
    def getInterpolationMethod(self) -> str: ...
    def getInterpolationSamples(self) -> int: ...
    def getReferenceFrame(self) -> org.orekit.frames.Frame: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class AemWriter(org.orekit.files.ccsds.utils.generation.AbstractMessageWriter[org.orekit.files.ccsds.section.Header, AemSegment, Aem]):
    CCSDS_AEM_VERS: typing.ClassVar[float] = ...
    KVN_PADDING_WIDTH: typing.ClassVar[int] = ...
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def writeSegmentContent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, double: float, aemSegment: AemSegment) -> None: ...

class AttitudeEntryKey(java.lang.Enum['AttitudeEntryKey']):
    quaternionState: typing.ClassVar['AttitudeEntryKey'] = ...
    quaternionDerivative: typing.ClassVar['AttitudeEntryKey'] = ...
    quaternionEulerRate: typing.ClassVar['AttitudeEntryKey'] = ...
    eulerAngle: typing.ClassVar['AttitudeEntryKey'] = ...
    eulerAngleRate: typing.ClassVar['AttitudeEntryKey'] = ...
    spin: typing.ClassVar['AttitudeEntryKey'] = ...
    spinNutation: typing.ClassVar['AttitudeEntryKey'] = ...
    quaternion: typing.ClassVar['AttitudeEntryKey'] = ...
    quaternionRate: typing.ClassVar['AttitudeEntryKey'] = ...
    rotationAngles: typing.ClassVar['AttitudeEntryKey'] = ...
    rotationRates: typing.ClassVar['AttitudeEntryKey'] = ...
    EPOCH: typing.ClassVar['AttitudeEntryKey'] = ...
    Q1: typing.ClassVar['AttitudeEntryKey'] = ...
    Q2: typing.ClassVar['AttitudeEntryKey'] = ...
    Q3: typing.ClassVar['AttitudeEntryKey'] = ...
    QC: typing.ClassVar['AttitudeEntryKey'] = ...
    Q1_DOT: typing.ClassVar['AttitudeEntryKey'] = ...
    Q2_DOT: typing.ClassVar['AttitudeEntryKey'] = ...
    Q3_DOT: typing.ClassVar['AttitudeEntryKey'] = ...
    QC_DOT: typing.ClassVar['AttitudeEntryKey'] = ...
    X_ANGLE: typing.ClassVar['AttitudeEntryKey'] = ...
    Y_ANGLE: typing.ClassVar['AttitudeEntryKey'] = ...
    Z_ANGLE: typing.ClassVar['AttitudeEntryKey'] = ...
    X_RATE: typing.ClassVar['AttitudeEntryKey'] = ...
    Y_RATE: typing.ClassVar['AttitudeEntryKey'] = ...
    Z_RATE: typing.ClassVar['AttitudeEntryKey'] = ...
    SPIN_ALPHA: typing.ClassVar['AttitudeEntryKey'] = ...
    SPIN_DELTA: typing.ClassVar['AttitudeEntryKey'] = ...
    SPIN_ANGLE: typing.ClassVar['AttitudeEntryKey'] = ...
    SPIN_ANGLE_VEL: typing.ClassVar['AttitudeEntryKey'] = ...
    NUTATION: typing.ClassVar['AttitudeEntryKey'] = ...
    NUTATION_PER: typing.ClassVar['AttitudeEntryKey'] = ...
    NUTATION_PHASE: typing.ClassVar['AttitudeEntryKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, attitudeEntry: 'AttitudeEntry') -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AttitudeEntryKey': ...
    @staticmethod
    def values() -> typing.List['AttitudeEntryKey']: ...

class AttitudeWriter(org.orekit.files.general.AttitudeEphemerisFileWriter):
    def __init__(self, aemWriter: AemWriter, header: org.orekit.files.ccsds.section.Header, aemMetadata: AemMetadata, fileFormat: org.orekit.files.ccsds.utils.FileFormat, string: str, int: int): ...
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=org.orekit.files.general.AttitudeEphemerisFile.AttitudeEphemerisSegment)  # <S>
    _write_1__C = typing.TypeVar('_write_1__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
    _write_1__S = typing.TypeVar('_write_1__S', bound=org.orekit.files.general.AttitudeEphemerisFile.AttitudeEphemerisSegment)  # <S>
    @typing.overload
    def write(self, string: str, attitudeEphemerisFile: org.orekit.files.general.AttitudeEphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, appendable: java.lang.Appendable, attitudeEphemerisFile: org.orekit.files.general.AttitudeEphemerisFile[_write_1__C, _write_1__S]) -> None: ...

class StreamingAemWriter(java.lang.AutoCloseable):
    def __init__(self, generator: org.orekit.files.ccsds.utils.generation.Generator, aemWriter: AemWriter, header: org.orekit.files.ccsds.section.Header, aemMetadata: AemMetadata): ...
    def close(self) -> None: ...
    def newSegment(self) -> 'StreamingAemWriter.SegmentWriter': ...
    class SegmentWriter(org.orekit.propagation.sampling.OrekitFixedStepHandler):
        def __init__(self, streamingAemWriter: 'StreamingAemWriter'): ...
        def finish(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def handleStep(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def init(self, spacecraftState: org.orekit.propagation.SpacecraftState, absoluteDate: org.orekit.time.AbsoluteDate, double: float) -> None: ...

class AttitudeEntry: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.adm.aem")``.

    Aem: typing.Type[Aem]
    AemData: typing.Type[AemData]
    AemMetadata: typing.Type[AemMetadata]
    AemMetadataKey: typing.Type[AemMetadataKey]
    AemParser: typing.Type[AemParser]
    AemSatelliteEphemeris: typing.Type[AemSatelliteEphemeris]
    AemSegment: typing.Type[AemSegment]
    AemWriter: typing.Type[AemWriter]
    AttitudeEntry: typing.Type[AttitudeEntry]
    AttitudeEntryKey: typing.Type[AttitudeEntryKey]
    AttitudeWriter: typing.Type[AttitudeWriter]
    StreamingAemWriter: typing.Type[StreamingAemWriter]
