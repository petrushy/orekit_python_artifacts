import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.orekit.data
import org.orekit.files.ccsds.definitions
import org.orekit.files.ccsds.ndm
import org.orekit.files.ccsds.ndm.odm
import org.orekit.files.ccsds.section
import org.orekit.files.ccsds.utils
import org.orekit.files.ccsds.utils.generation
import org.orekit.files.ccsds.utils.lexical
import org.orekit.orbits
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import typing



class Maneuver(org.orekit.files.ccsds.section.CommentsContainer):
    def __init__(self): ...
    def completed(self) -> bool: ...
    def getDV(self) -> org.hipparchus.geometry.euclidean.threed.Vector3D: ...
    def getDeltaMass(self) -> float: ...
    def getDuration(self) -> float: ...
    def getEpochIgnition(self) -> org.orekit.time.AbsoluteDate: ...
    def getReferenceFrame(self) -> org.orekit.files.ccsds.definitions.FrameFacade: ...
    def setDV(self, int: int, double: float) -> None: ...
    def setDeltaMass(self, double: float) -> None: ...
    def setDuration(self, double: float) -> None: ...
    def setEpochIgnition(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setReferenceFrame(self, frameFacade: org.orekit.files.ccsds.definitions.FrameFacade) -> None: ...
    def validate(self, double: float) -> None: ...

class ManeuverKey(java.lang.Enum['ManeuverKey']):
    COMMENT: typing.ClassVar['ManeuverKey'] = ...
    MAN_EPOCH_IGNITION: typing.ClassVar['ManeuverKey'] = ...
    MAN_REF_FRAME: typing.ClassVar['ManeuverKey'] = ...
    MAN_DURATION: typing.ClassVar['ManeuverKey'] = ...
    MAN_DELTA_MASS: typing.ClassVar['ManeuverKey'] = ...
    MAN_DV_1: typing.ClassVar['ManeuverKey'] = ...
    MAN_DV_2: typing.ClassVar['ManeuverKey'] = ...
    MAN_DV_3: typing.ClassVar['ManeuverKey'] = ...
    def process(self, parseToken: org.orekit.files.ccsds.utils.lexical.ParseToken, contextBinding: org.orekit.files.ccsds.utils.ContextBinding, maneuver: Maneuver) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ManeuverKey': ...
    @staticmethod
    def values() -> typing.List['ManeuverKey']: ...

class Opm(org.orekit.files.ccsds.ndm.NdmConstituent[org.orekit.files.ccsds.section.Header, org.orekit.files.ccsds.section.Segment[org.orekit.files.ccsds.ndm.odm.CommonMetadata, 'OpmData']], org.orekit.time.TimeStamped):
    ROOT: typing.ClassVar[str] = ...
    FORMAT_VERSION_KEY: typing.ClassVar[str] = ...
    def __init__(self, header: org.orekit.files.ccsds.section.Header, list: java.util.List[org.orekit.files.ccsds.section.Segment[org.orekit.files.ccsds.ndm.odm.CommonMetadata, 'OpmData']], iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext, double: float): ...
    def generateCartesianOrbit(self) -> org.orekit.orbits.CartesianOrbit: ...
    def generateKeplerianOrbit(self) -> org.orekit.orbits.KeplerianOrbit: ...
    def generateSpacecraftState(self) -> org.orekit.propagation.SpacecraftState: ...
    def getData(self) -> 'OpmData': ...
    def getDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getManeuver(self, int: int) -> Maneuver: ...
    def getManeuvers(self) -> java.util.List[Maneuver]: ...
    def getMetadata(self) -> org.orekit.files.ccsds.ndm.odm.CommonMetadata: ...
    def getNbManeuvers(self) -> int: ...
    def getPVCoordinates(self) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def hasManeuvers(self) -> bool: ...

class OpmData(org.orekit.files.ccsds.section.Data):
    def __init__(self, stateVector: org.orekit.files.ccsds.ndm.odm.StateVector, keplerianElements: org.orekit.files.ccsds.ndm.odm.KeplerianElements, spacecraftParameters: org.orekit.files.ccsds.ndm.odm.SpacecraftParameters, cartesianCovariance: org.orekit.files.ccsds.ndm.odm.CartesianCovariance, list: java.util.List[Maneuver], userDefined: org.orekit.files.ccsds.ndm.odm.UserDefined, double: float): ...
    def getCovarianceBlock(self) -> org.orekit.files.ccsds.ndm.odm.CartesianCovariance: ...
    def getKeplerianElementsBlock(self) -> org.orekit.files.ccsds.ndm.odm.KeplerianElements: ...
    def getManeuver(self, int: int) -> Maneuver: ...
    def getManeuvers(self) -> java.util.List[Maneuver]: ...
    def getMass(self) -> float: ...
    def getNbManeuvers(self) -> int: ...
    def getSpacecraftParametersBlock(self) -> org.orekit.files.ccsds.ndm.odm.SpacecraftParameters: ...
    def getStateVectorBlock(self) -> org.orekit.files.ccsds.ndm.odm.StateVector: ...
    def getUserDefinedBlock(self) -> org.orekit.files.ccsds.ndm.odm.UserDefined: ...
    def hasManeuvers(self) -> bool: ...
    def validate(self, double: float) -> None: ...

class OpmParser(org.orekit.files.ccsds.ndm.odm.OdmParser[Opm, 'OpmParser']):
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, parsedUnitsBehavior: org.orekit.files.ccsds.ndm.ParsedUnitsBehavior): ...
    def build(self) -> Opm: ...
    def finalizeData(self) -> bool: ...
    def finalizeHeader(self) -> bool: ...
    def finalizeMetadata(self) -> bool: ...
    def getHeader(self) -> org.orekit.files.ccsds.section.Header: ...
    def getSpecialXmlElementsBuilders(self) -> java.util.Map[str, org.orekit.files.ccsds.utils.lexical.XmlTokenBuilder]: ...
    def inData(self) -> bool: ...
    def inHeader(self) -> bool: ...
    def inMetadata(self) -> bool: ...
    def prepareData(self) -> bool: ...
    def prepareHeader(self) -> bool: ...
    def prepareMetadata(self) -> bool: ...
    def reset(self, fileFormat: org.orekit.files.ccsds.utils.FileFormat) -> None: ...

class OpmWriter(org.orekit.files.ccsds.utils.generation.AbstractMessageWriter[org.orekit.files.ccsds.section.Header, org.orekit.files.ccsds.section.Segment[org.orekit.files.ccsds.ndm.odm.CommonMetadata, OpmData], Opm]):
    CCSDS_OPM_VERS: typing.ClassVar[float] = ...
    KVN_PADDING_WIDTH: typing.ClassVar[int] = ...
    def __init__(self, iERSConventions: org.orekit.utils.IERSConventions, dataContext: org.orekit.data.DataContext, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def writeSegmentContent(self, generator: org.orekit.files.ccsds.utils.generation.Generator, double: float, segment: org.orekit.files.ccsds.section.Segment[org.orekit.files.ccsds.ndm.odm.CommonMetadata, OpmData]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.ndm.odm.opm")``.

    Maneuver: typing.Type[Maneuver]
    ManeuverKey: typing.Type[ManeuverKey]
    Opm: typing.Type[Opm]
    OpmData: typing.Type[OpmData]
    OpmParser: typing.Type[OpmParser]
    OpmWriter: typing.Type[OpmWriter]
