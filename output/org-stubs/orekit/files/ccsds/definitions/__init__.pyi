import java.lang
import java.util
import org.orekit.bodies
import org.orekit.data
import org.orekit.files.ccsds.utils
import org.orekit.frames
import org.orekit.time
import org.orekit.utils
import org.orekit.utils.units
import typing



class BodyFacade:
    def __init__(self, string: str, celestialBody: org.orekit.bodies.CelestialBody): ...
    def getBody(self) -> org.orekit.bodies.CelestialBody: ...
    def getName(self) -> str: ...

class CelestialBodyFrame(java.lang.Enum['CelestialBodyFrame']):
    EME2000: typing.ClassVar['CelestialBodyFrame'] = ...
    J2000: typing.ClassVar['CelestialBodyFrame'] = ...
    GCRF: typing.ClassVar['CelestialBodyFrame'] = ...
    GRC: typing.ClassVar['CelestialBodyFrame'] = ...
    GTOD: typing.ClassVar['CelestialBodyFrame'] = ...
    ICRF: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF2014: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF2008: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF2005: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF2000: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1997: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1996: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1994: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1993: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1992: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1991: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1990: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1989: typing.ClassVar['CelestialBodyFrame'] = ...
    ITRF1988: typing.ClassVar['CelestialBodyFrame'] = ...
    MCI: typing.ClassVar['CelestialBodyFrame'] = ...
    TDR: typing.ClassVar['CelestialBodyFrame'] = ...
    TEME: typing.ClassVar['CelestialBodyFrame'] = ...
    TOD: typing.ClassVar['CelestialBodyFrame'] = ...
    def getFrame(self, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext) -> org.orekit.frames.Frame: ...
    @staticmethod
    def guessFrame(frame: org.orekit.frames.Frame) -> str: ...
    @staticmethod
    def map(frame: org.orekit.frames.Frame) -> 'CelestialBodyFrame': ...
    @staticmethod
    def parse(string: str) -> 'CelestialBodyFrame': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CelestialBodyFrame': ...
    @staticmethod
    def values() -> typing.List['CelestialBodyFrame']: ...

class CenterName(java.lang.Enum['CenterName']):
    SOLAR_SYSTEM_BARYCENTER: typing.ClassVar['CenterName'] = ...
    SUN: typing.ClassVar['CenterName'] = ...
    MERCURY: typing.ClassVar['CenterName'] = ...
    VENUS: typing.ClassVar['CenterName'] = ...
    EARTH_MOON: typing.ClassVar['CenterName'] = ...
    EARTH: typing.ClassVar['CenterName'] = ...
    MOON: typing.ClassVar['CenterName'] = ...
    MARS: typing.ClassVar['CenterName'] = ...
    JUPITER: typing.ClassVar['CenterName'] = ...
    SATURN: typing.ClassVar['CenterName'] = ...
    URANUS: typing.ClassVar['CenterName'] = ...
    NEPTUNE: typing.ClassVar['CenterName'] = ...
    PLUTO: typing.ClassVar['CenterName'] = ...
    @typing.overload
    def getCelestialBody(self) -> org.orekit.bodies.CelestialBody: ...
    @typing.overload
    def getCelestialBody(self, celestialBodies: org.orekit.bodies.CelestialBodies) -> org.orekit.bodies.CelestialBody: ...
    @staticmethod
    def guessCenter(frame: org.orekit.frames.Frame) -> str: ...
    @staticmethod
    def map(frame: org.orekit.frames.Frame) -> 'CenterName': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CenterName': ...
    @staticmethod
    def values() -> typing.List['CenterName']: ...

class DutyCycleType(java.lang.Enum['DutyCycleType']):
    CONTINUOUS: typing.ClassVar['DutyCycleType'] = ...
    TIME: typing.ClassVar['DutyCycleType'] = ...
    TIME_AND_ANGLE: typing.ClassVar['DutyCycleType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'DutyCycleType': ...
    @staticmethod
    def values() -> typing.List['DutyCycleType']: ...

class ElementsType(java.lang.Enum['ElementsType']):
    ADBARV: typing.ClassVar['ElementsType'] = ...
    CARTP: typing.ClassVar['ElementsType'] = ...
    CARTPV: typing.ClassVar['ElementsType'] = ...
    CARTPVA: typing.ClassVar['ElementsType'] = ...
    DELAUNAY: typing.ClassVar['ElementsType'] = ...
    DELAUNAYMOD: typing.ClassVar['ElementsType'] = ...
    EIGVAL3EIGVEC3: typing.ClassVar['ElementsType'] = ...
    EQUINOCTIAL: typing.ClassVar['ElementsType'] = ...
    EQUINOCTIALMOD: typing.ClassVar['ElementsType'] = ...
    GEODETIC: typing.ClassVar['ElementsType'] = ...
    KEPLERIAN: typing.ClassVar['ElementsType'] = ...
    KEPLERIANMEAN: typing.ClassVar['ElementsType'] = ...
    LDBARV: typing.ClassVar['ElementsType'] = ...
    ONSTATION: typing.ClassVar['ElementsType'] = ...
    POINCARE: typing.ClassVar['ElementsType'] = ...
    def checkUnits(self, list: java.util.List[org.orekit.utils.units.Unit]) -> None: ...
    def getUnits(self) -> java.util.List[org.orekit.utils.units.Unit]: ...
    def toCartesian(self, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], double2: float) -> org.orekit.utils.TimeStampedPVCoordinates: ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ElementsType': ...
    @staticmethod
    def values() -> typing.List['ElementsType']: ...

class FrameFacade:
    def __init__(self, frame: org.orekit.frames.Frame, celestialBodyFrame: CelestialBodyFrame, orbitRelativeFrame: 'OrbitRelativeFrame', spacecraftBodyFrame: 'SpacecraftBodyFrame', string: str): ...
    def asCelestialBodyFrame(self) -> CelestialBodyFrame: ...
    def asFrame(self) -> org.orekit.frames.Frame: ...
    def asOrbitRelativeFrame(self) -> 'OrbitRelativeFrame': ...
    def asSpacecraftBodyFrame(self) -> 'SpacecraftBodyFrame': ...
    def getName(self) -> str: ...
    @staticmethod
    def map(frame: org.orekit.frames.Frame) -> 'FrameFacade': ...
    @staticmethod
    def parse(string: str, iERSConventions: org.orekit.utils.IERSConventions, boolean: bool, dataContext: org.orekit.data.DataContext, boolean2: bool, boolean3: bool, boolean4: bool) -> 'FrameFacade': ...

class ModifiedFrame(org.orekit.frames.Frame):
    def __init__(self, frame: org.orekit.frames.Frame, celestialBodyFrame: CelestialBodyFrame, celestialBody2: org.orekit.bodies.CelestialBody, string: str): ...
    def getCenterName(self) -> str: ...
    def getRefFrame(self) -> CelestialBodyFrame: ...

class OdMethodFacade:
    def __init__(self, string: str, odMethodType: 'OdMethodType', string2: str): ...
    def getName(self) -> str: ...
    def getTool(self) -> str: ...
    def getType(self) -> 'OdMethodType': ...
    @staticmethod
    def parse(string: str) -> 'OdMethodFacade': ...

class OdMethodType(java.lang.Enum['OdMethodType']):
    BWLS: typing.ClassVar['OdMethodType'] = ...
    EKF: typing.ClassVar['OdMethodType'] = ...
    SF: typing.ClassVar['OdMethodType'] = ...
    SRIF: typing.ClassVar['OdMethodType'] = ...
    SSEM: typing.ClassVar['OdMethodType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OdMethodType': ...
    @staticmethod
    def values() -> typing.List['OdMethodType']: ...

class OnOff(java.lang.Enum['OnOff']):
    ON: typing.ClassVar['OnOff'] = ...
    OFF: typing.ClassVar['OnOff'] = ...
    def isOn(self) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OnOff': ...
    @staticmethod
    def values() -> typing.List['OnOff']: ...

class OrbitRelativeFrame(java.lang.Enum['OrbitRelativeFrame']):
    EQW_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    LVLH_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    LVLH_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    LVLH: typing.ClassVar['OrbitRelativeFrame'] = ...
    NSW_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    NSW_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    NTW_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    NTW_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    PQW_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    RSW_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    RSW_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    RSW: typing.ClassVar['OrbitRelativeFrame'] = ...
    RIC: typing.ClassVar['OrbitRelativeFrame'] = ...
    RTN: typing.ClassVar['OrbitRelativeFrame'] = ...
    QSW: typing.ClassVar['OrbitRelativeFrame'] = ...
    TNW_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    TNW_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    TNW: typing.ClassVar['OrbitRelativeFrame'] = ...
    SEZ_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    SEZ_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    VNC_ROTATING: typing.ClassVar['OrbitRelativeFrame'] = ...
    VNC_INERTIAL: typing.ClassVar['OrbitRelativeFrame'] = ...
    def getLofType(self) -> org.orekit.frames.LOFType: ...
    def isQuasiInertial(self) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OrbitRelativeFrame': ...
    @staticmethod
    def values() -> typing.List['OrbitRelativeFrame']: ...

class SpacecraftBodyFrame:
    def __init__(self, baseEquipment: 'SpacecraftBodyFrame.BaseEquipment', string: str): ...
    def getBaseEquipment(self) -> 'SpacecraftBodyFrame.BaseEquipment': ...
    def getLabel(self) -> str: ...
    @staticmethod
    def parse(string: str) -> 'SpacecraftBodyFrame': ...
    def toString(self) -> str: ...
    class BaseEquipment(java.lang.Enum['SpacecraftBodyFrame.BaseEquipment']):
        ACC: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        ACTUATOR: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        AST: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        CSS: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        DSS: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        ESA: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        GYRO: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        GYRO_FRAME: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        IMU_FRAME: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        INSTRUMENT: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        MTA: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        RW: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        SA: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        SC_BODY: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        SENSOR: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        STARTRACKER: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        TAM: typing.ClassVar['SpacecraftBodyFrame.BaseEquipment'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SpacecraftBodyFrame.BaseEquipment': ...
        @staticmethod
        def values() -> typing.List['SpacecraftBodyFrame.BaseEquipment']: ...

class TimeConverter:
    def __init__(self, timeScale: org.orekit.time.TimeScale, absoluteDate: org.orekit.time.AbsoluteDate): ...
    def components(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.time.DateTimeComponents: ...
    def getTimeScale(self) -> org.orekit.time.TimeScale: ...
    def offset(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def parse(self, string: str) -> org.orekit.time.AbsoluteDate: ...

class TimeSystem(java.lang.Enum['TimeSystem']):
    GMST: typing.ClassVar['TimeSystem'] = ...
    GPS: typing.ClassVar['TimeSystem'] = ...
    MET: typing.ClassVar['TimeSystem'] = ...
    MRT: typing.ClassVar['TimeSystem'] = ...
    SCLK: typing.ClassVar['TimeSystem'] = ...
    TAI: typing.ClassVar['TimeSystem'] = ...
    TCB: typing.ClassVar['TimeSystem'] = ...
    TDB: typing.ClassVar['TimeSystem'] = ...
    TCG: typing.ClassVar['TimeSystem'] = ...
    TT: typing.ClassVar['TimeSystem'] = ...
    UT1: typing.ClassVar['TimeSystem'] = ...
    UTC: typing.ClassVar['TimeSystem'] = ...
    def getConverter(self, contextBinding: org.orekit.files.ccsds.utils.ContextBinding) -> TimeConverter: ...
    @staticmethod
    def parse(string: str) -> 'TimeSystem': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TimeSystem': ...
    @staticmethod
    def values() -> typing.List['TimeSystem']: ...

class Units:
    ONE_PER_S: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KG_M2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KM3_PER_S2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    M2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    NB_PER_Y: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KM2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KM_PER_S: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KM_PER_S2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KM2_PER_S: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    KM2_PER_S2: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    REV_PER_DAY: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    REV_PER_DAY2_SCALED: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    REV_PER_DAY3_SCALED: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    DEG_PER_S: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    N_M: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    NANO_TESLA: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    HECTO_PASCAL: typing.ClassVar[org.orekit.utils.units.Unit] = ...
    HZ_PER_S: typing.ClassVar[org.orekit.utils.units.Unit] = ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ccsds.definitions")``.

    BodyFacade: typing.Type[BodyFacade]
    CelestialBodyFrame: typing.Type[CelestialBodyFrame]
    CenterName: typing.Type[CenterName]
    DutyCycleType: typing.Type[DutyCycleType]
    ElementsType: typing.Type[ElementsType]
    FrameFacade: typing.Type[FrameFacade]
    ModifiedFrame: typing.Type[ModifiedFrame]
    OdMethodFacade: typing.Type[OdMethodFacade]
    OdMethodType: typing.Type[OdMethodType]
    OnOff: typing.Type[OnOff]
    OrbitRelativeFrame: typing.Type[OrbitRelativeFrame]
    SpacecraftBodyFrame: typing.Type[SpacecraftBodyFrame]
    TimeConverter: typing.Type[TimeConverter]
    TimeSystem: typing.Type[TimeSystem]
    Units: typing.Type[Units]
