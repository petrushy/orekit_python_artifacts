import java.io
import java.lang
import java.util
import org.orekit.attitudes
import org.orekit.bodies
import org.orekit.data
import org.orekit.frames
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import typing



_AttitudeEphemerisFile__AttitudeEphemerisSegment__C = typing.TypeVar('_AttitudeEphemerisFile__AttitudeEphemerisSegment__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
_AttitudeEphemerisFile__SatelliteAttitudeEphemeris__C = typing.TypeVar('_AttitudeEphemerisFile__SatelliteAttitudeEphemeris__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
_AttitudeEphemerisFile__SatelliteAttitudeEphemeris__S = typing.TypeVar('_AttitudeEphemerisFile__SatelliteAttitudeEphemeris__S', bound='AttitudeEphemerisFile.AttitudeEphemerisSegment')  # <S>
_AttitudeEphemerisFile__C = typing.TypeVar('_AttitudeEphemerisFile__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
_AttitudeEphemerisFile__S = typing.TypeVar('_AttitudeEphemerisFile__S', bound='AttitudeEphemerisFile.AttitudeEphemerisSegment')  # <S>
class AttitudeEphemerisFile(typing.Generic[_AttitudeEphemerisFile__C, _AttitudeEphemerisFile__S]):
    def getSatellites(self) -> java.util.Map[str, 'AttitudeEphemerisFile.SatelliteAttitudeEphemeris'[_AttitudeEphemerisFile__C, _AttitudeEphemerisFile__S]]: ...
    class AttitudeEphemerisSegment(typing.Generic[_AttitudeEphemerisFile__AttitudeEphemerisSegment__C]):
        def getAngularCoordinates(self) -> java.util.List[_AttitudeEphemerisFile__AttitudeEphemerisSegment__C]: ...
        def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
        def getAvailableDerivatives(self) -> org.orekit.utils.AngularDerivativesFilter: ...
        def getInterpolationMethod(self) -> str: ...
        def getInterpolationSamples(self) -> int: ...
        def getReferenceFrame(self) -> org.orekit.frames.Frame: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    class SatelliteAttitudeEphemeris(typing.Generic[_AttitudeEphemerisFile__SatelliteAttitudeEphemeris__C, _AttitudeEphemerisFile__SatelliteAttitudeEphemeris__S]):
        def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
        def getId(self) -> str: ...
        def getSegments(self) -> java.util.List[_AttitudeEphemerisFile__SatelliteAttitudeEphemeris__S]: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

_AttitudeEphemerisFileParser__T = typing.TypeVar('_AttitudeEphemerisFileParser__T', bound=AttitudeEphemerisFile)  # <T>
class AttitudeEphemerisFileParser(typing.Generic[_AttitudeEphemerisFileParser__T]):
    def parse(self, dataSource: org.orekit.data.DataSource) -> _AttitudeEphemerisFileParser__T: ...

class AttitudeEphemerisFileWriter:
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=AttitudeEphemerisFile.AttitudeEphemerisSegment)  # <S>
    _write_1__C = typing.TypeVar('_write_1__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
    _write_1__S = typing.TypeVar('_write_1__S', bound=AttitudeEphemerisFile.AttitudeEphemerisSegment)  # <S>
    @typing.overload
    def write(self, appendable: java.lang.Appendable, attitudeEphemerisFile: AttitudeEphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, string: str, attitudeEphemerisFile: AttitudeEphemerisFile[_write_1__C, _write_1__S]) -> None: ...

_EphemerisFile__EphemerisSegment__C = typing.TypeVar('_EphemerisFile__EphemerisSegment__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
_EphemerisFile__SatelliteEphemeris__C = typing.TypeVar('_EphemerisFile__SatelliteEphemeris__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
_EphemerisFile__SatelliteEphemeris__S = typing.TypeVar('_EphemerisFile__SatelliteEphemeris__S', bound='EphemerisFile.EphemerisSegment')  # <S>
_EphemerisFile__C = typing.TypeVar('_EphemerisFile__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
_EphemerisFile__S = typing.TypeVar('_EphemerisFile__S', bound='EphemerisFile.EphemerisSegment')  # <S>
class EphemerisFile(typing.Generic[_EphemerisFile__C, _EphemerisFile__S]):
    def getSatellites(self) -> java.util.Map[str, 'EphemerisFile.SatelliteEphemeris'[_EphemerisFile__C, _EphemerisFile__S]]: ...
    class EphemerisSegment(typing.Generic[_EphemerisFile__EphemerisSegment__C]):
        def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
        def getCoordinates(self) -> java.util.List[_EphemerisFile__EphemerisSegment__C]: ...
        def getFrame(self) -> org.orekit.frames.Frame: ...
        def getInertialFrame(self) -> org.orekit.frames.Frame: ...
        def getInterpolationSamples(self) -> int: ...
        def getMu(self) -> float: ...
        def getPropagator(self) -> org.orekit.propagation.BoundedPropagator: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    class SatelliteEphemeris(typing.Generic[_EphemerisFile__SatelliteEphemeris__C, _EphemerisFile__SatelliteEphemeris__S]):
        def getId(self) -> str: ...
        def getMu(self) -> float: ...
        def getPropagator(self) -> org.orekit.propagation.BoundedPropagator: ...
        def getSegments(self) -> java.util.List[_EphemerisFile__SatelliteEphemeris__S]: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

_EphemerisFileParser__T = typing.TypeVar('_EphemerisFileParser__T', bound=EphemerisFile)  # <T>
class EphemerisFileParser(typing.Generic[_EphemerisFileParser__T]):
    def parse(self, dataSource: org.orekit.data.DataSource) -> _EphemerisFileParser__T: ...

class EphemerisFileWriter:
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=EphemerisFile.EphemerisSegment)  # <S>
    _write_1__C = typing.TypeVar('_write_1__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_1__S = typing.TypeVar('_write_1__S', bound=EphemerisFile.EphemerisSegment)  # <S>
    @typing.overload
    def write(self, appendable: java.lang.Appendable, ephemerisFile: EphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, string: str, ephemerisFile: EphemerisFile[_write_1__C, _write_1__S]) -> None: ...

class OrekitAttitudeEphemerisFile(AttitudeEphemerisFile[org.orekit.utils.TimeStampedAngularCoordinates, 'OrekitAttitudeEphemerisFile.OrekitAttitudeEphemerisSegment']):
    def __init__(self): ...
    def addSatellite(self, string: str) -> 'OrekitAttitudeEphemerisFile.OrekitSatelliteAttitudeEphemeris': ...
    def getSatellites(self) -> java.util.Map[str, 'OrekitAttitudeEphemerisFile.OrekitSatelliteAttitudeEphemeris']: ...
    class OrekitAttitudeEphemerisSegment(AttitudeEphemerisFile.AttitudeEphemerisSegment[org.orekit.utils.TimeStampedAngularCoordinates]):
        def __init__(self, list: java.util.List[org.orekit.utils.TimeStampedAngularCoordinates], string: str, int: int, frame: org.orekit.frames.Frame, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter): ...
        def getAngularCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedAngularCoordinates]: ...
        def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
        def getAvailableDerivatives(self) -> org.orekit.utils.AngularDerivativesFilter: ...
        def getInterpolationMethod(self) -> str: ...
        def getInterpolationSamples(self) -> int: ...
        def getReferenceFrame(self) -> org.orekit.frames.Frame: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    class OrekitSatelliteAttitudeEphemeris(AttitudeEphemerisFile.SatelliteAttitudeEphemeris[org.orekit.utils.TimeStampedAngularCoordinates, 'OrekitAttitudeEphemerisFile.OrekitAttitudeEphemerisSegment']):
        DEFAULT_INTERPOLATION_METHOD: typing.ClassVar[str] = ...
        DEFAULT_INTERPOLATION_SIZE: typing.ClassVar[int] = ...
        def __init__(self, string: str): ...
        def addNewSegment(self, list: java.util.List[org.orekit.propagation.SpacecraftState], string: str, int: int, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter) -> 'OrekitAttitudeEphemerisFile.OrekitAttitudeEphemerisSegment': ...
        def getId(self) -> str: ...
        def getSegments(self) -> java.util.List['OrekitAttitudeEphemerisFile.OrekitAttitudeEphemerisSegment']: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class OrekitEphemerisFile(EphemerisFile[org.orekit.utils.TimeStampedPVCoordinates, 'OrekitEphemerisFile.OrekitEphemerisSegment']):
    def __init__(self): ...
    def addSatellite(self, string: str) -> 'OrekitEphemerisFile.OrekitSatelliteEphemeris': ...
    def getSatellites(self) -> java.util.Map[str, 'OrekitEphemerisFile.OrekitSatelliteEphemeris']: ...
    class OrekitEphemerisSegment(EphemerisFile.EphemerisSegment[org.orekit.utils.TimeStampedPVCoordinates]):
        def __init__(self, list: java.util.List[org.orekit.utils.TimeStampedPVCoordinates], frame: org.orekit.frames.Frame, double: float, int: int): ...
        def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
        def getCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
        def getFrame(self) -> org.orekit.frames.Frame: ...
        def getInertialFrame(self) -> org.orekit.frames.Frame: ...
        def getInterpolationSamples(self) -> int: ...
        def getMu(self) -> float: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    class OrekitSatelliteEphemeris(EphemerisFile.SatelliteEphemeris[org.orekit.utils.TimeStampedPVCoordinates, 'OrekitEphemerisFile.OrekitEphemerisSegment']):
        DEFAULT_INTERPOLATION_SIZE: typing.ClassVar[int] = ...
        def __init__(self, string: str): ...
        @typing.overload
        def addNewSegment(self, list: java.util.List[org.orekit.propagation.SpacecraftState]) -> 'OrekitEphemerisFile.OrekitEphemerisSegment': ...
        @typing.overload
        def addNewSegment(self, list: java.util.List[org.orekit.propagation.SpacecraftState], int: int) -> 'OrekitEphemerisFile.OrekitEphemerisSegment': ...
        @typing.overload
        def addNewSegment(self, list: java.util.List[org.orekit.propagation.SpacecraftState], celestialBody: org.orekit.bodies.CelestialBody, int: int) -> 'OrekitEphemerisFile.OrekitEphemerisSegment': ...
        @typing.overload
        def addNewSegment(self, list: java.util.List[org.orekit.propagation.SpacecraftState], celestialBody: org.orekit.bodies.CelestialBody, int: int, timeScale: org.orekit.time.TimeScale) -> 'OrekitEphemerisFile.OrekitEphemerisSegment': ...
        def getId(self) -> str: ...
        def getMu(self) -> float: ...
        def getSegments(self) -> java.util.List['OrekitEphemerisFile.OrekitEphemerisSegment']: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class PythonAttitudeEphemerisFile(AttitudeEphemerisFile):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getSatellites(self) -> java.util.Map[str, AttitudeEphemerisFile.SatelliteAttitudeEphemeris]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonAttitudeEphemerisFileParser(AttitudeEphemerisFileParser):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> AttitudeEphemerisFile[typing.Any, typing.Any]: ...
    def parse_BS(self, bufferedReader: java.io.BufferedReader, string: str) -> AttitudeEphemerisFile: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonAttitudeEphemerisFileWriter(AttitudeEphemerisFileWriter):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedAngularCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=AttitudeEphemerisFile.AttitudeEphemerisSegment)  # <S>
    @typing.overload
    def write(self, string: str, attitudeEphemerisFile: AttitudeEphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, appendable: java.lang.Appendable, attitudeEphemerisFile: AttitudeEphemerisFile) -> None: ...

class PythonAttitudeEphemerisSegment(AttitudeEphemerisFile.AttitudeEphemerisSegment):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getAngularCoordinates(self) -> java.util.List[org.orekit.utils.TimeStampedAngularCoordinates]: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
    def getAvailableDerivatives(self) -> org.orekit.utils.AngularDerivativesFilter: ...
    def getInterpolationMethod(self) -> str: ...
    def getInterpolationSamples(self) -> int: ...
    def getReferenceFrame(self) -> org.orekit.frames.Frame: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEphemerisFile(EphemerisFile):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getSatellites(self) -> java.util.Map[str, EphemerisFile.SatelliteEphemeris]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEphemerisFileParser(EphemerisFileParser):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> EphemerisFile[typing.Any, typing.Any]: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonEphemerisFileWriter(EphemerisFileWriter):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...
    @typing.overload
    def write(self, appendable: java.lang.Appendable, ephemerisFile: EphemerisFile) -> None: ...
    @typing.overload
    def write(self, string: str, ephemerisFile: EphemerisFile) -> None: ...

class PythonSatelliteAttitudeEphemeris(AttitudeEphemerisFile.SatelliteAttitudeEphemeris):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def getAttitudeProvider(self) -> org.orekit.attitudes.BoundedAttitudeProvider: ...
    def getId(self) -> str: ...
    def getSegments(self) -> java.util.List[AttitudeEphemerisFile.AttitudeEphemerisSegment]: ...
    def getStart(self) -> org.orekit.time.AbsoluteDate: ...
    def getStop(self) -> org.orekit.time.AbsoluteDate: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.general")``.

    AttitudeEphemerisFile: typing.Type[AttitudeEphemerisFile]
    AttitudeEphemerisFileParser: typing.Type[AttitudeEphemerisFileParser]
    AttitudeEphemerisFileWriter: typing.Type[AttitudeEphemerisFileWriter]
    EphemerisFile: typing.Type[EphemerisFile]
    EphemerisFileParser: typing.Type[EphemerisFileParser]
    EphemerisFileWriter: typing.Type[EphemerisFileWriter]
    OrekitAttitudeEphemerisFile: typing.Type[OrekitAttitudeEphemerisFile]
    OrekitEphemerisFile: typing.Type[OrekitEphemerisFile]
    PythonAttitudeEphemerisFile: typing.Type[PythonAttitudeEphemerisFile]
    PythonAttitudeEphemerisFileParser: typing.Type[PythonAttitudeEphemerisFileParser]
    PythonAttitudeEphemerisFileWriter: typing.Type[PythonAttitudeEphemerisFileWriter]
    PythonAttitudeEphemerisSegment: typing.Type[PythonAttitudeEphemerisSegment]
    PythonEphemerisFile: typing.Type[PythonEphemerisFile]
    PythonEphemerisFileParser: typing.Type[PythonEphemerisFileParser]
    PythonEphemerisFileWriter: typing.Type[PythonEphemerisFileWriter]
    PythonSatelliteAttitudeEphemeris: typing.Type[PythonSatelliteAttitudeEphemeris]
