import java.lang
import java.util
import org.hipparchus.geometry.euclidean.threed
import org.orekit.data
import org.orekit.files.general
import org.orekit.frames
import org.orekit.propagation
import org.orekit.propagation.sampling
import org.orekit.time
import org.orekit.utils
import typing



class CPF(org.orekit.files.general.EphemerisFile['CPF.CPFCoordinate', 'CPF.CPFEphemeris']):
    DEFAULT_ID: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    def addSatelliteCoordinate(self, string: str, cPFCoordinate: 'CPF.CPFCoordinate') -> None: ...
    @typing.overload
    def addSatelliteCoordinate(self, cPFCoordinate: 'CPF.CPFCoordinate') -> None: ...
    def addSatelliteCoordinates(self, string: str, list: java.util.List['CPF.CPFCoordinate']) -> None: ...
    def getComments(self) -> java.util.List[str]: ...
    def getHeader(self) -> 'CPFHeader': ...
    def getSatellites(self) -> java.util.Map[str, 'CPF.CPFEphemeris']: ...
    def getTimeScale(self) -> org.orekit.time.TimeScale: ...
    def setFilter(self, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter) -> None: ...
    def setInterpolationSample(self, int: int) -> None: ...
    def setMu(self, double: float) -> None: ...
    def setTimeScale(self, timeScale: org.orekit.time.TimeScale) -> None: ...
    class CPFCoordinate(org.orekit.utils.TimeStampedPVCoordinates):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, int: int): ...
        def getLeap(self) -> int: ...
    class CPFEphemeris(org.orekit.files.general.EphemerisFile.SatelliteEphemeris['CPF.CPFCoordinate', 'CPF.CPFEphemeris'], org.orekit.files.general.EphemerisFile.EphemerisSegment['CPF.CPFCoordinate']):
        @typing.overload
        def __init__(self, cPF: 'CPF'): ...
        @typing.overload
        def __init__(self, cPF: 'CPF', string: str): ...
        def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
        def getCoordinates(self) -> java.util.List['CPF.CPFCoordinate']: ...
        def getEphemeridesDataLines(self) -> java.util.List['CPF.CPFCoordinate']: ...
        def getFrame(self) -> org.orekit.frames.Frame: ...
        def getId(self) -> str: ...
        def getInterpolationSamples(self) -> int: ...
        def getMu(self) -> float: ...
        def getPropagator(self) -> org.orekit.propagation.BoundedPropagator: ...
        def getSegments(self) -> java.util.List['CPF.CPFEphemeris']: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...

class CPFParser(org.orekit.files.general.EphemerisFileParser[CPF]):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int, iERSConventions: org.orekit.utils.IERSConventions, timeScale: org.orekit.time.TimeScale, frames: org.orekit.frames.Frames): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> CPF: ...

class CPFWriter(org.orekit.files.general.EphemerisFileWriter):
    def __init__(self, cPFHeader: 'CPFHeader', timeScale: org.orekit.time.TimeScale): ...
    _write_0__C = typing.TypeVar('_write_0__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_0__S = typing.TypeVar('_write_0__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    _write_1__C = typing.TypeVar('_write_1__C', bound=org.orekit.utils.TimeStampedPVCoordinates)  # <C>
    _write_1__S = typing.TypeVar('_write_1__S', bound=org.orekit.files.general.EphemerisFile.EphemerisSegment)  # <S>
    @typing.overload
    def write(self, string: str, ephemerisFile: org.orekit.files.general.EphemerisFile[_write_0__C, _write_0__S]) -> None: ...
    @typing.overload
    def write(self, appendable: java.lang.Appendable, ephemerisFile: org.orekit.files.general.EphemerisFile[_write_1__C, _write_1__S]) -> None: ...

class CRD:
    def __init__(self): ...
    def addDataBlock(self, cRDDataBlock: 'CRD.CRDDataBlock') -> None: ...
    def getComments(self) -> java.util.List[str]: ...
    def getDataBlocks(self) -> java.util.List['CRD.CRDDataBlock']: ...
    class AnglesMeasurement(org.orekit.time.TimeStamped):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, int: int, int2: int, boolean: bool, double3: float, double4: float): ...
        def getAzimuth(self) -> float: ...
        def getAzimuthRate(self) -> float: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getDirectionFlag(self) -> int: ...
        def getElevation(self) -> float: ...
        def getElevationRate(self) -> float: ...
        def getOriginIndicator(self) -> int: ...
        def isRefractionCorrected(self) -> bool: ...
    class CRDDataBlock:
        def __init__(self): ...
        def addAnglesData(self, anglesMeasurement: 'CRD.AnglesMeasurement') -> None: ...
        def addMeteoData(self, meteorologicalMeasurement: 'CRD.MeteorologicalMeasurement') -> None: ...
        def addRangeData(self, rangeMeasurement: 'CRD.RangeMeasurement') -> None: ...
        def getAnglesData(self) -> java.util.List['CRD.AnglesMeasurement']: ...
        def getConfigurationRecords(self) -> 'CRDConfiguration': ...
        def getHeader(self) -> 'CRDHeader': ...
        def getMeteoData(self) -> 'CRD.Meteo': ...
        def getRangeData(self) -> java.util.List['CRD.RangeMeasurement']: ...
        def setConfigurationRecords(self, cRDConfiguration: 'CRDConfiguration') -> None: ...
        def setHeader(self, cRDHeader: 'CRDHeader') -> None: ...
    class Meteo:
        def __init__(self, sortedSet: java.util.SortedSet['CRD.MeteorologicalMeasurement']): ...
        def getData(self) -> java.util.List['CRD.MeteorologicalMeasurement']: ...
        def getMeteo(self, absoluteDate: org.orekit.time.AbsoluteDate) -> 'CRD.MeteorologicalMeasurement': ...
    class MeteorologicalMeasurement(org.orekit.time.TimeStamped):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, double2: float, double3: float): ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getHumidity(self) -> float: ...
        def getPressure(self) -> float: ...
        def getTemperature(self) -> float: ...
    class RangeMeasurement(org.orekit.time.TimeStamped):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, double: float, int: int, double2: float): ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getEpochEvent(self) -> int: ...
        def getSnr(self) -> float: ...
        def getTimeOfFlight(self) -> float: ...

class CRDConfiguration:
    def __init__(self): ...
    def getDetectorRecord(self) -> 'CRDConfiguration.DetectorConfiguration': ...
    def getLaserRecord(self) -> 'CRDConfiguration.LaserConfiguration': ...
    def getMeteorologicalRecord(self) -> 'CRDConfiguration.MeteorologicalConfiguration': ...
    def getSoftwareRecord(self) -> 'CRDConfiguration.SoftwareConfiguration': ...
    def getSystemRecord(self) -> 'CRDConfiguration.SystemConfiguration': ...
    def getTimingRecord(self) -> 'CRDConfiguration.TimingSystemConfiguration': ...
    def getTransponderRecord(self) -> 'CRDConfiguration.TransponderConfiguration': ...
    def setDetectorRecord(self, detectorConfiguration: 'CRDConfiguration.DetectorConfiguration') -> None: ...
    def setLaserRecord(self, laserConfiguration: 'CRDConfiguration.LaserConfiguration') -> None: ...
    def setMeteorologicalRecord(self, meteorologicalConfiguration: 'CRDConfiguration.MeteorologicalConfiguration') -> None: ...
    def setSoftwareRecord(self, softwareConfiguration: 'CRDConfiguration.SoftwareConfiguration') -> None: ...
    def setSystemRecord(self, systemConfiguration: 'CRDConfiguration.SystemConfiguration') -> None: ...
    def setTimingRecord(self, timingSystemConfiguration: 'CRDConfiguration.TimingSystemConfiguration') -> None: ...
    def setTransponderRecord(self, transponderConfiguration: 'CRDConfiguration.TransponderConfiguration') -> None: ...
    class DetectorConfiguration:
        def __init__(self): ...
        def getAmplifierBandwidth(self) -> float: ...
        def getAmplifierGain(self) -> float: ...
        def getAmplifierInUse(self) -> str: ...
        def getApplicableWavelength(self) -> float: ...
        def getAppliedVoltage(self) -> float: ...
        def getDarkCount(self) -> float: ...
        def getDetectorId(self) -> str: ...
        def getDetectorType(self) -> str: ...
        def getExternalSignalProcessing(self) -> str: ...
        def getOutputPulseType(self) -> str: ...
        def getOutputPulseWidth(self) -> float: ...
        def getQuantumEfficiency(self) -> float: ...
        def getSpatialFilter(self) -> float: ...
        def getSpectralFilter(self) -> float: ...
        def getTransmissionOfSpectralFilter(self) -> float: ...
        def setAmplifierBandwidth(self, double: float) -> None: ...
        def setAmplifierGain(self, double: float) -> None: ...
        def setAmplifierInUse(self, string: str) -> None: ...
        def setApplicableWavelength(self, double: float) -> None: ...
        def setAppliedVoltage(self, double: float) -> None: ...
        def setDarkCount(self, double: float) -> None: ...
        def setDetectorId(self, string: str) -> None: ...
        def setDetectorType(self, string: str) -> None: ...
        def setExternalSignalProcessing(self, string: str) -> None: ...
        def setOutputPulseType(self, string: str) -> None: ...
        def setOutputPulseWidth(self, double: float) -> None: ...
        def setQuantumEfficiency(self, double: float) -> None: ...
        def setSpatialFilter(self, double: float) -> None: ...
        def setSpectralFilter(self, double: float) -> None: ...
        def setTransmissionOfSpectralFilter(self, double: float) -> None: ...
    class LaserConfiguration:
        def __init__(self): ...
        def getBeamDivergence(self) -> float: ...
        def getLaserId(self) -> str: ...
        def getLaserType(self) -> str: ...
        def getNominalFireRate(self) -> float: ...
        def getPrimaryWavelength(self) -> float: ...
        def getPulseEnergy(self) -> float: ...
        def getPulseInOutgoingSemiTrain(self) -> int: ...
        def getPulseWidth(self) -> float: ...
        def setBeamDivergence(self, double: float) -> None: ...
        def setLaserId(self, string: str) -> None: ...
        def setLaserType(self, string: str) -> None: ...
        def setNominalFireRate(self, double: float) -> None: ...
        def setPrimaryWavelength(self, double: float) -> None: ...
        def setPulseEnergy(self, double: float) -> None: ...
        def setPulseInOutgoingSemiTrain(self, int: int) -> None: ...
        def setPulseWidth(self, double: float) -> None: ...
    class MeteorologicalConfiguration:
        def __init__(self): ...
        def getHumiSensorManufacturer(self) -> str: ...
        def getHumiSensorModel(self) -> str: ...
        def getHumiSensorSerialNumber(self) -> str: ...
        def getMeteorologicalId(self) -> str: ...
        def getPressSensorManufacturer(self) -> str: ...
        def getPressSensorModel(self) -> str: ...
        def getPressSensorSerialNumber(self) -> str: ...
        def getTempSensorManufacturer(self) -> str: ...
        def getTempSensorModel(self) -> str: ...
        def getTempSensorSerialNumber(self) -> str: ...
        def setHumiSensorManufacturer(self, string: str) -> None: ...
        def setHumiSensorModel(self, string: str) -> None: ...
        def setHumiSensorSerialNumber(self, string: str) -> None: ...
        def setMeteorologicalId(self, string: str) -> None: ...
        def setPressSensorManufacturer(self, string: str) -> None: ...
        def setPressSensorModel(self, string: str) -> None: ...
        def setPressSensorSerialNumber(self, string: str) -> None: ...
        def setTempSensorManufacturer(self, string: str) -> None: ...
        def setTempSensorModel(self, string: str) -> None: ...
        def setTempSensorSerialNumber(self, string: str) -> None: ...
    class SoftwareConfiguration:
        def __init__(self): ...
        def getProcessingSoftwareVersions(self) -> typing.List[str]: ...
        def getProcessingSoftwares(self) -> typing.List[str]: ...
        def getSoftwareId(self) -> str: ...
        def getTrackingSoftwareVersions(self) -> typing.List[str]: ...
        def getTrackingSoftwares(self) -> typing.List[str]: ...
        def setProcessingSoftwareVersions(self, stringArray: typing.List[str]) -> None: ...
        def setProcessingSoftwares(self, stringArray: typing.List[str]) -> None: ...
        def setSoftwareId(self, string: str) -> None: ...
        def setTrackingSoftwareVersions(self, stringArray: typing.List[str]) -> None: ...
        def setTrackingSoftwares(self, stringArray: typing.List[str]) -> None: ...
    class SystemConfiguration:
        def __init__(self): ...
        def getSystemId(self) -> str: ...
        def getWavelength(self) -> float: ...
        def setSystemId(self, string: str) -> None: ...
        def setWavelength(self, double: float) -> None: ...
    class TimingSystemConfiguration:
        def __init__(self): ...
        def getEpochDelayCorrection(self) -> float: ...
        def getFrequencySource(self) -> str: ...
        def getLocalTimingId(self) -> str: ...
        def getTimeSource(self) -> str: ...
        def getTimer(self) -> str: ...
        def getTimerSerialNumber(self) -> str: ...
        def setEpochDelayCorrection(self, double: float) -> None: ...
        def setFrequencySource(self, string: str) -> None: ...
        def setLocalTimingId(self, string: str) -> None: ...
        def setTimeSource(self, string: str) -> None: ...
        def setTimer(self, string: str) -> None: ...
        def setTimerSerialNumber(self, string: str) -> None: ...
    class TransponderConfiguration:
        def __init__(self): ...
        def getSpacecraftClockAndDriftApplied(self) -> int: ...
        def getStationClockAndDriftApplied(self) -> int: ...
        def getStationOscDrift(self) -> float: ...
        def getStationUTCOffset(self) -> float: ...
        def getTranspClkRefTime(self) -> float: ...
        def getTranspOscDrift(self) -> float: ...
        def getTranspUTCOffset(self) -> float: ...
        def getTransponderId(self) -> str: ...
        def isSpacecraftTimeSimplified(self) -> bool: ...
        def setIsSpacecraftTimeSimplified(self, boolean: bool) -> None: ...
        def setSpacecraftClockAndDriftApplied(self, int: int) -> None: ...
        def setStationClockAndDriftApplied(self, int: int) -> None: ...
        def setStationOscDrift(self, double: float) -> None: ...
        def setStationUTCOffset(self, double: float) -> None: ...
        def setTranspClkRefTime(self, double: float) -> None: ...
        def setTranspOscDrift(self, double: float) -> None: ...
        def setTranspUTCOffset(self, double: float) -> None: ...
        def setTransponderId(self, string: str) -> None: ...

class CRDParser:
    DEFAULT_CRD_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    def getTimeScale(self) -> org.orekit.time.TimeScale: ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> CRD: ...

class ILRSHeader:
    def __init__(self): ...
    def getEndEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getFormat(self) -> str: ...
    def getIlrsSatelliteId(self) -> str: ...
    def getName(self) -> str: ...
    def getNoradId(self) -> str: ...
    def getProductionEpoch(self) -> org.orekit.time.DateComponents: ...
    def getProductionHour(self) -> int: ...
    def getSequenceNumber(self) -> int: ...
    def getSic(self) -> str: ...
    def getStartEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getTargetClass(self) -> int: ...
    def getTargetLocation(self) -> int: ...
    def getVersion(self) -> int: ...
    def setEndEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setFormat(self, string: str) -> None: ...
    def setIlrsSatelliteId(self, string: str) -> None: ...
    def setName(self, string: str) -> None: ...
    def setNoradId(self, string: str) -> None: ...
    def setProductionEpoch(self, dateComponents: org.orekit.time.DateComponents) -> None: ...
    def setProductionHour(self, int: int) -> None: ...
    def setSequenceNumber(self, int: int) -> None: ...
    def setSic(self, string: str) -> None: ...
    def setStartEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setTargetClass(self, int: int) -> None: ...
    def setTargetLocation(self, int: int) -> None: ...
    def setVersion(self, int: int) -> None: ...

class StreamingCpfWriter:
    def __init__(self, appendable: java.lang.Appendable, timeScale: org.orekit.time.TimeScale, cPFHeader: 'CPFHeader'): ...
    def newSegment(self, frame: org.orekit.frames.Frame) -> 'StreamingCpfWriter.Segment': ...
    def writeEndOfFile(self) -> None: ...
    def writeHeader(self) -> None: ...
    class HeaderLineWriter(java.lang.Enum['StreamingCpfWriter.HeaderLineWriter']):
        H1: typing.ClassVar['StreamingCpfWriter.HeaderLineWriter'] = ...
        H2: typing.ClassVar['StreamingCpfWriter.HeaderLineWriter'] = ...
        def getIdentifier(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'StreamingCpfWriter.HeaderLineWriter': ...
        @staticmethod
        def values() -> typing.List['StreamingCpfWriter.HeaderLineWriter']: ...
        def write(self, cPFHeader: 'CPFHeader', appendable: java.lang.Appendable, timeScale: org.orekit.time.TimeScale) -> None: ...
    class Segment(org.orekit.propagation.sampling.OrekitFixedStepHandler):
        def finish(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def handleStep(self, spacecraftState: org.orekit.propagation.SpacecraftState) -> None: ...
        def writeEphemerisLine(self, timeStampedPVCoordinates: org.orekit.utils.TimeStampedPVCoordinates) -> None: ...

class CPFHeader(ILRSHeader):
    def __init__(self): ...
    def getCenterOfMassOffset(self) -> float: ...
    def getPrf(self) -> float: ...
    def getRefFrame(self) -> org.orekit.frames.Frame: ...
    def getRefFrameId(self) -> int: ...
    def getRotationalAngleType(self) -> int: ...
    def getSource(self) -> str: ...
    def getStep(self) -> int: ...
    def getSubDailySequenceNumber(self) -> int: ...
    def getTranspClkRef(self) -> float: ...
    def getTranspOscDrift(self) -> float: ...
    def getTranspTransmitDelay(self) -> float: ...
    def getTranspUtcOffset(self) -> float: ...
    def isCenterOfMassCorrectionApplied(self) -> bool: ...
    def isCompatibleWithTIVs(self) -> bool: ...
    def setCenterOfMassOffset(self, double: float) -> None: ...
    def setIsCenterOfMassCorrectionApplied(self, boolean: bool) -> None: ...
    def setIsCompatibleWithTIVs(self, boolean: bool) -> None: ...
    def setPrf(self, double: float) -> None: ...
    def setRefFrame(self, frame: org.orekit.frames.Frame) -> None: ...
    def setRefFrameId(self, int: int) -> None: ...
    def setRotationalAngleType(self, int: int) -> None: ...
    def setSource(self, string: str) -> None: ...
    def setStep(self, int: int) -> None: ...
    def setSubDailySequenceNumber(self, int: int) -> None: ...
    def setTranspClkRef(self, double: float) -> None: ...
    def setTranspOscDrift(self, double: float) -> None: ...
    def setTranspTransmitDelay(self, double: float) -> None: ...
    def setTranspUtcOffset(self, double: float) -> None: ...

class CRDHeader(ILRSHeader):
    def __init__(self): ...
    def getDataReleaseFlag(self) -> int: ...
    def getDataType(self) -> int: ...
    def getDateAndTime(self) -> str: ...
    def getEpochIdentifier(self) -> int: ...
    def getPredictionProvider(self) -> str: ...
    def getPredictionType(self) -> int: ...
    def getQualityIndicator(self) -> int: ...
    def getRangeType(self) -> 'CRDHeader.RangeType': ...
    def getSpacecraftEpochTimeScale(self) -> int: ...
    def getStationName(self) -> str: ...
    def getStationNetword(self) -> str: ...
    def getSystemIdentifier(self) -> int: ...
    def getSystemNumber(self) -> int: ...
    def getSystemOccupancy(self) -> int: ...
    def getYearOfCentury(self) -> int: ...
    def isCenterOfMassCorrectionApplied(self) -> bool: ...
    def isReceiveAmplitudeCorrectionApplied(self) -> bool: ...
    def isStationSystemDelayApplied(self) -> bool: ...
    def isTransponderDelayApplied(self) -> bool: ...
    def isTroposphericRefractionApplied(self) -> bool: ...
    def setDataReleaseFlag(self, int: int) -> None: ...
    def setDataType(self, int: int) -> None: ...
    def setDateAndTime(self, string: str) -> None: ...
    def setEpochIdentifier(self, int: int) -> None: ...
    def setIsCenterOfMassCorrectionApplied(self, boolean: bool) -> None: ...
    def setIsReceiveAmplitudeCorrectionApplied(self, boolean: bool) -> None: ...
    def setIsStationSystemDelayApplied(self, boolean: bool) -> None: ...
    def setIsTransponderDelayApplied(self, boolean: bool) -> None: ...
    def setIsTroposphericRefractionApplied(self, boolean: bool) -> None: ...
    def setPredictionProvider(self, string: str) -> None: ...
    def setPredictionType(self, int: int) -> None: ...
    def setQualityIndicator(self, int: int) -> None: ...
    def setRangeType(self, int: int) -> None: ...
    def setSpacecraftEpochTimeScale(self, int: int) -> None: ...
    def setStationName(self, string: str) -> None: ...
    def setStationNetword(self, string: str) -> None: ...
    def setSystemIdentifier(self, int: int) -> None: ...
    def setSystemNumber(self, int: int) -> None: ...
    def setSystemOccupancy(self, int: int) -> None: ...
    def setYearOfCentury(self, int: int) -> None: ...
    class RangeType(java.lang.Enum['CRDHeader.RangeType']):
        NO_RANGES: typing.ClassVar['CRDHeader.RangeType'] = ...
        ONE_WAY: typing.ClassVar['CRDHeader.RangeType'] = ...
        TWO_WAY: typing.ClassVar['CRDHeader.RangeType'] = ...
        RECEIVED_ONLY: typing.ClassVar['CRDHeader.RangeType'] = ...
        MIXED: typing.ClassVar['CRDHeader.RangeType'] = ...
        def getIndicator(self) -> int: ...
        @staticmethod
        def getRangeType(int: int) -> 'CRDHeader.RangeType': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'CRDHeader.RangeType': ...
        @staticmethod
        def values() -> typing.List['CRDHeader.RangeType']: ...

class PythonILRSHeader(ILRSHeader):
    def __init__(self): ...
    def finalize(self) -> None: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.ilrs")``.

    CPF: typing.Type[CPF]
    CPFHeader: typing.Type[CPFHeader]
    CPFParser: typing.Type[CPFParser]
    CPFWriter: typing.Type[CPFWriter]
    CRD: typing.Type[CRD]
    CRDConfiguration: typing.Type[CRDConfiguration]
    CRDHeader: typing.Type[CRDHeader]
    CRDParser: typing.Type[CRDParser]
    ILRSHeader: typing.Type[ILRSHeader]
    PythonILRSHeader: typing.Type[PythonILRSHeader]
    StreamingCpfWriter: typing.Type[StreamingCpfWriter]
