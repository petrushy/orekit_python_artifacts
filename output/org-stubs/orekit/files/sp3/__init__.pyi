import java.lang
import java.util
import java.util.function
import org.hipparchus.geometry.euclidean.threed
import org.orekit.data
import org.orekit.files.general
import org.orekit.frames
import org.orekit.gnss
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import typing



class SP3(org.orekit.files.general.EphemerisFile['SP3.SP3Coordinate', 'SP3.SP3Ephemeris']):
    SP3_FRAME_CENTER_STRING: typing.ClassVar[str] = ...
    def __init__(self, double: float, int: int, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]]): ...
    def addSatellite(self, string: str) -> None: ...
    def addSatelliteCoordinate(self, string: str, sP3Coordinate: 'SP3.SP3Coordinate') -> None: ...
    def containsSatellite(self, string: str) -> bool: ...
    def getAccuracy(self, int: int) -> float: ...
    def getAgency(self) -> str: ...
    def getCoordinateSystem(self) -> str: ...
    def getDataUsed(self) -> str: ...
    def getDayFraction(self) -> float: ...
    def getEpoch(self) -> org.orekit.time.AbsoluteDate: ...
    def getEpochInterval(self) -> float: ...
    def getGpsWeek(self) -> int: ...
    def getJulianDay(self) -> int: ...
    def getNumberOfEpochs(self) -> int: ...
    def getOrbitType(self) -> 'SP3.SP3OrbitType': ...
    def getOrbitTypeKey(self) -> str: ...
    def getSatelliteCount(self) -> int: ...
    def getSatellites(self) -> java.util.Map[str, 'SP3.SP3Ephemeris']: ...
    def getSecondsOfWeek(self) -> float: ...
    def getTimeSystem(self) -> org.orekit.gnss.TimeSystem: ...
    def getType(self) -> 'SP3.SP3FileType': ...
    def setAccuracy(self, int: int, double: float) -> None: ...
    def setAgency(self, string: str) -> None: ...
    def setCoordinateSystem(self, string: str) -> None: ...
    def setDataUsed(self, string: str) -> None: ...
    def setDayFraction(self, double: float) -> None: ...
    def setEpoch(self, absoluteDate: org.orekit.time.AbsoluteDate) -> None: ...
    def setEpochInterval(self, double: float) -> None: ...
    def setFilter(self, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter) -> None: ...
    def setGpsWeek(self, int: int) -> None: ...
    def setJulianDay(self, int: int) -> None: ...
    def setNumberOfEpochs(self, int: int) -> None: ...
    def setOrbitTypeKey(self, string: str) -> None: ...
    def setSecondsOfWeek(self, double: float) -> None: ...
    def setTimeSystem(self, timeSystem: org.orekit.gnss.TimeSystem) -> None: ...
    def setType(self, sP3FileType: 'SP3.SP3FileType') -> None: ...
    class SP3Coordinate(org.orekit.utils.TimeStampedPVCoordinates):
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float): ...
        @typing.overload
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, vector3D: org.hipparchus.geometry.euclidean.threed.Vector3D, vector3D2: org.hipparchus.geometry.euclidean.threed.Vector3D, double: float, double2: float): ...
        def getClockCorrection(self) -> float: ...
        def getClockRateChange(self) -> float: ...
    class SP3Ephemeris(org.orekit.files.general.EphemerisFile.SatelliteEphemeris['SP3.SP3Coordinate', 'SP3.SP3Ephemeris'], org.orekit.files.general.EphemerisFile.EphemerisSegment['SP3.SP3Coordinate']):
        def __init__(self, sP3: 'SP3', string: str): ...
        def getAccuracy(self) -> float: ...
        def getAvailableDerivatives(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
        def getCoordinates(self) -> java.util.List['SP3.SP3Coordinate']: ...
        def getFrame(self) -> org.orekit.frames.Frame: ...
        def getId(self) -> str: ...
        def getInterpolationSamples(self) -> int: ...
        def getMu(self) -> float: ...
        def getPropagator(self) -> org.orekit.propagation.BoundedPropagator: ...
        def getSegments(self) -> java.util.List['SP3.SP3Ephemeris']: ...
        def getStart(self) -> org.orekit.time.AbsoluteDate: ...
        def getStop(self) -> org.orekit.time.AbsoluteDate: ...
        def setAccuracy(self, double: float) -> None: ...
    class SP3FileType(java.lang.Enum['SP3.SP3FileType']):
        GPS: typing.ClassVar['SP3.SP3FileType'] = ...
        MIXED: typing.ClassVar['SP3.SP3FileType'] = ...
        GLONASS: typing.ClassVar['SP3.SP3FileType'] = ...
        LEO: typing.ClassVar['SP3.SP3FileType'] = ...
        GALILEO: typing.ClassVar['SP3.SP3FileType'] = ...
        SBAS: typing.ClassVar['SP3.SP3FileType'] = ...
        IRNSS: typing.ClassVar['SP3.SP3FileType'] = ...
        COMPASS: typing.ClassVar['SP3.SP3FileType'] = ...
        QZSS: typing.ClassVar['SP3.SP3FileType'] = ...
        UNDEFINED: typing.ClassVar['SP3.SP3FileType'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SP3.SP3FileType': ...
        @staticmethod
        def values() -> typing.List['SP3.SP3FileType']: ...
    class SP3OrbitType(java.lang.Enum['SP3.SP3OrbitType']):
        FIT: typing.ClassVar['SP3.SP3OrbitType'] = ...
        EXT: typing.ClassVar['SP3.SP3OrbitType'] = ...
        BCT: typing.ClassVar['SP3.SP3OrbitType'] = ...
        HLM: typing.ClassVar['SP3.SP3OrbitType'] = ...
        OTHER: typing.ClassVar['SP3.SP3OrbitType'] = ...
        @staticmethod
        def parseType(string: str) -> 'SP3.SP3OrbitType': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SP3.SP3OrbitType': ...
        @staticmethod
        def values() -> typing.List['SP3.SP3OrbitType']: ...

class SP3Parser(org.orekit.files.general.EphemerisFileParser[SP3]):
    DEFAULT_CLOCK_VALUE: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, int: int, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]]): ...
    @typing.overload
    def __init__(self, double: float, int: int, function: typing.Union[java.util.function.Function[str, org.orekit.frames.Frame], typing.Callable[[str], org.orekit.frames.Frame]], timeScales: org.orekit.time.TimeScales): ...
    def parse(self, dataSource: org.orekit.data.DataSource) -> SP3: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.files.sp3")``.

    SP3: typing.Type[SP3]
    SP3Parser: typing.Type[SP3Parser]
