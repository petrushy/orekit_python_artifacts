import java.io
import java.util
import org.hipparchus
import org.orekit.bodies
import org.orekit.data
import org.orekit.frames
import org.orekit.gnss.metric.messages.ssr.subtype
import org.orekit.propagation
import org.orekit.time
import org.orekit.utils
import typing



class IonosphericMappingFunction:
    _mappingFactor_1__T = typing.TypeVar('_mappingFactor_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactor(self, double: float) -> float: ...
    @typing.overload
    def mappingFactor(self, t: _mappingFactor_1__T) -> _mappingFactor_1__T: ...

class IonosphericModel(java.io.Serializable):
    _getParameters_1__T = typing.TypeVar('_getParameters_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getParameters(self) -> typing.List[float]: ...
    @typing.overload
    def getParameters(self, field: org.hipparchus.Field[_getParameters_1__T]) -> typing.List[_getParameters_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_1__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_1__T]) -> _pathDelay_1__T: ...

class KlobucharIonoCoefficientsLoader(org.orekit.data.AbstractSelfFeedingLoader, org.orekit.data.DataLoader):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager): ...
    def getAlpha(self) -> typing.List[float]: ...
    def getBeta(self) -> typing.List[float]: ...
    def getSupportedNames(self) -> str: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    @typing.overload
    def loadKlobucharIonosphericCoefficients(self) -> None: ...
    @typing.overload
    def loadKlobucharIonosphericCoefficients(self, dateComponents: org.orekit.time.DateComponents) -> None: ...
    def stillAcceptsData(self) -> bool: ...

class EstimatedIonosphericModel(IonosphericModel):
    VERTICAL_TOTAL_ELECTRON_CONTENT: typing.ClassVar[str] = ...
    def __init__(self, ionosphericMappingFunction: IonosphericMappingFunction, double: float): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_3__T = typing.TypeVar('_pathDelay_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, double: float, double2: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, t: _pathDelay_2__T, double: float, tArray: typing.List[_pathDelay_2__T]) -> _pathDelay_2__T: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_3__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_3__T]) -> _pathDelay_3__T: ...

class GlobalIonosphereMapModel(org.orekit.data.AbstractSelfFeedingLoader, IonosphericModel):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _getTEC_1__T = typing.TypeVar('_getTEC_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getTEC(self, absoluteDate: org.orekit.time.AbsoluteDate, geodeticPoint: org.orekit.bodies.GeodeticPoint) -> float: ...
    @typing.overload
    def getTEC(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_getTEC_1__T], geodeticPoint: org.orekit.bodies.GeodeticPoint) -> _getTEC_1__T: ...
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_3__T = typing.TypeVar('_pathDelay_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, absoluteDate: org.orekit.time.AbsoluteDate, geodeticPoint: org.orekit.bodies.GeodeticPoint, double: float, double2: float) -> float: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_2__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_2__T]) -> _pathDelay_2__T: ...
    @typing.overload
    def pathDelay(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_3__T], geodeticPoint: org.orekit.bodies.GeodeticPoint, t: _pathDelay_3__T, double: float) -> _pathDelay_3__T: ...

class KlobucharIonoModel(IonosphericModel):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float], timeScale: org.orekit.time.TimeScale): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_2__T = typing.TypeVar('_pathDelay_2__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    _pathDelay_3__T = typing.TypeVar('_pathDelay_3__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, absoluteDate: org.orekit.time.AbsoluteDate, geodeticPoint: org.orekit.bodies.GeodeticPoint, double: float, double2: float, double3: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_2__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_2__T]) -> _pathDelay_2__T: ...
    @typing.overload
    def pathDelay(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_pathDelay_3__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_pathDelay_3__T], t: _pathDelay_3__T, t2: _pathDelay_3__T, double: float, tArray: typing.List[_pathDelay_3__T]) -> _pathDelay_3__T: ...

class NeQuickModel(IonosphericModel):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], timeScale: org.orekit.time.TimeScale): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_1__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    _stec_1__T = typing.TypeVar('_stec_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def stec(self, absoluteDate: org.orekit.time.AbsoluteDate, geodeticPoint: org.orekit.bodies.GeodeticPoint, geodeticPoint2: org.orekit.bodies.GeodeticPoint) -> float: ...
    @typing.overload
    def stec(self, fieldAbsoluteDate: org.orekit.time.FieldAbsoluteDate[_stec_1__T], fieldGeodeticPoint: org.orekit.bodies.FieldGeodeticPoint[_stec_1__T], fieldGeodeticPoint2: org.orekit.bodies.FieldGeodeticPoint[_stec_1__T]) -> _stec_1__T: ...

class PythonIonosphericMappingFunction(IonosphericMappingFunction):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _mappingFactor_1__T = typing.TypeVar('_mappingFactor_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactor(self, double: float) -> float: ...
    @typing.overload
    def mappingFactor(self, t: _mappingFactor_1__T) -> _mappingFactor_1__T: ...
    _mappingFactor_T__T = typing.TypeVar('_mappingFactor_T__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def mappingFactor_T(self, t: _mappingFactor_T__T) -> _mappingFactor_T__T: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class PythonIonosphericModel(IonosphericModel):
    def __init__(self): ...
    def finalize(self) -> None: ...
    _getParameters_1__T = typing.TypeVar('_getParameters_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def getParameters(self) -> typing.List[float]: ...
    @typing.overload
    def getParameters(self, field: org.hipparchus.Field[_getParameters_1__T]) -> typing.List[_getParameters_1__T]: ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _getParameters_F__T = typing.TypeVar('_getParameters_F__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def getParameters_F(self, field: org.hipparchus.Field[_getParameters_F__T]) -> typing.List[_getParameters_F__T]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_1__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_1__T]) -> _pathDelay_1__T: ...
    _pathDelay_FTdT__T = typing.TypeVar('_pathDelay_FTdT__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    def pathDelay_FTdT(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_FTdT__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_FTdT__T]) -> _pathDelay_FTdT__T: ...
    def pathDelay_STdd(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    def pythonDecRef(self) -> None: ...
    @typing.overload
    def pythonExtension(self) -> int: ...
    @typing.overload
    def pythonExtension(self, long: int) -> None: ...

class SingleLayerModelMappingFunction(IonosphericMappingFunction):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    _mappingFactor_1__T = typing.TypeVar('_mappingFactor_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def mappingFactor(self, double: float) -> float: ...
    @typing.overload
    def mappingFactor(self, t: _mappingFactor_1__T) -> _mappingFactor_1__T: ...

class SsrVtecIonosphericModel(IonosphericModel):
    def __init__(self, ssrIm201: org.orekit.gnss.metric.messages.ssr.subtype.SsrIm201): ...
    def getParametersDrivers(self) -> java.util.List[org.orekit.utils.ParameterDriver]: ...
    _pathDelay_1__T = typing.TypeVar('_pathDelay_1__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
    @typing.overload
    def pathDelay(self, spacecraftState: org.orekit.propagation.SpacecraftState, topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, doubleArray: typing.List[float]) -> float: ...
    @typing.overload
    def pathDelay(self, fieldSpacecraftState: org.orekit.propagation.FieldSpacecraftState[_pathDelay_1__T], topocentricFrame: org.orekit.frames.TopocentricFrame, double: float, tArray: typing.List[_pathDelay_1__T]) -> _pathDelay_1__T: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.ionosphere")``.

    EstimatedIonosphericModel: typing.Type[EstimatedIonosphericModel]
    GlobalIonosphereMapModel: typing.Type[GlobalIonosphereMapModel]
    IonosphericMappingFunction: typing.Type[IonosphericMappingFunction]
    IonosphericModel: typing.Type[IonosphericModel]
    KlobucharIonoCoefficientsLoader: typing.Type[KlobucharIonoCoefficientsLoader]
    KlobucharIonoModel: typing.Type[KlobucharIonoModel]
    NeQuickModel: typing.Type[NeQuickModel]
    PythonIonosphericMappingFunction: typing.Type[PythonIonosphericMappingFunction]
    PythonIonosphericModel: typing.Type[PythonIonosphericModel]
    SingleLayerModelMappingFunction: typing.Type[SingleLayerModelMappingFunction]
    SsrVtecIonosphericModel: typing.Type[SsrVtecIonosphericModel]
