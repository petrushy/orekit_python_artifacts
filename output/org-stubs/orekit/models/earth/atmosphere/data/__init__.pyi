import java.io
import java.lang
import java.util
import org.hipparchus.exception
import org.orekit.data
import org.orekit.errors
import org.orekit.models.earth.atmosphere
import org.orekit.time
import typing



class CssiSpaceWeatherData(org.orekit.data.AbstractSelfFeedingLoader, org.orekit.models.earth.atmosphere.DTM2000InputParameters, org.orekit.models.earth.atmosphere.NRLMSISE00InputParameters):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    def get24HoursKp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getAp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    def getAverageFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getDailyFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getInstantFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMeanFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getSupportedNames(self) -> str: ...
    def getThreeHourlyKP(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...

class CssiSpaceWeatherDataLoader(org.orekit.data.DataLoader):
    def __init__(self, timeScale: org.orekit.time.TimeScale): ...
    def getDataSet(self) -> java.util.SortedSet[org.orekit.time.TimeStamped]: ...
    def getLastDailyPredictedDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getLastObservedDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...
    class LineParameters(org.orekit.time.TimeStamped, java.io.Serializable):
        def __init__(self, absoluteDate: org.orekit.time.AbsoluteDate, doubleArray: typing.List[float], double2: float, doubleArray2: typing.List[float], double4: float, double5: float, int: int, double6: float, double7: float, double8: float, double9: float, double10: float): ...
        def getApAvg(self) -> float: ...
        def getCtr81Adj(self) -> float: ...
        def getCtr81Obs(self) -> float: ...
        def getDate(self) -> org.orekit.time.AbsoluteDate: ...
        def getF107Adj(self) -> float: ...
        def getF107Obs(self) -> float: ...
        def getFluxQualifier(self) -> int: ...
        def getKpSum(self) -> float: ...
        def getLst81Adj(self) -> float: ...
        def getLst81Obs(self) -> float: ...
        @typing.overload
        def getThreeHourlyAp(self, int: int) -> float: ...
        @typing.overload
        def getThreeHourlyAp(self) -> typing.List[float]: ...
        @typing.overload
        def getThreeHourlyKp(self, int: int) -> float: ...
        @typing.overload
        def getThreeHourlyKp(self) -> typing.List[float]: ...
    class LineReader:
        def __init__(self, string: str, bufferedReader: java.io.BufferedReader): ...
        def getLine(self) -> str: ...
        def getLineNumber(self) -> int: ...
        def readLine(self) -> str: ...
        def readLineOrThrow(self, localizable: org.hipparchus.exception.Localizable, objectArray: typing.List[typing.Any]) -> str: ...
        def unableToParseLine(self, throwable: java.lang.Throwable) -> org.orekit.errors.OrekitException: ...

class MarshallSolarActivityFutureEstimation(org.orekit.data.AbstractSelfFeedingLoader, org.orekit.data.DataLoader, org.orekit.models.earth.atmosphere.DTM2000InputParameters, org.orekit.models.earth.atmosphere.NRLMSISE00InputParameters):
    DEFAULT_SUPPORTED_NAMES: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, string: str, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel'): ...
    @typing.overload
    def __init__(self, string: str, strengthLevel: 'MarshallSolarActivityFutureEstimation.StrengthLevel', dataProvidersManager: org.orekit.data.DataProvidersManager, timeScale: org.orekit.time.TimeScale): ...
    def get24HoursKp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getAp(self, absoluteDate: org.orekit.time.AbsoluteDate) -> typing.List[float]: ...
    def getAverageFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getDailyFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getFileDate(self, absoluteDate: org.orekit.time.AbsoluteDate) -> org.orekit.time.DateComponents: ...
    def getInstantFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMeanFlux(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getStrengthLevel(self) -> 'MarshallSolarActivityFutureEstimation.StrengthLevel': ...
    def getSupportedNames(self) -> str: ...
    def getThreeHourlyKP(self, absoluteDate: org.orekit.time.AbsoluteDate) -> float: ...
    def loadData(self, inputStream: java.io.InputStream, string: str) -> None: ...
    def stillAcceptsData(self) -> bool: ...
    class StrengthLevel(java.lang.Enum['MarshallSolarActivityFutureEstimation.StrengthLevel']):
        STRONG: typing.ClassVar['MarshallSolarActivityFutureEstimation.StrengthLevel'] = ...
        AVERAGE: typing.ClassVar['MarshallSolarActivityFutureEstimation.StrengthLevel'] = ...
        WEAK: typing.ClassVar['MarshallSolarActivityFutureEstimation.StrengthLevel'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'MarshallSolarActivityFutureEstimation.StrengthLevel': ...
        @staticmethod
        def values() -> typing.List['MarshallSolarActivityFutureEstimation.StrengthLevel']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.models.earth.atmosphere.data")``.

    CssiSpaceWeatherData: typing.Type[CssiSpaceWeatherData]
    CssiSpaceWeatherDataLoader: typing.Type[CssiSpaceWeatherDataLoader]
    MarshallSolarActivityFutureEstimation: typing.Type[MarshallSolarActivityFutureEstimation]
