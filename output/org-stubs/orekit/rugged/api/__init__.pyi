import java.io
import java.lang
import java.util
import org.orekit.bodies
import org.orekit.frames
import org.orekit.propagation
import org.orekit.rugged.linesensor
import org.orekit.rugged.raster
import org.orekit.rugged.refraction
import org.orekit.rugged.utils
import org.orekit.time
import org.orekit.utils
import typing



class AlgorithmId(java.lang.Enum['AlgorithmId']):
    DUVENHAGE: typing.ClassVar['AlgorithmId'] = ...
    DUVENHAGE_FLAT_BODY: typing.ClassVar['AlgorithmId'] = ...
    BASIC_SLOW_EXHAUSTIVE_SCAN_FOR_TESTS_ONLY: typing.ClassVar['AlgorithmId'] = ...
    CONSTANT_ELEVATION_OVER_ELLIPSOID: typing.ClassVar['AlgorithmId'] = ...
    IGNORE_DEM_USE_ELLIPSOID: typing.ClassVar['AlgorithmId'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AlgorithmId': ...
    @staticmethod
    def values() -> typing.List['AlgorithmId']: ...

class BodyRotatingFrameId(java.lang.Enum['BodyRotatingFrameId']):
    ITRF: typing.ClassVar['BodyRotatingFrameId'] = ...
    ITRF_EQUINOX: typing.ClassVar['BodyRotatingFrameId'] = ...
    GTOD: typing.ClassVar['BodyRotatingFrameId'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'BodyRotatingFrameId': ...
    @staticmethod
    def values() -> typing.List['BodyRotatingFrameId']: ...

class EllipsoidId(java.lang.Enum['EllipsoidId']):
    GRS80: typing.ClassVar['EllipsoidId'] = ...
    WGS84: typing.ClassVar['EllipsoidId'] = ...
    IERS96: typing.ClassVar['EllipsoidId'] = ...
    IERS2003: typing.ClassVar['EllipsoidId'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'EllipsoidId': ...
    @staticmethod
    def values() -> typing.List['EllipsoidId']: ...

class InertialFrameId(java.lang.Enum['InertialFrameId']):
    GCRF: typing.ClassVar['InertialFrameId'] = ...
    EME2000: typing.ClassVar['InertialFrameId'] = ...
    MOD: typing.ClassVar['InertialFrameId'] = ...
    TOD: typing.ClassVar['InertialFrameId'] = ...
    VEIS1950: typing.ClassVar['InertialFrameId'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'InertialFrameId': ...
    @staticmethod
    def values() -> typing.List['InertialFrameId']: ...

class RuggedBuilder:
    def __init__(self): ...
    def addLineSensor(self, lineSensor: org.orekit.rugged.linesensor.LineSensor) -> 'RuggedBuilder': ...
    def build(self) -> 'Rugged': ...
    def clearLineSensors(self) -> 'RuggedBuilder': ...
    def getAFilter(self) -> org.orekit.utils.AngularDerivativesFilter: ...
    def getAInterpolationNumber(self) -> int: ...
    def getAberrationOfLightCorrection(self) -> bool: ...
    def getAlgorithm(self) -> AlgorithmId: ...
    def getConstantElevation(self) -> float: ...
    def getEllipsoid(self) -> org.orekit.rugged.utils.ExtendedEllipsoid: ...
    def getInertialFrame(self) -> org.orekit.frames.Frame: ...
    def getLightTimeCorrection(self) -> bool: ...
    def getLineSensors(self) -> java.util.List[org.orekit.rugged.linesensor.LineSensor]: ...
    def getMaxCachedTiles(self) -> int: ...
    def getMaxDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getMinDate(self) -> org.orekit.time.AbsoluteDate: ...
    def getName(self) -> str: ...
    def getOvershootTolerance(self) -> float: ...
    def getPVFilter(self) -> org.orekit.utils.CartesianDerivativesFilter: ...
    def getPVInterpolationNumber(self) -> int: ...
    def getPositionsVelocities(self) -> java.util.List[org.orekit.utils.TimeStampedPVCoordinates]: ...
    def getQuaternions(self) -> java.util.List[org.orekit.utils.TimeStampedAngularCoordinates]: ...
    def getRefractionCorrection(self) -> org.orekit.rugged.refraction.AtmosphericRefraction: ...
    def getTStep(self) -> float: ...
    def getTileUpdater(self) -> org.orekit.rugged.raster.TileUpdater: ...
    def setAberrationOfLightCorrection(self, boolean: bool) -> 'RuggedBuilder': ...
    def setAlgorithm(self, algorithmId: AlgorithmId) -> 'RuggedBuilder': ...
    def setConstantElevation(self, double: float) -> 'RuggedBuilder': ...
    def setDigitalElevationModel(self, tileUpdater: org.orekit.rugged.raster.TileUpdater, int: int) -> 'RuggedBuilder': ...
    @typing.overload
    def setEllipsoid(self, oneAxisEllipsoid: org.orekit.bodies.OneAxisEllipsoid) -> 'RuggedBuilder': ...
    @typing.overload
    def setEllipsoid(self, ellipsoidId: EllipsoidId, bodyRotatingFrameId: BodyRotatingFrameId) -> 'RuggedBuilder': ...
    def setLightTimeCorrection(self, boolean: bool) -> 'RuggedBuilder': ...
    def setName(self, string: str) -> None: ...
    def setRefractionCorrection(self, atmosphericRefraction: org.orekit.rugged.refraction.AtmosphericRefraction) -> 'RuggedBuilder': ...
    def setTimeSpan(self, absoluteDate: org.orekit.time.AbsoluteDate, absoluteDate2: org.orekit.time.AbsoluteDate, double: float, double2: float) -> 'RuggedBuilder': ...
    @typing.overload
    def setTrajectory(self, double: float, int: int, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter, propagator: org.orekit.propagation.Propagator) -> 'RuggedBuilder': ...
    @typing.overload
    def setTrajectory(self, frame: org.orekit.frames.Frame, list: java.util.List[org.orekit.utils.TimeStampedPVCoordinates], int: int, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, list2: java.util.List[org.orekit.utils.TimeStampedAngularCoordinates], int2: int, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter) -> 'RuggedBuilder': ...
    @typing.overload
    def setTrajectory(self, inertialFrameId: InertialFrameId, list: java.util.List[org.orekit.utils.TimeStampedPVCoordinates], int: int, cartesianDerivativesFilter: org.orekit.utils.CartesianDerivativesFilter, list2: java.util.List[org.orekit.utils.TimeStampedAngularCoordinates], int2: int, angularDerivativesFilter: org.orekit.utils.AngularDerivativesFilter) -> 'RuggedBuilder': ...
    def setTrajectoryAndTimeSpan(self, inputStream: java.io.InputStream) -> 'RuggedBuilder': ...
    def storeInterpolator(self, outputStream: java.io.OutputStream) -> None: ...

class Rugged: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.orekit.rugged.api")``.

    AlgorithmId: typing.Type[AlgorithmId]
    BodyRotatingFrameId: typing.Type[BodyRotatingFrameId]
    EllipsoidId: typing.Type[EllipsoidId]
    InertialFrameId: typing.Type[InertialFrameId]
    Rugged: typing.Type[Rugged]
    RuggedBuilder: typing.Type[RuggedBuilder]
