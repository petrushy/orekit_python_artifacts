import org.hipparchus
import org.hipparchus.analysis
import org.hipparchus.util
import typing



_FieldGaussIntegrator__T = typing.TypeVar('_FieldGaussIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGaussIntegrator(typing.Generic[_FieldGaussIntegrator__T]):
    @typing.overload
    def __init__(self, tArray: typing.List[_FieldGaussIntegrator__T], tArray2: typing.List[_FieldGaussIntegrator__T]): ...
    @typing.overload
    def __init__(self, pair: org.hipparchus.util.Pair[typing.List[_FieldGaussIntegrator__T], typing.List[_FieldGaussIntegrator__T]]): ...
    def getNumberOfPoints(self) -> int: ...
    def getPoint(self, int: int) -> _FieldGaussIntegrator__T: ...
    def getWeight(self, int: int) -> _FieldGaussIntegrator__T: ...
    def integrate(self, calculusFieldUnivariateFunction: org.hipparchus.analysis.CalculusFieldUnivariateFunction[_FieldGaussIntegrator__T]) -> _FieldGaussIntegrator__T: ...

_FieldGaussIntegratorFactory__T = typing.TypeVar('_FieldGaussIntegratorFactory__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldGaussIntegratorFactory(typing.Generic[_FieldGaussIntegratorFactory__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldGaussIntegratorFactory__T]): ...
    def hermite(self, int: int) -> 'SymmetricFieldGaussIntegrator'[_FieldGaussIntegratorFactory__T]: ...
    def laguerre(self, int: int) -> FieldGaussIntegrator[_FieldGaussIntegratorFactory__T]: ...
    @typing.overload
    def legendre(self, int: int) -> FieldGaussIntegrator[_FieldGaussIntegratorFactory__T]: ...
    @typing.overload
    def legendre(self, int: int, t: _FieldGaussIntegratorFactory__T, t2: _FieldGaussIntegratorFactory__T) -> FieldGaussIntegrator[_FieldGaussIntegratorFactory__T]: ...

_FieldRuleFactory__T = typing.TypeVar('_FieldRuleFactory__T', bound=org.hipparchus.FieldElement)  # <T>
class FieldRuleFactory(typing.Generic[_FieldRuleFactory__T]):
    def getRule(self, int: int) -> org.hipparchus.util.Pair[typing.List[_FieldRuleFactory__T], typing.List[_FieldRuleFactory__T]]: ...

class GaussIntegrator:
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    @typing.overload
    def __init__(self, pair: org.hipparchus.util.Pair[typing.List[float], typing.List[float]]): ...
    def getNumberOfPoints(self) -> int: ...
    def getPoint(self, int: int) -> float: ...
    def getWeight(self, int: int) -> float: ...
    def integrate(self, univariateFunction: org.hipparchus.analysis.UnivariateFunction) -> float: ...

class GaussIntegratorFactory:
    DEFAULT_DECIMAL_DIGITS: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def hermite(self, int: int) -> 'SymmetricGaussIntegrator': ...
    def laguerre(self, int: int) -> GaussIntegrator: ...
    @typing.overload
    def legendre(self, int: int) -> GaussIntegrator: ...
    @typing.overload
    def legendre(self, int: int, double: float, double2: float) -> GaussIntegrator: ...
    @typing.overload
    def legendreHighPrecision(self, int: int) -> GaussIntegrator: ...
    @typing.overload
    def legendreHighPrecision(self, int: int, double: float, double2: float) -> GaussIntegrator: ...

class RuleFactory:
    def getRule(self, int: int) -> org.hipparchus.util.Pair[typing.List[float], typing.List[float]]: ...

class AbstractRuleFactory(RuleFactory):
    def __init__(self): ...
    def getRule(self, int: int) -> org.hipparchus.util.Pair[typing.List[float], typing.List[float]]: ...

_FieldAbstractRuleFactory__T = typing.TypeVar('_FieldAbstractRuleFactory__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldAbstractRuleFactory(FieldRuleFactory[_FieldAbstractRuleFactory__T], typing.Generic[_FieldAbstractRuleFactory__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldAbstractRuleFactory__T]): ...
    def getField(self) -> org.hipparchus.Field[_FieldAbstractRuleFactory__T]: ...
    def getRule(self, int: int) -> org.hipparchus.util.Pair[typing.List[_FieldAbstractRuleFactory__T], typing.List[_FieldAbstractRuleFactory__T]]: ...

_SymmetricFieldGaussIntegrator__T = typing.TypeVar('_SymmetricFieldGaussIntegrator__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class SymmetricFieldGaussIntegrator(FieldGaussIntegrator[_SymmetricFieldGaussIntegrator__T], typing.Generic[_SymmetricFieldGaussIntegrator__T]):
    @typing.overload
    def __init__(self, tArray: typing.List[_SymmetricFieldGaussIntegrator__T], tArray2: typing.List[_SymmetricFieldGaussIntegrator__T]): ...
    @typing.overload
    def __init__(self, pair: org.hipparchus.util.Pair[typing.List[_SymmetricFieldGaussIntegrator__T], typing.List[_SymmetricFieldGaussIntegrator__T]]): ...
    def integrate(self, calculusFieldUnivariateFunction: org.hipparchus.analysis.CalculusFieldUnivariateFunction[_SymmetricFieldGaussIntegrator__T]) -> _SymmetricFieldGaussIntegrator__T: ...

class SymmetricGaussIntegrator(GaussIntegrator):
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    @typing.overload
    def __init__(self, pair: org.hipparchus.util.Pair[typing.List[float], typing.List[float]]): ...
    def integrate(self, univariateFunction: org.hipparchus.analysis.UnivariateFunction) -> float: ...

_ConvertingRuleFactory__T = typing.TypeVar('_ConvertingRuleFactory__T', bound=org.hipparchus.FieldElement)  # <T>
class ConvertingRuleFactory(AbstractRuleFactory, typing.Generic[_ConvertingRuleFactory__T]):
    def __init__(self, fieldRuleFactory: FieldRuleFactory[_ConvertingRuleFactory__T]): ...

_FieldHermiteRuleFactory__T = typing.TypeVar('_FieldHermiteRuleFactory__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldHermiteRuleFactory(FieldAbstractRuleFactory[_FieldHermiteRuleFactory__T], typing.Generic[_FieldHermiteRuleFactory__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldHermiteRuleFactory__T]): ...

_FieldLaguerreRuleFactory__T = typing.TypeVar('_FieldLaguerreRuleFactory__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLaguerreRuleFactory(FieldAbstractRuleFactory[_FieldLaguerreRuleFactory__T], typing.Generic[_FieldLaguerreRuleFactory__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldLaguerreRuleFactory__T]): ...
    def computeRule(self, int: int) -> org.hipparchus.util.Pair[typing.List[_FieldLaguerreRuleFactory__T], typing.List[_FieldLaguerreRuleFactory__T]]: ...

_FieldLegendreRuleFactory__T = typing.TypeVar('_FieldLegendreRuleFactory__T', bound=org.hipparchus.CalculusFieldElement)  # <T>
class FieldLegendreRuleFactory(FieldAbstractRuleFactory[_FieldLegendreRuleFactory__T], typing.Generic[_FieldLegendreRuleFactory__T]):
    def __init__(self, field: org.hipparchus.Field[_FieldLegendreRuleFactory__T]): ...
    def computeRule(self, int: int) -> org.hipparchus.util.Pair[typing.List[_FieldLegendreRuleFactory__T], typing.List[_FieldLegendreRuleFactory__T]]: ...

class HermiteRuleFactory(AbstractRuleFactory):
    def __init__(self): ...

class LaguerreRuleFactory(AbstractRuleFactory):
    def __init__(self): ...

class LegendreRuleFactory(AbstractRuleFactory):
    def __init__(self): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.analysis.integration.gauss")``.

    AbstractRuleFactory: typing.Type[AbstractRuleFactory]
    ConvertingRuleFactory: typing.Type[ConvertingRuleFactory]
    FieldAbstractRuleFactory: typing.Type[FieldAbstractRuleFactory]
    FieldGaussIntegrator: typing.Type[FieldGaussIntegrator]
    FieldGaussIntegratorFactory: typing.Type[FieldGaussIntegratorFactory]
    FieldHermiteRuleFactory: typing.Type[FieldHermiteRuleFactory]
    FieldLaguerreRuleFactory: typing.Type[FieldLaguerreRuleFactory]
    FieldLegendreRuleFactory: typing.Type[FieldLegendreRuleFactory]
    FieldRuleFactory: typing.Type[FieldRuleFactory]
    GaussIntegrator: typing.Type[GaussIntegrator]
    GaussIntegratorFactory: typing.Type[GaussIntegratorFactory]
    HermiteRuleFactory: typing.Type[HermiteRuleFactory]
    LaguerreRuleFactory: typing.Type[LaguerreRuleFactory]
    LegendreRuleFactory: typing.Type[LegendreRuleFactory]
    RuleFactory: typing.Type[RuleFactory]
    SymmetricFieldGaussIntegrator: typing.Type[SymmetricFieldGaussIntegrator]
    SymmetricGaussIntegrator: typing.Type[SymmetricGaussIntegrator]
