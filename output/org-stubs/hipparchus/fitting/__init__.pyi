import java.io
import java.util
import org.hipparchus.analysis
import typing



class AbstractCurveFitter:
    def __init__(self): ...
    def fit(self, collection: typing.Union[java.util.Collection['WeightedObservedPoint'], typing.Sequence['WeightedObservedPoint'], typing.Set['WeightedObservedPoint']]) -> typing.List[float]: ...

class WeightedObservedPoint(java.io.Serializable):
    def __init__(self, double: float, double2: float, double3: float): ...
    def getWeight(self) -> float: ...
    def getX(self) -> float: ...
    def getY(self) -> float: ...

class WeightedObservedPoints(java.io.Serializable):
    def __init__(self): ...
    @typing.overload
    def add(self, double: float, double2: float) -> None: ...
    @typing.overload
    def add(self, double: float, double2: float, double3: float) -> None: ...
    @typing.overload
    def add(self, weightedObservedPoint: WeightedObservedPoint) -> None: ...
    def clear(self) -> None: ...
    def toList(self) -> java.util.List[WeightedObservedPoint]: ...

class GaussianCurveFitter(AbstractCurveFitter):
    @staticmethod
    def create() -> 'GaussianCurveFitter': ...
    def withMaxIterations(self, int: int) -> 'GaussianCurveFitter': ...
    def withStartPoint(self, doubleArray: typing.List[float]) -> 'GaussianCurveFitter': ...
    class ParameterGuesser:
        def __init__(self, collection: typing.Union[java.util.Collection[WeightedObservedPoint], typing.Sequence[WeightedObservedPoint], typing.Set[WeightedObservedPoint]]): ...
        def guess(self) -> typing.List[float]: ...

class HarmonicCurveFitter(AbstractCurveFitter):
    @staticmethod
    def create() -> 'HarmonicCurveFitter': ...
    def withMaxIterations(self, int: int) -> 'HarmonicCurveFitter': ...
    def withStartPoint(self, doubleArray: typing.List[float]) -> 'HarmonicCurveFitter': ...
    class ParameterGuesser:
        def __init__(self, collection: typing.Union[java.util.Collection[WeightedObservedPoint], typing.Sequence[WeightedObservedPoint], typing.Set[WeightedObservedPoint]]): ...
        def guess(self) -> typing.List[float]: ...

class PolynomialCurveFitter(AbstractCurveFitter):
    @staticmethod
    def create(int: int) -> 'PolynomialCurveFitter': ...
    def withMaxIterations(self, int: int) -> 'PolynomialCurveFitter': ...
    def withStartPoint(self, doubleArray: typing.List[float]) -> 'PolynomialCurveFitter': ...

class SimpleCurveFitter(AbstractCurveFitter):
    @staticmethod
    def create(parametricUnivariateFunction: org.hipparchus.analysis.ParametricUnivariateFunction, doubleArray: typing.List[float]) -> 'SimpleCurveFitter': ...
    def withMaxIterations(self, int: int) -> 'SimpleCurveFitter': ...
    def withStartPoint(self, doubleArray: typing.List[float]) -> 'SimpleCurveFitter': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.fitting")``.

    AbstractCurveFitter: typing.Type[AbstractCurveFitter]
    GaussianCurveFitter: typing.Type[GaussianCurveFitter]
    HarmonicCurveFitter: typing.Type[HarmonicCurveFitter]
    PolynomialCurveFitter: typing.Type[PolynomialCurveFitter]
    SimpleCurveFitter: typing.Type[SimpleCurveFitter]
    WeightedObservedPoint: typing.Type[WeightedObservedPoint]
    WeightedObservedPoints: typing.Type[WeightedObservedPoints]
