import org.hipparchus.analysis
import org.hipparchus.special.elliptic
import typing



class BesselJ(org.hipparchus.analysis.UnivariateFunction):
    def __init__(self, double: float): ...
    @staticmethod
    def rjBesl(double: float, double2: float, int: int) -> 'BesselJ.BesselJResult': ...
    @typing.overload
    def value(self, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def value(double: float, double2: float) -> float: ...
    class BesselJResult:
        def __init__(self, doubleArray: typing.List[float], int: int): ...
        def getVals(self) -> typing.List[float]: ...
        def getnVals(self) -> int: ...

class Beta:
    @staticmethod
    def logBeta(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedBeta(double: float, double2: float, double3: float) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedBeta(double: float, double2: float, double3: float, double4: float) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedBeta(double: float, double2: float, double3: float, double4: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedBeta(double: float, double2: float, double3: float, int: int) -> float: ...

class Erf:
    @typing.overload
    @staticmethod
    def erf(double: float) -> float: ...
    @typing.overload
    @staticmethod
    def erf(double: float, double2: float) -> float: ...
    @staticmethod
    def erfInv(double: float) -> float: ...
    @staticmethod
    def erfc(double: float) -> float: ...
    @staticmethod
    def erfcInv(double: float) -> float: ...

class Gamma:
    GAMMA: typing.ClassVar[float] = ...
    LANCZOS_G: typing.ClassVar[float] = ...
    @staticmethod
    def digamma(double: float) -> float: ...
    @staticmethod
    def gamma(double: float) -> float: ...
    @staticmethod
    def invGamma1pm1(double: float) -> float: ...
    @staticmethod
    def lanczos(double: float) -> float: ...
    @staticmethod
    def logGamma(double: float) -> float: ...
    @staticmethod
    def logGamma1p(double: float) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedGammaP(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedGammaP(double: float, double2: float, double3: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedGammaQ(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def regularizedGammaQ(double: float, double2: float, double3: float, int: int) -> float: ...
    @staticmethod
    def trigamma(double: float) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.special")``.

    BesselJ: typing.Type[BesselJ]
    Beta: typing.Type[Beta]
    Erf: typing.Type[Erf]
    Gamma: typing.Type[Gamma]
    elliptic: org.hipparchus.special.elliptic.__module_protocol__
