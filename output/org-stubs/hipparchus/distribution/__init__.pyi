import java.io
import java.util
import org.hipparchus.distribution.continuous
import org.hipparchus.distribution.discrete
import org.hipparchus.distribution.multivariate
import org.hipparchus.util
import typing



_EnumeratedDistribution__T = typing.TypeVar('_EnumeratedDistribution__T')  # <T>
class EnumeratedDistribution(java.io.Serializable, typing.Generic[_EnumeratedDistribution__T]):
    def __init__(self, list: java.util.List[org.hipparchus.util.Pair[_EnumeratedDistribution__T, float]]): ...
    @staticmethod
    def checkAndNormalize(doubleArray: typing.List[float]) -> typing.List[float]: ...
    def getPmf(self) -> java.util.List[org.hipparchus.util.Pair[_EnumeratedDistribution__T, float]]: ...
    def probability(self, t: _EnumeratedDistribution__T) -> float: ...

class IntegerDistribution:
    def cumulativeProbability(self, int: int) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> int: ...
    def getSupportUpperBound(self) -> int: ...
    def inverseCumulativeProbability(self, double: float) -> int: ...
    def isSupportConnected(self) -> bool: ...
    def logProbability(self, int: int) -> float: ...
    @typing.overload
    def probability(self, int: int) -> float: ...
    @typing.overload
    def probability(self, int: int, int2: int) -> float: ...

class MultivariateRealDistribution:
    def density(self, doubleArray: typing.List[float]) -> float: ...
    def getDimension(self) -> int: ...
    def reseedRandomGenerator(self, long: int) -> None: ...
    @typing.overload
    def sample(self) -> typing.List[float]: ...
    @typing.overload
    def sample(self, int: int) -> typing.List[typing.List[float]]: ...

class RealDistribution:
    def cumulativeProbability(self, double: float) -> float: ...
    def density(self, double: float) -> float: ...
    def getNumericalMean(self) -> float: ...
    def getNumericalVariance(self) -> float: ...
    def getSupportLowerBound(self) -> float: ...
    def getSupportUpperBound(self) -> float: ...
    def inverseCumulativeProbability(self, double: float) -> float: ...
    def isSupportConnected(self) -> bool: ...
    def logDensity(self, double: float) -> float: ...
    def probability(self, double: float, double2: float) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.hipparchus.distribution")``.

    EnumeratedDistribution: typing.Type[EnumeratedDistribution]
    IntegerDistribution: typing.Type[IntegerDistribution]
    MultivariateRealDistribution: typing.Type[MultivariateRealDistribution]
    RealDistribution: typing.Type[RealDistribution]
    continuous: org.hipparchus.distribution.continuous.__module_protocol__
    discrete: org.hipparchus.distribution.discrete.__module_protocol__
    multivariate: org.hipparchus.distribution.multivariate.__module_protocol__
